var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn2, res) => function __init() {
  return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.3.1";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a2) {
          return isArrayImpl(a2);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e2) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config2) {
          {
            if (hasOwnProperty2.call(config2, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          {
            if (hasOwnProperty2.call(config2, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config2) {
          {
            if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement3(type, config2, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref = config2.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config2);
              }
            }
            if (hasValidKey(config2)) {
              {
                checkKeyStringCoercion(config2.key);
              }
              key = "" + config2.key;
            }
            self2 = config2.__self === void 0 ? null : config2.__self;
            source = config2.__source === void 0 ? null : config2.__source;
            for (propName in config2) {
              if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config2[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config2, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref = config2.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config2)) {
              {
                checkKeyStringCoercion(config2.key);
              }
              key = "" + config2.key;
            }
            var defaultProps2;
            if (element.type && element.type.defaultProps) {
              defaultProps2 = element.type.defaultProps;
            }
            for (propName in config2) {
              if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config2[propName] === void 0 && defaultProps2 !== void 0) {
                  props[propName] = defaultProps2[propName];
                } else {
                  props[propName] = config2[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape2(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text2) {
          return text2.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape2("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray2(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                return c2;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray2(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray3(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy2(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps2;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps2;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps2 = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render2) {
          {
            if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render2 !== "function") {
              error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
            } else {
              if (render2.length !== 0 && render2.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render2 != null) {
              if (render2.defaultProps != null || render2.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render2.name && !render2.displayName) {
                  render2.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState8(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef3(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect9(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback2(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn2, construct) {
          if (!fn2 || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn2);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn2, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn2.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn2();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                c2--;
              }
              for (; s >= 1 && c2 >= 0; s--, c2--) {
                if (sampleLines[s] !== controlLines[c2]) {
                  if (s !== 1 || c2 !== 1) {
                    do {
                      s--;
                      c2--;
                      if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn2.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn2.displayName);
                        }
                        {
                          if (typeof fn2 === "function") {
                            componentFrameCache.set(fn2, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn2 ? fn2.displayName || fn2.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn2 === "function") {
              componentFrameCache.set(fn2, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn2, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn2, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype3 = Component2.prototype;
          return !!(prototype3 && prototype3.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray2(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray2(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement3.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module && module[requireString];
              enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray3,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.act = act;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy2;
        exports.memo = memo;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback2;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect9;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef3;
        exports.useState = useState8;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js
var require_react_dom_server_legacy_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React4 = require_react();
        var ReactVersion = "18.3.1";
        var ReactSharedInternals = React4.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function scheduleWork(callback) {
          callback();
        }
        function beginWriting(destination) {
        }
        function writeChunk(destination, chunk) {
          writeChunkAndReturn(destination, chunk);
        }
        function writeChunkAndReturn(destination, chunk) {
          return destination.push(chunk);
        }
        function completeWriting(destination) {
        }
        function close(destination) {
          destination.push(null);
        }
        function stringToChunk(content) {
          return content;
        }
        function stringToPrecomputedChunk(content) {
          return content;
        }
        function closeWithError(destination, error2) {
          destination.destroy(error2);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e2) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            // $FlowIssue symbol is perfectly valid here
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize2 = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes2 = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes2.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved2 = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved2 && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved2) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize2 = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize2(name.replace(msPattern, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape2;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape2 = "&quot;";
                break;
              case 38:
                escape2 = "&amp;";
                break;
              case 39:
                escape2 = "&#x27;";
                break;
              case 60:
                escape2 = "&lt;";
                break;
              case 62:
                escape2 = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.substring(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape2;
          }
          return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text2) {
          if (typeof text2 === "boolean" || typeof text2 === "number") {
            return "" + text2;
          }
          return escapeHtml(text2);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern$1 = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a2) {
          return isArrayImpl(a2);
        }
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("<\/script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
        function escapeBootstrapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var bootstrapChunks = [];
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i])), endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
            }
          }
          return {
            bootstrapChunks,
            startInlineScript: inlineScriptWithNonce,
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: idPrefix + "B:",
            idPrefix,
            nextSuspenseID: 0,
            sentCompleteSegmentFunction: false,
            sentCompleteBoundaryFunction: false,
            sentClientRenderFunction: false
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_MODE = 1;
        var SVG_MODE = 2;
        var MATHML_MODE = 3;
        var HTML_TABLE_MODE = 4;
        var HTML_TABLE_BODY_MODE = 5;
        var HTML_TABLE_ROW_MODE = 6;
        var HTML_COLGROUP_MODE = 7;
        function createFormatContext(insertionMode, selectedValue) {
          return {
            insertionMode,
            selectedValue
          };
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
            case "svg":
              return createFormatContext(SVG_MODE, null);
            case "math":
              return createFormatContext(MATHML_MODE, null);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null);
            // Table parents are special in that their children can only be created at all if they're
            // wrapped in a table parent. So we need to encode that we're entering this mode.
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          return parentContext;
        }
        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
        function assignSuspenseBoundaryID(responseState) {
          var generatedID = responseState.nextSuspenseID++;
          return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
        }
        function makeId(responseState, treeId, localId) {
          var idPrefix = responseState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text2) {
          return escapeTextForBrowser(text2);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance(target, text2, responseState, textEmbedded) {
          if (text2 === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text2)));
          return true;
        }
        function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyle(target, responseState, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty2.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle$1(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !hasOwnProperty2.call(isUnitlessNumber, styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushAttribute(target, responseState, name, value) {
          switch (name) {
            case "style": {
              pushStyle(target, responseState, value);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            // These shouldn't be set as attributes on generic HTML elements.
            case "innerHTML":
            // Must use dangerouslySetInnerHTML instead.
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
              return;
          }
          if (
            // shouldIgnoreAttribute
            // We have already filtered out null/undefined and reserved words.
            name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
          ) {
            return;
          }
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return;
              case "boolean": {
                if (!propertyInfo.acceptsBooleans) {
                  return;
                }
              }
            }
            var attributeName = propertyInfo.attributeName;
            var attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                if (value) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                }
                return;
              case OVERLOADED_BOOLEAN:
                if (value === true) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                } else if (value === false) ;
                else {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                return;
              case NUMERIC:
                if (!isNaN(value)) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              case POSITIVE_NUMERIC:
                if (!isNaN(value) && value >= 1) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              default:
                if (propertyInfo.sanitizeURL) {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  value = "" + value;
                  sanitizeURL(value);
                }
                target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return;
              case "boolean": {
                var prefix2 = name.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-") {
                  return;
                }
              }
            }
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray2(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target, props, responseState) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React4.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, responseState, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                // eslint-disable-next-line-no-fallthrough
                case "value":
                  value = propValue;
                // We intentionally fallthrough to also set the attribute on the node.
                // eslint-disable-next-line-no-fallthrough
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray2(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function pushInput(target, props, responseState) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          target.push(startChunkForTag("input"));
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                // eslint-disable-next-line-no-fallthrough
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (checked !== null) {
            pushAttribute(target, responseState, "checked", checked);
          } else if (defaultChecked !== null) {
            pushAttribute(target, responseState, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, responseState, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, responseState, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartTextArea(target, props, responseState) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                // eslint-disable-next-line-no-fallthrough
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray2(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushSelfClosing(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                // eslint-disable-next-line-no-fallthrough
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props, responseState) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                // eslint-disable-next-line-no-fallthrough
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushStartTitle(target, props, responseState) {
          target.push(startChunkForTag("title"));
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
                // eslint-disable-next-line-no-fallthrough
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
            if (Array.isArray(children) && children.length > 1) {
              error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && child.$$typeof != null) {
              error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && typeof child !== "string" && typeof child !== "number") {
              error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            }
          }
          return children;
        }
        function pushStartGenericElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyle(target, responseState, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target, type, props, responseState, formatContext) {
          {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            // Special tags
            case "select":
              return pushStartSelect(target, props, responseState);
            case "option":
              return pushStartOption(target, props, responseState, formatContext);
            case "textarea":
              return pushStartTextArea(target, props, responseState);
            case "input":
              return pushInput(target, props, responseState);
            case "menuitem":
              return pushStartMenuItem(target, props, responseState);
            case "title":
              return pushStartTitle(target, props, responseState);
            // Newline eating tags
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type, responseState);
            }
            // Omitted close tags
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type, responseState);
            }
            // These are reserved SVG and MathML elements, that are never custom elements.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              return pushStartGenericElement(target, props, type, responseState);
            }
            case "html": {
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                target.push(DOCTYPE);
              }
              return pushStartGenericElement(target, props, type, responseState);
            }
            default: {
              if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                return pushStartGenericElement(target, props, type, responseState);
              } else {
                return pushStartCustomElement(target, props, type, responseState);
              }
            }
          }
        }
        var endTag1 = stringToPrecomputedChunk("</");
        var endTag2 = stringToPrecomputedChunk(">");
        function pushEndInstance(target, type, props) {
          switch (type) {
            // Omitted close tags
            // TODO: Instead of repeating this switch we could try to pass a flag from above.
            // That would require returning a tuple. Which might be ok if it gets inlined.
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              break;
            }
            default: {
              target.push(endTag1, stringToChunk(type), endTag2);
            }
          }
        }
        function writeCompletedRoot(destination, responseState) {
          var bootstrapChunks = responseState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            return writeChunkAndReturn(destination, bootstrapChunks[i]);
          }
          return true;
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, responseState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, responseState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, responseState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, id);
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMesssage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, responseState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            // TODO: For the rest of these, there will be extra wrapper nodes that never
            // get deleted from the document. We need to delete the table too as part
            // of the injected scripts. They are invisible though so it's not too terrible
            // and it's kind of an edge case to suspend in a table. Totally supported though.
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
        var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
        var clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteSegmentFunction) {
            responseState.sentCompleteSegmentFunction = true;
            writeChunk(destination, completeSegmentScript1Full);
          } else {
            writeChunk(destination, completeSegmentScript1Partial);
          }
          writeChunk(destination, responseState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          writeChunk(destination, completeSegmentScript2);
          writeChunk(destination, responseState.placeholderPrefix);
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, completeSegmentScript3);
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteBoundaryFunction) {
            responseState.sentCompleteBoundaryFunction = true;
            writeChunk(destination, completeBoundaryScript1Full);
          } else {
            writeChunk(destination, completeBoundaryScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          var formattedContentID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, boundaryID);
          writeChunk(destination, completeBoundaryScript2);
          writeChunk(destination, responseState.segmentPrefix);
          writeChunk(destination, formattedContentID);
          return writeChunkAndReturn(destination, completeBoundaryScript3);
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderScript2 = stringToPrecomputedChunk(")<\/script>");
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentClientRenderFunction) {
            responseState.sentClientRenderFunction = true;
            writeChunk(destination, clientRenderScript1Full);
          } else {
            writeChunk(destination, clientRenderScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, boundaryID);
          writeChunk(destination, clientRenderScript1A);
          if (errorDigest || errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
          }
          if (errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
          }
          if (errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
          }
          return writeChunkAndReturn(destination, clientRenderScript2);
        }
        var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              // santizing breaking out of strings and script tags
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        function createResponseState$1(generateStaticMarkup, identifierPrefix) {
          var responseState = createResponseState(identifierPrefix, void 0);
          return {
            // Keep this in sync with ReactDOMServerFormatConfig
            bootstrapChunks: responseState.bootstrapChunks,
            startInlineScript: responseState.startInlineScript,
            placeholderPrefix: responseState.placeholderPrefix,
            segmentPrefix: responseState.segmentPrefix,
            boundaryPrefix: responseState.boundaryPrefix,
            idPrefix: responseState.idPrefix,
            nextSuspenseID: responseState.nextSuspenseID,
            sentCompleteSegmentFunction: responseState.sentCompleteSegmentFunction,
            sentCompleteBoundaryFunction: responseState.sentCompleteBoundaryFunction,
            sentClientRenderFunction: responseState.sentClientRenderFunction,
            // This is an extra field for the legacy renderer
            generateStaticMarkup
          };
        }
        function createRootFormatContext() {
          return {
            insertionMode: HTML_MODE,
            // We skip the root mode because we don't want to emit the DOCTYPE in legacy mode.
            selectedValue: null
          };
        }
        function pushTextInstance$1(target, text2, responseState, textEmbedded) {
          if (responseState.generateStaticMarkup) {
            target.push(stringToChunk(escapeTextForBrowser(text2)));
            return false;
          } else {
            return pushTextInstance(target, text2, responseState, textEmbedded);
          }
        }
        function pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded) {
          if (responseState.generateStaticMarkup) {
            return;
          } else {
            return pushSegmentFinale(target, responseState, lastPushedText, textEmbedded);
          }
        }
        function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeStartCompletedSuspenseBoundary(destination);
        }
        function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack);
        }
        function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeEndCompletedSuspenseBoundary(destination);
        }
        function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeEndClientRenderedSuspenseBoundary(destination);
        }
        var assign = Object.assign;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn2, construct) {
          if (!fn2 || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn2);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn2, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn2.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn2();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                c2--;
              }
              for (; s >= 1 && c2 >= 0; s--, c2--) {
                if (sampleLines[s] !== controlLines[c2]) {
                  if (s !== 1 || c2 !== 1) {
                    do {
                      s--;
                      c2--;
                      if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn2.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn2.displayName);
                        }
                        {
                          if (typeof fn2 === "function") {
                            componentFrameCache.set(fn2, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn2 ? fn2.displayName || fn2.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn2 === "function") {
              componentFrameCache.set(fn2, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn2, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn2, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype3 = Component.prototype;
          return !!(prototype3 && prototype3.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue2 = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue2 = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next) ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue2;
            context._currentValue2 = nextValue;
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var _value = prevSnapshot.parentValue;
            if (_value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue;
            } else {
              prevSnapshot.context._currentValue2 = _value;
            }
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext(context) {
          var value = context._currentValue2;
          return value;
        }
        function get(key) {
          return key._reactInternals;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          enqueueSetState: function(inst, payload, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
              }
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray2(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn(
                    // keep this warning in sync with ReactStrictModeWarning.js
                    "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                    componentName
                  );
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log2 = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log2(asUint) / LN2 | 0) | 0;
        }
        function is(x, y2) {
          return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(task, componentIdentity) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
        }
        function finishHooks(Component, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext$1(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState8(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(
            basicStateReducer,
            // useReducer has a special case to support lazy useState initializers
            initialState
          );
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef3(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function useLayoutEffect(create, inputs) {
          {
            currentHookNameInDev = "useLayoutEffect";
            error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback2(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function useMutableSource(source, getSnapshot, subscribe) {
          resolveCurrentlyRenderingComponent();
          return getSnapshot(source._source);
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value) {
          resolveCurrentlyRenderingComponent();
          return value;
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var responseState = currentResponseState;
          if (responseState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(responseState, treeId, localId);
        }
        function noop3() {
        }
        var Dispatcher = {
          readContext: readContext$1,
          useContext,
          useMemo,
          useReducer,
          useRef: useRef3,
          useState: useState8,
          useInsertionEffect: noop3,
          useLayoutEffect,
          useCallback: useCallback2,
          // useImperativeHandle is not run in the server environment
          useImperativeHandle: noop3,
          // Effects are not run in the server environment.
          useEffect: noop3,
          // Debugging effect
          useDebugValue: noop3,
          useDeferredValue,
          useTransition,
          useId,
          // Subscriptions are not setup in a server environment.
          useMutableSource,
          useSyncExternalStore
        };
        var currentResponseState = null;
        function setCurrentResponseState(responseState) {
          currentResponseState = responseState;
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type, null, null);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type, null, null);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type, null, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop$12() {
        }
        function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError) {
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            responseState,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            onError: onError2 === void 0 ? defaultErrorHandler : onError2,
            onAllReady: onAllReady === void 0 ? noop$12 : onAllReady,
            onShellReady: onShellReady === void 0 ? noop$12 : onShellReady,
            onShellError: onShellError === void 0 ? noop$12 : onShellError,
            onFatalError: onFatalError === void 0 ? noop$12 : onFatalError
          };
          var rootSegment = createPendingSegment(
            request,
            0,
            null,
            rootFormatContext,
            // Root segments are never embedded in Text on either edge
            false,
            false
          );
          rootSegment.parentFlushed = true;
          var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
          pingedTasks.push(rootTask);
          return request;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (pingedTasks.length === 1) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            forceClientRender: false,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null
          };
        }
        function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            node,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext
          };
          {
            task.componentStack = null;
          }
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            // lazily assigned later
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            formatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function pushBuiltInComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 0,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushFunctionComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 1,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushClassComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 2,
              parent: task.componentStack,
              type
            };
          }
        }
        function popComponentStackInDEV(task) {
          {
            if (task.componentStack === null) {
              error("Unexpectedly popped too many stack frames. This is a bug in React.");
            } else {
              task.componentStack = task.componentStack.parent;
            }
          }
        }
        var lastBoundaryErrorComponentStackDev = null;
        function captureBoundaryErrorDetailsDev(boundary, error2) {
          {
            var errorMessage;
            if (typeof error2 === "string") {
              errorMessage = error2;
            } else if (error2 && typeof error2.message === "string") {
              errorMessage = error2.message;
            } else {
              errorMessage = String(error2);
            }
            var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
            lastBoundaryErrorComponentStackDev = null;
            boundary.errorMessage = errorMessage;
            boundary.errorComponentStack = errorComponentStack;
          }
        }
        function logRecoverableError(request, error2) {
          var errorDigest = request.onError(error2);
          if (errorDigest != null && typeof errorDigest !== "string") {
            throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, task, props) {
          pushBuiltInComponentStackInDEV(task, "Suspense");
          var parentBoundary = task.blockedBoundary;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(
            request,
            insertionIndex,
            newBoundary,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(
            request,
            0,
            null,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.blockedSegment = contentRootSegment;
          try {
            renderNode(request, task, content);
            pushSegmentFinale$1(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0) {
              popComponentStackInDEV(task);
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.forceClientRender = true;
            newBoundary.errorDigest = logRecoverableError(request, error2);
            {
              captureBoundaryErrorDetailsDev(newBoundary, error2);
            }
          } finally {
            task.blockedBoundary = parentBoundary;
            task.blockedSegment = parentSegment;
          }
          var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
          {
            suspendedFallbackTask.componentStack = task.componentStack;
          }
          request.pingedTasks.push(suspendedFallbackTask);
          popComponentStackInDEV(task);
        }
        function renderHostElement(request, task, type, props) {
          pushBuiltInComponentStackInDEV(task, type);
          var segment = task.blockedSegment;
          var children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
          segment.lastPushedText = false;
          var prevContext = segment.formatContext;
          segment.formatContext = getChildFormatContext(prevContext, type, props);
          renderNode(request, task, children);
          segment.formatContext = prevContext;
          pushEndInstance(segment.chunks, type);
          segment.lastPushedText = false;
          popComponentStackInDEV(task);
        }
        function shouldConstruct$1(Component) {
          return Component.prototype && Component.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, Component, props, secondArg) {
          var componentIdentity = {};
          prepareToUseHooks(task, componentIdentity);
          var result = Component(props, secondArg);
          return finishHooks(Component, props, result, secondArg);
        }
        function finishClassComponent(request, task, instance, Component, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, nextChildren);
              task.legacyContext = previousContext;
              return;
            }
          }
          renderNodeDestructive(request, task, nextChildren);
        }
        function renderClassComponent(request, task, Component, props) {
          pushClassComponentStackInDEV(task, Component);
          var maskedContext = getMaskedContext(Component, task.legacyContext);
          var instance = constructClassInstance(Component, props, maskedContext);
          mountClassInstance(instance, Component, props, maskedContext);
          finishClassComponent(request, task, instance, Component, props);
          popComponentStackInDEV(task);
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutDefaultPropsOnFunctionComponent = {};
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        var hasWarnedAboutUsingContextAsConsumer = false;
        function renderIndeterminateComponent(request, task, Component, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component, task.legacyContext);
          }
          pushFunctionComponentStackInDEV(task, Component);
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, Component, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value, Component, props, legacyContext);
            finishClassComponent(request, task, value, Component, props);
          } else {
            {
              validateFunctionComponentInDev(Component);
            }
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
              try {
                renderNodeDestructive(request, task, value);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, value);
            }
          }
          popComponentStackInDEV(task);
        }
        function validateFunctionComponentInDev(Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (Component.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps2 = Component.defaultProps;
            for (var propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, type, props, ref) {
          pushFunctionComponentStackInDEV(task, type.render);
          var children = renderWithHooks(request, task, type.render, props, ref);
          var hasId = checkDidRenderIdHook();
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            try {
              renderNodeDestructive(request, task, children);
            } finally {
              task.treeContext = prevTreeContext;
            }
          } else {
            renderNodeDestructive(request, task, children);
          }
          popComponentStackInDEV(task);
        }
        function renderMemo(request, task, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, context, props) {
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var render2 = props.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext(context);
          var newChildren = render2(newValue);
          renderNodeDestructive(request, task, newChildren);
        }
        function renderContextProvider(request, task, type, props) {
          var context = type._context;
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          task.context = pushProvider(context, value);
          renderNodeDestructive(request, task, children);
          task.context = popProvider(context);
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, lazyComponent, props, ref) {
          pushBuiltInComponentStackInDEV(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          var resolvedProps = resolveDefaultProps(Component, props);
          renderElement(request, task, Component, resolvedProps, ref);
          popComponentStackInDEV(task);
        }
        function renderElement(request, task, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              renderClassComponent(request, task, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, type, props);
            return;
          }
          switch (type) {
            // TODO: LegacyHidden acts the same as a fragment. This only works
            // because we currently assume that every instance of LegacyHidden is
            // accompanied by a host component wrapper. In the hidden mode, the host
            // component is given a `hidden` attribute, which ensures that the
            // initial HTML is not visible. To support the use of LegacyHidden as a
            // true fragment, without an extra DOM node, we would have to hide the
            // initial HTML in some other way.
            // TODO: Add REACT_OFFSCREEN_TYPE here too with the same capability.
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              renderNodeDestructive(request, task, props.children);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              pushBuiltInComponentStackInDEV(task, "SuspenseList");
              renderNodeDestructive(request, task, props.children);
              popComponentStackInDEV(task);
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            // eslint-disable-next-line-no-fallthrough
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                renderContextProvider(request, task, type, props);
                return;
              }
              case REACT_CONTEXT_TYPE: {
                renderContextConsumer(request, task, type, props);
                return;
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
            iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function renderNodeDestructive(request, task, node) {
          {
            try {
              return renderNodeDestructiveImpl(request, task, node);
            } catch (x) {
              if (typeof x === "object" && x !== null && typeof x.then === "function") ;
              else {
                lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
              }
              throw x;
            }
          }
        }
        function renderNodeDestructiveImpl(request, task, node) {
          task.node = node;
          if (typeof node === "object" && node !== null) {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var props = element.props;
                var ref = element.ref;
                renderElement(request, task, type, props, ref);
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              // eslint-disable-next-line-no-fallthrough
              case REACT_LAZY_TYPE: {
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode;
                {
                  try {
                    resolvedNode = init(payload);
                  } catch (x) {
                    if (typeof x === "object" && x !== null && typeof x.then === "function") {
                      pushBuiltInComponentStackInDEV(task, "Lazy");
                    }
                    throw x;
                  }
                }
                renderNodeDestructive(request, task, resolvedNode);
                return;
              }
            }
            if (isArray2(node)) {
              renderChildrenArray(request, task, node);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator = iteratorFn.call(node);
              if (iterator) {
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children);
                  return;
                }
                return;
              }
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
            return;
          }
          if (typeof node === "number") {
            var _segment = task.blockedSegment;
            _segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
            return;
          }
          {
            if (typeof node === "function") {
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
        }
        function renderChildrenArray(request, task, children) {
          var totalChildren = children.length;
          for (var i = 0; i < totalChildren; i++) {
            var prevTreeContext = task.treeContext;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
            try {
              renderNode(request, task, children[i]);
            } finally {
              task.treeContext = prevTreeContext;
            }
          }
        }
        function spawnNewSuspendedTask(request, task, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            segment.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
          {
            if (task.componentStack !== null) {
              newTask.componentStack = task.componentStack.parent;
            }
          }
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node) {
          var previousFormatContext = task.blockedSegment.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousComponentStack = null;
          {
            previousComponentStack = task.componentStack;
          }
          try {
            return renderNodeDestructive(request, task, node);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              spawnNewSuspendedTask(request, task, x);
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              return;
            } else {
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              throw x;
            }
          }
        }
        function erroredTask(request, boundary, segment, error2) {
          var errorDigest = logRecoverableError(request, error2);
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              boundary.errorDigest = errorDigest;
              {
                captureBoundaryErrorDetailsDev(boundary, error2);
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          finishedTask(request, boundary, segment);
        }
        function abortTask(task, request, reason) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          if (boundary === null) {
            request.allPendingTasks--;
            if (request.status !== CLOSED) {
              request.status = CLOSED;
              if (request.destination !== null) {
                close(request.destination);
              }
            }
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              boundary.errorDigest = request.onError(_error);
              {
                var errorPrefix = "The server did not finish this Suspense boundary: ";
                if (_error && typeof _error.message === "string") {
                  _error = errorPrefix + _error.message;
                } else {
                  _error = errorPrefix + String(_error);
                }
                var previousTaskInDev = currentTaskInDEV;
                currentTaskInDEV = task;
                try {
                  captureBoundaryErrorDetailsDev(boundary, _error);
                } finally {
                  currentTaskInDEV = previousTaskInDev;
                }
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, reason);
            });
            boundary.fallbackAbortableTasks.clear();
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              request.onShellError = noop$12;
              var onShellReady = request.onShellReady;
              onShellReady();
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.forceClientRender) ;
            else if (boundary.pendingTasks === 0) {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
              boundary.fallbackAbortableTasks.clear();
            } else {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node);
            pushSegmentFinale$1(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else {
              task.abortSet.delete(task);
              segment.status = ERRORED;
              erroredTask(request, task.blockedBoundary, segment, x);
            }
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState);
            ReactCurrentDispatcher$1.current = prevDispatcher;
            {
              ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === Dispatcher) {
              switchContext(prevContext);
            }
          }
        }
        function flushSubtree(request, destination, segment) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              var segmentID = segment.id = request.nextSegmentId++;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.responseState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r2 = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r2 = flushSegment(request, destination, nextChild);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r2 = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r2;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment);
          }
          boundary.parentFlushed = true;
          if (boundary.forceClientRender) {
            writeStartClientRenderedSuspenseBoundary$1(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
            flushSubtree(request, destination, segment);
            return writeEndClientRenderedSuspenseBoundary$1(destination, request.responseState);
          } else if (boundary.pendingTasks > 0) {
            boundary.rootSegmentID = request.nextSegmentId++;
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
            writeStartPendingSuspenseBoundary(destination, request.responseState, id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else {
            writeStartCompletedSuspenseBoundary$1(destination, request.responseState);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment);
            return writeEndCompletedSuspenseBoundary$1(destination, request.responseState);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
        }
        function flushSegmentContainer(request, destination, segment) {
          writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
          flushSegment(request, destination, segment);
          return writeEndSegment(destination, segment.formatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          return true;
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment);
          } else {
            flushSegmentContainer(request, destination, segment);
            return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          try {
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null && request.pendingRootTasks === 0) {
              flushSegment(request, destination, completedRootSegment);
              request.completedRootSegment = null;
              writeCompletedRoot(destination, request.responseState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            var i;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
            }
          }
        }
        function startWork(request) {
          scheduleWork(function() {
            return performWork(request);
          });
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            abortableTasks.forEach(function(task) {
              return abortTask(task, request, reason);
            });
            abortableTasks.clear();
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function onError() {
        }
        function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
          var didFatal = false;
          var fatalError2 = null;
          var result = "";
          var destination = {
            push: function(chunk) {
              if (chunk !== null) {
                result += chunk;
              }
              return true;
            },
            destroy: function(error2) {
              didFatal = true;
              fatalError2 = error2;
            }
          };
          var readyToStream = false;
          function onShellReady() {
            readyToStream = true;
          }
          var request = createRequest(children, createResponseState$1(generateStaticMarkup, options ? options.identifierPrefix : void 0), createRootFormatContext(), Infinity, onError, void 0, onShellReady, void 0, void 0);
          startWork(request);
          abort(request, abortReason);
          startFlowing(request, destination);
          if (didFatal) {
            throw fatalError2;
          }
          if (!readyToStream) {
            throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          }
          return result;
        }
        function renderToString(children, options) {
          return renderToStringImpl(children, options, false, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
        }
        function renderToStaticMarkup(children, options) {
          return renderToStringImpl(children, options, true, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
        }
        function renderToNodeStream() {
          throw new Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
        }
        function renderToStaticNodeStream() {
          throw new Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
        }
        exports.renderToNodeStream = renderToNodeStream;
        exports.renderToStaticMarkup = renderToStaticMarkup;
        exports.renderToStaticNodeStream = renderToStaticNodeStream;
        exports.renderToString = renderToString;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-server.browser.development.js
var require_react_dom_server_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.browser.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React4 = require_react();
        var ReactVersion = "18.3.1";
        var ReactSharedInternals = React4.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function scheduleWork(callback) {
          callback();
        }
        var VIEW_SIZE = 512;
        var currentView = null;
        var writtenBytes = 0;
        function beginWriting(destination) {
          currentView = new Uint8Array(VIEW_SIZE);
          writtenBytes = 0;
        }
        function writeChunk(destination, chunk) {
          if (chunk.length === 0) {
            return;
          }
          if (chunk.length > VIEW_SIZE) {
            if (writtenBytes > 0) {
              destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            destination.enqueue(chunk);
            return;
          }
          var bytesToWrite = chunk;
          var allowableBytes = currentView.length - writtenBytes;
          if (allowableBytes < bytesToWrite.length) {
            if (allowableBytes === 0) {
              destination.enqueue(currentView);
            } else {
              currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);
              destination.enqueue(currentView);
              bytesToWrite = bytesToWrite.subarray(allowableBytes);
            }
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
          currentView.set(bytesToWrite, writtenBytes);
          writtenBytes += bytesToWrite.length;
        }
        function writeChunkAndReturn(destination, chunk) {
          writeChunk(destination, chunk);
          return true;
        }
        function completeWriting(destination) {
          if (currentView && writtenBytes > 0) {
            destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
            currentView = null;
            writtenBytes = 0;
          }
        }
        function close(destination) {
          destination.close();
        }
        var textEncoder = new TextEncoder();
        function stringToChunk(content) {
          return textEncoder.encode(content);
        }
        function stringToPrecomputedChunk(content) {
          return textEncoder.encode(content);
        }
        function closeWithError(destination, error2) {
          if (typeof destination.error === "function") {
            destination.error(error2);
          } else {
            destination.close();
          }
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e2) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            // $FlowIssue symbol is perfectly valid here
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize2 = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes2 = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes2.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved2 = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved2 && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved2) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize2 = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize2(name.replace(msPattern, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape2;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape2 = "&quot;";
                break;
              case 38:
                escape2 = "&amp;";
                break;
              case 39:
                escape2 = "&#x27;";
                break;
              case 60:
                escape2 = "&lt;";
                break;
              case 62:
                escape2 = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.substring(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape2;
          }
          return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text2) {
          if (typeof text2 === "boolean" || typeof text2 === "number") {
            return "" + text2;
          }
          return escapeHtml(text2);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern$1 = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a2) {
          return isArrayImpl(a2);
        }
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("<\/script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
        function escapeBootstrapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var bootstrapChunks = [];
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i])), endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
            }
          }
          return {
            bootstrapChunks,
            startInlineScript: inlineScriptWithNonce,
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: idPrefix + "B:",
            idPrefix,
            nextSuspenseID: 0,
            sentCompleteSegmentFunction: false,
            sentCompleteBoundaryFunction: false,
            sentClientRenderFunction: false
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_MODE = 1;
        var SVG_MODE = 2;
        var MATHML_MODE = 3;
        var HTML_TABLE_MODE = 4;
        var HTML_TABLE_BODY_MODE = 5;
        var HTML_TABLE_ROW_MODE = 6;
        var HTML_COLGROUP_MODE = 7;
        function createFormatContext(insertionMode, selectedValue) {
          return {
            insertionMode,
            selectedValue
          };
        }
        function createRootFormatContext(namespaceURI) {
          var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
          return createFormatContext(insertionMode, null);
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
            case "svg":
              return createFormatContext(SVG_MODE, null);
            case "math":
              return createFormatContext(MATHML_MODE, null);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null);
            // Table parents are special in that their children can only be created at all if they're
            // wrapped in a table parent. So we need to encode that we're entering this mode.
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          return parentContext;
        }
        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
        function assignSuspenseBoundaryID(responseState) {
          var generatedID = responseState.nextSuspenseID++;
          return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
        }
        function makeId(responseState, treeId, localId) {
          var idPrefix = responseState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text2) {
          return escapeTextForBrowser(text2);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance(target, text2, responseState, textEmbedded) {
          if (text2 === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text2)));
          return true;
        }
        function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyle(target, responseState, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty2.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle$1(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !hasOwnProperty2.call(isUnitlessNumber, styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushAttribute(target, responseState, name, value) {
          switch (name) {
            case "style": {
              pushStyle(target, responseState, value);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            // These shouldn't be set as attributes on generic HTML elements.
            case "innerHTML":
            // Must use dangerouslySetInnerHTML instead.
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
              return;
          }
          if (
            // shouldIgnoreAttribute
            // We have already filtered out null/undefined and reserved words.
            name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
          ) {
            return;
          }
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return;
              case "boolean": {
                if (!propertyInfo.acceptsBooleans) {
                  return;
                }
              }
            }
            var attributeName = propertyInfo.attributeName;
            var attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                if (value) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                }
                return;
              case OVERLOADED_BOOLEAN:
                if (value === true) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                } else if (value === false) ;
                else {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                return;
              case NUMERIC:
                if (!isNaN(value)) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              case POSITIVE_NUMERIC:
                if (!isNaN(value) && value >= 1) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              default:
                if (propertyInfo.sanitizeURL) {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  value = "" + value;
                  sanitizeURL(value);
                }
                target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return;
              case "boolean": {
                var prefix2 = name.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-") {
                  return;
                }
              }
            }
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray2(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target, props, responseState) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React4.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, responseState, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                // eslint-disable-next-line-no-fallthrough
                case "value":
                  value = propValue;
                // We intentionally fallthrough to also set the attribute on the node.
                // eslint-disable-next-line-no-fallthrough
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray2(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function pushInput(target, props, responseState) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          target.push(startChunkForTag("input"));
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                // eslint-disable-next-line-no-fallthrough
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (checked !== null) {
            pushAttribute(target, responseState, "checked", checked);
          } else if (defaultChecked !== null) {
            pushAttribute(target, responseState, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, responseState, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, responseState, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartTextArea(target, props, responseState) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                // eslint-disable-next-line-no-fallthrough
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray2(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushSelfClosing(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                // eslint-disable-next-line-no-fallthrough
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props, responseState) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                // eslint-disable-next-line-no-fallthrough
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushStartTitle(target, props, responseState) {
          target.push(startChunkForTag("title"));
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
                // eslint-disable-next-line-no-fallthrough
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
            if (Array.isArray(children) && children.length > 1) {
              error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && child.$$typeof != null) {
              error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && typeof child !== "string" && typeof child !== "number") {
              error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            }
          }
          return children;
        }
        function pushStartGenericElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyle(target, responseState, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target, type, props, responseState, formatContext) {
          {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            // Special tags
            case "select":
              return pushStartSelect(target, props, responseState);
            case "option":
              return pushStartOption(target, props, responseState, formatContext);
            case "textarea":
              return pushStartTextArea(target, props, responseState);
            case "input":
              return pushInput(target, props, responseState);
            case "menuitem":
              return pushStartMenuItem(target, props, responseState);
            case "title":
              return pushStartTitle(target, props, responseState);
            // Newline eating tags
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type, responseState);
            }
            // Omitted close tags
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type, responseState);
            }
            // These are reserved SVG and MathML elements, that are never custom elements.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              return pushStartGenericElement(target, props, type, responseState);
            }
            case "html": {
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                target.push(DOCTYPE);
              }
              return pushStartGenericElement(target, props, type, responseState);
            }
            default: {
              if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                return pushStartGenericElement(target, props, type, responseState);
              } else {
                return pushStartCustomElement(target, props, type, responseState);
              }
            }
          }
        }
        var endTag1 = stringToPrecomputedChunk("</");
        var endTag2 = stringToPrecomputedChunk(">");
        function pushEndInstance(target, type, props) {
          switch (type) {
            // Omitted close tags
            // TODO: Instead of repeating this switch we could try to pass a flag from above.
            // That would require returning a tuple. Which might be ok if it gets inlined.
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              break;
            }
            default: {
              target.push(endTag1, stringToChunk(type), endTag2);
            }
          }
        }
        function writeCompletedRoot(destination, responseState) {
          var bootstrapChunks = responseState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            return writeChunkAndReturn(destination, bootstrapChunks[i]);
          }
          return true;
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, responseState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, responseState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, responseState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, id);
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMesssage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, responseState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            // TODO: For the rest of these, there will be extra wrapper nodes that never
            // get deleted from the document. We need to delete the table too as part
            // of the injected scripts. They are invisible though so it's not too terrible
            // and it's kind of an edge case to suspend in a table. Totally supported though.
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
        var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
        var clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteSegmentFunction) {
            responseState.sentCompleteSegmentFunction = true;
            writeChunk(destination, completeSegmentScript1Full);
          } else {
            writeChunk(destination, completeSegmentScript1Partial);
          }
          writeChunk(destination, responseState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          writeChunk(destination, completeSegmentScript2);
          writeChunk(destination, responseState.placeholderPrefix);
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, completeSegmentScript3);
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteBoundaryFunction) {
            responseState.sentCompleteBoundaryFunction = true;
            writeChunk(destination, completeBoundaryScript1Full);
          } else {
            writeChunk(destination, completeBoundaryScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          var formattedContentID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, boundaryID);
          writeChunk(destination, completeBoundaryScript2);
          writeChunk(destination, responseState.segmentPrefix);
          writeChunk(destination, formattedContentID);
          return writeChunkAndReturn(destination, completeBoundaryScript3);
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderScript2 = stringToPrecomputedChunk(")<\/script>");
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentClientRenderFunction) {
            responseState.sentClientRenderFunction = true;
            writeChunk(destination, clientRenderScript1Full);
          } else {
            writeChunk(destination, clientRenderScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, boundaryID);
          writeChunk(destination, clientRenderScript1A);
          if (errorDigest || errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
          }
          if (errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
          }
          if (errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
          }
          return writeChunkAndReturn(destination, clientRenderScript2);
        }
        var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              // santizing breaking out of strings and script tags
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var assign = Object.assign;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn2, construct) {
          if (!fn2 || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn2);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn2, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn2.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn2();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                c2--;
              }
              for (; s >= 1 && c2 >= 0; s--, c2--) {
                if (sampleLines[s] !== controlLines[c2]) {
                  if (s !== 1 || c2 !== 1) {
                    do {
                      s--;
                      c2--;
                      if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn2.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn2.displayName);
                        }
                        {
                          if (typeof fn2 === "function") {
                            componentFrameCache.set(fn2, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn2 ? fn2.displayName || fn2.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn2 === "function") {
              componentFrameCache.set(fn2, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn2, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn2, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype3 = Component.prototype;
          return !!(prototype3 && prototype3.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next) ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue;
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var value = prevSnapshot.parentValue;
            if (value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue;
            } else {
              prevSnapshot.context._currentValue = value;
            }
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext(context) {
          var value = context._currentValue;
          return value;
        }
        function get(key) {
          return key._reactInternals;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          enqueueSetState: function(inst, payload, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
              }
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray2(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn(
                    // keep this warning in sync with ReactStrictModeWarning.js
                    "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                    componentName
                  );
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log2 = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log2(asUint) / LN2 | 0) | 0;
        }
        function is(x, y2) {
          return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(task, componentIdentity) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
        }
        function finishHooks(Component, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext$1(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState8(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(
            basicStateReducer,
            // useReducer has a special case to support lazy useState initializers
            initialState
          );
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef3(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function useLayoutEffect(create, inputs) {
          {
            currentHookNameInDev = "useLayoutEffect";
            error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback2(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function useMutableSource(source, getSnapshot, subscribe) {
          resolveCurrentlyRenderingComponent();
          return getSnapshot(source._source);
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value) {
          resolveCurrentlyRenderingComponent();
          return value;
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var responseState = currentResponseState;
          if (responseState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(responseState, treeId, localId);
        }
        function noop3() {
        }
        var Dispatcher = {
          readContext: readContext$1,
          useContext,
          useMemo,
          useReducer,
          useRef: useRef3,
          useState: useState8,
          useInsertionEffect: noop3,
          useLayoutEffect,
          useCallback: useCallback2,
          // useImperativeHandle is not run in the server environment
          useImperativeHandle: noop3,
          // Effects are not run in the server environment.
          useEffect: noop3,
          // Debugging effect
          useDebugValue: noop3,
          useDeferredValue,
          useTransition,
          useId,
          // Subscriptions are not setup in a server environment.
          useMutableSource,
          useSyncExternalStore
        };
        var currentResponseState = null;
        function setCurrentResponseState(responseState) {
          currentResponseState = responseState;
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type, null, null);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type, null, null);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type, null, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop$12() {
        }
        function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            responseState,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            onError: onError === void 0 ? defaultErrorHandler : onError,
            onAllReady: onAllReady === void 0 ? noop$12 : onAllReady,
            onShellReady: onShellReady === void 0 ? noop$12 : onShellReady,
            onShellError: onShellError === void 0 ? noop$12 : onShellError,
            onFatalError: onFatalError === void 0 ? noop$12 : onFatalError
          };
          var rootSegment = createPendingSegment(
            request,
            0,
            null,
            rootFormatContext,
            // Root segments are never embedded in Text on either edge
            false,
            false
          );
          rootSegment.parentFlushed = true;
          var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
          pingedTasks.push(rootTask);
          return request;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (pingedTasks.length === 1) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            forceClientRender: false,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null
          };
        }
        function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            node,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext
          };
          {
            task.componentStack = null;
          }
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            // lazily assigned later
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            formatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function pushBuiltInComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 0,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushFunctionComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 1,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushClassComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 2,
              parent: task.componentStack,
              type
            };
          }
        }
        function popComponentStackInDEV(task) {
          {
            if (task.componentStack === null) {
              error("Unexpectedly popped too many stack frames. This is a bug in React.");
            } else {
              task.componentStack = task.componentStack.parent;
            }
          }
        }
        var lastBoundaryErrorComponentStackDev = null;
        function captureBoundaryErrorDetailsDev(boundary, error2) {
          {
            var errorMessage;
            if (typeof error2 === "string") {
              errorMessage = error2;
            } else if (error2 && typeof error2.message === "string") {
              errorMessage = error2.message;
            } else {
              errorMessage = String(error2);
            }
            var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
            lastBoundaryErrorComponentStackDev = null;
            boundary.errorMessage = errorMessage;
            boundary.errorComponentStack = errorComponentStack;
          }
        }
        function logRecoverableError(request, error2) {
          var errorDigest = request.onError(error2);
          if (errorDigest != null && typeof errorDigest !== "string") {
            throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, task, props) {
          pushBuiltInComponentStackInDEV(task, "Suspense");
          var parentBoundary = task.blockedBoundary;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(
            request,
            insertionIndex,
            newBoundary,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(
            request,
            0,
            null,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.blockedSegment = contentRootSegment;
          try {
            renderNode(request, task, content);
            pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0) {
              popComponentStackInDEV(task);
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.forceClientRender = true;
            newBoundary.errorDigest = logRecoverableError(request, error2);
            {
              captureBoundaryErrorDetailsDev(newBoundary, error2);
            }
          } finally {
            task.blockedBoundary = parentBoundary;
            task.blockedSegment = parentSegment;
          }
          var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
          {
            suspendedFallbackTask.componentStack = task.componentStack;
          }
          request.pingedTasks.push(suspendedFallbackTask);
          popComponentStackInDEV(task);
        }
        function renderHostElement(request, task, type, props) {
          pushBuiltInComponentStackInDEV(task, type);
          var segment = task.blockedSegment;
          var children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
          segment.lastPushedText = false;
          var prevContext = segment.formatContext;
          segment.formatContext = getChildFormatContext(prevContext, type, props);
          renderNode(request, task, children);
          segment.formatContext = prevContext;
          pushEndInstance(segment.chunks, type);
          segment.lastPushedText = false;
          popComponentStackInDEV(task);
        }
        function shouldConstruct$1(Component) {
          return Component.prototype && Component.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, Component, props, secondArg) {
          var componentIdentity = {};
          prepareToUseHooks(task, componentIdentity);
          var result = Component(props, secondArg);
          return finishHooks(Component, props, result, secondArg);
        }
        function finishClassComponent(request, task, instance, Component, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, nextChildren);
              task.legacyContext = previousContext;
              return;
            }
          }
          renderNodeDestructive(request, task, nextChildren);
        }
        function renderClassComponent(request, task, Component, props) {
          pushClassComponentStackInDEV(task, Component);
          var maskedContext = getMaskedContext(Component, task.legacyContext);
          var instance = constructClassInstance(Component, props, maskedContext);
          mountClassInstance(instance, Component, props, maskedContext);
          finishClassComponent(request, task, instance, Component, props);
          popComponentStackInDEV(task);
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutDefaultPropsOnFunctionComponent = {};
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        var hasWarnedAboutUsingContextAsConsumer = false;
        function renderIndeterminateComponent(request, task, Component, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component, task.legacyContext);
          }
          pushFunctionComponentStackInDEV(task, Component);
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, Component, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value, Component, props, legacyContext);
            finishClassComponent(request, task, value, Component, props);
          } else {
            {
              validateFunctionComponentInDev(Component);
            }
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
              try {
                renderNodeDestructive(request, task, value);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, value);
            }
          }
          popComponentStackInDEV(task);
        }
        function validateFunctionComponentInDev(Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (Component.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps2 = Component.defaultProps;
            for (var propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, type, props, ref) {
          pushFunctionComponentStackInDEV(task, type.render);
          var children = renderWithHooks(request, task, type.render, props, ref);
          var hasId = checkDidRenderIdHook();
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            try {
              renderNodeDestructive(request, task, children);
            } finally {
              task.treeContext = prevTreeContext;
            }
          } else {
            renderNodeDestructive(request, task, children);
          }
          popComponentStackInDEV(task);
        }
        function renderMemo(request, task, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, context, props) {
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var render2 = props.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext(context);
          var newChildren = render2(newValue);
          renderNodeDestructive(request, task, newChildren);
        }
        function renderContextProvider(request, task, type, props) {
          var context = type._context;
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          task.context = pushProvider(context, value);
          renderNodeDestructive(request, task, children);
          task.context = popProvider(context);
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, lazyComponent, props, ref) {
          pushBuiltInComponentStackInDEV(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          var resolvedProps = resolveDefaultProps(Component, props);
          renderElement(request, task, Component, resolvedProps, ref);
          popComponentStackInDEV(task);
        }
        function renderElement(request, task, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              renderClassComponent(request, task, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, type, props);
            return;
          }
          switch (type) {
            // TODO: LegacyHidden acts the same as a fragment. This only works
            // because we currently assume that every instance of LegacyHidden is
            // accompanied by a host component wrapper. In the hidden mode, the host
            // component is given a `hidden` attribute, which ensures that the
            // initial HTML is not visible. To support the use of LegacyHidden as a
            // true fragment, without an extra DOM node, we would have to hide the
            // initial HTML in some other way.
            // TODO: Add REACT_OFFSCREEN_TYPE here too with the same capability.
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              renderNodeDestructive(request, task, props.children);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              pushBuiltInComponentStackInDEV(task, "SuspenseList");
              renderNodeDestructive(request, task, props.children);
              popComponentStackInDEV(task);
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            // eslint-disable-next-line-no-fallthrough
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                renderContextProvider(request, task, type, props);
                return;
              }
              case REACT_CONTEXT_TYPE: {
                renderContextConsumer(request, task, type, props);
                return;
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
            iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function renderNodeDestructive(request, task, node) {
          {
            try {
              return renderNodeDestructiveImpl(request, task, node);
            } catch (x) {
              if (typeof x === "object" && x !== null && typeof x.then === "function") ;
              else {
                lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
              }
              throw x;
            }
          }
        }
        function renderNodeDestructiveImpl(request, task, node) {
          task.node = node;
          if (typeof node === "object" && node !== null) {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var props = element.props;
                var ref = element.ref;
                renderElement(request, task, type, props, ref);
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              // eslint-disable-next-line-no-fallthrough
              case REACT_LAZY_TYPE: {
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode;
                {
                  try {
                    resolvedNode = init(payload);
                  } catch (x) {
                    if (typeof x === "object" && x !== null && typeof x.then === "function") {
                      pushBuiltInComponentStackInDEV(task, "Lazy");
                    }
                    throw x;
                  }
                }
                renderNodeDestructive(request, task, resolvedNode);
                return;
              }
            }
            if (isArray2(node)) {
              renderChildrenArray(request, task, node);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator = iteratorFn.call(node);
              if (iterator) {
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children);
                  return;
                }
                return;
              }
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
            return;
          }
          if (typeof node === "number") {
            var _segment = task.blockedSegment;
            _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
            return;
          }
          {
            if (typeof node === "function") {
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
        }
        function renderChildrenArray(request, task, children) {
          var totalChildren = children.length;
          for (var i = 0; i < totalChildren; i++) {
            var prevTreeContext = task.treeContext;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
            try {
              renderNode(request, task, children[i]);
            } finally {
              task.treeContext = prevTreeContext;
            }
          }
        }
        function spawnNewSuspendedTask(request, task, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            segment.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
          {
            if (task.componentStack !== null) {
              newTask.componentStack = task.componentStack.parent;
            }
          }
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node) {
          var previousFormatContext = task.blockedSegment.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousComponentStack = null;
          {
            previousComponentStack = task.componentStack;
          }
          try {
            return renderNodeDestructive(request, task, node);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              spawnNewSuspendedTask(request, task, x);
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              return;
            } else {
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              throw x;
            }
          }
        }
        function erroredTask(request, boundary, segment, error2) {
          var errorDigest = logRecoverableError(request, error2);
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              boundary.errorDigest = errorDigest;
              {
                captureBoundaryErrorDetailsDev(boundary, error2);
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          finishedTask(request, boundary, segment);
        }
        function abortTask(task, request, reason) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          if (boundary === null) {
            request.allPendingTasks--;
            if (request.status !== CLOSED) {
              request.status = CLOSED;
              if (request.destination !== null) {
                close(request.destination);
              }
            }
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              boundary.errorDigest = request.onError(_error);
              {
                var errorPrefix = "The server did not finish this Suspense boundary: ";
                if (_error && typeof _error.message === "string") {
                  _error = errorPrefix + _error.message;
                } else {
                  _error = errorPrefix + String(_error);
                }
                var previousTaskInDev = currentTaskInDEV;
                currentTaskInDEV = task;
                try {
                  captureBoundaryErrorDetailsDev(boundary, _error);
                } finally {
                  currentTaskInDEV = previousTaskInDev;
                }
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, reason);
            });
            boundary.fallbackAbortableTasks.clear();
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              request.onShellError = noop$12;
              var onShellReady = request.onShellReady;
              onShellReady();
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.forceClientRender) ;
            else if (boundary.pendingTasks === 0) {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
              boundary.fallbackAbortableTasks.clear();
            } else {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node);
            pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else {
              task.abortSet.delete(task);
              segment.status = ERRORED;
              erroredTask(request, task.blockedBoundary, segment, x);
            }
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState);
            ReactCurrentDispatcher$1.current = prevDispatcher;
            {
              ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === Dispatcher) {
              switchContext(prevContext);
            }
          }
        }
        function flushSubtree(request, destination, segment) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              var segmentID = segment.id = request.nextSegmentId++;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.responseState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r2 = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r2 = flushSegment(request, destination, nextChild);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r2 = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r2;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment);
          }
          boundary.parentFlushed = true;
          if (boundary.forceClientRender) {
            writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
            flushSubtree(request, destination, segment);
            return writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
          } else if (boundary.pendingTasks > 0) {
            boundary.rootSegmentID = request.nextSegmentId++;
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
            writeStartPendingSuspenseBoundary(destination, request.responseState, id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else {
            writeStartCompletedSuspenseBoundary(destination, request.responseState);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment);
            return writeEndCompletedSuspenseBoundary(destination, request.responseState);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
        }
        function flushSegmentContainer(request, destination, segment) {
          writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
          flushSegment(request, destination, segment);
          return writeEndSegment(destination, segment.formatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          return true;
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment);
          } else {
            flushSegmentContainer(request, destination, segment);
            return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          beginWriting();
          try {
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null && request.pendingRootTasks === 0) {
              flushSegment(request, destination, completedRootSegment);
              request.completedRootSegment = null;
              writeCompletedRoot(destination, request.responseState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            var i;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            completeWriting(destination);
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
            }
          }
        }
        function startWork(request) {
          scheduleWork(function() {
            return performWork(request);
          });
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            abortableTasks.forEach(function(task) {
              return abortTask(task, request, reason);
            });
            abortableTasks.clear();
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function renderToReadableStream(children, options) {
          return new Promise(function(resolve, reject) {
            var onFatalError;
            var onAllReady;
            var allReady = new Promise(function(res, rej) {
              onAllReady = res;
              onFatalError = rej;
            });
            function onShellReady() {
              var stream = new ReadableStream(
                {
                  type: "bytes",
                  pull: function(controller) {
                    startFlowing(request, controller);
                  },
                  cancel: function(reason) {
                    abort(request);
                  }
                },
                // $FlowFixMe size() methods are not allowed on byte streams.
                {
                  highWaterMark: 0
                }
              );
              stream.allReady = allReady;
              resolve(stream);
            }
            function onShellError(error2) {
              allReady.catch(function() {
              });
              reject(error2);
            }
            var request = createRequest(children, createResponseState(options ? options.identifierPrefix : void 0, options ? options.nonce : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, onAllReady, onShellReady, onShellError, onFatalError);
            if (options && options.signal) {
              var signal = options.signal;
              var listener2 = function() {
                abort(request, signal.reason);
                signal.removeEventListener("abort", listener2);
              };
              signal.addEventListener("abort", listener2);
            }
            startWork(request);
          });
        }
        exports.renderToReadableStream = renderToReadableStream;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/server.browser.js
var require_server_browser = __commonJS({
  "node_modules/react-dom/server.browser.js"(exports) {
    "use strict";
    var l;
    var s;
    if (false) {
      l = null;
      s = null;
    } else {
      l = require_react_dom_server_legacy_browser_development();
      s = require_react_dom_server_browser_development();
    }
    exports.version = l.version;
    exports.renderToString = l.renderToString;
    exports.renderToStaticMarkup = l.renderToStaticMarkup;
    exports.renderToNodeStream = l.renderToNodeStream;
    exports.renderToStaticNodeStream = l.renderToStaticNodeStream;
    exports.renderToReadableStream = s.renderToReadableStream;
  }
});

// node_modules/axios/lib/helpers/bind.js
function bind(fn2, thisArg) {
  return function wrap2() {
    return fn2.apply(thisArg, arguments);
  };
}
var init_bind = __esm({
  "node_modules/axios/lib/helpers/bind.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/utils.js
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
function forEach(obj, fn2, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn2.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn2.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
var toString, getPrototypeOf, kindOf, kindOfTest, typeOfTest, isArray, isUndefined, isArrayBuffer, isString, isFunction, isNumber, isObject2, isBoolean, isPlainObject, isDate, isFile, isBlob, isFileList, isStream, isFormData, isURLSearchParams, isReadableStream, isRequest, isResponse, isHeaders, trim, _global, isContextDefined, extend, stripBOM, inherits, toFlatObject, endsWith, toArray, isTypedArray, forEachEntry, matchAll, isHTMLForm, toCamelCase, hasOwnProperty, isRegExp, reduceDescriptors, freezeMethods, toObjectSet, noop, toFiniteNumber, ALPHA, DIGIT, ALPHABET, generateString, toJSONObject, isAsyncFn, isThenable, _setImmediate, asap, utils_default;
var init_utils = __esm({
  "node_modules/axios/lib/utils.js"() {
    "use strict";
    init_bind();
    ({ toString } = Object.prototype);
    ({ getPrototypeOf } = Object);
    kindOf = /* @__PURE__ */ ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    typeOfTest = (type) => (thing) => typeof thing === type;
    ({ isArray } = Array);
    isUndefined = typeOfTest("undefined");
    isArrayBuffer = kindOfTest("ArrayBuffer");
    isString = typeOfTest("string");
    isFunction = typeOfTest("function");
    isNumber = typeOfTest("number");
    isObject2 = (thing) => thing !== null && typeof thing === "object";
    isBoolean = (thing) => thing === true || thing === false;
    isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype3 = getPrototypeOf(val);
      return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    isDate = kindOfTest("Date");
    isFile = kindOfTest("File");
    isBlob = kindOfTest("Blob");
    isFileList = kindOfTest("FileList");
    isStream = (val) => isObject2(val) && isFunction(val.pipe);
    isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    isURLSearchParams = kindOfTest("URLSearchParams");
    [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    _global = (() => {
      if (typeof globalThis !== "undefined") return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    isContextDefined = (context) => !isUndefined(context) && context !== _global;
    extend = (a2, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      }, { allOwnKeys });
      return a2;
    };
    stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null) return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    toArray = (thing) => {
      if (!thing) return null;
      if (isArray(thing)) return thing;
      let i = thing.length;
      if (!isNumber(i)) return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    isTypedArray = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    forEachEntry = (obj, fn2) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn2.call(obj, pair[0], pair[1]);
      }
    };
    matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    isHTMLForm = kindOfTest("HTMLFormElement");
    toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    isRegExp = kindOfTest("RegExp");
    reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define2 = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
      return obj;
    };
    noop = () => {
    };
    toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    ALPHA = "abcdefghijklmnopqrstuvwxyz";
    DIGIT = "0123456789";
    ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject2(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    isAsyncFn = kindOfTest("AsyncFunction");
    isThenable = (thing) => thing && (isObject2(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    utils_default = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject: isObject2,
      isPlainObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap
    };
  }
});

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config2, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config2 && (this.config = config2);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
var prototype, descriptors, AxiosError_default;
var init_AxiosError = __esm({
  "node_modules/axios/lib/core/AxiosError.js"() {
    "use strict";
    init_utils();
    utils_default.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils_default.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    prototype = AxiosError.prototype;
    descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config2, request, response, customProps) => {
      const axiosError = Object.create(prototype);
      utils_default.toFlatObject(error, axiosError, function filter2(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config2, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    AxiosError_default = AxiosError;
  }
});

// node_modules/axios/lib/helpers/null.js
var null_default;
var init_null = __esm({
  "node_modules/axios/lib/helpers/null.js"() {
    null_default = null;
  }
});

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null) return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build2(value, path) {
    if (utils_default.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build2(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build2(obj);
  return formData;
}
var predicates, toFormData_default;
var init_toFormData = __esm({
  "node_modules/axios/lib/helpers/toFormData.js"() {
    "use strict";
    init_utils();
    init_AxiosError();
    init_null();
    predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    toFormData_default = toFormData;
  }
});

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2, AxiosURLSearchParams_default;
var init_AxiosURLSearchParams = __esm({
  "node_modules/axios/lib/helpers/AxiosURLSearchParams.js"() {
    "use strict";
    init_toFormData();
    prototype2 = AxiosURLSearchParams.prototype;
    prototype2.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype2.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode);
      } : encode;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    AxiosURLSearchParams_default = AxiosURLSearchParams;
  }
});

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}
var init_buildURL = __esm({
  "node_modules/axios/lib/helpers/buildURL.js"() {
    "use strict";
    init_utils();
    init_AxiosURLSearchParams();
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager, InterceptorManager_default;
var init_InterceptorManager = __esm({
  "node_modules/axios/lib/core/InterceptorManager.js"() {
    "use strict";
    init_utils();
    InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn2) {
        utils_default.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn2(h);
          }
        });
      }
    };
    InterceptorManager_default = InterceptorManager;
  }
});

// node_modules/axios/lib/defaults/transitional.js
var transitional_default;
var init_transitional = __esm({
  "node_modules/axios/lib/defaults/transitional.js"() {
    "use strict";
    transitional_default = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default;
var init_URLSearchParams = __esm({
  "node_modules/axios/lib/platform/browser/classes/URLSearchParams.js"() {
    "use strict";
    init_AxiosURLSearchParams();
    URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;
  }
});

// node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default;
var init_FormData = __esm({
  "node_modules/axios/lib/platform/browser/classes/FormData.js"() {
    "use strict";
    FormData_default = typeof FormData !== "undefined" ? FormData : null;
  }
});

// node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default;
var init_Blob = __esm({
  "node_modules/axios/lib/platform/browser/classes/Blob.js"() {
    "use strict";
    Blob_default = typeof Blob !== "undefined" ? Blob : null;
  }
});

// node_modules/axios/lib/platform/browser/index.js
var browser_default;
var init_browser = __esm({
  "node_modules/axios/lib/platform/browser/index.js"() {
    init_URLSearchParams();
    init_FormData();
    init_Blob();
    browser_default = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams_default,
        FormData: FormData_default,
        Blob: Blob_default
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
  }
});

// node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
  navigator: () => _navigator,
  origin: () => origin
});
var hasBrowserEnv, _navigator, hasStandardBrowserEnv, hasStandardBrowserWebWorkerEnv, origin;
var init_utils2 = __esm({
  "node_modules/axios/lib/platform/common/utils.js"() {
    hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    _navigator = typeof navigator === "object" && navigator || void 0;
    hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    origin = hasBrowserEnv && window.location.href || "http://localhost";
  }
});

// node_modules/axios/lib/platform/index.js
var platform_default;
var init_platform = __esm({
  "node_modules/axios/lib/platform/index.js"() {
    init_browser();
    init_utils2();
    platform_default = {
      ...utils_exports,
      ...browser_default
    };
  }
});

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}
var init_toURLEncodedForm = __esm({
  "node_modules/axios/lib/helpers/toURLEncodedForm.js"() {
    "use strict";
    init_utils();
    init_toFormData();
    init_platform();
  }
});

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__") return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default;
var init_formDataToJSON = __esm({
  "node_modules/axios/lib/helpers/formDataToJSON.js"() {
    "use strict";
    init_utils();
    formDataToJSON_default = formDataToJSON;
  }
});

// node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e2) {
      if (e2.name !== "SyntaxError") {
        throw e2;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults, defaults_default;
var init_defaults = __esm({
  "node_modules/axios/lib/defaults/index.js"() {
    "use strict";
    init_utils();
    init_AxiosError();
    init_transitional();
    init_toFormData();
    init_toURLEncodedForm();
    init_platform();
    init_formDataToJSON();
    defaults = {
      transitional: transitional_default,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils_default.isObject(data);
        if (isObjectPayload && utils_default.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils_default.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
        }
        if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
          return data;
        }
        if (utils_default.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils_default.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData_default(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional2 = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
          return data;
        }
        if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e2) {
            if (strictJSONParsing) {
              if (e2.name === "SyntaxError") {
                throw AxiosError_default.from(e2, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e2;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform_default.classes.FormData,
        Blob: platform_default.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    defaults_default = defaults;
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf, parseHeaders_default;
var init_parseHeaders = __esm({
  "node_modules/axios/lib/helpers/parseHeaders.js"() {
    "use strict";
    init_utils();
    ignoreDuplicateOf = utils_default.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    parseHeaders_default = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/core/AxiosHeaders.js
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value)) return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var $internals, isValidHeaderName, AxiosHeaders, AxiosHeaders_default;
var init_AxiosHeaders = __esm({
  "node_modules/axios/lib/core/AxiosHeaders.js"() {
    "use strict";
    init_utils();
    init_parseHeaders();
    $internals = Symbol("internals");
    isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils_default.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders_default(header), valueOrRewrite);
        } else if (utils_default.isHeaders(header)) {
          for (const [key, value] of header.entries()) {
            setHeader(value, key, rewrite);
          }
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils_default.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils_default.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils_default.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils_default.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils_default.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils_default.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils_default.forEach(this, (value, header) => {
          const key = utils_default.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils_default.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype3 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype3, _header);
            accessors[lHeader] = true;
          }
        }
        utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils_default.freezeMethods(AxiosHeaders);
    AxiosHeaders_default = AxiosHeaders;
  }
});

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config2 = this || defaults_default;
  const context = response || config2;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn2) {
    data = fn2.call(config2, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}
var init_transformData = __esm({
  "node_modules/axios/lib/core/transformData.js"() {
    "use strict";
    init_utils();
    init_defaults();
    init_AxiosHeaders();
  }
});

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}
var init_isCancel = __esm({
  "node_modules/axios/lib/cancel/isCancel.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config2, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config2, request);
  this.name = "CanceledError";
}
var CanceledError_default;
var init_CanceledError = __esm({
  "node_modules/axios/lib/cancel/CanceledError.js"() {
    "use strict";
    init_AxiosError();
    init_utils();
    utils_default.inherits(CanceledError, AxiosError_default, {
      __CANCEL__: true
    });
    CanceledError_default = CanceledError;
  }
});

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}
var init_settle = __esm({
  "node_modules/axios/lib/core/settle.js"() {
    "use strict";
    init_AxiosError();
  }
});

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}
var init_parseProtocol = __esm({
  "node_modules/axios/lib/helpers/parseProtocol.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default;
var init_speedometer = __esm({
  "node_modules/axios/lib/helpers/speedometer.js"() {
    "use strict";
    speedometer_default = speedometer;
  }
});

// node_modules/axios/lib/helpers/throttle.js
function throttle(fn2, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn2.apply(null, args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
var throttle_default;
var init_throttle = __esm({
  "node_modules/axios/lib/helpers/throttle.js"() {
    throttle_default = throttle;
  }
});

// node_modules/axios/lib/helpers/progressEventReducer.js
var progressEventReducer, progressEventDecorator, asyncDecorator;
var init_progressEventReducer = __esm({
  "node_modules/axios/lib/helpers/progressEventReducer.js"() {
    init_speedometer();
    init_throttle();
    init_utils();
    progressEventReducer = (listener2, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer_default(50, 250);
      return throttle_default((e2) => {
        const loaded2 = e2.loaded;
        const total = e2.lengthComputable ? e2.total : void 0;
        const progressBytes = loaded2 - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded2 <= total;
        bytesNotified = loaded2;
        const data = {
          loaded: loaded2,
          total,
          progress: total ? loaded2 / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded2) / rate : void 0,
          event: e2,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener2(data);
      }, freq);
    };
    progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded2) => throttled[0]({
        lengthComputable,
        total,
        loaded: loaded2
      }), throttled[1]];
    };
    asyncDecorator = (fn2) => (...args) => utils_default.asap(() => fn2(...args));
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default;
var init_isURLSameOrigin = __esm({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"() {
    "use strict";
    init_utils();
    init_platform();
    isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        const msie = platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent);
        const urlParsingNode = document.createElement("a");
        let originURL;
        function resolveURL(url) {
          let href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/axios/lib/helpers/cookies.js
var cookies_default;
var init_cookies = __esm({
  "node_modules/axios/lib/helpers/cookies.js"() {
    init_utils();
    init_platform();
    cookies_default = platform_default.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils_default.isString(path) && cookie.push("path=" + path);
          utils_default.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}
var init_isAbsoluteURL = __esm({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}
var init_combineURLs = __esm({
  "node_modules/axios/lib/helpers/combineURLs.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}
var init_buildFullPath = __esm({
  "node_modules/axios/lib/core/buildFullPath.js"() {
    "use strict";
    init_isAbsoluteURL();
    init_combineURLs();
  }
});

// node_modules/axios/lib/core/mergeConfig.js
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config3 = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a2, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a2, b, caseless);
    } else if (!utils_default.isUndefined(a2)) {
      return getMergedValue(void 0, a2, caseless);
    }
  }
  function valueFromConfig2(a2, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a2, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a2)) {
      return getMergedValue(void 0, a2);
    }
  }
  function mergeDirectKeys(a2, b, prop) {
    if (prop in config2) {
      return getMergedValue(a2, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a2);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a2, b) => mergeDeepProperties(headersToObject(a2), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config3[prop] = configValue);
  });
  return config3;
}
var headersToObject;
var init_mergeConfig = __esm({
  "node_modules/axios/lib/core/mergeConfig.js"() {
    "use strict";
    init_utils();
    init_AxiosHeaders();
    headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
  }
});

// node_modules/axios/lib/helpers/resolveConfig.js
var resolveConfig_default;
var init_resolveConfig = __esm({
  "node_modules/axios/lib/helpers/resolveConfig.js"() {
    init_platform();
    init_utils();
    init_isURLSameOrigin();
    init_cookies();
    init_buildFullPath();
    init_mergeConfig();
    init_AxiosHeaders();
    init_buildURL();
    resolveConfig_default = (config2) => {
      const newConfig = mergeConfig({}, config2);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders_default.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config2.params, config2.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils_default.isFormData(data)) {
        if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform_default.hasStandardBrowserEnv) {
        withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
  }
});

// node_modules/axios/lib/adapters/xhr.js
var isXHRAdapterSupported, xhr_default;
var init_xhr = __esm({
  "node_modules/axios/lib/adapters/xhr.js"() {
    init_utils();
    init_settle();
    init_transitional();
    init_AxiosError();
    init_CanceledError();
    init_parseProtocol();
    init_platform();
    init_AxiosHeaders();
    init_progressEventReducer();
    init_resolveConfig();
    isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    xhr_default = isXHRAdapterSupported && function(config2) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config2 = resolveConfig_default(config2);
        let requestData = _config2.data;
        const requestHeaders = AxiosHeaders_default.from(_config2.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config2;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config2.cancelToken && _config2.cancelToken.unsubscribe(onCanceled);
          _config2.signal && _config2.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config2.method.toUpperCase(), _config2.url, true);
        request.timeout = _config2.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders_default.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config2,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config2, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config2, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config2.timeout ? "timeout of " + _config2.timeout + "ms exceeded" : "timeout exceeded";
          const transitional2 = _config2.transitional || transitional_default;
          if (_config2.timeoutErrorMessage) {
            timeoutErrorMessage = _config2.timeoutErrorMessage;
          }
          reject(new AxiosError_default(
            timeoutErrorMessage,
            transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
            config2,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils_default.isUndefined(_config2.withCredentials)) {
          request.withCredentials = !!_config2.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config2.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config2.cancelToken || _config2.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError_default(null, config2, request) : cancel);
            request.abort();
            request = null;
          };
          _config2.cancelToken && _config2.cancelToken.subscribe(onCanceled);
          if (_config2.signal) {
            _config2.signal.aborted ? onCanceled() : _config2.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config2.url);
        if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config2));
          return;
        }
        request.send(requestData || null);
      });
    };
  }
});

// node_modules/axios/lib/helpers/composeSignals.js
var composeSignals, composeSignals_default;
var init_composeSignals = __esm({
  "node_modules/axios/lib/helpers/composeSignals.js"() {
    init_CanceledError();
    init_AxiosError();
    init_utils();
    composeSignals = (signals, timeout) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
          }
        };
        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
        }, timeout);
        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils_default.asap(unsubscribe);
        return signal;
      }
    };
    composeSignals_default = composeSignals;
  }
});

// node_modules/axios/lib/helpers/trackStream.js
var streamChunk, readBytes, readStream, trackStream;
var init_trackStream = __esm({
  "node_modules/axios/lib/helpers/trackStream.js"() {
    streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end2;
      while (pos < len) {
        end2 = pos + chunkSize;
        yield chunk.slice(pos, end2);
        pos = end2;
      }
    };
    readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator = readBytes(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e2) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e2);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator.return();
        }
      }, {
        highWaterMark: 2
      });
    };
  }
});

// node_modules/axios/lib/adapters/fetch.js
var isFetchSupported, isReadableStreamSupported, encodeText, test, supportsRequestStream, DEFAULT_CHUNK_SIZE, supportsResponseStream, resolvers, getBodyLength, resolveBodyLength, fetch_default;
var init_fetch = __esm({
  "node_modules/axios/lib/adapters/fetch.js"() {
    init_platform();
    init_utils();
    init_AxiosError();
    init_composeSignals();
    init_trackStream();
    init_AxiosHeaders();
    init_progressEventReducer();
    init_resolveConfig();
    init_settle();
    isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    test = (fn2, ...args) => {
      try {
        return !!fn2(...args);
      } catch (e2) {
        return false;
      }
    };
    supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform_default.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    DEFAULT_CHUNK_SIZE = 64 * 1024;
    supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
    resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
        !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_, config2) => {
          throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config2);
        });
      });
    })(new Response());
    getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils_default.isBlob(body)) {
        return body.size;
      }
      if (utils_default.isSpecCompliantForm(body)) {
        const _request = new Request(platform_default.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils_default.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils_default.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    resolveBodyLength = async (headers, body) => {
      const length = utils_default.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    fetch_default = isFetchSupported && (async (config2) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig_default(config2);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils_default.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config2);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders_default.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config: config2,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config2, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError_default.from(err, err && err.code, config2, request);
      }
    });
  }
});

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters, renderReason, isResolvedHandle, adapters_default;
var init_adapters = __esm({
  "node_modules/axios/lib/adapters/adapters.js"() {
    init_utils();
    init_null();
    init_xhr();
    init_fetch();
    init_AxiosError();
    knownAdapters = {
      http: null_default,
      xhr: xhr_default,
      fetch: fetch_default
    };
    utils_default.forEach(knownAdapters, (fn2, value) => {
      if (fn2) {
        try {
          Object.defineProperty(fn2, "name", { value });
        } catch (e2) {
        }
        Object.defineProperty(fn2, "adapterName", { value });
      }
    });
    renderReason = (reason) => `- ${reason}`;
    isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
    adapters_default = {
      getAdapter: (adapters) => {
        adapters = utils_default.isArray(adapters) ? adapters : [adapters];
        const { length } = adapters;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters[i];
          let id;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError_default(`Unknown adapter '${id}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError_default(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config2) {
  if (config2.cancelToken) {
    config2.cancelToken.throwIfRequested();
  }
  if (config2.signal && config2.signal.aborted) {
    throw new CanceledError_default(null, config2);
  }
}
function dispatchRequest(config2) {
  throwIfCancellationRequested(config2);
  config2.headers = AxiosHeaders_default.from(config2.headers);
  config2.data = transformData.call(
    config2,
    config2.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config2.method) !== -1) {
    config2.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config2.adapter || defaults_default.adapter);
  return adapter(config2).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config2);
    response.data = transformData.call(
      config2,
      config2.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config2);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config2,
          config2.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}
var init_dispatchRequest = __esm({
  "node_modules/axios/lib/core/dispatchRequest.js"() {
    "use strict";
    init_transformData();
    init_isCancel();
    init_defaults();
    init_CanceledError();
    init_AxiosHeaders();
    init_adapters();
  }
});

// node_modules/axios/lib/env/data.js
var VERSION;
var init_data = __esm({
  "node_modules/axios/lib/env/data.js"() {
    VERSION = "1.7.7";
  }
});

// node_modules/axios/lib/helpers/validator.js
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validators, deprecatedWarnings, validator_default;
var init_validator = __esm({
  "node_modules/axios/lib/helpers/validator.js"() {
    "use strict";
    init_data();
    init_AxiosError();
    validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator === false) {
          throw new AxiosError_default(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError_default.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    validator_default = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var validators2, Axios, Axios_default;
var init_Axios = __esm({
  "node_modules/axios/lib/core/Axios.js"() {
    "use strict";
    init_utils();
    init_buildURL();
    init_InterceptorManager();
    init_dispatchRequest();
    init_mergeConfig();
    init_buildFullPath();
    init_validator();
    init_AxiosHeaders();
    validators2 = validator_default.validators;
    Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager_default(),
          response: new InterceptorManager_default()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config2) {
        try {
          return await this._request(configOrUrl, config2);
        } catch (err) {
          if (err instanceof Error) {
            let dummy;
            Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e2) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config2) {
        if (typeof configOrUrl === "string") {
          config2 = config2 || {};
          config2.url = configOrUrl;
        } else {
          config2 = configOrUrl || {};
        }
        config2 = mergeConfig(this.defaults, config2);
        const { transitional: transitional2, paramsSerializer, headers } = config2;
        if (transitional2 !== void 0) {
          validator_default.assertOptions(transitional2, {
            silentJSONParsing: validators2.transitional(validators2.boolean),
            forcedJSONParsing: validators2.transitional(validators2.boolean),
            clarifyTimeoutError: validators2.transitional(validators2.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils_default.isFunction(paramsSerializer)) {
            config2.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator_default.assertOptions(paramsSerializer, {
              encode: validators2.function,
              serialize: validators2.function
            }, true);
          }
        }
        config2.method = (config2.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils_default.merge(
          headers.common,
          headers[config2.method]
        );
        headers && utils_default.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config2.headers = AxiosHeaders_default.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config2);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config2;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config2) {
        config2 = mergeConfig(this.defaults, config2);
        const fullPath = buildFullPath(config2.baseURL, config2.url);
        return buildURL(fullPath, config2.params, config2.paramsSerializer);
      }
    };
    utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config2) {
        return this.request(mergeConfig(config2 || {}, {
          method,
          url,
          data: (config2 || {}).data
        }));
      };
    });
    utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config2) {
          return this.request(mergeConfig(config2 || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    Axios_default = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken, CancelToken_default;
var init_CancelToken = __esm({
  "node_modules/axios/lib/cancel/CancelToken.js"() {
    "use strict";
    init_CanceledError();
    CancelToken = class _CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners) return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config2, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError_default(message, config2, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener2) {
        if (this.reason) {
          listener2(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener2);
        } else {
          this._listeners = [listener2];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener2) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener2);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new _CancelToken(function executor(c2) {
          cancel = c2;
        });
        return {
          token,
          cancel
        };
      }
    };
    CancelToken_default = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap2(arr) {
    return callback.apply(null, arr);
  };
}
var init_spread = __esm({
  "node_modules/axios/lib/helpers/spread.js"() {
    "use strict";
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}
var init_isAxiosError = __esm({
  "node_modules/axios/lib/helpers/isAxiosError.js"() {
    "use strict";
    init_utils();
  }
});

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode, HttpStatusCode_default;
var init_HttpStatusCode = __esm({
  "node_modules/axios/lib/helpers/HttpStatusCode.js"() {
    HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    HttpStatusCode_default = HttpStatusCode;
  }
});

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios, axios_default;
var init_axios = __esm({
  "node_modules/axios/lib/axios.js"() {
    "use strict";
    init_utils();
    init_bind();
    init_Axios();
    init_mergeConfig();
    init_defaults();
    init_formDataToJSON();
    init_CanceledError();
    init_CancelToken();
    init_isCancel();
    init_data();
    init_toFormData();
    init_AxiosError();
    init_spread();
    init_isAxiosError();
    init_AxiosHeaders();
    init_adapters();
    init_HttpStatusCode();
    axios = createInstance(defaults_default);
    axios.Axios = Axios_default;
    axios.CanceledError = CanceledError_default;
    axios.CancelToken = CancelToken_default;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData_default;
    axios.AxiosError = AxiosError_default;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders_default;
    axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters_default.getAdapter;
    axios.HttpStatusCode = HttpStatusCode_default;
    axios.default = axios;
    axios_default = axios;
  }
});

// node_modules/axios/index.js
var Axios2, AxiosError2, CanceledError2, isCancel2, CancelToken2, VERSION2, all2, Cancel, isAxiosError2, spread2, toFormData2, AxiosHeaders2, HttpStatusCode2, formToJSON, getAdapter, mergeConfig2;
var init_axios2 = __esm({
  "node_modules/axios/index.js"() {
    init_axios();
    ({
      Axios: Axios2,
      AxiosError: AxiosError2,
      CanceledError: CanceledError2,
      isCancel: isCancel2,
      CancelToken: CancelToken2,
      VERSION: VERSION2,
      all: all2,
      Cancel,
      isAxiosError: isAxiosError2,
      spread: spread2,
      toFormData: toFormData2,
      AxiosHeaders: AxiosHeaders2,
      HttpStatusCode: HttpStatusCode2,
      formToJSON,
      getAdapter,
      mergeConfig: mergeConfig2
    } = axios_default);
  }
});

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React4 = require_react();
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React4.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn2, construct) {
          if (!fn2 || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn2);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn2, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn2.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn2();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                c2--;
              }
              for (; s >= 1 && c2 >= 0; s--, c2--) {
                if (sampleLines[s] !== controlLines[c2]) {
                  if (s !== 1 || c2 !== 1) {
                    do {
                      s--;
                      c2--;
                      if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn2.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn2.displayName);
                        }
                        {
                          if (typeof fn2 === "function") {
                            componentFrameCache.set(fn2, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn2 ? fn2.displayName || fn2.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn2 === "function") {
              componentFrameCache.set(fn2, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn2, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn2, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype3 = Component.prototype;
          return !!(prototype3 && prototype3.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a2) {
          return isArrayImpl(a2);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e2) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config2) {
          {
            if (hasOwnProperty2.call(config2, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          {
            if (hasOwnProperty2.call(config2, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config2, self2) {
          {
            if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type, config2, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key = "" + maybeKey;
            }
            if (hasValidKey(config2)) {
              {
                checkKeyStringCoercion(config2.key);
              }
              key = "" + config2.key;
            }
            if (hasValidRef(config2)) {
              ref = config2.ref;
              warnIfStringRefCannotBeAutoConverted(config2, self2);
            }
            for (propName in config2) {
              if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config2[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object") {
              return;
            }
            if (isArray2(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        var didWarnAboutKeySpread = {};
        function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray2(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            {
              if (hasOwnProperty2.call(props, "key")) {
                var componentName = getComponentNameFromType(type);
                var keys = Object.keys(props).filter(function(k) {
                  return k !== "key";
                });
                var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
                if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                  var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                  error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                  didWarnAboutKeySpread[componentName + beforeExample] = true;
                }
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx14 = jsxWithValidationDynamic;
        var jsxs11 = jsxWithValidationStatic;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.jsx = jsx14;
        exports.jsxs = jsxs11;
      })();
    }
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_jsx_runtime_development();
    }
  }
});

// node_modules/@fortawesome/fontawesome-svg-core/index.mjs
function familyProxy(obj) {
  return new Proxy(obj, {
    get(target, prop) {
      return prop in target ? target[prop] : target[a];
    }
  });
}
function getAttrConfig(attr) {
  var element = DOCUMENT.querySelector("script[" + attr + "]");
  if (element) {
    return element.getAttribute(attr);
  }
}
function coerce(val) {
  if (val === "") return true;
  if (val === "false") return false;
  if (val === "true") return true;
  return val;
}
function onChange(cb) {
  _onChangeCb.push(cb);
  return () => {
    _onChangeCb.splice(_onChangeCb.indexOf(cb), 1);
  };
}
function insertCss(css2) {
  if (!css2 || !IS_DOM) {
    return;
  }
  const style = DOCUMENT.createElement("style");
  style.setAttribute("type", "text/css");
  style.innerHTML = css2;
  const headChildren = DOCUMENT.head.childNodes;
  let beforeChild = null;
  for (let i = headChildren.length - 1; i > -1; i--) {
    const child = headChildren[i];
    const tagName = (child.tagName || "").toUpperCase();
    if (["STYLE", "LINK"].indexOf(tagName) > -1) {
      beforeChild = child;
    }
  }
  DOCUMENT.head.insertBefore(style, beforeChild);
  return css2;
}
function nextUniqueId() {
  let size = 12;
  let id = "";
  while (size-- > 0) {
    id += idPool[Math.random() * 62 | 0];
  }
  return id;
}
function toArray2(obj) {
  const array = [];
  for (let i = (obj || []).length >>> 0; i--; ) {
    array[i] = obj[i];
  }
  return array;
}
function classArray(node) {
  if (node.classList) {
    return toArray2(node.classList);
  } else {
    return (node.getAttribute("class") || "").split(" ").filter((i) => i);
  }
}
function htmlEscape(str) {
  return "".concat(str).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function joinAttributes(attributes) {
  return Object.keys(attributes || {}).reduce((acc, attributeName) => {
    return acc + "".concat(attributeName, '="').concat(htmlEscape(attributes[attributeName]), '" ');
  }, "").trim();
}
function joinStyles(styles2) {
  return Object.keys(styles2 || {}).reduce((acc, styleName) => {
    return acc + "".concat(styleName, ": ").concat(styles2[styleName].trim(), ";");
  }, "");
}
function transformIsMeaningful(transform) {
  return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;
}
function transformForSvg(_ref) {
  let {
    transform,
    containerWidth,
    iconWidth
  } = _ref;
  const outer = {
    transform: "translate(".concat(containerWidth / 2, " 256)")
  };
  const innerTranslate = "translate(".concat(transform.x * 32, ", ").concat(transform.y * 32, ") ");
  const innerScale = "scale(".concat(transform.size / 16 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / 16 * (transform.flipY ? -1 : 1), ") ");
  const innerRotate = "rotate(".concat(transform.rotate, " 0 0)");
  const inner = {
    transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
  };
  const path = {
    transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
  };
  return {
    outer,
    inner,
    path
  };
}
function transformForCss(_ref2) {
  let {
    transform,
    width = UNITS_IN_GRID,
    height = UNITS_IN_GRID,
    startCentered = false
  } = _ref2;
  let val = "";
  if (startCentered && IS_IE) {
    val += "translate(".concat(transform.x / d$2 - width / 2, "em, ").concat(transform.y / d$2 - height / 2, "em) ");
  } else if (startCentered) {
    val += "translate(calc(-50% + ".concat(transform.x / d$2, "em), calc(-50% + ").concat(transform.y / d$2, "em)) ");
  } else {
    val += "translate(".concat(transform.x / d$2, "em, ").concat(transform.y / d$2, "em) ");
  }
  val += "scale(".concat(transform.size / d$2 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / d$2 * (transform.flipY ? -1 : 1), ") ");
  val += "rotate(".concat(transform.rotate, "deg) ");
  return val;
}
function css() {
  const dcp = DEFAULT_CSS_PREFIX;
  const drc = DEFAULT_REPLACEMENT_CLASS;
  const fp = config.cssPrefix;
  const rc = config.replacementClass;
  let s = baseStyles;
  if (fp !== dcp || rc !== drc) {
    const dPatt = new RegExp("\\.".concat(dcp, "\\-"), "g");
    const customPropPatt = new RegExp("\\--".concat(dcp, "\\-"), "g");
    const rPatt = new RegExp("\\.".concat(drc), "g");
    s = s.replace(dPatt, ".".concat(fp, "-")).replace(customPropPatt, "--".concat(fp, "-")).replace(rPatt, ".".concat(rc));
  }
  return s;
}
function ensureCss() {
  if (config.autoAddCss && !_cssInserted) {
    insertCss(css());
    _cssInserted = true;
  }
}
function domready(fn2) {
  if (!IS_DOM) return;
  loaded ? setTimeout(fn2, 0) : functions.push(fn2);
}
function toHtml(abstractNodes) {
  const {
    tag,
    attributes = {},
    children = []
  } = abstractNodes;
  if (typeof abstractNodes === "string") {
    return htmlEscape(abstractNodes);
  } else {
    return "<".concat(tag, " ").concat(joinAttributes(attributes), ">").concat(children.map(toHtml).join(""), "</").concat(tag, ">");
  }
}
function iconFromMapping(mapping, prefix, iconName) {
  if (mapping && mapping[prefix] && mapping[prefix][iconName]) {
    return {
      prefix,
      iconName,
      icon: mapping[prefix][iconName]
    };
  }
}
function ucs2decode(string) {
  const output = [];
  let counter2 = 0;
  const length = string.length;
  while (counter2 < length) {
    const value = string.charCodeAt(counter2++);
    if (value >= 55296 && value <= 56319 && counter2 < length) {
      const extra = string.charCodeAt(counter2++);
      if ((extra & 64512) == 56320) {
        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
      } else {
        output.push(value);
        counter2--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}
function toHex(unicode) {
  const decoded = ucs2decode(unicode);
  return decoded.length === 1 ? decoded[0].toString(16) : null;
}
function codePointAt(string, index) {
  const size = string.length;
  let first = string.charCodeAt(index);
  let second;
  if (first >= 55296 && first <= 56319 && size > index + 1) {
    second = string.charCodeAt(index + 1);
    if (second >= 56320 && second <= 57343) {
      return (first - 55296) * 1024 + second - 56320 + 65536;
    }
  }
  return first;
}
function normalizeIcons(icons) {
  return Object.keys(icons).reduce((acc, iconName) => {
    const icon2 = icons[iconName];
    const expanded = !!icon2.icon;
    if (expanded) {
      acc[icon2.iconName] = icon2.icon;
    } else {
      acc[iconName] = icon2;
    }
    return acc;
  }, {});
}
function defineIcons(prefix, icons) {
  let params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  const {
    skipHooks = false
  } = params;
  const normalized = normalizeIcons(icons);
  if (typeof namespace.hooks.addPack === "function" && !skipHooks) {
    namespace.hooks.addPack(prefix, normalizeIcons(icons));
  } else {
    namespace.styles[prefix] = {
      ...namespace.styles[prefix] || {},
      ...normalized
    };
  }
  if (prefix === "fas") {
    defineIcons("fa", icons);
  }
}
function isReserved(name) {
  return ~RESERVED_CLASSES.indexOf(name);
}
function getIconName(cssPrefix, cls) {
  const parts = cls.split("-");
  const prefix = parts[0];
  const iconName = parts.slice(1).join("-");
  if (prefix === cssPrefix && iconName !== "" && !isReserved(iconName)) {
    return iconName;
  } else {
    return null;
  }
}
function byUnicode(prefix, unicode) {
  return (_byUnicode[prefix] || {})[unicode];
}
function byLigature(prefix, ligature) {
  return (_byLigature[prefix] || {})[ligature];
}
function byAlias(prefix, alias) {
  return (_byAlias[prefix] || {})[alias];
}
function byOldName(name) {
  return _byOldName[name] || {
    prefix: null,
    iconName: null
  };
}
function byOldUnicode(unicode) {
  const oldUnicode = _byOldUnicode[unicode];
  const newUnicode = byUnicode("fas", unicode);
  return oldUnicode || (newUnicode ? {
    prefix: "fas",
    iconName: newUnicode
  } : null) || {
    prefix: null,
    iconName: null
  };
}
function getDefaultUsablePrefix() {
  return _defaultUsablePrefix;
}
function getCanonicalPrefix(styleOrPrefix) {
  let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const {
    family = a
  } = params;
  const style = PREFIX_TO_STYLE[family][styleOrPrefix];
  const prefix = STYLE_TO_PREFIX[family][styleOrPrefix] || STYLE_TO_PREFIX[family][style];
  const defined = styleOrPrefix in namespace.styles ? styleOrPrefix : null;
  const result = prefix || defined || null;
  return result;
}
function getCanonicalIcon(values) {
  let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const {
    skipLookups = false
  } = params;
  const famProps = {
    [a]: "".concat(config.cssPrefix, "-").concat(a),
    [r]: "".concat(config.cssPrefix, "-").concat(r),
    [o]: "".concat(config.cssPrefix, "-").concat(o)
  };
  let givenPrefix = null;
  let family = a;
  const nonDuotoneFamilyIds = c.filter((familyId) => familyId !== t);
  nonDuotoneFamilyIds.forEach((familyId) => {
    if (values.includes(famProps[familyId]) || values.some((v$$1) => PREFIXES_FOR_FAMILY[familyId].includes(v$$1))) {
      family = familyId;
    }
  });
  const canonical = values.reduce((acc, cls) => {
    const iconName = getIconName(config.cssPrefix, cls);
    if (styles[cls]) {
      cls = LONG_STYLE[family].includes(cls) ? LONG_STYLE_TO_PREFIX[family][cls] : cls;
      givenPrefix = cls;
      acc.prefix = cls;
    } else if (PREFIXES[family].indexOf(cls) > -1) {
      givenPrefix = cls;
      acc.prefix = getCanonicalPrefix(cls, {
        family
      });
    } else if (iconName) {
      acc.iconName = iconName;
    } else if (cls !== config.replacementClass && !nonDuotoneFamilyIds.some((familyName) => cls === famProps[familyName])) {
      acc.rest.push(cls);
    }
    if (!skipLookups && acc.prefix && acc.iconName) {
      const shim = givenPrefix === "fa" ? byOldName(acc.iconName) : {};
      const aliasIconName = byAlias(acc.prefix, acc.iconName);
      if (shim.prefix) {
        givenPrefix = null;
      }
      acc.iconName = shim.iconName || aliasIconName || acc.iconName;
      acc.prefix = shim.prefix || acc.prefix;
      if (acc.prefix === "far" && !styles["far"] && styles["fas"] && !config.autoFetchSvg) {
        acc.prefix = "fas";
      }
    }
    return acc;
  }, emptyCanonicalIcon());
  if (values.includes("fa-brands") || values.includes("fab")) {
    canonical.prefix = "fab";
  }
  if (values.includes("fa-duotone") || values.includes("fad")) {
    canonical.prefix = "fad";
  }
  if (!canonical.prefix && family === r && (styles["fass"] || config.autoFetchSvg)) {
    canonical.prefix = "fass";
    canonical.iconName = byAlias(canonical.prefix, canonical.iconName) || canonical.iconName;
  }
  if (!canonical.prefix && family === o && (styles["fasds"] || config.autoFetchSvg)) {
    canonical.prefix = "fasds";
    canonical.iconName = byAlias(canonical.prefix, canonical.iconName) || canonical.iconName;
  }
  if (canonical.prefix === "fa" || givenPrefix === "fa") {
    canonical.prefix = getDefaultUsablePrefix() || "fas";
  }
  return canonical;
}
function registerPlugins(nextPlugins, _ref) {
  let {
    mixoutsTo: obj
  } = _ref;
  _plugins = nextPlugins;
  _hooks = {};
  Object.keys(providers).forEach((k) => {
    if (defaultProviderKeys.indexOf(k) === -1) {
      delete providers[k];
    }
  });
  _plugins.forEach((plugin) => {
    const mixout = plugin.mixout ? plugin.mixout() : {};
    Object.keys(mixout).forEach((tk) => {
      if (typeof mixout[tk] === "function") {
        obj[tk] = mixout[tk];
      }
      if (typeof mixout[tk] === "object") {
        Object.keys(mixout[tk]).forEach((sk) => {
          if (!obj[tk]) {
            obj[tk] = {};
          }
          obj[tk][sk] = mixout[tk][sk];
        });
      }
    });
    if (plugin.hooks) {
      const hooks = plugin.hooks();
      Object.keys(hooks).forEach((hook) => {
        if (!_hooks[hook]) {
          _hooks[hook] = [];
        }
        _hooks[hook].push(hooks[hook]);
      });
    }
    if (plugin.provides) {
      plugin.provides(providers);
    }
  });
  return obj;
}
function chainHooks(hook, accumulator) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }
  const hookFns = _hooks[hook] || [];
  hookFns.forEach((hookFn) => {
    accumulator = hookFn.apply(null, [accumulator, ...args]);
  });
  return accumulator;
}
function callHooks(hook) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }
  const hookFns = _hooks[hook] || [];
  hookFns.forEach((hookFn) => {
    hookFn.apply(null, args);
  });
  return void 0;
}
function callProvided() {
  const hook = arguments[0];
  const args = Array.prototype.slice.call(arguments, 1);
  return providers[hook] ? providers[hook].apply(null, args) : void 0;
}
function findIconDefinition(iconLookup) {
  if (iconLookup.prefix === "fa") {
    iconLookup.prefix = "fas";
  }
  let {
    iconName
  } = iconLookup;
  const prefix = iconLookup.prefix || getDefaultUsablePrefix();
  if (!iconName) return;
  iconName = byAlias(prefix, iconName) || iconName;
  return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);
}
function domVariants(val, abstractCreator) {
  Object.defineProperty(val, "abstract", {
    get: abstractCreator
  });
  Object.defineProperty(val, "html", {
    get: function() {
      return val.abstract.map((a2) => toHtml(a2));
    }
  });
  Object.defineProperty(val, "node", {
    get: function() {
      if (!IS_DOM) return;
      const container = DOCUMENT.createElement("div");
      container.innerHTML = val.html;
      return container.children;
    }
  });
  return val;
}
function asIcon(_ref) {
  let {
    children,
    main,
    mask,
    attributes,
    styles: styles2,
    transform
  } = _ref;
  if (transformIsMeaningful(transform) && main.found && !mask.found) {
    const {
      width,
      height
    } = main;
    const offset = {
      x: width / height / 2,
      y: 0.5
    };
    attributes["style"] = joinStyles({
      ...styles2,
      "transform-origin": "".concat(offset.x + transform.x / 16, "em ").concat(offset.y + transform.y / 16, "em")
    });
  }
  return [{
    tag: "svg",
    attributes,
    children
  }];
}
function asSymbol(_ref) {
  let {
    prefix,
    iconName,
    children,
    attributes,
    symbol
  } = _ref;
  const id = symbol === true ? "".concat(prefix, "-").concat(config.cssPrefix, "-").concat(iconName) : symbol;
  return [{
    tag: "svg",
    attributes: {
      style: "display: none;"
    },
    children: [{
      tag: "symbol",
      attributes: {
        ...attributes,
        id
      },
      children
    }]
  }];
}
function makeInlineSvgAbstract(params) {
  const {
    icons: {
      main,
      mask
    },
    prefix,
    iconName,
    transform,
    symbol,
    title,
    maskId,
    titleId,
    extra,
    watchable = false
  } = params;
  const {
    width,
    height
  } = mask.found ? mask : main;
  const isUploadedIcon = prefix === "fak";
  const attrClass = [config.replacementClass, iconName ? "".concat(config.cssPrefix, "-").concat(iconName) : ""].filter((c2) => extra.classes.indexOf(c2) === -1).filter((c2) => c2 !== "" || !!c2).concat(extra.classes).join(" ");
  let content = {
    children: [],
    attributes: {
      ...extra.attributes,
      "data-prefix": prefix,
      "data-icon": iconName,
      "class": attrClass,
      "role": extra.attributes.role || "img",
      "xmlns": "http://www.w3.org/2000/svg",
      "viewBox": "0 0 ".concat(width, " ").concat(height)
    }
  };
  const uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf("fa-fw") ? {
    width: "".concat(width / height * 16 * 0.0625, "em")
  } : {};
  if (watchable) {
    content.attributes[DATA_FA_I2SVG] = "";
  }
  if (title) {
    content.children.push({
      tag: "title",
      attributes: {
        id: content.attributes["aria-labelledby"] || "title-".concat(titleId || nextUniqueId())
      },
      children: [title]
    });
    delete content.attributes.title;
  }
  const args = {
    ...content,
    prefix,
    iconName,
    main,
    mask,
    maskId,
    transform,
    symbol,
    styles: {
      ...uploadedIconWidthStyle,
      ...extra.styles
    }
  };
  const {
    children,
    attributes
  } = mask.found && main.found ? callProvided("generateAbstractMask", args) || {
    children: [],
    attributes: {}
  } : callProvided("generateAbstractIcon", args) || {
    children: [],
    attributes: {}
  };
  args.children = children;
  args.attributes = attributes;
  if (symbol) {
    return asSymbol(args);
  } else {
    return asIcon(args);
  }
}
function makeLayersTextAbstract(params) {
  const {
    content,
    width,
    height,
    transform,
    title,
    extra,
    watchable = false
  } = params;
  const attributes = {
    ...extra.attributes,
    ...title ? {
      "title": title
    } : {},
    "class": extra.classes.join(" ")
  };
  if (watchable) {
    attributes[DATA_FA_I2SVG] = "";
  }
  const styles2 = {
    ...extra.styles
  };
  if (transformIsMeaningful(transform)) {
    styles2["transform"] = transformForCss({
      transform,
      startCentered: true,
      width,
      height
    });
    styles2["-webkit-transform"] = styles2["transform"];
  }
  const styleString = joinStyles(styles2);
  if (styleString.length > 0) {
    attributes["style"] = styleString;
  }
  const val = [];
  val.push({
    tag: "span",
    attributes,
    children: [content]
  });
  if (title) {
    val.push({
      tag: "span",
      attributes: {
        class: "sr-only"
      },
      children: [title]
    });
  }
  return val;
}
function makeLayersCounterAbstract(params) {
  const {
    content,
    title,
    extra
  } = params;
  const attributes = {
    ...extra.attributes,
    ...title ? {
      "title": title
    } : {},
    "class": extra.classes.join(" ")
  };
  const styleString = joinStyles(extra.styles);
  if (styleString.length > 0) {
    attributes["style"] = styleString;
  }
  const val = [];
  val.push({
    tag: "span",
    attributes,
    children: [content]
  });
  if (title) {
    val.push({
      tag: "span",
      attributes: {
        class: "sr-only"
      },
      children: [title]
    });
  }
  return val;
}
function asFoundIcon(icon2) {
  const width = icon2[0];
  const height = icon2[1];
  const [vectorData] = icon2.slice(4);
  let element = null;
  if (Array.isArray(vectorData)) {
    element = {
      tag: "g",
      attributes: {
        class: "".concat(config.cssPrefix, "-").concat(DUOTONE_CLASSES.GROUP)
      },
      children: [{
        tag: "path",
        attributes: {
          class: "".concat(config.cssPrefix, "-").concat(DUOTONE_CLASSES.SECONDARY),
          fill: "currentColor",
          d: vectorData[0]
        }
      }, {
        tag: "path",
        attributes: {
          class: "".concat(config.cssPrefix, "-").concat(DUOTONE_CLASSES.PRIMARY),
          fill: "currentColor",
          d: vectorData[1]
        }
      }]
    };
  } else {
    element = {
      tag: "path",
      attributes: {
        fill: "currentColor",
        d: vectorData
      }
    };
  }
  return {
    found: true,
    width,
    height,
    icon: element
  };
}
function maybeNotifyMissing(iconName, prefix) {
  if (!PRODUCTION && !config.showMissingIcons && iconName) {
    console.error('Icon with name "'.concat(iconName, '" and prefix "').concat(prefix, '" is missing.'));
  }
}
function findIcon(iconName, prefix) {
  let givenPrefix = prefix;
  if (prefix === "fa" && config.styleDefault !== null) {
    prefix = getDefaultUsablePrefix();
  }
  return new Promise((resolve, reject) => {
    if (givenPrefix === "fa") {
      const shim = byOldName(iconName) || {};
      iconName = shim.iconName || iconName;
      prefix = shim.prefix || prefix;
    }
    if (iconName && prefix && styles$1[prefix] && styles$1[prefix][iconName]) {
      const icon2 = styles$1[prefix][iconName];
      return resolve(asFoundIcon(icon2));
    }
    maybeNotifyMissing(iconName, prefix);
    resolve({
      ...missingIconResolutionMixin,
      icon: config.showMissingIcons && iconName ? callProvided("missingIconAbstract") || {} : {}
    });
  });
}
function isWatched(node) {
  const i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;
  return typeof i2svg === "string";
}
function hasPrefixAndIcon(node) {
  const prefix = node.getAttribute ? node.getAttribute(DATA_PREFIX) : null;
  const icon2 = node.getAttribute ? node.getAttribute(DATA_ICON) : null;
  return prefix && icon2;
}
function hasBeenReplaced(node) {
  return node && node.classList && node.classList.contains && node.classList.contains(config.replacementClass);
}
function getMutator() {
  if (config.autoReplaceSvg === true) {
    return mutators.replace;
  }
  const mutator = mutators[config.autoReplaceSvg];
  return mutator || mutators.replace;
}
function createElementNS(tag) {
  return DOCUMENT.createElementNS("http://www.w3.org/2000/svg", tag);
}
function createElement(tag) {
  return DOCUMENT.createElement(tag);
}
function convertSVG(abstractObj) {
  let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const {
    ceFn = abstractObj.tag === "svg" ? createElementNS : createElement
  } = params;
  if (typeof abstractObj === "string") {
    return DOCUMENT.createTextNode(abstractObj);
  }
  const tag = ceFn(abstractObj.tag);
  Object.keys(abstractObj.attributes || []).forEach(function(key) {
    tag.setAttribute(key, abstractObj.attributes[key]);
  });
  const children = abstractObj.children || [];
  children.forEach(function(child) {
    tag.appendChild(convertSVG(child, {
      ceFn
    }));
  });
  return tag;
}
function nodeAsComment(node) {
  let comment = " ".concat(node.outerHTML, " ");
  comment = "".concat(comment, "Font Awesome fontawesome.com ");
  return comment;
}
function performOperationSync(op) {
  op();
}
function perform(mutations, callback) {
  const callbackFunction = typeof callback === "function" ? callback : noop$2;
  if (mutations.length === 0) {
    callbackFunction();
  } else {
    let frame = performOperationSync;
    if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {
      frame = WINDOW.requestAnimationFrame || performOperationSync;
    }
    frame(() => {
      const mutator = getMutator();
      const mark = perf.begin("mutate");
      mutations.map(mutator);
      mark();
      callbackFunction();
    });
  }
}
function disableObservation() {
  disabled = true;
}
function enableObservation() {
  disabled = false;
}
function observe(options) {
  if (!MUTATION_OBSERVER) {
    return;
  }
  if (!config.observeMutations) {
    return;
  }
  const {
    treeCallback = noop$2,
    nodeCallback = noop$2,
    pseudoElementsCallback = noop$2,
    observeMutationsRoot = DOCUMENT
  } = options;
  mo$1 = new MUTATION_OBSERVER((objects) => {
    if (disabled) return;
    const defaultPrefix = getDefaultUsablePrefix();
    toArray2(objects).forEach((mutationRecord) => {
      if (mutationRecord.type === "childList" && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {
        if (config.searchPseudoElements) {
          pseudoElementsCallback(mutationRecord.target);
        }
        treeCallback(mutationRecord.target);
      }
      if (mutationRecord.type === "attributes" && mutationRecord.target.parentNode && config.searchPseudoElements) {
        pseudoElementsCallback(mutationRecord.target.parentNode);
      }
      if (mutationRecord.type === "attributes" && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {
        if (mutationRecord.attributeName === "class" && hasPrefixAndIcon(mutationRecord.target)) {
          const {
            prefix,
            iconName
          } = getCanonicalIcon(classArray(mutationRecord.target));
          mutationRecord.target.setAttribute(DATA_PREFIX, prefix || defaultPrefix);
          if (iconName) mutationRecord.target.setAttribute(DATA_ICON, iconName);
        } else if (hasBeenReplaced(mutationRecord.target)) {
          nodeCallback(mutationRecord.target);
        }
      }
    });
  });
  if (!IS_DOM) return;
  mo$1.observe(observeMutationsRoot, {
    childList: true,
    attributes: true,
    characterData: true,
    subtree: true
  });
}
function disconnect() {
  if (!mo$1) return;
  mo$1.disconnect();
}
function styleParser(node) {
  const style = node.getAttribute("style");
  let val = [];
  if (style) {
    val = style.split(";").reduce((acc, style2) => {
      const styles2 = style2.split(":");
      const prop = styles2[0];
      const value = styles2.slice(1);
      if (prop && value.length > 0) {
        acc[prop] = value.join(":").trim();
      }
      return acc;
    }, {});
  }
  return val;
}
function classParser(node) {
  const existingPrefix = node.getAttribute("data-prefix");
  const existingIconName = node.getAttribute("data-icon");
  const innerText = node.innerText !== void 0 ? node.innerText.trim() : "";
  let val = getCanonicalIcon(classArray(node));
  if (!val.prefix) {
    val.prefix = getDefaultUsablePrefix();
  }
  if (existingPrefix && existingIconName) {
    val.prefix = existingPrefix;
    val.iconName = existingIconName;
  }
  if (val.iconName && val.prefix) {
    return val;
  }
  if (val.prefix && innerText.length > 0) {
    val.iconName = byLigature(val.prefix, node.innerText) || byUnicode(val.prefix, toHex(node.innerText));
  }
  if (!val.iconName && config.autoFetchSvg && node.firstChild && node.firstChild.nodeType === Node.TEXT_NODE) {
    val.iconName = node.firstChild.data;
  }
  return val;
}
function attributesParser(node) {
  const extraAttributes = toArray2(node.attributes).reduce((acc, attr) => {
    if (acc.name !== "class" && acc.name !== "style") {
      acc[attr.name] = attr.value;
    }
    return acc;
  }, {});
  const title = node.getAttribute("title");
  const titleId = node.getAttribute("data-fa-title-id");
  if (config.autoA11y) {
    if (title) {
      extraAttributes["aria-labelledby"] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
    } else {
      extraAttributes["aria-hidden"] = "true";
      extraAttributes["focusable"] = "false";
    }
  }
  return extraAttributes;
}
function blankMeta() {
  return {
    iconName: null,
    title: null,
    titleId: null,
    prefix: null,
    transform: meaninglessTransform,
    symbol: false,
    mask: {
      iconName: null,
      prefix: null,
      rest: []
    },
    maskId: null,
    extra: {
      classes: [],
      styles: {},
      attributes: {}
    }
  };
}
function parseMeta(node) {
  let parser = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
    styleParser: true
  };
  const {
    iconName,
    prefix,
    rest: extraClasses
  } = classParser(node);
  const extraAttributes = attributesParser(node);
  const pluginMeta = chainHooks("parseNodeAttributes", {}, node);
  let extraStyles = parser.styleParser ? styleParser(node) : [];
  return {
    iconName,
    title: node.getAttribute("title"),
    titleId: node.getAttribute("data-fa-title-id"),
    prefix,
    transform: meaninglessTransform,
    mask: {
      iconName: null,
      prefix: null,
      rest: []
    },
    maskId: null,
    symbol: false,
    extra: {
      classes: extraClasses,
      styles: extraStyles,
      attributes: extraAttributes
    },
    ...pluginMeta
  };
}
function generateMutation(node) {
  const nodeMeta = config.autoReplaceSvg === "nest" ? parseMeta(node, {
    styleParser: false
  }) : parseMeta(node);
  if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {
    return callProvided("generateLayersText", node, nodeMeta);
  } else {
    return callProvided("generateSvgReplacementMutation", node, nodeMeta);
  }
}
function onTree(root) {
  let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
  if (!IS_DOM) return Promise.resolve();
  const htmlClassList = DOCUMENT.documentElement.classList;
  const hclAdd = (suffix) => htmlClassList.add("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
  const hclRemove = (suffix) => htmlClassList.remove("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
  const prefixes2 = config.autoFetchSvg ? knownPrefixes : FAMILIES.map((f$$1) => "fa-".concat(f$$1)).concat(Object.keys(styles$2));
  if (!prefixes2.includes("fa")) {
    prefixes2.push("fa");
  }
  const prefixesDomQuery = [".".concat(LAYERS_TEXT_CLASSNAME, ":not([").concat(DATA_FA_I2SVG, "])")].concat(prefixes2.map((p$$1) => ".".concat(p$$1, ":not([").concat(DATA_FA_I2SVG, "])"))).join(", ");
  if (prefixesDomQuery.length === 0) {
    return Promise.resolve();
  }
  let candidates = [];
  try {
    candidates = toArray2(root.querySelectorAll(prefixesDomQuery));
  } catch (e$$1) {
  }
  if (candidates.length > 0) {
    hclAdd("pending");
    hclRemove("complete");
  } else {
    return Promise.resolve();
  }
  const mark = perf.begin("onTree");
  const mutations = candidates.reduce((acc, node) => {
    try {
      const mutation = generateMutation(node);
      if (mutation) {
        acc.push(mutation);
      }
    } catch (e$$1) {
      if (!PRODUCTION) {
        if (e$$1.name === "MissingIcon") {
          console.error(e$$1);
        }
      }
    }
    return acc;
  }, []);
  return new Promise((resolve, reject) => {
    Promise.all(mutations).then((resolvedMutations) => {
      perform(resolvedMutations, () => {
        hclAdd("active");
        hclAdd("complete");
        hclRemove("pending");
        if (typeof callback === "function") callback();
        mark();
        resolve();
      });
    }).catch((e$$1) => {
      mark();
      reject(e$$1);
    });
  });
}
function onNode(node) {
  let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
  generateMutation(node).then((mutation) => {
    if (mutation) {
      perform([mutation], callback);
    }
  });
}
function resolveIcons(next) {
  return function(maybeIconDefinition) {
    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});
    let {
      mask
    } = params;
    if (mask) {
      mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});
    }
    return next(iconDefinition, {
      ...params,
      mask
    });
  };
}
function hexValueFromContent(content) {
  const cleaned = content.replace(CLEAN_CONTENT_PATTERN, "");
  const codePoint = codePointAt(cleaned, 0);
  const isPrependTen = codePoint >= SECONDARY_UNICODE_RANGE[0] && codePoint <= SECONDARY_UNICODE_RANGE[1];
  const isDoubled = cleaned.length === 2 ? cleaned[0] === cleaned[1] : false;
  return {
    value: isDoubled ? toHex(cleaned[0]) : toHex(cleaned),
    isSecondary: isPrependTen || isDoubled
  };
}
function getPrefix(fontFamily, fontWeight) {
  const fontFamilySanitized = fontFamily.replace(/^['"]|['"]$/g, "").toLowerCase();
  const fontWeightInteger = parseInt(fontWeight);
  const fontWeightSanitized = isNaN(fontWeightInteger) ? "normal" : fontWeightInteger;
  return (FONT_FAMILY_WEIGHT_TO_PREFIX[fontFamilySanitized] || {})[fontWeightSanitized] || FONT_FAMILY_WEIGHT_FALLBACK[fontFamilySanitized];
}
function replaceForPosition(node, position) {
  const pendingAttribute = "".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(":", "-"));
  return new Promise((resolve, reject) => {
    if (node.getAttribute(pendingAttribute) !== null) {
      return resolve();
    }
    const children = toArray2(node.children);
    const alreadyProcessedPseudoElement = children.filter((c2) => c2.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position)[0];
    const styles2 = WINDOW.getComputedStyle(node, position);
    const fontFamily = styles2.getPropertyValue("font-family");
    const fontFamilyMatch = fontFamily.match(FONT_FAMILY_PATTERN);
    const fontWeight = styles2.getPropertyValue("font-weight");
    const content = styles2.getPropertyValue("content");
    if (alreadyProcessedPseudoElement && !fontFamilyMatch) {
      node.removeChild(alreadyProcessedPseudoElement);
      return resolve();
    } else if (fontFamilyMatch && content !== "none" && content !== "") {
      const content2 = styles2.getPropertyValue("content");
      let prefix = getPrefix(fontFamily, fontWeight);
      const {
        value: hexValue,
        isSecondary
      } = hexValueFromContent(content2);
      const isV4 = fontFamilyMatch[0].startsWith("FontAwesome");
      let iconName = byUnicode(prefix, hexValue);
      let iconIdentifier = iconName;
      if (isV4) {
        const iconName4 = byOldUnicode(hexValue);
        if (iconName4.iconName && iconName4.prefix) {
          iconName = iconName4.iconName;
          prefix = iconName4.prefix;
        }
      }
      if (iconName && !isSecondary && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {
        node.setAttribute(pendingAttribute, iconIdentifier);
        if (alreadyProcessedPseudoElement) {
          node.removeChild(alreadyProcessedPseudoElement);
        }
        const meta = blankMeta();
        const {
          extra
        } = meta;
        extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;
        findIcon(iconName, prefix).then((main) => {
          const abstract = makeInlineSvgAbstract({
            ...meta,
            icons: {
              main,
              mask: emptyCanonicalIcon()
            },
            prefix,
            iconName: iconIdentifier,
            extra,
            watchable: true
          });
          const element = DOCUMENT.createElementNS("http://www.w3.org/2000/svg", "svg");
          if (position === "::before") {
            node.insertBefore(element, node.firstChild);
          } else {
            node.appendChild(element);
          }
          element.outerHTML = abstract.map((a2) => toHtml(a2)).join("\n");
          node.removeAttribute(pendingAttribute);
          resolve();
        }).catch(reject);
      } else {
        resolve();
      }
    } else {
      resolve();
    }
  });
}
function replace(node) {
  return Promise.all([replaceForPosition(node, "::before"), replaceForPosition(node, "::after")]);
}
function processable(node) {
  return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== "svg");
}
function searchPseudoElements(root) {
  if (!IS_DOM) return;
  return new Promise((resolve, reject) => {
    const operations = toArray2(root.querySelectorAll("*")).filter(processable).map(replace);
    const end2 = perf.begin("searchPseudoElements");
    disableObservation();
    Promise.all(operations).then(() => {
      end2();
      enableObservation();
      resolve();
    }).catch(() => {
      end2();
      enableObservation();
      reject();
    });
  });
}
function fillBlack(abstract) {
  let force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  if (abstract.attributes && (abstract.attributes.fill || force)) {
    abstract.attributes.fill = "black";
  }
  return abstract;
}
function deGroup(abstract) {
  if (abstract.tag === "g") {
    return abstract.children;
  } else {
    return [abstract];
  }
}
var noop2, _WINDOW, _DOCUMENT, _MUTATION_OBSERVER, _PERFORMANCE, userAgent, WINDOW, DOCUMENT, MUTATION_OBSERVER, PERFORMANCE, IS_BROWSER, IS_DOM, IS_IE, a, t, r, o, c, et$1, bt, Ct, Dt, Kt, ao, eo, lo, y, no, fo, ho, x$1, u$1, m$1, t$1, yo, mo, Io, Fo, So, NAMESPACE_IDENTIFIER, UNITS_IN_GRID, DEFAULT_CSS_PREFIX, DEFAULT_REPLACEMENT_CLASS, DATA_FA_I2SVG, DATA_FA_PSEUDO_ELEMENT, DATA_FA_PSEUDO_ELEMENT_PENDING, DATA_PREFIX, DATA_ICON, HTML_CLASS_I2SVG_BASE_CLASS, MUTATION_APPROACH_ASYNC, TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS, PRODUCTION, FAMILIES, _PREFIX_TO_STYLE, PREFIX_TO_STYLE, _STYLE_TO_PREFIX, STYLE_TO_PREFIX, _PREFIX_TO_LONG_STYLE, PREFIX_TO_LONG_STYLE, _LONG_STYLE_TO_PREFIX, LONG_STYLE_TO_PREFIX, ICON_SELECTION_SYNTAX_PATTERN, LAYERS_TEXT_CLASSNAME, FONT_FAMILY_PATTERN, _FONT_WEIGHT_TO_PREFIX, FONT_WEIGHT_TO_PREFIX, ATTRIBUTES_WATCHED_FOR_MUTATION, DUOTONE_CLASSES, prefixes, RESERVED_CLASSES, initial, _default, _config, config, _onChangeCb, d$2, meaninglessTransform, idPool, baseStyles, _cssInserted, InjectCSS, w$1, namespace, functions, listener, loaded, bindInternal4, reduce, styles, shims, LONG_STYLE, _defaultUsablePrefix, _byUnicode, _byLigature, _byOldName, _byOldUnicode, _byAlias, PREFIXES, build, emptyCanonicalIcon, PREFIXES_FOR_FAMILY, Library, _plugins, _hooks, providers, defaultProviderKeys, library, noAuto, dom, parse, api, autoReplace, styles$1, missingIconResolutionMixin, noop$1, p$2, preamble, begin, end, perf, noop$2, mutators, disabled, mo$1, styles$2, knownPrefixes, render, ReplaceElements, Layers, LayersCounter, LayersText, CLEAN_CONTENT_PATTERN, SECONDARY_UNICODE_RANGE, _FONT_FAMILY_WEIGHT_TO_PREFIX, FONT_FAMILY_WEIGHT_TO_PREFIX, FONT_FAMILY_WEIGHT_FALLBACK, PseudoElements, _unwatched, MutationObserver$1, parseTransformString, PowerTransforms, ALL_SPACE, Masks, MissingIconIndicator, SvgSymbols, plugins, noAuto$1, config$1, library$1, dom$1, parse$1, findIconDefinition$1, toHtml$1, icon, layer, text, counter;
var init_fontawesome_svg_core = __esm({
  "node_modules/@fortawesome/fontawesome-svg-core/index.mjs"() {
    noop2 = () => {
    };
    _WINDOW = {};
    _DOCUMENT = {};
    _MUTATION_OBSERVER = null;
    _PERFORMANCE = {
      mark: noop2,
      measure: noop2
    };
    try {
      if (typeof window !== "undefined") _WINDOW = window;
      if (typeof document !== "undefined") _DOCUMENT = document;
      if (typeof MutationObserver !== "undefined") _MUTATION_OBSERVER = MutationObserver;
      if (typeof performance !== "undefined") _PERFORMANCE = performance;
    } catch (e2) {
    }
    ({
      userAgent = ""
    } = _WINDOW.navigator || {});
    WINDOW = _WINDOW;
    DOCUMENT = _DOCUMENT;
    MUTATION_OBSERVER = _MUTATION_OBSERVER;
    PERFORMANCE = _PERFORMANCE;
    IS_BROWSER = !!WINDOW.document;
    IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === "function" && typeof DOCUMENT.createElement === "function";
    IS_IE = ~userAgent.indexOf("MSIE") || ~userAgent.indexOf("Trident/");
    a = "classic";
    t = "duotone";
    r = "sharp";
    o = "sharp-duotone";
    c = [a, t, r, o];
    et$1 = {
      classic: {
        900: "fas",
        400: "far",
        normal: "far",
        300: "fal",
        100: "fat"
      },
      sharp: {
        900: "fass",
        400: "fasr",
        300: "fasl",
        100: "fast"
      },
      "sharp-duotone": {
        900: "fasds"
      }
    };
    bt = {
      kit: {
        fak: "kit",
        "fa-kit": "kit"
      },
      "kit-duotone": {
        fakd: "kit-duotone",
        "fa-kit-duotone": "kit-duotone"
      }
    };
    Ct = ["kit"];
    Dt = /fa(s|r|l|t|d|b|k|kd|ss|sr|sl|st|sds)?[\-\ ]/;
    Kt = /Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp Duotone|Sharp|Kit)?.*/i;
    ao = {
      "Font Awesome 5 Free": {
        900: "fas",
        400: "far"
      },
      "Font Awesome 5 Pro": {
        900: "fas",
        400: "far",
        normal: "far",
        300: "fal"
      },
      "Font Awesome 5 Brands": {
        400: "fab",
        normal: "fab"
      },
      "Font Awesome 5 Duotone": {
        900: "fad"
      }
    };
    eo = {
      "Font Awesome 6 Free": {
        900: "fas",
        400: "far"
      },
      "Font Awesome 6 Pro": {
        900: "fas",
        400: "far",
        normal: "far",
        300: "fal",
        100: "fat"
      },
      "Font Awesome 6 Brands": {
        400: "fab",
        normal: "fab"
      },
      "Font Awesome 6 Duotone": {
        900: "fad"
      },
      "Font Awesome 6 Sharp": {
        900: "fass",
        400: "fasr",
        normal: "fasr",
        300: "fasl",
        100: "fast"
      },
      "Font Awesome 6 Sharp Duotone": {
        900: "fasds"
      }
    };
    lo = {
      classic: {
        "fa-brands": "fab",
        "fa-duotone": "fad",
        "fa-light": "fal",
        "fa-regular": "far",
        "fa-solid": "fas",
        "fa-thin": "fat"
      },
      sharp: {
        "fa-solid": "fass",
        "fa-regular": "fasr",
        "fa-light": "fasl",
        "fa-thin": "fast"
      },
      "sharp-duotone": {
        "fa-solid": "fasds"
      }
    };
    y = {
      classic: ["fas", "far", "fal", "fat"],
      sharp: ["fass", "fasr", "fasl", "fast"],
      "sharp-duotone": ["fasds"]
    };
    no = {
      classic: {
        fab: "fa-brands",
        fad: "fa-duotone",
        fal: "fa-light",
        far: "fa-regular",
        fas: "fa-solid",
        fat: "fa-thin"
      },
      sharp: {
        fass: "fa-solid",
        fasr: "fa-regular",
        fasl: "fa-light",
        fast: "fa-thin"
      },
      "sharp-duotone": {
        fasds: "fa-solid"
      }
    };
    fo = {
      classic: {
        solid: "fas",
        regular: "far",
        light: "fal",
        thin: "fat",
        duotone: "fad",
        brands: "fab"
      },
      sharp: {
        solid: "fass",
        regular: "fasr",
        light: "fasl",
        thin: "fast"
      },
      "sharp-duotone": {
        solid: "fasds"
      }
    };
    ho = {
      classic: {
        fa: "solid",
        fas: "solid",
        "fa-solid": "solid",
        far: "regular",
        "fa-regular": "regular",
        fal: "light",
        "fa-light": "light",
        fat: "thin",
        "fa-thin": "thin",
        fad: "duotone",
        "fa-duotone": "duotone",
        fab: "brands",
        "fa-brands": "brands"
      },
      sharp: {
        fa: "solid",
        fass: "solid",
        "fa-solid": "solid",
        fasr: "regular",
        "fa-regular": "regular",
        fasl: "light",
        "fa-light": "light",
        fast: "thin",
        "fa-thin": "thin"
      },
      "sharp-duotone": {
        fa: "solid",
        fasds: "solid",
        "fa-solid": "solid"
      }
    };
    x$1 = ["solid", "regular", "light", "thin", "duotone", "brands"];
    u$1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    m$1 = u$1.concat([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
    t$1 = {
      GROUP: "duotone-group",
      SWAP_OPACITY: "swap-opacity",
      PRIMARY: "primary",
      SECONDARY: "secondary"
    };
    yo = [...Object.keys(y), ...x$1, "2xs", "xs", "sm", "lg", "xl", "2xl", "beat", "border", "fade", "beat-fade", "bounce", "flip-both", "flip-horizontal", "flip-vertical", "flip", "fw", "inverse", "layers-counter", "layers-text", "layers", "li", "pull-left", "pull-right", "pulse", "rotate-180", "rotate-270", "rotate-90", "rotate-by", "shake", "spin-pulse", "spin-reverse", "spin", "stack-1x", "stack-2x", "stack", "ul", t$1.GROUP, t$1.SWAP_OPACITY, t$1.PRIMARY, t$1.SECONDARY].concat(u$1.map((o2) => "".concat(o2, "x"))).concat(m$1.map((o2) => "w-".concat(o2)));
    mo = {
      "Font Awesome Kit": {
        400: "fak",
        normal: "fak"
      },
      "Font Awesome Kit Duotone": {
        400: "fakd",
        normal: "fakd"
      }
    };
    Io = {
      kit: {
        "fa-kit": "fak"
      },
      "kit-duotone": {
        "fa-kit-duotone": "fakd"
      }
    };
    Fo = {
      kit: {
        fak: "fa-kit"
      },
      "kit-duotone": {
        fakd: "fa-kit-duotone"
      }
    };
    So = {
      kit: {
        kit: "fak"
      },
      "kit-duotone": {
        "kit-duotone": "fakd"
      }
    };
    NAMESPACE_IDENTIFIER = "___FONT_AWESOME___";
    UNITS_IN_GRID = 16;
    DEFAULT_CSS_PREFIX = "fa";
    DEFAULT_REPLACEMENT_CLASS = "svg-inline--fa";
    DATA_FA_I2SVG = "data-fa-i2svg";
    DATA_FA_PSEUDO_ELEMENT = "data-fa-pseudo-element";
    DATA_FA_PSEUDO_ELEMENT_PENDING = "data-fa-pseudo-element-pending";
    DATA_PREFIX = "data-prefix";
    DATA_ICON = "data-icon";
    HTML_CLASS_I2SVG_BASE_CLASS = "fontawesome-i2svg";
    MUTATION_APPROACH_ASYNC = "async";
    TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = ["HTML", "HEAD", "STYLE", "SCRIPT"];
    PRODUCTION = (() => {
      try {
        return false;
      } catch (e$$1) {
        return false;
      }
    })();
    FAMILIES = [a, r, o];
    _PREFIX_TO_STYLE = {
      ...ho
    };
    _PREFIX_TO_STYLE[a] = {
      ...ho[a],
      ...bt["kit"],
      ...bt["kit-duotone"]
    };
    PREFIX_TO_STYLE = familyProxy(_PREFIX_TO_STYLE);
    _STYLE_TO_PREFIX = {
      ...fo
    };
    _STYLE_TO_PREFIX[a] = {
      ..._STYLE_TO_PREFIX[a],
      ...So["kit"],
      ...So["kit-duotone"]
    };
    STYLE_TO_PREFIX = familyProxy(_STYLE_TO_PREFIX);
    _PREFIX_TO_LONG_STYLE = {
      ...no
    };
    _PREFIX_TO_LONG_STYLE[a] = {
      ..._PREFIX_TO_LONG_STYLE[a],
      ...Fo["kit"]
    };
    PREFIX_TO_LONG_STYLE = familyProxy(_PREFIX_TO_LONG_STYLE);
    _LONG_STYLE_TO_PREFIX = {
      ...lo
    };
    _LONG_STYLE_TO_PREFIX[a] = {
      ..._LONG_STYLE_TO_PREFIX[a],
      ...Io["kit"]
    };
    LONG_STYLE_TO_PREFIX = familyProxy(_LONG_STYLE_TO_PREFIX);
    ICON_SELECTION_SYNTAX_PATTERN = Dt;
    LAYERS_TEXT_CLASSNAME = "fa-layers-text";
    FONT_FAMILY_PATTERN = Kt;
    _FONT_WEIGHT_TO_PREFIX = {
      ...et$1
    };
    FONT_WEIGHT_TO_PREFIX = familyProxy(_FONT_WEIGHT_TO_PREFIX);
    ATTRIBUTES_WATCHED_FOR_MUTATION = ["class", "data-prefix", "data-icon", "data-fa-transform", "data-fa-mask"];
    DUOTONE_CLASSES = t$1;
    prefixes = /* @__PURE__ */ new Set();
    Object.keys(STYLE_TO_PREFIX[a]).map(prefixes.add.bind(prefixes));
    Object.keys(STYLE_TO_PREFIX[r]).map(prefixes.add.bind(prefixes));
    Object.keys(STYLE_TO_PREFIX[o]).map(prefixes.add.bind(prefixes));
    RESERVED_CLASSES = [...Ct, ...yo];
    initial = WINDOW.FontAwesomeConfig || {};
    if (DOCUMENT && typeof DOCUMENT.querySelector === "function") {
      const attrs = [["data-family-prefix", "familyPrefix"], ["data-css-prefix", "cssPrefix"], ["data-family-default", "familyDefault"], ["data-style-default", "styleDefault"], ["data-replacement-class", "replacementClass"], ["data-auto-replace-svg", "autoReplaceSvg"], ["data-auto-add-css", "autoAddCss"], ["data-auto-a11y", "autoA11y"], ["data-search-pseudo-elements", "searchPseudoElements"], ["data-observe-mutations", "observeMutations"], ["data-mutate-approach", "mutateApproach"], ["data-keep-original-source", "keepOriginalSource"], ["data-measure-performance", "measurePerformance"], ["data-show-missing-icons", "showMissingIcons"]];
      attrs.forEach((_ref) => {
        let [attr, key] = _ref;
        const val = coerce(getAttrConfig(attr));
        if (val !== void 0 && val !== null) {
          initial[key] = val;
        }
      });
    }
    _default = {
      styleDefault: "solid",
      familyDefault: "classic",
      cssPrefix: DEFAULT_CSS_PREFIX,
      replacementClass: DEFAULT_REPLACEMENT_CLASS,
      autoReplaceSvg: true,
      autoAddCss: true,
      autoA11y: true,
      searchPseudoElements: false,
      observeMutations: true,
      mutateApproach: "async",
      keepOriginalSource: true,
      measurePerformance: false,
      showMissingIcons: true
    };
    if (initial.familyPrefix) {
      initial.cssPrefix = initial.familyPrefix;
    }
    _config = {
      ..._default,
      ...initial
    };
    if (!_config.autoReplaceSvg) _config.observeMutations = false;
    config = {};
    Object.keys(_default).forEach((key) => {
      Object.defineProperty(config, key, {
        enumerable: true,
        set: function(val) {
          _config[key] = val;
          _onChangeCb.forEach((cb) => cb(config));
        },
        get: function() {
          return _config[key];
        }
      });
    });
    Object.defineProperty(config, "familyPrefix", {
      enumerable: true,
      set: function(val) {
        _config.cssPrefix = val;
        _onChangeCb.forEach((cb) => cb(config));
      },
      get: function() {
        return _config.cssPrefix;
      }
    });
    WINDOW.FontAwesomeConfig = config;
    _onChangeCb = [];
    d$2 = UNITS_IN_GRID;
    meaninglessTransform = {
      size: 16,
      x: 0,
      y: 0,
      rotate: 0,
      flipX: false,
      flipY: false
    };
    idPool = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    baseStyles = ':root, :host {\n  --fa-font-solid: normal 900 1em/1 "Font Awesome 6 Free";\n  --fa-font-regular: normal 400 1em/1 "Font Awesome 6 Free";\n  --fa-font-light: normal 300 1em/1 "Font Awesome 6 Pro";\n  --fa-font-thin: normal 100 1em/1 "Font Awesome 6 Pro";\n  --fa-font-duotone: normal 900 1em/1 "Font Awesome 6 Duotone";\n  --fa-font-brands: normal 400 1em/1 "Font Awesome 6 Brands";\n  --fa-font-sharp-solid: normal 900 1em/1 "Font Awesome 6 Sharp";\n  --fa-font-sharp-regular: normal 400 1em/1 "Font Awesome 6 Sharp";\n  --fa-font-sharp-light: normal 300 1em/1 "Font Awesome 6 Sharp";\n  --fa-font-sharp-thin: normal 100 1em/1 "Font Awesome 6 Sharp";\n  --fa-font-sharp-duotone-solid: normal 900 1em/1 "Font Awesome 6 Sharp Duotone";\n}\n\nsvg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {\n  overflow: visible;\n  box-sizing: content-box;\n}\n\n.svg-inline--fa {\n  display: var(--fa-display, inline-block);\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-2xs {\n  vertical-align: 0.1em;\n}\n.svg-inline--fa.fa-xs {\n  vertical-align: 0em;\n}\n.svg-inline--fa.fa-sm {\n  vertical-align: -0.0714285705em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.2em;\n}\n.svg-inline--fa.fa-xl {\n  vertical-align: -0.25em;\n}\n.svg-inline--fa.fa-2xl {\n  vertical-align: -0.3125em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-li {\n  width: var(--fa-li-width, 2em);\n  top: 0.25em;\n}\n.svg-inline--fa.fa-fw {\n  width: var(--fa-fw-width, 1.25em);\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  transform-origin: center center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: var(--fa-counter-background-color, #ff253a);\n  border-radius: var(--fa-counter-border-radius, 1em);\n  box-sizing: border-box;\n  color: var(--fa-inverse, #fff);\n  line-height: var(--fa-counter-line-height, 1);\n  max-width: var(--fa-counter-max-width, 5em);\n  min-width: var(--fa-counter-min-width, 1.5em);\n  overflow: hidden;\n  padding: var(--fa-counter-padding, 0.25em 0.5em);\n  right: var(--fa-right, 0);\n  text-overflow: ellipsis;\n  top: var(--fa-top, 0);\n  transform: scale(var(--fa-counter-scale, 0.25));\n  transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: var(--fa-bottom, 0);\n  right: var(--fa-right, 0);\n  top: auto;\n  transform: scale(var(--fa-layers-scale, 0.25));\n  transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: var(--fa-bottom, 0);\n  left: var(--fa-left, 0);\n  right: auto;\n  top: auto;\n  transform: scale(var(--fa-layers-scale, 0.25));\n  transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  top: var(--fa-top, 0);\n  right: var(--fa-right, 0);\n  transform: scale(var(--fa-layers-scale, 0.25));\n  transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: var(--fa-left, 0);\n  right: auto;\n  top: var(--fa-top, 0);\n  transform: scale(var(--fa-layers-scale, 0.25));\n  transform-origin: top left;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-2xs {\n  font-size: 0.625em;\n  line-height: 0.1em;\n  vertical-align: 0.225em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n  line-height: 0.0833333337em;\n  vertical-align: 0.125em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n  line-height: 0.0714285718em;\n  vertical-align: 0.0535714295em;\n}\n\n.fa-lg {\n  font-size: 1.25em;\n  line-height: 0.05em;\n  vertical-align: -0.075em;\n}\n\n.fa-xl {\n  font-size: 1.5em;\n  line-height: 0.0416666682em;\n  vertical-align: -0.125em;\n}\n\n.fa-2xl {\n  font-size: 2em;\n  line-height: 0.03125em;\n  vertical-align: -0.1875em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: var(--fa-li-margin, 2.5em);\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: calc(-1 * var(--fa-li-width, 2em));\n  position: absolute;\n  text-align: center;\n  width: var(--fa-li-width, 2em);\n  line-height: inherit;\n}\n\n.fa-border {\n  border-color: var(--fa-border-color, #eee);\n  border-radius: var(--fa-border-radius, 0.1em);\n  border-style: var(--fa-border-style, solid);\n  border-width: var(--fa-border-width, 0.08em);\n  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);\n}\n\n.fa-pull-left {\n  float: left;\n  margin-right: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-pull-right {\n  float: right;\n  margin-left: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-beat {\n  animation-name: fa-beat;\n  animation-delay: var(--fa-animation-delay, 0s);\n  animation-direction: var(--fa-animation-direction, normal);\n  animation-duration: var(--fa-animation-duration, 1s);\n  animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-bounce {\n  animation-name: fa-bounce;\n  animation-delay: var(--fa-animation-delay, 0s);\n  animation-direction: var(--fa-animation-direction, normal);\n  animation-duration: var(--fa-animation-duration, 1s);\n  animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n}\n\n.fa-fade {\n  animation-name: fa-fade;\n  animation-delay: var(--fa-animation-delay, 0s);\n  animation-direction: var(--fa-animation-direction, normal);\n  animation-duration: var(--fa-animation-duration, 1s);\n  animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-beat-fade {\n  animation-name: fa-beat-fade;\n  animation-delay: var(--fa-animation-delay, 0s);\n  animation-direction: var(--fa-animation-direction, normal);\n  animation-duration: var(--fa-animation-duration, 1s);\n  animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-flip {\n  animation-name: fa-flip;\n  animation-delay: var(--fa-animation-delay, 0s);\n  animation-direction: var(--fa-animation-direction, normal);\n  animation-duration: var(--fa-animation-duration, 1s);\n  animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-shake {\n  animation-name: fa-shake;\n  animation-delay: var(--fa-animation-delay, 0s);\n  animation-direction: var(--fa-animation-direction, normal);\n  animation-duration: var(--fa-animation-duration, 1s);\n  animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin {\n  animation-name: fa-spin;\n  animation-delay: var(--fa-animation-delay, 0s);\n  animation-direction: var(--fa-animation-direction, normal);\n  animation-duration: var(--fa-animation-duration, 2s);\n  animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin-reverse {\n  --fa-animation-direction: reverse;\n}\n\n.fa-pulse,\n.fa-spin-pulse {\n  animation-name: fa-spin;\n  animation-direction: var(--fa-animation-direction, normal);\n  animation-duration: var(--fa-animation-duration, 1s);\n  animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  animation-timing-function: var(--fa-animation-timing, steps(8));\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .fa-beat,\n.fa-bounce,\n.fa-fade,\n.fa-beat-fade,\n.fa-flip,\n.fa-pulse,\n.fa-shake,\n.fa-spin,\n.fa-spin-pulse {\n    animation-delay: -1ms;\n    animation-duration: 1ms;\n    animation-iteration-count: 1;\n    transition-delay: 0s;\n    transition-duration: 0s;\n  }\n}\n@keyframes fa-beat {\n  0%, 90% {\n    transform: scale(1);\n  }\n  45% {\n    transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@keyframes fa-bounce {\n  0% {\n    transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    transform: scale(1, 1) translateY(0);\n  }\n}\n@keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@keyframes fa-flip {\n  50% {\n    transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@keyframes fa-shake {\n  0% {\n    transform: rotate(-15deg);\n  }\n  4% {\n    transform: rotate(15deg);\n  }\n  8%, 24% {\n    transform: rotate(-18deg);\n  }\n  12%, 28% {\n    transform: rotate(18deg);\n  }\n  16% {\n    transform: rotate(-22deg);\n  }\n  20% {\n    transform: rotate(22deg);\n  }\n  32% {\n    transform: rotate(-12deg);\n  }\n  36% {\n    transform: rotate(12deg);\n  }\n  40%, 100% {\n    transform: rotate(0deg);\n  }\n}\n@keyframes fa-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  transform: scale(1, -1);\n}\n\n.fa-flip-both,\n.fa-flip-horizontal.fa-flip-vertical {\n  transform: scale(-1, -1);\n}\n\n.fa-rotate-by {\n  transform: rotate(var(--fa-rotate-angle, 0));\n}\n\n.fa-stack {\n  display: inline-block;\n  vertical-align: middle;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: var(--fa-stack-z-index, auto);\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}\n\n.sr-only,\n.fa-sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.sr-only-focusable:not(:focus),\n.fa-sr-only-focusable:not(:focus) {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse,\n.fa-duotone.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}';
    _cssInserted = false;
    InjectCSS = {
      mixout() {
        return {
          dom: {
            css,
            insertCss: ensureCss
          }
        };
      },
      hooks() {
        return {
          beforeDOMElementCreation() {
            ensureCss();
          },
          beforeI2svg() {
            ensureCss();
          }
        };
      }
    };
    w$1 = WINDOW || {};
    if (!w$1[NAMESPACE_IDENTIFIER]) w$1[NAMESPACE_IDENTIFIER] = {};
    if (!w$1[NAMESPACE_IDENTIFIER].styles) w$1[NAMESPACE_IDENTIFIER].styles = {};
    if (!w$1[NAMESPACE_IDENTIFIER].hooks) w$1[NAMESPACE_IDENTIFIER].hooks = {};
    if (!w$1[NAMESPACE_IDENTIFIER].shims) w$1[NAMESPACE_IDENTIFIER].shims = [];
    namespace = w$1[NAMESPACE_IDENTIFIER];
    functions = [];
    listener = function() {
      DOCUMENT.removeEventListener("DOMContentLoaded", listener);
      loaded = 1;
      functions.map((fn2) => fn2());
    };
    loaded = false;
    if (IS_DOM) {
      loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);
      if (!loaded) DOCUMENT.addEventListener("DOMContentLoaded", listener);
    }
    bindInternal4 = function bindInternal42(func, thisContext) {
      return function(a2, b, c2, d) {
        return func.call(thisContext, a2, b, c2, d);
      };
    };
    reduce = function fastReduceObject(subject, fn2, initialValue, thisContext) {
      var keys = Object.keys(subject), length = keys.length, iterator = thisContext !== void 0 ? bindInternal4(fn2, thisContext) : fn2, i, key, result;
      if (initialValue === void 0) {
        i = 1;
        result = subject[keys[0]];
      } else {
        i = 0;
        result = initialValue;
      }
      for (; i < length; i++) {
        key = keys[i];
        result = iterator(result, subject[key], key, subject);
      }
      return result;
    };
    ({
      styles,
      shims
    } = namespace);
    LONG_STYLE = {
      [a]: Object.values(PREFIX_TO_LONG_STYLE[a]),
      [r]: Object.values(PREFIX_TO_LONG_STYLE[r]),
      [o]: Object.values(PREFIX_TO_LONG_STYLE[o])
    };
    _defaultUsablePrefix = null;
    _byUnicode = {};
    _byLigature = {};
    _byOldName = {};
    _byOldUnicode = {};
    _byAlias = {};
    PREFIXES = {
      [a]: Object.keys(PREFIX_TO_STYLE[a]),
      [r]: Object.keys(PREFIX_TO_STYLE[r]),
      [o]: Object.keys(PREFIX_TO_STYLE[o])
    };
    build = () => {
      const lookup = (reducer) => {
        return reduce(styles, (o$$1, style, prefix) => {
          o$$1[prefix] = reduce(style, reducer, {});
          return o$$1;
        }, {});
      };
      _byUnicode = lookup((acc, icon2, iconName) => {
        if (icon2[3]) {
          acc[icon2[3]] = iconName;
        }
        if (icon2[2]) {
          const aliases = icon2[2].filter((a$$1) => {
            return typeof a$$1 === "number";
          });
          aliases.forEach((alias) => {
            acc[alias.toString(16)] = iconName;
          });
        }
        return acc;
      });
      _byLigature = lookup((acc, icon2, iconName) => {
        acc[iconName] = iconName;
        if (icon2[2]) {
          const aliases = icon2[2].filter((a$$1) => {
            return typeof a$$1 === "string";
          });
          aliases.forEach((alias) => {
            acc[alias] = iconName;
          });
        }
        return acc;
      });
      _byAlias = lookup((acc, icon2, iconName) => {
        const aliases = icon2[2];
        acc[iconName] = iconName;
        aliases.forEach((alias) => {
          acc[alias] = iconName;
        });
        return acc;
      });
      const hasRegular = "far" in styles || config.autoFetchSvg;
      const shimLookups = reduce(shims, (acc, shim) => {
        const maybeNameMaybeUnicode = shim[0];
        let prefix = shim[1];
        const iconName = shim[2];
        if (prefix === "far" && !hasRegular) {
          prefix = "fas";
        }
        if (typeof maybeNameMaybeUnicode === "string") {
          acc.names[maybeNameMaybeUnicode] = {
            prefix,
            iconName
          };
        }
        if (typeof maybeNameMaybeUnicode === "number") {
          acc.unicodes[maybeNameMaybeUnicode.toString(16)] = {
            prefix,
            iconName
          };
        }
        return acc;
      }, {
        names: {},
        unicodes: {}
      });
      _byOldName = shimLookups.names;
      _byOldUnicode = shimLookups.unicodes;
      _defaultUsablePrefix = getCanonicalPrefix(config.styleDefault, {
        family: config.familyDefault
      });
    };
    onChange((c$$1) => {
      _defaultUsablePrefix = getCanonicalPrefix(c$$1.styleDefault, {
        family: config.familyDefault
      });
    });
    build();
    emptyCanonicalIcon = () => {
      return {
        prefix: null,
        iconName: null,
        rest: []
      };
    };
    PREFIXES_FOR_FAMILY = {
      [a]: Object.keys(PREFIX_TO_LONG_STYLE[a]),
      [r]: Object.keys(PREFIX_TO_LONG_STYLE[r]),
      [o]: Object.keys(PREFIX_TO_LONG_STYLE[o])
    };
    Library = class {
      constructor() {
        this.definitions = {};
      }
      add() {
        for (var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++) {
          definitions[_key] = arguments[_key];
        }
        const additions = definitions.reduce(this._pullDefinitions, {});
        Object.keys(additions).forEach((key) => {
          this.definitions[key] = {
            ...this.definitions[key] || {},
            ...additions[key]
          };
          defineIcons(key, additions[key]);
          const longPrefix = PREFIX_TO_LONG_STYLE[a][key];
          if (longPrefix) defineIcons(longPrefix, additions[key]);
          build();
        });
      }
      reset() {
        this.definitions = {};
      }
      _pullDefinitions(additions, definition) {
        const normalized = definition.prefix && definition.iconName && definition.icon ? {
          0: definition
        } : definition;
        Object.keys(normalized).map((key) => {
          const {
            prefix,
            iconName,
            icon: icon2
          } = normalized[key];
          const aliases = icon2[2];
          if (!additions[prefix]) additions[prefix] = {};
          if (aliases.length > 0) {
            aliases.forEach((alias) => {
              if (typeof alias === "string") {
                additions[prefix][alias] = icon2;
              }
            });
          }
          additions[prefix][iconName] = icon2;
        });
        return additions;
      }
    };
    _plugins = [];
    _hooks = {};
    providers = {};
    defaultProviderKeys = Object.keys(providers);
    library = new Library();
    noAuto = () => {
      config.autoReplaceSvg = false;
      config.observeMutations = false;
      callHooks("noAuto");
    };
    dom = {
      i2svg: function() {
        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        if (IS_DOM) {
          callHooks("beforeI2svg", params);
          callProvided("pseudoElements2svg", params);
          return callProvided("i2svg", params);
        } else {
          return Promise.reject(new Error("Operation requires a DOM of some kind."));
        }
      },
      watch: function() {
        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        const {
          autoReplaceSvgRoot
        } = params;
        if (config.autoReplaceSvg === false) {
          config.autoReplaceSvg = true;
        }
        config.observeMutations = true;
        domready(() => {
          autoReplace({
            autoReplaceSvgRoot
          });
          callHooks("watch", params);
        });
      }
    };
    parse = {
      icon: (icon2) => {
        if (icon2 === null) {
          return null;
        }
        if (typeof icon2 === "object" && icon2.prefix && icon2.iconName) {
          return {
            prefix: icon2.prefix,
            iconName: byAlias(icon2.prefix, icon2.iconName) || icon2.iconName
          };
        }
        if (Array.isArray(icon2) && icon2.length === 2) {
          const iconName = icon2[1].indexOf("fa-") === 0 ? icon2[1].slice(3) : icon2[1];
          const prefix = getCanonicalPrefix(icon2[0]);
          return {
            prefix,
            iconName: byAlias(prefix, iconName) || iconName
          };
        }
        if (typeof icon2 === "string" && (icon2.indexOf("".concat(config.cssPrefix, "-")) > -1 || icon2.match(ICON_SELECTION_SYNTAX_PATTERN))) {
          const canonicalIcon = getCanonicalIcon(icon2.split(" "), {
            skipLookups: true
          });
          return {
            prefix: canonicalIcon.prefix || getDefaultUsablePrefix(),
            iconName: byAlias(canonicalIcon.prefix, canonicalIcon.iconName) || canonicalIcon.iconName
          };
        }
        if (typeof icon2 === "string") {
          const prefix = getDefaultUsablePrefix();
          return {
            prefix,
            iconName: byAlias(prefix, icon2) || icon2
          };
        }
      }
    };
    api = {
      noAuto,
      config,
      dom,
      parse,
      library,
      findIconDefinition,
      toHtml
    };
    autoReplace = function() {
      let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      const {
        autoReplaceSvgRoot = DOCUMENT
      } = params;
      if ((Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) && IS_DOM && config.autoReplaceSvg) api.dom.i2svg({
        node: autoReplaceSvgRoot
      });
    };
    ({
      styles: styles$1
    } = namespace);
    missingIconResolutionMixin = {
      found: false,
      width: 512,
      height: 512
    };
    noop$1 = () => {
    };
    p$2 = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {
      mark: noop$1,
      measure: noop$1
    };
    preamble = 'FA "6.6.0"';
    begin = (name) => {
      p$2.mark("".concat(preamble, " ").concat(name, " begins"));
      return () => end(name);
    };
    end = (name) => {
      p$2.mark("".concat(preamble, " ").concat(name, " ends"));
      p$2.measure("".concat(preamble, " ").concat(name), "".concat(preamble, " ").concat(name, " begins"), "".concat(preamble, " ").concat(name, " ends"));
    };
    perf = {
      begin,
      end
    };
    noop$2 = () => {
    };
    mutators = {
      replace: function(mutation) {
        const node = mutation[0];
        if (node.parentNode) {
          mutation[1].forEach((abstract) => {
            node.parentNode.insertBefore(convertSVG(abstract), node);
          });
          if (node.getAttribute(DATA_FA_I2SVG) === null && config.keepOriginalSource) {
            let comment = DOCUMENT.createComment(nodeAsComment(node));
            node.parentNode.replaceChild(comment, node);
          } else {
            node.remove();
          }
        }
      },
      nest: function(mutation) {
        const node = mutation[0];
        const abstract = mutation[1];
        if (~classArray(node).indexOf(config.replacementClass)) {
          return mutators.replace(mutation);
        }
        const forSvg = new RegExp("".concat(config.cssPrefix, "-.*"));
        delete abstract[0].attributes.id;
        if (abstract[0].attributes.class) {
          const splitClasses = abstract[0].attributes.class.split(" ").reduce((acc, cls) => {
            if (cls === config.replacementClass || cls.match(forSvg)) {
              acc.toSvg.push(cls);
            } else {
              acc.toNode.push(cls);
            }
            return acc;
          }, {
            toNode: [],
            toSvg: []
          });
          abstract[0].attributes.class = splitClasses.toSvg.join(" ");
          if (splitClasses.toNode.length === 0) {
            node.removeAttribute("class");
          } else {
            node.setAttribute("class", splitClasses.toNode.join(" "));
          }
        }
        const newInnerHTML = abstract.map((a2) => toHtml(a2)).join("\n");
        node.setAttribute(DATA_FA_I2SVG, "");
        node.innerHTML = newInnerHTML;
      }
    };
    disabled = false;
    mo$1 = null;
    ({
      styles: styles$2
    } = namespace);
    knownPrefixes = /* @__PURE__ */ new Set();
    FAMILIES.map((family) => {
      knownPrefixes.add("fa-".concat(family));
    });
    Object.keys(PREFIX_TO_STYLE[a]).map(knownPrefixes.add.bind(knownPrefixes));
    Object.keys(PREFIX_TO_STYLE[r]).map(knownPrefixes.add.bind(knownPrefixes));
    Object.keys(PREFIX_TO_STYLE[o]).map(knownPrefixes.add.bind(knownPrefixes));
    knownPrefixes = [...knownPrefixes];
    render = function(iconDefinition) {
      let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      const {
        transform = meaninglessTransform,
        symbol = false,
        mask = null,
        maskId = null,
        title = null,
        titleId = null,
        classes = [],
        attributes = {},
        styles: styles2 = {}
      } = params;
      if (!iconDefinition) return;
      const {
        prefix,
        iconName,
        icon: icon2
      } = iconDefinition;
      return domVariants({
        type: "icon",
        ...iconDefinition
      }, () => {
        callHooks("beforeDOMElementCreation", {
          iconDefinition,
          params
        });
        if (config.autoA11y) {
          if (title) {
            attributes["aria-labelledby"] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
          } else {
            attributes["aria-hidden"] = "true";
            attributes["focusable"] = "false";
          }
        }
        return makeInlineSvgAbstract({
          icons: {
            main: asFoundIcon(icon2),
            mask: mask ? asFoundIcon(mask.icon) : {
              found: false,
              width: null,
              height: null,
              icon: {}
            }
          },
          prefix,
          iconName,
          transform: {
            ...meaninglessTransform,
            ...transform
          },
          symbol,
          title,
          maskId,
          titleId,
          extra: {
            attributes,
            styles: styles2,
            classes
          }
        });
      });
    };
    ReplaceElements = {
      mixout() {
        return {
          icon: resolveIcons(render)
        };
      },
      hooks() {
        return {
          mutationObserverCallbacks(accumulator) {
            accumulator.treeCallback = onTree;
            accumulator.nodeCallback = onNode;
            return accumulator;
          }
        };
      },
      provides(providers$$1) {
        providers$$1.i2svg = function(params) {
          const {
            node = DOCUMENT,
            callback = () => {
            }
          } = params;
          return onTree(node, callback);
        };
        providers$$1.generateSvgReplacementMutation = function(node, nodeMeta) {
          const {
            iconName,
            title,
            titleId,
            prefix,
            transform,
            symbol,
            mask,
            maskId,
            extra
          } = nodeMeta;
          return new Promise((resolve, reject) => {
            Promise.all([findIcon(iconName, prefix), mask.iconName ? findIcon(mask.iconName, mask.prefix) : Promise.resolve({
              found: false,
              width: 512,
              height: 512,
              icon: {}
            })]).then((_ref) => {
              let [main, mask2] = _ref;
              resolve([node, makeInlineSvgAbstract({
                icons: {
                  main,
                  mask: mask2
                },
                prefix,
                iconName,
                transform,
                symbol,
                maskId,
                title,
                titleId,
                extra,
                watchable: true
              })]);
            }).catch(reject);
          });
        };
        providers$$1.generateAbstractIcon = function(_ref2) {
          let {
            children,
            attributes,
            main,
            transform,
            styles: styles2
          } = _ref2;
          const styleString = joinStyles(styles2);
          if (styleString.length > 0) {
            attributes["style"] = styleString;
          }
          let nextChild;
          if (transformIsMeaningful(transform)) {
            nextChild = callProvided("generateAbstractTransformGrouping", {
              main,
              transform,
              containerWidth: main.width,
              iconWidth: main.width
            });
          }
          children.push(nextChild || main.icon);
          return {
            children,
            attributes
          };
        };
      }
    };
    Layers = {
      mixout() {
        return {
          layer(assembler) {
            let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            const {
              classes = []
            } = params;
            return domVariants({
              type: "layer"
            }, () => {
              callHooks("beforeDOMElementCreation", {
                assembler,
                params
              });
              let children = [];
              assembler((args) => {
                Array.isArray(args) ? args.map((a2) => {
                  children = children.concat(a2.abstract);
                }) : children = children.concat(args.abstract);
              });
              return [{
                tag: "span",
                attributes: {
                  class: ["".concat(config.cssPrefix, "-layers"), ...classes].join(" ")
                },
                children
              }];
            });
          }
        };
      }
    };
    LayersCounter = {
      mixout() {
        return {
          counter(content) {
            let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            const {
              title = null,
              classes = [],
              attributes = {},
              styles: styles2 = {}
            } = params;
            return domVariants({
              type: "counter",
              content
            }, () => {
              callHooks("beforeDOMElementCreation", {
                content,
                params
              });
              return makeLayersCounterAbstract({
                content: content.toString(),
                title,
                extra: {
                  attributes,
                  styles: styles2,
                  classes: ["".concat(config.cssPrefix, "-layers-counter"), ...classes]
                }
              });
            });
          }
        };
      }
    };
    LayersText = {
      mixout() {
        return {
          text(content) {
            let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            const {
              transform = meaninglessTransform,
              title = null,
              classes = [],
              attributes = {},
              styles: styles2 = {}
            } = params;
            return domVariants({
              type: "text",
              content
            }, () => {
              callHooks("beforeDOMElementCreation", {
                content,
                params
              });
              return makeLayersTextAbstract({
                content,
                transform: {
                  ...meaninglessTransform,
                  ...transform
                },
                title,
                extra: {
                  attributes,
                  styles: styles2,
                  classes: ["".concat(config.cssPrefix, "-layers-text"), ...classes]
                }
              });
            });
          }
        };
      },
      provides(providers$$1) {
        providers$$1.generateLayersText = function(node, nodeMeta) {
          const {
            title,
            transform,
            extra
          } = nodeMeta;
          let width = null;
          let height = null;
          if (IS_IE) {
            const computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);
            const boundingClientRect = node.getBoundingClientRect();
            width = boundingClientRect.width / computedFontSize;
            height = boundingClientRect.height / computedFontSize;
          }
          if (config.autoA11y && !title) {
            extra.attributes["aria-hidden"] = "true";
          }
          return Promise.resolve([node, makeLayersTextAbstract({
            content: node.innerHTML,
            width,
            height,
            transform,
            title,
            extra,
            watchable: true
          })]);
        };
      }
    };
    CLEAN_CONTENT_PATTERN = new RegExp('"', "ug");
    SECONDARY_UNICODE_RANGE = [1105920, 1112319];
    _FONT_FAMILY_WEIGHT_TO_PREFIX = {
      ...{
        FontAwesome: {
          normal: "fas",
          400: "fas"
        }
      },
      ...eo,
      ...ao,
      ...mo
    };
    FONT_FAMILY_WEIGHT_TO_PREFIX = Object.keys(_FONT_FAMILY_WEIGHT_TO_PREFIX).reduce((acc, key) => {
      acc[key.toLowerCase()] = _FONT_FAMILY_WEIGHT_TO_PREFIX[key];
      return acc;
    }, {});
    FONT_FAMILY_WEIGHT_FALLBACK = Object.keys(FONT_FAMILY_WEIGHT_TO_PREFIX).reduce((acc, fontFamily) => {
      const weights = FONT_FAMILY_WEIGHT_TO_PREFIX[fontFamily];
      acc[fontFamily] = weights[900] || [...Object.entries(weights)][0][1];
      return acc;
    }, {});
    PseudoElements = {
      hooks() {
        return {
          mutationObserverCallbacks(accumulator) {
            accumulator.pseudoElementsCallback = searchPseudoElements;
            return accumulator;
          }
        };
      },
      provides(providers2) {
        providers2.pseudoElements2svg = function(params) {
          const {
            node = DOCUMENT
          } = params;
          if (config.searchPseudoElements) {
            searchPseudoElements(node);
          }
        };
      }
    };
    _unwatched = false;
    MutationObserver$1 = {
      mixout() {
        return {
          dom: {
            unwatch() {
              disableObservation();
              _unwatched = true;
            }
          }
        };
      },
      hooks() {
        return {
          bootstrap() {
            observe(chainHooks("mutationObserverCallbacks", {}));
          },
          noAuto() {
            disconnect();
          },
          watch(params) {
            const {
              observeMutationsRoot
            } = params;
            if (_unwatched) {
              enableObservation();
            } else {
              observe(chainHooks("mutationObserverCallbacks", {
                observeMutationsRoot
              }));
            }
          }
        };
      }
    };
    parseTransformString = (transformString) => {
      let transform = {
        size: 16,
        x: 0,
        y: 0,
        flipX: false,
        flipY: false,
        rotate: 0
      };
      return transformString.toLowerCase().split(" ").reduce((acc, n) => {
        const parts = n.toLowerCase().split("-");
        const first = parts[0];
        let rest = parts.slice(1).join("-");
        if (first && rest === "h") {
          acc.flipX = true;
          return acc;
        }
        if (first && rest === "v") {
          acc.flipY = true;
          return acc;
        }
        rest = parseFloat(rest);
        if (isNaN(rest)) {
          return acc;
        }
        switch (first) {
          case "grow":
            acc.size = acc.size + rest;
            break;
          case "shrink":
            acc.size = acc.size - rest;
            break;
          case "left":
            acc.x = acc.x - rest;
            break;
          case "right":
            acc.x = acc.x + rest;
            break;
          case "up":
            acc.y = acc.y - rest;
            break;
          case "down":
            acc.y = acc.y + rest;
            break;
          case "rotate":
            acc.rotate = acc.rotate + rest;
            break;
        }
        return acc;
      }, transform);
    };
    PowerTransforms = {
      mixout() {
        return {
          parse: {
            transform: (transformString) => {
              return parseTransformString(transformString);
            }
          }
        };
      },
      hooks() {
        return {
          parseNodeAttributes(accumulator, node) {
            const transformString = node.getAttribute("data-fa-transform");
            if (transformString) {
              accumulator.transform = parseTransformString(transformString);
            }
            return accumulator;
          }
        };
      },
      provides(providers2) {
        providers2.generateAbstractTransformGrouping = function(_ref) {
          let {
            main,
            transform,
            containerWidth,
            iconWidth
          } = _ref;
          const outer = {
            transform: "translate(".concat(containerWidth / 2, " 256)")
          };
          const innerTranslate = "translate(".concat(transform.x * 32, ", ").concat(transform.y * 32, ") ");
          const innerScale = "scale(".concat(transform.size / 16 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / 16 * (transform.flipY ? -1 : 1), ") ");
          const innerRotate = "rotate(".concat(transform.rotate, " 0 0)");
          const inner = {
            transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
          };
          const path = {
            transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
          };
          const operations = {
            outer,
            inner,
            path
          };
          return {
            tag: "g",
            attributes: {
              ...operations.outer
            },
            children: [{
              tag: "g",
              attributes: {
                ...operations.inner
              },
              children: [{
                tag: main.icon.tag,
                children: main.icon.children,
                attributes: {
                  ...main.icon.attributes,
                  ...operations.path
                }
              }]
            }]
          };
        };
      }
    };
    ALL_SPACE = {
      x: 0,
      y: 0,
      width: "100%",
      height: "100%"
    };
    Masks = {
      hooks() {
        return {
          parseNodeAttributes(accumulator, node) {
            const maskData = node.getAttribute("data-fa-mask");
            const mask = !maskData ? emptyCanonicalIcon() : getCanonicalIcon(maskData.split(" ").map((i) => i.trim()));
            if (!mask.prefix) {
              mask.prefix = getDefaultUsablePrefix();
            }
            accumulator.mask = mask;
            accumulator.maskId = node.getAttribute("data-fa-mask-id");
            return accumulator;
          }
        };
      },
      provides(providers2) {
        providers2.generateAbstractMask = function(_ref) {
          let {
            children,
            attributes,
            main,
            mask,
            maskId: explicitMaskId,
            transform
          } = _ref;
          const {
            width: mainWidth,
            icon: mainPath
          } = main;
          const {
            width: maskWidth,
            icon: maskPath
          } = mask;
          const trans = transformForSvg({
            transform,
            containerWidth: maskWidth,
            iconWidth: mainWidth
          });
          const maskRect = {
            tag: "rect",
            attributes: {
              ...ALL_SPACE,
              fill: "white"
            }
          };
          const maskInnerGroupChildrenMixin = mainPath.children ? {
            children: mainPath.children.map(fillBlack)
          } : {};
          const maskInnerGroup = {
            tag: "g",
            attributes: {
              ...trans.inner
            },
            children: [fillBlack({
              tag: mainPath.tag,
              attributes: {
                ...mainPath.attributes,
                ...trans.path
              },
              ...maskInnerGroupChildrenMixin
            })]
          };
          const maskOuterGroup = {
            tag: "g",
            attributes: {
              ...trans.outer
            },
            children: [maskInnerGroup]
          };
          const maskId = "mask-".concat(explicitMaskId || nextUniqueId());
          const clipId = "clip-".concat(explicitMaskId || nextUniqueId());
          const maskTag = {
            tag: "mask",
            attributes: {
              ...ALL_SPACE,
              id: maskId,
              maskUnits: "userSpaceOnUse",
              maskContentUnits: "userSpaceOnUse"
            },
            children: [maskRect, maskOuterGroup]
          };
          const defs = {
            tag: "defs",
            children: [{
              tag: "clipPath",
              attributes: {
                id: clipId
              },
              children: deGroup(maskPath)
            }, maskTag]
          };
          children.push(defs, {
            tag: "rect",
            attributes: {
              fill: "currentColor",
              "clip-path": "url(#".concat(clipId, ")"),
              mask: "url(#".concat(maskId, ")"),
              ...ALL_SPACE
            }
          });
          return {
            children,
            attributes
          };
        };
      }
    };
    MissingIconIndicator = {
      provides(providers2) {
        let reduceMotion = false;
        if (WINDOW.matchMedia) {
          reduceMotion = WINDOW.matchMedia("(prefers-reduced-motion: reduce)").matches;
        }
        providers2.missingIconAbstract = function() {
          const gChildren = [];
          const FILL = {
            fill: "currentColor"
          };
          const ANIMATION_BASE = {
            attributeType: "XML",
            repeatCount: "indefinite",
            dur: "2s"
          };
          gChildren.push({
            tag: "path",
            attributes: {
              ...FILL,
              d: "M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"
            }
          });
          const OPACITY_ANIMATE = {
            ...ANIMATION_BASE,
            attributeName: "opacity"
          };
          const dot = {
            tag: "circle",
            attributes: {
              ...FILL,
              cx: "256",
              cy: "364",
              r: "28"
            },
            children: []
          };
          if (!reduceMotion) {
            dot.children.push({
              tag: "animate",
              attributes: {
                ...ANIMATION_BASE,
                attributeName: "r",
                values: "28;14;28;28;14;28;"
              }
            }, {
              tag: "animate",
              attributes: {
                ...OPACITY_ANIMATE,
                values: "1;0;1;1;0;1;"
              }
            });
          }
          gChildren.push(dot);
          gChildren.push({
            tag: "path",
            attributes: {
              ...FILL,
              opacity: "1",
              d: "M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"
            },
            children: reduceMotion ? [] : [{
              tag: "animate",
              attributes: {
                ...OPACITY_ANIMATE,
                values: "1;0;0;0;0;1;"
              }
            }]
          });
          if (!reduceMotion) {
            gChildren.push({
              tag: "path",
              attributes: {
                ...FILL,
                opacity: "0",
                d: "M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"
              },
              children: [{
                tag: "animate",
                attributes: {
                  ...OPACITY_ANIMATE,
                  values: "0;0;1;1;0;0;"
                }
              }]
            });
          }
          return {
            tag: "g",
            attributes: {
              "class": "missing"
            },
            children: gChildren
          };
        };
      }
    };
    SvgSymbols = {
      hooks() {
        return {
          parseNodeAttributes(accumulator, node) {
            const symbolData = node.getAttribute("data-fa-symbol");
            const symbol = symbolData === null ? false : symbolData === "" ? true : symbolData;
            accumulator["symbol"] = symbol;
            return accumulator;
          }
        };
      }
    };
    plugins = [InjectCSS, ReplaceElements, Layers, LayersCounter, LayersText, PseudoElements, MutationObserver$1, PowerTransforms, Masks, MissingIconIndicator, SvgSymbols];
    registerPlugins(plugins, {
      mixoutsTo: api
    });
    noAuto$1 = api.noAuto;
    config$1 = api.config;
    library$1 = api.library;
    dom$1 = api.dom;
    parse$1 = api.parse;
    findIconDefinition$1 = api.findIconDefinition;
    toHtml$1 = api.toHtml;
    icon = api.icon;
    layer = api.layer;
    text = api.text;
    counter = api.counter;
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense2 = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment2;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense2;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty2.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text2) {
        var message = "Warning: " + text2;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text2) {
        var message = "Warning: " + text2;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y2) {
        if (x === y2) {
          return x !== 0 || 1 / x === 1 / y2;
        } else {
          return x !== x && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/@fortawesome/react-fontawesome/index.es.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
  var n = Object.prototype.toString.call(o2).slice(8, -1);
  if (n === "Object" && o2.constructor) n = o2.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o2);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o2, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function classList(props) {
  var _classes;
  var beat = props.beat, fade = props.fade, beatFade = props.beatFade, bounce = props.bounce, shake = props.shake, flash = props.flash, spin = props.spin, spinPulse = props.spinPulse, spinReverse = props.spinReverse, pulse = props.pulse, fixedWidth = props.fixedWidth, inverse = props.inverse, border = props.border, listItem = props.listItem, flip = props.flip, size = props.size, rotation = props.rotation, pull = props.pull;
  var classes = (_classes = {
    "fa-beat": beat,
    "fa-fade": fade,
    "fa-beat-fade": beatFade,
    "fa-bounce": bounce,
    "fa-shake": shake,
    "fa-flash": flash,
    "fa-spin": spin,
    "fa-spin-reverse": spinReverse,
    "fa-spin-pulse": spinPulse,
    "fa-pulse": pulse,
    "fa-fw": fixedWidth,
    "fa-inverse": inverse,
    "fa-border": border,
    "fa-li": listItem,
    "fa-flip": flip === true,
    "fa-flip-horizontal": flip === "horizontal" || flip === "both",
    "fa-flip-vertical": flip === "vertical" || flip === "both"
  }, _defineProperty(_classes, "fa-".concat(size), typeof size !== "undefined" && size !== null), _defineProperty(_classes, "fa-rotate-".concat(rotation), typeof rotation !== "undefined" && rotation !== null && rotation !== 0), _defineProperty(_classes, "fa-pull-".concat(pull), typeof pull !== "undefined" && pull !== null), _defineProperty(_classes, "fa-swap-opacity", props.swapOpacity), _classes);
  return Object.keys(classes).map(function(key) {
    return classes[key] ? key : null;
  }).filter(function(key) {
    return key;
  });
}
function _isNumerical(obj) {
  obj = obj - 0;
  return obj === obj;
}
function camelize(string) {
  if (_isNumerical(string)) {
    return string;
  }
  string = string.replace(/[\-_\s]+(.)?/g, function(match, chr) {
    return chr ? chr.toUpperCase() : "";
  });
  return string.substr(0, 1).toLowerCase() + string.substr(1);
}
function capitalize(val) {
  return val.charAt(0).toUpperCase() + val.slice(1);
}
function styleToObject(style) {
  return style.split(";").map(function(s) {
    return s.trim();
  }).filter(function(s) {
    return s;
  }).reduce(function(acc, pair) {
    var i = pair.indexOf(":");
    var prop = camelize(pair.slice(0, i));
    var value = pair.slice(i + 1).trim();
    prop.startsWith("webkit") ? acc[capitalize(prop)] = value : acc[prop] = value;
    return acc;
  }, {});
}
function convert(createElement3, element) {
  var extraProps = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  if (typeof element === "string") {
    return element;
  }
  var children = (element.children || []).map(function(child) {
    return convert(createElement3, child);
  });
  var mixins = Object.keys(element.attributes || {}).reduce(function(acc, key) {
    var val = element.attributes[key];
    switch (key) {
      case "class":
        acc.attrs["className"] = val;
        delete element.attributes["class"];
        break;
      case "style":
        acc.attrs["style"] = styleToObject(val);
        break;
      default:
        if (key.indexOf("aria-") === 0 || key.indexOf("data-") === 0) {
          acc.attrs[key.toLowerCase()] = val;
        } else {
          acc.attrs[camelize(key)] = val;
        }
    }
    return acc;
  }, {
    attrs: {}
  });
  var _extraProps$style = extraProps.style, existingStyle = _extraProps$style === void 0 ? {} : _extraProps$style, remaining = _objectWithoutProperties(extraProps, _excluded);
  mixins.attrs["style"] = _objectSpread2(_objectSpread2({}, mixins.attrs["style"]), existingStyle);
  return createElement3.apply(void 0, [element.tag, _objectSpread2(_objectSpread2({}, mixins.attrs), remaining)].concat(_toConsumableArray(children)));
}
function log() {
  if (!PRODUCTION2 && console && typeof console.error === "function") {
    var _console;
    (_console = console).error.apply(_console, arguments);
  }
}
function normalizeIconArgs(icon2) {
  if (icon2 && _typeof(icon2) === "object" && icon2.prefix && icon2.iconName && icon2.icon) {
    return icon2;
  }
  if (parse$1.icon) {
    return parse$1.icon(icon2);
  }
  if (icon2 === null) {
    return null;
  }
  if (icon2 && _typeof(icon2) === "object" && icon2.prefix && icon2.iconName) {
    return icon2;
  }
  if (Array.isArray(icon2) && icon2.length === 2) {
    return {
      prefix: icon2[0],
      iconName: icon2[1]
    };
  }
  if (typeof icon2 === "string") {
    return {
      prefix: "fas",
      iconName: icon2
    };
  }
}
function objectWithKey(key, value) {
  return Array.isArray(value) && value.length > 0 || !Array.isArray(value) && value ? _defineProperty({}, key, value) : {};
}
var import_prop_types, import_react, _excluded, PRODUCTION2, defaultProps, FontAwesomeIcon, convertCurry;
var init_index_es = __esm({
  "node_modules/@fortawesome/react-fontawesome/index.es.js"() {
    init_fontawesome_svg_core();
    import_prop_types = __toESM(require_prop_types());
    import_react = __toESM(require_react());
    _excluded = ["style"];
    PRODUCTION2 = false;
    try {
      PRODUCTION2 = false;
    } catch (e2) {
    }
    defaultProps = {
      border: false,
      className: "",
      mask: null,
      maskId: null,
      fixedWidth: false,
      inverse: false,
      flip: false,
      icon: null,
      listItem: false,
      pull: null,
      pulse: false,
      rotation: null,
      size: null,
      spin: false,
      spinPulse: false,
      spinReverse: false,
      beat: false,
      fade: false,
      beatFade: false,
      bounce: false,
      shake: false,
      symbol: false,
      title: "",
      titleId: null,
      transform: null,
      swapOpacity: false
    };
    FontAwesomeIcon = /* @__PURE__ */ import_react.default.forwardRef(function(props, ref) {
      var allProps = _objectSpread2(_objectSpread2({}, defaultProps), props);
      var iconArgs = allProps.icon, maskArgs = allProps.mask, symbol = allProps.symbol, className = allProps.className, title = allProps.title, titleId = allProps.titleId, maskId = allProps.maskId;
      var iconLookup = normalizeIconArgs(iconArgs);
      var classes = objectWithKey("classes", [].concat(_toConsumableArray(classList(allProps)), _toConsumableArray((className || "").split(" "))));
      var transform = objectWithKey("transform", typeof allProps.transform === "string" ? parse$1.transform(allProps.transform) : allProps.transform);
      var mask = objectWithKey("mask", normalizeIconArgs(maskArgs));
      var renderedIcon = icon(iconLookup, _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, classes), transform), mask), {}, {
        symbol,
        title,
        titleId,
        maskId
      }));
      if (!renderedIcon) {
        log("Could not find icon", iconLookup);
        return null;
      }
      var abstract = renderedIcon.abstract;
      var extraProps = {
        ref
      };
      Object.keys(allProps).forEach(function(key) {
        if (!defaultProps.hasOwnProperty(key)) {
          extraProps[key] = allProps[key];
        }
      });
      return convertCurry(abstract[0], extraProps);
    });
    FontAwesomeIcon.displayName = "FontAwesomeIcon";
    FontAwesomeIcon.propTypes = {
      beat: import_prop_types.default.bool,
      border: import_prop_types.default.bool,
      beatFade: import_prop_types.default.bool,
      bounce: import_prop_types.default.bool,
      className: import_prop_types.default.string,
      fade: import_prop_types.default.bool,
      flash: import_prop_types.default.bool,
      mask: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.array, import_prop_types.default.string]),
      maskId: import_prop_types.default.string,
      fixedWidth: import_prop_types.default.bool,
      inverse: import_prop_types.default.bool,
      flip: import_prop_types.default.oneOf([true, false, "horizontal", "vertical", "both"]),
      icon: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.array, import_prop_types.default.string]),
      listItem: import_prop_types.default.bool,
      pull: import_prop_types.default.oneOf(["right", "left"]),
      pulse: import_prop_types.default.bool,
      rotation: import_prop_types.default.oneOf([0, 90, 180, 270]),
      shake: import_prop_types.default.bool,
      size: import_prop_types.default.oneOf(["2xs", "xs", "sm", "lg", "xl", "2xl", "1x", "2x", "3x", "4x", "5x", "6x", "7x", "8x", "9x", "10x"]),
      spin: import_prop_types.default.bool,
      spinPulse: import_prop_types.default.bool,
      spinReverse: import_prop_types.default.bool,
      symbol: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string]),
      title: import_prop_types.default.string,
      titleId: import_prop_types.default.string,
      transform: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.object]),
      swapOpacity: import_prop_types.default.bool
    };
    convertCurry = convert.bind(null, import_react.default.createElement);
  }
});

// node_modules/@fortawesome/sharp-regular-svg-icons/index.mjs
var faMinus, faPlus, faEquals;
var init_sharp_regular_svg_icons = __esm({
  "node_modules/@fortawesome/sharp-regular-svg-icons/index.mjs"() {
    faMinus = {
      prefix: "fasr",
      iconName: "minus",
      icon: [448, 512, [8211, 8722, 10134, "subtract"], "f068", "M432 280l-24 0L40 280l-24 0 0-48 24 0 368 0 24 0 0 48z"]
    };
    faPlus = {
      prefix: "fasr",
      iconName: "plus",
      icon: [448, 512, [10133, 61543, "add"], "2b", "M248 72l0-24-48 0 0 24 0 160L40 232l-24 0 0 48 24 0 160 0 0 160 0 24 48 0 0-24 0-160 160 0 24 0 0-48-24 0-160 0 0-160z"]
    };
    faEquals = {
      prefix: "fasr",
      iconName: "equals",
      icon: [448, 512, [62764], "3d", "M40 144l-24 0 0 48 24 0 368 0 24 0 0-48-24 0L40 144zm0 176l-24 0 0 48 24 0 368 0 24 0 0-48-24 0L40 320z"]
    };
  }
});

// node_modules/@fortawesome/pro-duotone-svg-icons/index.mjs
var faCalculator;
var init_pro_duotone_svg_icons = __esm({
  "node_modules/@fortawesome/pro-duotone-svg-icons/index.mjs"() {
    faCalculator = {
      prefix: "fad",
      iconName: "calculator",
      icon: [384, 512, [128425], "f1ec", ["M128 224a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zm0 96a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zM64 416c0-17.7 14.3-32 32-32l96 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-96 0c-17.7 0-32-14.3-32-32zM224 224a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zm0 96a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zm96-96a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zm0 96a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zm0 96a32 32 0 1 1 -64 0 32 32 0 1 1 64 0z", "M64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-384c0-35.3-28.7-64-64-64L64 0zM96 64l192 0c17.7 0 32 14.3 32 32l0 32c0 17.7-14.3 32-32 32L96 160c-17.7 0-32-14.3-32-32l0-32c0-17.7 14.3-32 32-32zm32 160a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zM96 352a32 32 0 1 1 0-64 32 32 0 1 1 0 64zM64 416c0-17.7 14.3-32 32-32l96 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-96 0c-17.7 0-32-14.3-32-32zM192 256a32 32 0 1 1 0-64 32 32 0 1 1 0 64zm32 64a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zm64-64a32 32 0 1 1 0-64 32 32 0 1 1 0 64zm32 64a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zM288 448a32 32 0 1 1 0-64 32 32 0 1 1 0 64z"]]
    };
  }
});

// app/helpers/index.ts
var formatCurrency;
var init_helpers = __esm({
  "app/helpers/index.ts"() {
    "use strict";
    formatCurrency = (value) => {
      const number = parseFloat(value) / 100;
      return new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }).format(number);
    };
  }
});

// app/components/CustomIcon.tsx
var import_jsx_runtime, CustomIcon, CustomIcon_default;
var init_CustomIcon = __esm({
  "app/components/CustomIcon.tsx"() {
    "use strict";
    init_index_es();
    import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
    CustomIcon = ({
      icon: icon2,
      className,
      bgColor,
      color,
      iconClassName,
      label
    }) => {
      console.log("bgColor", bgColor);
      console.log("Color", color);
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "flex gap-2 items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "div",
          {
            style: { backgroundColor: bgColor },
            className: `bg-blue-100 w-8 h-8 rounded-full flex justify-center items-center ${className}`,
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              FontAwesomeIcon,
              {
                icon: icon2,
                style: { color },
                className: iconClassName
              }
            )
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: "font-semibold text-base", children: label })
      ] });
    };
    CustomIcon_default = CustomIcon;
  }
});

// app/components/Skeletons/skeleton.tsx
var import_jsx_runtime2, Skeleton, skeleton_default;
var init_skeleton = __esm({
  "app/components/Skeletons/skeleton.tsx"() {
    "use strict";
    import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
    Skeleton = ({ className }) => {
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: ` animate-pulse transition-all bg-gray-200 ${className}` });
    };
    skeleton_default = Skeleton;
  }
});

// app/components/ProjectSummary.tsx
var ProjectSummary_exports = {};
__export(ProjectSummary_exports, {
  default: () => ProjectSummary_default
});
var import_react2, import_jsx_runtime3, ProjectSummary, ProjectSummary_default;
var init_ProjectSummary = __esm({
  "app/components/ProjectSummary.tsx"() {
    "use strict";
    init_index_es();
    init_sharp_regular_svg_icons();
    init_pro_duotone_svg_icons();
    init_helpers();
    init_CustomIcon();
    import_react2 = __toESM(require_react(), 1);
    init_skeleton();
    import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
    ProjectSummary = ({ data }) => {
      const [isLoading, setIsLoading] = (0, import_react2.useState)(true);
      (0, import_react2.useEffect)(() => {
        setTimeout(() => {
          setIsLoading(false);
        }, 1e3);
      }, []);
      const {
        change_orders,
        contract_amount_held,
        invoice_payments,
        original_contract_amount,
        remain_invoices,
        service_tickets,
        total_project_amount,
        unpaid_invoices,
        work_orders
      } = data;
      if (isLoading) {
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "space-y-2 text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            CustomIcon_default,
            {
              icon: faCalculator,
              label: "Project Summary",
              color: `#78AEFE`,
              bgColor: `#ECF3FF`
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col gap-3.5", children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "border border-gray-300 w-full h-full rounded-md space-y-2 px-4 py-2 relative", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center text-sm", children: [
                "Original Contract Amount (w/Tax)",
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(skeleton_default, { className: "w-4 h-2 rounded-xl" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center text-sm", children: [
                "Change Orders (w/Tax)",
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(skeleton_default, { className: "w-4 h-2 rounded-xl" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "w-6 h-8 rounded-full bg-white shadow-lg shadow-black/20 absolute -bottom-3 right-1/2  flex justify-center items-center", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(FontAwesomeIcon, { icon: faPlus }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center text-sm bg-gray-200 px-4 py-2 rounded-md ", children: [
              "Total Project Amount (w/Tax)",
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(skeleton_default, { className: "w-6 h-2 rounded-xl" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "border border-gray-300 w-full h-full rounded-md space-y-2 px-4 py-2 relative", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "w-8 h-8 rounded-full bg-white shadow-lg shadow-black/20 absolute -top-4 right-1/2  flex justify-center items-center", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(FontAwesomeIcon, { icon: faMinus }) }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center text-sm", children: [
                "Customer Payments",
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(skeleton_default, { className: "w-6 h-2 rounded-xl" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center text-sm", children: [
                "Unpaid Invoices",
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(skeleton_default, { className: "w-4 h-2 rounded-xl" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "relative px-4 py-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "border border-dashed  w-full " }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "w-6 h-8 rounded-full bg-white shadow-lg shadow-black/20 absolute -top-2.5 right-1/2  flex justify-center items-center", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(FontAwesomeIcon, { icon: faEquals }) }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center font-bold text-sm mt-3", children: [
                "Remaining to Invoice",
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(skeleton_default, { className: "w-6 h-2 rounded-xl" })
              ] }),
              contract_amount_held && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center font-bold text-sm mt-3", children: [
                "Current Retention Held",
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(skeleton_default, { className: "w-6 h-2 rounded-xl" })
              ] })
            ] })
          ] })
        ] });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "space-y-2 text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          CustomIcon_default,
          {
            icon: faCalculator,
            label: "Project Summary",
            color: `#78AEFE`,
            bgColor: `#ECF3FF`,
            className: "text-base"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col gap-3.5", children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "border border-gray-300 w-full h-full rounded-md space-y-2 px-4 py-2 relative", children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center text-sm", children: [
              "Original Contract Amount (w/Tax)",
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { className: "text-emerald-600 font-semibold", children: formatCurrency(Number(original_contract_amount)) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center text-sm", children: [
              "Change Orders (w/Tax)",
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { className: "text-emerald-600 font-semibold", children: formatCurrency(Number(change_orders)) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "w-8 h-8 rounded-full bg-white shadow-lg shadow-black/20 absolute -bottom-3 right-1/2  flex justify-center items-center", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(FontAwesomeIcon, { icon: faPlus }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center text-sm bg-gray-200 px-4 py-2 rounded-md ", children: [
            "Total Project Amount (w/Tax)",
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { className: "text-blue-950 font-semibold", children: formatCurrency(Number(total_project_amount)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "border border-gray-300 w-full h-full rounded-md space-y-2 px-4 py-2 relative", children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "w-8 h-8 rounded-full bg-white shadow-lg shadow-black/20 absolute -top-4 right-1/2  flex justify-center items-center", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(FontAwesomeIcon, { icon: faMinus }) }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center text-sm", children: [
              "Customer Payments",
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { className: "text-red-500 font-semibold", children: formatCurrency(Number(invoice_payments)) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center text-sm", children: [
              "Unpaid Invoices",
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { className: "text-red-500 font-semibold", children: formatCurrency(Number(unpaid_invoices)) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "relative px-4 py-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "border border-dashed  w-full " }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "w-8 h-8 rounded-full bg-white shadow-lg shadow-black/20 absolute -top-2.5 right-1/2  flex justify-center items-center", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(FontAwesomeIcon, { icon: faEquals }) }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center font-bold text-sm mt-3", children: [
              "Remaining to Invoice",
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { children: formatCurrency(Number(remain_invoices)) })
            ] }),
            contract_amount_held && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("p", { className: "flex justify-between items-center font-bold text-sm mt-3", children: [
              "Current Retention Held",
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { children: formatCurrency(Number(contract_amount_held)) })
            ] })
          ] })
        ] })
      ] });
    };
    ProjectSummary_default = ProjectSummary;
  }
});

// node_modules/@fortawesome/pro-solid-svg-icons/index.mjs
var faFileLines, faCalendarDays, faUserVneck, faSackDollar, faFileChartColumn, faUserGroup, faUserTie, faAddressCard, faFileImage, faBoxCircleCheck, faCalculator2, faCalendar, faCalendarDay;
var init_pro_solid_svg_icons = __esm({
  "node_modules/@fortawesome/pro-solid-svg-icons/index.mjs"() {
    faFileLines = {
      prefix: "fas",
      iconName: "file-lines",
      icon: [384, 512, [128441, 128462, 61686, "file-alt", "file-text"], "f15c", "M64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-288-128 0c-17.7 0-32-14.3-32-32L224 0 64 0zM256 0l0 128 128 0L256 0zM112 256l160 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-160 0c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64l160 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-160 0c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64l160 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-160 0c-8.8 0-16-7.2-16-16s7.2-16 16-16z"]
    };
    faCalendarDays = {
      prefix: "fas",
      iconName: "calendar-days",
      icon: [448, 512, ["calendar-alt"], "f073", "M128 0c17.7 0 32 14.3 32 32l0 32 128 0 0-32c0-17.7 14.3-32 32-32s32 14.3 32 32l0 32 48 0c26.5 0 48 21.5 48 48l0 48L0 160l0-48C0 85.5 21.5 64 48 64l48 0 0-32c0-17.7 14.3-32 32-32zM0 192l448 0 0 272c0 26.5-21.5 48-48 48L48 512c-26.5 0-48-21.5-48-48L0 192zm64 80l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16l-32 0c-8.8 0-16 7.2-16 16zm128 0l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16l-32 0c-8.8 0-16 7.2-16 16zm144-16c-8.8 0-16 7.2-16 16l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16l-32 0zM64 400l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16l-32 0c-8.8 0-16 7.2-16 16zm144-16c-8.8 0-16 7.2-16 16l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16l-32 0zm112 16l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16l-32 0c-8.8 0-16 7.2-16 16z"]
    };
    faUserVneck = {
      prefix: "fas",
      iconName: "user-vneck",
      icon: [448, 512, [], "e461", "M224 0a128 128 0 1 0 0 256A128 128 0 1 0 224 0zM145.9 314.9c-3.5-5.2-9.8-8-15.9-6.6C55.5 325.5 0 392.3 0 472l0 8c0 17.7 14.3 32 32 32l384 0c17.7 0 32-14.3 32-32l0-8c0-79.7-55.5-146.5-130-163.7c-6.1-1.4-12.4 1.4-15.9 6.6L237.3 412c-6.3 9.5-20.3 9.5-26.6 0l-64.8-97.1z"]
    };
    faSackDollar = {
      prefix: "fas",
      iconName: "sack-dollar",
      icon: [512, 512, [128176], "f81d", "M320 96L192 96 144.6 24.9C137.5 14.2 145.1 0 157.9 0L354.1 0c12.8 0 20.4 14.2 13.3 24.9L320 96zM192 128l128 0c3.8 2.5 8.1 5.3 13 8.4C389.7 172.7 512 250.9 512 416c0 53-43 96-96 96L96 512c-53 0-96-43-96-96C0 250.9 122.3 172.7 179 136.4c0 0 0 0 0 0s0 0 0 0c4.8-3.1 9.2-5.9 13-8.4zm84 88c0-11-9-20-20-20s-20 9-20 20l0 14c-7.6 1.7-15.2 4.4-22.2 8.5c-13.9 8.3-25.9 22.8-25.8 43.9c.1 20.3 12 33.1 24.7 40.7c11 6.6 24.7 10.8 35.6 14l1.7 .5c12.6 3.8 21.8 6.8 28 10.7c5.1 3.2 5.8 5.4 5.9 8.2c.1 5-1.8 8-5.9 10.5c-5 3.1-12.9 5-21.4 4.7c-11.1-.4-21.5-3.9-35.1-8.5c-2.3-.8-4.7-1.6-7.2-2.4c-10.5-3.5-21.8 2.2-25.3 12.6s2.2 21.8 12.6 25.3c1.9 .6 4 1.3 6.1 2.1c0 0 0 0 0 0s0 0 0 0c8.3 2.9 17.9 6.2 28.2 8.4l0 14.6c0 11 9 20 20 20s20-9 20-20l0-13.8c8-1.7 16-4.5 23.2-9c14.3-8.9 25.1-24.1 24.8-45c-.3-20.3-11.7-33.4-24.6-41.6c-11.5-7.2-25.9-11.6-37.1-15c0 0 0 0 0 0l-.7-.2c-12.8-3.9-21.9-6.7-28.3-10.5c-5.2-3.1-5.3-4.9-5.3-6.7c0-3.7 1.4-6.5 6.2-9.3c5.4-3.2 13.6-5.1 21.5-5c9.6 .1 20.2 2.2 31.2 5.2c10.7 2.8 21.6-3.5 24.5-14.2s-3.5-21.6-14.2-24.5c-6.5-1.7-13.7-3.4-21.1-4.7l0-13.9z"]
    };
    faFileChartColumn = {
      prefix: "fas",
      iconName: "file-chart-column",
      icon: [384, 512, ["file-chart-line"], "f659", "M64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-288-128 0c-17.7 0-32-14.3-32-32L224 0 64 0zM256 0l0 128 128 0L256 0zM216 248l0 176c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-176c0-13.3 10.7-24 24-24s24 10.7 24 24zm88 64l0 112c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-112c0-13.3 10.7-24 24-24s24 10.7 24 24zM128 376l0 48c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-48c0-13.3 10.7-24 24-24s24 10.7 24 24z"]
    };
    faUserGroup = {
      prefix: "fas",
      iconName: "user-group",
      icon: [640, 512, [128101, "user-friends"], "f500", "M96 128a128 128 0 1 1 256 0A128 128 0 1 1 96 128zM0 482.3C0 383.8 79.8 304 178.3 304l91.4 0C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7L29.7 512C13.3 512 0 498.7 0 482.3zM609.3 512l-137.8 0c5.4-9.4 8.6-20.3 8.6-32l0-8c0-60.7-27.1-115.2-69.8-151.8c2.4-.1 4.7-.2 7.1-.2l61.4 0C567.8 320 640 392.2 640 481.3c0 17-13.8 30.7-30.7 30.7zM432 256c-31 0-59-12.6-79.3-32.9C372.4 196.5 384 163.6 384 128c0-26.8-6.6-52.1-18.3-74.3C384.3 40.1 407.2 32 432 32c61.9 0 112 50.1 112 112s-50.1 112-112 112z"]
    };
    faUserTie = {
      prefix: "fas",
      iconName: "user-tie",
      icon: [448, 512, [], "f508", "M96 128a128 128 0 1 0 256 0A128 128 0 1 0 96 128zm94.5 200.2l18.6 31L175.8 483.1l-36-146.9c-2-8.1-9.8-13.4-17.9-11.3C51.9 342.4 0 405.8 0 481.3c0 17 13.8 30.7 30.7 30.7l131.7 0c0 0 0 0 .1 0l5.5 0 112 0 5.5 0c0 0 0 0 .1 0l131.7 0c17 0 30.7-13.8 30.7-30.7c0-75.5-51.9-138.9-121.9-156.4c-8.1-2-15.9 3.3-17.9 11.3l-36 146.9L238.9 359.2l18.6-31c6.4-10.7-1.3-24.2-13.7-24.2L224 304l-19.7 0c-12.4 0-20.1 13.6-13.7 24.2z"]
    };
    faAddressCard = {
      prefix: "fas",
      iconName: "address-card",
      icon: [576, 512, [62140, "contact-card", "vcard"], "f2bb", "M64 32C28.7 32 0 60.7 0 96L0 416c0 35.3 28.7 64 64 64l448 0c35.3 0 64-28.7 64-64l0-320c0-35.3-28.7-64-64-64L64 32zm80 256l64 0c44.2 0 80 35.8 80 80c0 8.8-7.2 16-16 16L80 384c-8.8 0-16-7.2-16-16c0-44.2 35.8-80 80-80zm-32-96a64 64 0 1 1 128 0 64 64 0 1 1 -128 0zm256-32l128 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-128 0c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64l128 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-128 0c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64l128 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-128 0c-8.8 0-16-7.2-16-16s7.2-16 16-16z"]
    };
    faFileImage = {
      prefix: "fas",
      iconName: "file-image",
      icon: [384, 512, [128443], "f1c5", "M64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-288-128 0c-17.7 0-32-14.3-32-32L224 0 64 0zM256 0l0 128 128 0L256 0zM64 256a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm152 32c5.3 0 10.2 2.6 13.2 6.9l88 128c3.4 4.9 3.7 11.3 1 16.5s-8.2 8.6-14.2 8.6l-88 0-40 0-48 0-48 0c-5.8 0-11.1-3.1-13.9-8.1s-2.8-11.2 .2-16.1l48-80c2.9-4.8 8.1-7.8 13.7-7.8s10.8 2.9 13.7 7.8l12.8 21.4 48.3-70.2c3-4.3 7.9-6.9 13.2-6.9z"]
    };
    faBoxCircleCheck = {
      prefix: "fas",
      iconName: "box-circle-check",
      icon: [576, 512, [], "e0c4", "M93.7 32L208 32l0 128L0 160 50.7 58.5C58.9 42.3 75.5 32 93.7 32zM240 32l114.3 0c18.2 0 34.8 10.3 42.9 26.5L448 160l-32 0-176 0 0-128zM0 416L0 192l416 0 0 .7c-89.7 8.1-160 83.5-160 175.3c0 42.5 15.1 81.6 40.2 112L64 480c-35.3 0-64-28.7-64-64zm288-48a144 144 0 1 1 288 0 144 144 0 1 1 -288 0zm211.3-43.3c-6.2-6.2-16.4-6.2-22.6 0L416 385.4l-28.7-28.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6l40 40c6.2 6.2 16.4 6.2 22.6 0l72-72c6.2-6.2 6.2-16.4 0-22.6z"]
    };
    faCalculator2 = {
      prefix: "fas",
      iconName: "calculator",
      icon: [384, 512, [128425], "f1ec", "M64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-384c0-35.3-28.7-64-64-64L64 0zM96 64l192 0c17.7 0 32 14.3 32 32l0 32c0 17.7-14.3 32-32 32L96 160c-17.7 0-32-14.3-32-32l0-32c0-17.7 14.3-32 32-32zm32 160a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zM96 352a32 32 0 1 1 0-64 32 32 0 1 1 0 64zM64 416c0-17.7 14.3-32 32-32l96 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-96 0c-17.7 0-32-14.3-32-32zM192 256a32 32 0 1 1 0-64 32 32 0 1 1 0 64zm32 64a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zm64-64a32 32 0 1 1 0-64 32 32 0 1 1 0 64zm32 64a32 32 0 1 1 -64 0 32 32 0 1 1 64 0zM288 448a32 32 0 1 1 0-64 32 32 0 1 1 0 64z"]
    };
    faCalendar = {
      prefix: "fas",
      iconName: "calendar",
      icon: [448, 512, [128197, 128198], "f133", "M96 32l0 32L48 64C21.5 64 0 85.5 0 112l0 48 448 0 0-48c0-26.5-21.5-48-48-48l-48 0 0-32c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 32L160 64l0-32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192L0 192 0 464c0 26.5 21.5 48 48 48l352 0c26.5 0 48-21.5 48-48l0-272z"]
    };
    faCalendarDay = {
      prefix: "fas",
      iconName: "calendar-day",
      icon: [448, 512, [], "f783", "M128 0c17.7 0 32 14.3 32 32l0 32 128 0 0-32c0-17.7 14.3-32 32-32s32 14.3 32 32l0 32 48 0c26.5 0 48 21.5 48 48l0 48L0 160l0-48C0 85.5 21.5 64 48 64l48 0 0-32c0-17.7 14.3-32 32-32zM0 192l448 0 0 272c0 26.5-21.5 48-48 48L48 512c-26.5 0-48-21.5-48-48L0 192zm80 64c-8.8 0-16 7.2-16 16l0 96c0 8.8 7.2 16 16 16l96 0c8.8 0 16-7.2 16-16l0-96c0-8.8-7.2-16-16-16l-96 0z"]
    };
  }
});

// app/components/Invoiced.tsx
var Invoiced_exports = {};
__export(Invoiced_exports, {
  default: () => Invoiced_default
});
var import_react3, import_jsx_runtime4, Invoiced, Invoiced_default, InvoicedSkeleton;
var init_Invoiced = __esm({
  "app/components/Invoiced.tsx"() {
    "use strict";
    init_pro_solid_svg_icons();
    init_index_es();
    init_helpers();
    init_skeleton();
    import_react3 = __toESM(require_react(), 1);
    init_CustomIcon();
    import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
    Invoiced = ({ data, customer_additional_contacts }) => {
      const [isLoading, setIsLoading] = (0, import_react3.useState)(true);
      console.log("invoiced", customer_additional_contacts);
      const {
        amount_invoiced,
        original_contract_amount,
        remain_to_invoice,
        total_actual_cost,
        gross_profit
      } = data?.billing_vs_actual;
      const invoicedPercentage = (parseFloat(amount_invoiced) / parseFloat(original_contract_amount) * 100).toFixed(0);
      const remainingPercentage = (parseFloat(remain_to_invoice) / parseFloat(original_contract_amount) * 100).toFixed(0);
      (0, import_react3.useEffect)(() => {
        if (data && customer_additional_contacts) {
          setIsLoading(false);
        }
      }, []);
      const Items = [
        {
          id: 1,
          label: "Total Project Amount (no/Tax)",
          value: `${formatCurrency(original_contract_amount)}
`,
          color: "text-emerald-600"
        },
        {
          id: 2,
          label: "Invoiced to Date (no/Tax)",
          value: `${formatCurrency(Number(amount_invoiced))}
`,
          color: "text-emerald-600"
        },
        {
          id: 3,
          label: "Remaining to Invoice (no/Tax)",
          value: `${formatCurrency(Number(remain_to_invoice))}`,
          color: "text-emerald-600"
        },
        {
          id: 4,
          label: "Total Actual Costs",
          value: `${formatCurrency(Number(total_actual_cost))}`,
          color: "text-red-600"
        },
        {
          id: 5,
          label: "Gross Profit",
          value: `${formatCurrency(Number(gross_profit))}`,
          color: "text-emerald-600"
        }
      ];
      const commonStyle = `flex justify-between items-center text-sm`;
      const mainDivStyle = `bg-white border  rounded-md  hover:shadow-lg hover:transition-shadow hover:duration-500 px-4 py-2.5 h-full`;
      return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "flex flex-col gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: mainDivStyle, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "flex justify-start items-center gap-3 w-full  ", children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "bg-[#ffe8d2dd] w-12 h-10 rounded-full flex justify-center items-center text-[#FB8056] ", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FontAwesomeIcon, { icon: faUserGroup, className: "text-base" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: " w-full", children: [
            "Customer",
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("p", { className: "flex justify-between items-center  font-semibold hover:text-[#FB8056] hover:cursor-pointer hover:transition-all hover:duration-700", children: [
              data?.customer_name,
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { className: "text-[#FB8056] font-semibold", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FontAwesomeIcon, { icon: faAddressCard, className: "text-sm" }) })
            ] })
          ] })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: mainDivStyle, children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            CustomIcon_default,
            {
              icon: faFileChartColumn,
              label: "Invoiced vs Actual",
              bgColor: "#F3ECF5",
              color: "#CE6698"
            }
          ),
          isLoading ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(InvoicedSkeleton, {}) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "space-y-1 mt-3", children: Items.map((i) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("p", { className: commonStyle, children: [
            i.label,
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { className: `${i.color} font-semibold`, children: i.value })
          ] }, i.id)) })
        ] })
      ] });
    };
    Invoiced_default = Invoiced;
    InvoicedSkeleton = () => {
      const skeletonStyle = ` w-6 h-2 rounded-xl`;
      const commonStyle = `flex justify-between items-center text-sm`;
      return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "space-y-1 mt-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("p", { className: commonStyle, children: [
          "Total Project Amount (no/Tax)",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(skeleton_default, { className: skeletonStyle })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("p", { className: commonStyle, children: [
          "Invoiced to Date (no/Tax) (77%)",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(skeleton_default, { className: skeletonStyle })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("p", { className: commonStyle, children: [
          "Remaining to Invoice (no/Tax) (23%)",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(skeleton_default, { className: skeletonStyle })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("p", { className: commonStyle, children: [
          "Total Actual Costs ",
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(skeleton_default, { className: skeletonStyle })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("p", { className: commonStyle, children: [
          "Gross Profit ",
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(skeleton_default, { className: skeletonStyle })
        ] })
      ] });
    };
  }
});

// node_modules/apexcharts/dist/apexcharts.common.js
var require_apexcharts_common = __commonJS({
  "node_modules/apexcharts/dist/apexcharts.common.js"(exports, module) {
    "use strict";
    function t2(t3, e3) {
      (null == e3 || e3 > t3.length) && (e3 = t3.length);
      for (var i2 = 0, a3 = Array(e3); i2 < e3; i2++) a3[i2] = t3[i2];
      return a3;
    }
    function e2(t3) {
      if (void 0 === t3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return t3;
    }
    function i(t3, e3) {
      if (!(t3 instanceof e3)) throw new TypeError("Cannot call a class as a function");
    }
    function a2(t3, e3) {
      for (var i2 = 0; i2 < e3.length; i2++) {
        var a3 = e3[i2];
        a3.enumerable = a3.enumerable || false, a3.configurable = true, "value" in a3 && (a3.writable = true), Object.defineProperty(t3, f(a3.key), a3);
      }
    }
    function s(t3, e3, i2) {
      return e3 && a2(t3.prototype, e3), i2 && a2(t3, i2), Object.defineProperty(t3, "prototype", { writable: false }), t3;
    }
    function r2(t3) {
      var i2 = h();
      return function() {
        var a3, s2 = n(t3);
        if (i2) {
          var r3 = n(this).constructor;
          a3 = Reflect.construct(s2, arguments, r3);
        } else a3 = s2.apply(this, arguments);
        return function(t4, i3) {
          if (i3 && ("object" == typeof i3 || "function" == typeof i3)) return i3;
          if (void 0 !== i3) throw new TypeError("Derived constructors may only return object or undefined");
          return e2(t4);
        }(this, a3);
      };
    }
    function o2(t3, e3, i2) {
      return (e3 = f(e3)) in t3 ? Object.defineProperty(t3, e3, { value: i2, enumerable: true, configurable: true, writable: true }) : t3[e3] = i2, t3;
    }
    function n(t3) {
      return n = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
        return t4.__proto__ || Object.getPrototypeOf(t4);
      }, n(t3);
    }
    function l(t3, e3) {
      if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
      t3.prototype = Object.create(e3 && e3.prototype, { constructor: { value: t3, writable: true, configurable: true } }), Object.defineProperty(t3, "prototype", { writable: false }), e3 && g(t3, e3);
    }
    function h() {
      try {
        var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t4) {
      }
      return (h = function() {
        return !!t3;
      })();
    }
    function c2(t3, e3) {
      var i2 = Object.keys(t3);
      if (Object.getOwnPropertySymbols) {
        var a3 = Object.getOwnPropertySymbols(t3);
        e3 && (a3 = a3.filter(function(e4) {
          return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
        })), i2.push.apply(i2, a3);
      }
      return i2;
    }
    function d(t3) {
      for (var e3 = 1; e3 < arguments.length; e3++) {
        var i2 = null != arguments[e3] ? arguments[e3] : {};
        e3 % 2 ? c2(Object(i2), true).forEach(function(e4) {
          o2(t3, e4, i2[e4]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(i2)) : c2(Object(i2)).forEach(function(e4) {
          Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(i2, e4));
        });
      }
      return t3;
    }
    function g(t3, e3) {
      return g = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
        return t4.__proto__ = e4, t4;
      }, g(t3, e3);
    }
    function u(t3, e3) {
      return function(t4) {
        if (Array.isArray(t4)) return t4;
      }(t3) || function(t4, e4) {
        var i2 = null == t4 ? null : "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
        if (null != i2) {
          var a3, s2, r3, o3, n2 = [], l2 = true, h2 = false;
          try {
            if (r3 = (i2 = i2.call(t4)).next, 0 === e4) {
              if (Object(i2) !== i2) return;
              l2 = false;
            } else for (; !(l2 = (a3 = r3.call(i2)).done) && (n2.push(a3.value), n2.length !== e4); l2 = true) ;
          } catch (t5) {
            h2 = true, s2 = t5;
          } finally {
            try {
              if (!l2 && null != i2.return && (o3 = i2.return(), Object(o3) !== o3)) return;
            } finally {
              if (h2) throw s2;
            }
          }
          return n2;
        }
      }(t3, e3) || b(t3, e3) || function() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }
    function p(e3) {
      return function(e4) {
        if (Array.isArray(e4)) return t2(e4);
      }(e3) || function(t3) {
        if ("undefined" != typeof Symbol && null != t3[Symbol.iterator] || null != t3["@@iterator"]) return Array.from(t3);
      }(e3) || b(e3) || function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }
    function f(t3) {
      var e3 = function(t4, e4) {
        if ("object" != typeof t4 || !t4) return t4;
        var i2 = t4[Symbol.toPrimitive];
        if (void 0 !== i2) {
          var a3 = i2.call(t4, e4 || "default");
          if ("object" != typeof a3) return a3;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === e4 ? String : Number)(t4);
      }(t3, "string");
      return "symbol" == typeof e3 ? e3 : e3 + "";
    }
    function x(t3) {
      return x = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
        return typeof t4;
      } : function(t4) {
        return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
      }, x(t3);
    }
    function b(e3, i2) {
      if (e3) {
        if ("string" == typeof e3) return t2(e3, i2);
        var a3 = {}.toString.call(e3).slice(8, -1);
        return "Object" === a3 && e3.constructor && (a3 = e3.constructor.name), "Map" === a3 || "Set" === a3 ? Array.from(e3) : "Arguments" === a3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a3) ? t2(e3, i2) : void 0;
      }
    }
    var v = function() {
      function t3() {
        i(this, t3);
      }
      return s(t3, [{ key: "shadeRGBColor", value: function(t4, e3) {
        var i2 = e3.split(","), a3 = t4 < 0 ? 0 : 255, s2 = t4 < 0 ? -1 * t4 : t4, r3 = parseInt(i2[0].slice(4), 10), o3 = parseInt(i2[1], 10), n2 = parseInt(i2[2], 10);
        return "rgb(" + (Math.round((a3 - r3) * s2) + r3) + "," + (Math.round((a3 - o3) * s2) + o3) + "," + (Math.round((a3 - n2) * s2) + n2) + ")";
      } }, { key: "shadeHexColor", value: function(t4, e3) {
        var i2 = parseInt(e3.slice(1), 16), a3 = t4 < 0 ? 0 : 255, s2 = t4 < 0 ? -1 * t4 : t4, r3 = i2 >> 16, o3 = i2 >> 8 & 255, n2 = 255 & i2;
        return "#" + (16777216 + 65536 * (Math.round((a3 - r3) * s2) + r3) + 256 * (Math.round((a3 - o3) * s2) + o3) + (Math.round((a3 - n2) * s2) + n2)).toString(16).slice(1);
      } }, { key: "shadeColor", value: function(e3, i2) {
        return t3.isColorHex(i2) ? this.shadeHexColor(e3, i2) : this.shadeRGBColor(e3, i2);
      } }], [{ key: "bind", value: function(t4, e3) {
        return function() {
          return t4.apply(e3, arguments);
        };
      } }, { key: "isObject", value: function(t4) {
        return t4 && "object" === x(t4) && !Array.isArray(t4) && null != t4;
      } }, { key: "is", value: function(t4, e3) {
        return Object.prototype.toString.call(e3) === "[object " + t4 + "]";
      } }, { key: "listToArray", value: function(t4) {
        var e3, i2 = [];
        for (e3 = 0; e3 < t4.length; e3++) i2[e3] = t4[e3];
        return i2;
      } }, { key: "extend", value: function(t4, e3) {
        var i2 = this;
        "function" != typeof Object.assign && (Object.assign = function(t5) {
          if (null == t5) throw new TypeError("Cannot convert undefined or null to object");
          for (var e4 = Object(t5), i3 = 1; i3 < arguments.length; i3++) {
            var a4 = arguments[i3];
            if (null != a4) for (var s2 in a4) a4.hasOwnProperty(s2) && (e4[s2] = a4[s2]);
          }
          return e4;
        });
        var a3 = Object.assign({}, t4);
        return this.isObject(t4) && this.isObject(e3) && Object.keys(e3).forEach(function(s2) {
          i2.isObject(e3[s2]) && s2 in t4 ? a3[s2] = i2.extend(t4[s2], e3[s2]) : Object.assign(a3, o2({}, s2, e3[s2]));
        }), a3;
      } }, { key: "extendArray", value: function(e3, i2) {
        var a3 = [];
        return e3.map(function(e4) {
          a3.push(t3.extend(i2, e4));
        }), e3 = a3;
      } }, { key: "monthMod", value: function(t4) {
        return t4 % 12;
      } }, { key: "clone", value: function(e3) {
        if (t3.is("Array", e3)) {
          for (var i2 = [], a3 = 0; a3 < e3.length; a3++) i2[a3] = this.clone(e3[a3]);
          return i2;
        }
        if (t3.is("Null", e3)) return null;
        if (t3.is("Date", e3)) return e3;
        if ("object" === x(e3)) {
          var s2 = {};
          for (var r3 in e3) e3.hasOwnProperty(r3) && (s2[r3] = this.clone(e3[r3]));
          return s2;
        }
        return e3;
      } }, { key: "log10", value: function(t4) {
        return Math.log(t4) / Math.LN10;
      } }, { key: "roundToBase10", value: function(t4) {
        return Math.pow(10, Math.floor(Math.log10(t4)));
      } }, { key: "roundToBase", value: function(t4, e3) {
        return Math.pow(e3, Math.floor(Math.log(t4) / Math.log(e3)));
      } }, { key: "parseNumber", value: function(t4) {
        return null === t4 ? t4 : parseFloat(t4);
      } }, { key: "stripNumber", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
        return Number.isInteger(t4) ? t4 : parseFloat(t4.toPrecision(e3));
      } }, { key: "randomId", value: function() {
        return (Math.random() + 1).toString(36).substring(4);
      } }, { key: "noExponents", value: function(t4) {
        var e3 = String(t4).split(/[eE]/);
        if (1 === e3.length) return e3[0];
        var i2 = "", a3 = t4 < 0 ? "-" : "", s2 = e3[0].replace(".", ""), r3 = Number(e3[1]) + 1;
        if (r3 < 0) {
          for (i2 = a3 + "0."; r3++; ) i2 += "0";
          return i2 + s2.replace(/^-/, "");
        }
        for (r3 -= s2.length; r3--; ) i2 += "0";
        return s2 + i2;
      } }, { key: "getDimensions", value: function(t4) {
        var e3 = getComputedStyle(t4, null), i2 = t4.clientHeight, a3 = t4.clientWidth;
        return i2 -= parseFloat(e3.paddingTop) + parseFloat(e3.paddingBottom), [a3 -= parseFloat(e3.paddingLeft) + parseFloat(e3.paddingRight), i2];
      } }, { key: "getBoundingClientRect", value: function(t4) {
        var e3 = t4.getBoundingClientRect();
        return { top: e3.top, right: e3.right, bottom: e3.bottom, left: e3.left, width: t4.clientWidth, height: t4.clientHeight, x: e3.left, y: e3.top };
      } }, { key: "getLargestStringFromArr", value: function(t4) {
        return t4.reduce(function(t5, e3) {
          return Array.isArray(e3) && (e3 = e3.reduce(function(t6, e4) {
            return t6.length > e4.length ? t6 : e4;
          })), t5.length > e3.length ? t5 : e3;
        }, 0);
      } }, { key: "hexToRgba", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999", e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.6;
        "#" !== t4.substring(0, 1) && (t4 = "#999999");
        var i2 = t4.replace("#", "");
        i2 = i2.match(new RegExp("(.{" + i2.length / 3 + "})", "g"));
        for (var a3 = 0; a3 < i2.length; a3++) i2[a3] = parseInt(1 === i2[a3].length ? i2[a3] + i2[a3] : i2[a3], 16);
        return void 0 !== e3 && i2.push(e3), "rgba(" + i2.join(",") + ")";
      } }, { key: "getOpacityFromRGBA", value: function(t4) {
        return parseFloat(t4.replace(/^.*,(.+)\)/, "$1"));
      } }, { key: "rgb2hex", value: function(t4) {
        return (t4 = t4.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t4.length ? "#" + ("0" + parseInt(t4[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t4[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t4[3], 10).toString(16)).slice(-2) : "";
      } }, { key: "isColorHex", value: function(t4) {
        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t4);
      } }, { key: "getPolygonPos", value: function(t4, e3) {
        for (var i2 = [], a3 = 2 * Math.PI / e3, s2 = 0; s2 < e3; s2++) {
          var r3 = {};
          r3.x = t4 * Math.sin(s2 * a3), r3.y = -t4 * Math.cos(s2 * a3), i2.push(r3);
        }
        return i2;
      } }, { key: "polarToCartesian", value: function(t4, e3, i2, a3) {
        var s2 = (a3 - 90) * Math.PI / 180;
        return { x: t4 + i2 * Math.cos(s2), y: e3 + i2 * Math.sin(s2) };
      } }, { key: "escapeString", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x", i2 = t4.toString().slice();
        return i2 = i2.replace(/[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi, e3);
      } }, { key: "negToZero", value: function(t4) {
        return t4 < 0 ? 0 : t4;
      } }, { key: "moveIndexInArray", value: function(t4, e3, i2) {
        if (i2 >= t4.length) for (var a3 = i2 - t4.length + 1; a3--; ) t4.push(void 0);
        return t4.splice(i2, 0, t4.splice(e3, 1)[0]), t4;
      } }, { key: "extractNumber", value: function(t4) {
        return parseFloat(t4.replace(/[^\d.]*/g, ""));
      } }, { key: "findAncestor", value: function(t4, e3) {
        for (; (t4 = t4.parentElement) && !t4.classList.contains(e3); ) ;
        return t4;
      } }, { key: "setELstyles", value: function(t4, e3) {
        for (var i2 in e3) e3.hasOwnProperty(i2) && (t4.style.key = e3[i2]);
      } }, { key: "preciseAddition", value: function(t4, e3) {
        var i2 = (String(t4).split(".")[1] || "").length, a3 = (String(e3).split(".")[1] || "").length, s2 = Math.pow(10, Math.max(i2, a3));
        return (Math.round(t4 * s2) + Math.round(e3 * s2)) / s2;
      } }, { key: "isNumber", value: function(t4) {
        return !isNaN(t4) && parseFloat(Number(t4)) === t4 && !isNaN(parseInt(t4, 10));
      } }, { key: "isFloat", value: function(t4) {
        return Number(t4) === t4 && t4 % 1 != 0;
      } }, { key: "isSafari", value: function() {
        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      } }, { key: "isFirefox", value: function() {
        return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
      } }, { key: "isMsEdge", value: function() {
        var t4 = window.navigator.userAgent, e3 = t4.indexOf("Edge/");
        return e3 > 0 && parseInt(t4.substring(e3 + 5, t4.indexOf(".", e3)), 10);
      } }, { key: "getGCD", value: function(t4, e3) {
        var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7, a3 = Math.pow(10, i2 - Math.floor(Math.log10(Math.max(t4, e3))));
        for (t4 = Math.round(Math.abs(t4) * a3), e3 = Math.round(Math.abs(e3) * a3); e3; ) {
          var s2 = e3;
          e3 = t4 % e3, t4 = s2;
        }
        return t4 / a3;
      } }, { key: "getPrimeFactors", value: function(t4) {
        for (var e3 = [], i2 = 2; t4 >= 2; ) t4 % i2 == 0 ? (e3.push(i2), t4 /= i2) : i2++;
        return e3;
      } }, { key: "mod", value: function(t4, e3) {
        var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7, a3 = Math.pow(10, i2 - Math.floor(Math.log10(Math.max(t4, e3))));
        return (t4 = Math.round(Math.abs(t4) * a3)) % (e3 = Math.round(Math.abs(e3) * a3)) / a3;
      } }]), t3;
    }();
    var m = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.setEasingFunctions();
      }
      return s(t3, [{ key: "setEasingFunctions", value: function() {
        var t4;
        if (!this.w.globals.easing) {
          switch (this.w.config.chart.animations.easing) {
            case "linear":
              t4 = "-";
              break;
            case "easein":
              t4 = "<";
              break;
            case "easeout":
              t4 = ">";
              break;
            case "easeinout":
            default:
              t4 = "<>";
              break;
            case "swing":
              t4 = function(t5) {
                var e3 = 1.70158;
                return (t5 -= 1) * t5 * ((e3 + 1) * t5 + e3) + 1;
              };
              break;
            case "bounce":
              t4 = function(t5) {
                return t5 < 1 / 2.75 ? 7.5625 * t5 * t5 : t5 < 2 / 2.75 ? 7.5625 * (t5 -= 1.5 / 2.75) * t5 + 0.75 : t5 < 2.5 / 2.75 ? 7.5625 * (t5 -= 2.25 / 2.75) * t5 + 0.9375 : 7.5625 * (t5 -= 2.625 / 2.75) * t5 + 0.984375;
              };
              break;
            case "elastic":
              t4 = function(t5) {
                return t5 === !!t5 ? t5 : Math.pow(2, -10 * t5) * Math.sin((t5 - 0.075) * (2 * Math.PI) / 0.3) + 1;
              };
          }
          this.w.globals.easing = t4;
        }
      } }, { key: "animateLine", value: function(t4, e3, i2, a3) {
        t4.attr(e3).animate(a3).attr(i2);
      } }, { key: "animateMarker", value: function(t4, e3, i2, a3) {
        t4.attr({ opacity: 0 }).animate(e3, i2).attr({ opacity: 1 }).afterAll(function() {
          a3();
        });
      } }, { key: "animateRect", value: function(t4, e3, i2, a3, s2) {
        t4.attr(e3).animate(a3).attr(i2).afterAll(function() {
          return s2();
        });
      } }, { key: "animatePathsGradually", value: function(t4) {
        var e3 = t4.el, i2 = t4.realIndex, a3 = t4.j, s2 = t4.fill, r3 = t4.pathFrom, o3 = t4.pathTo, n2 = t4.speed, l2 = t4.delay, h2 = this.w, c3 = 0;
        h2.config.chart.animations.animateGradually.enabled && (c3 = h2.config.chart.animations.animateGradually.delay), h2.config.chart.animations.dynamicAnimation.enabled && h2.globals.dataChanged && "bar" !== h2.config.chart.type && (c3 = 0), this.morphSVG(e3, i2, a3, "line" !== h2.config.chart.type || h2.globals.comboCharts ? s2 : "stroke", r3, o3, n2, l2 * c3);
      } }, { key: "showDelayedElements", value: function() {
        this.w.globals.delayedElements.forEach(function(t4) {
          var e3 = t4.el;
          e3.classList.remove("apexcharts-element-hidden"), e3.classList.add("apexcharts-hidden-element-shown");
        });
      } }, { key: "animationCompleted", value: function(t4) {
        var e3 = this.w;
        e3.globals.animationEnded || (e3.globals.animationEnded = true, this.showDelayedElements(), "function" == typeof e3.config.chart.events.animationEnd && e3.config.chart.events.animationEnd(this.ctx, { el: t4, w: e3 }));
      } }, { key: "morphSVG", value: function(t4, e3, i2, a3, s2, r3, o3, n2) {
        var l2 = this, h2 = this.w;
        s2 || (s2 = t4.attr("pathFrom")), r3 || (r3 = t4.attr("pathTo"));
        var c3 = function(t5) {
          return "radar" === h2.config.chart.type && (o3 = 1), "M 0 ".concat(h2.globals.gridHeight);
        };
        (!s2 || s2.indexOf("undefined") > -1 || s2.indexOf("NaN") > -1) && (s2 = c3()), (!r3 || r3.indexOf("undefined") > -1 || r3.indexOf("NaN") > -1) && (r3 = c3()), h2.globals.shouldAnimate || (o3 = 1), t4.plot(s2).animate(1, h2.globals.easing, n2).plot(s2).animate(o3, h2.globals.easing, n2).plot(r3).afterAll(function() {
          v.isNumber(i2) ? i2 === h2.globals.series[h2.globals.maxValsInArrayIndex].length - 2 && h2.globals.shouldAnimate && l2.animationCompleted(t4) : "none" !== a3 && h2.globals.shouldAnimate && (!h2.globals.comboCharts && e3 === h2.globals.series.length - 1 || h2.globals.comboCharts) && l2.animationCompleted(t4), l2.showDelayedElements();
        });
      } }]), t3;
    }();
    var y2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "getDefaultFilter", value: function(t4, e3) {
        var i2 = this.w;
        t4.unfilter(true), new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"), "none" !== i2.config.states.normal.filter ? this.applyFilter(t4, e3, i2.config.states.normal.filter.type, i2.config.states.normal.filter.value) : i2.config.chart.dropShadow.enabled && this.dropShadow(t4, i2.config.chart.dropShadow, e3);
      } }, { key: "addNormalFilter", value: function(t4, e3) {
        var i2 = this.w;
        i2.config.chart.dropShadow.enabled && !t4.node.classList.contains("apexcharts-marker") && this.dropShadow(t4, i2.config.chart.dropShadow, e3);
      } }, { key: "addLightenFilter", value: function(t4, e3, i2) {
        var a3 = this, s2 = this.w, r3 = i2.intensity;
        t4.unfilter(true);
        new window.SVG.Filter();
        t4.filter(function(t5) {
          var i3 = s2.config.chart.dropShadow;
          (i3.enabled ? a3.addShadow(t5, e3, i3) : t5).componentTransfer({ rgb: { type: "linear", slope: 1.5, intercept: r3 } });
        }), t4.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t4.filterer.node);
      } }, { key: "addDarkenFilter", value: function(t4, e3, i2) {
        var a3 = this, s2 = this.w, r3 = i2.intensity;
        t4.unfilter(true);
        new window.SVG.Filter();
        t4.filter(function(t5) {
          var i3 = s2.config.chart.dropShadow;
          (i3.enabled ? a3.addShadow(t5, e3, i3) : t5).componentTransfer({ rgb: { type: "linear", slope: r3 } });
        }), t4.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t4.filterer.node);
      } }, { key: "applyFilter", value: function(t4, e3, i2) {
        var a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.5;
        switch (i2) {
          case "none":
            this.addNormalFilter(t4, e3);
            break;
          case "lighten":
            this.addLightenFilter(t4, e3, { intensity: a3 });
            break;
          case "darken":
            this.addDarkenFilter(t4, e3, { intensity: a3 });
        }
      } }, { key: "addShadow", value: function(t4, e3, i2) {
        var a3, s2 = this.w, r3 = i2.blur, o3 = i2.top, n2 = i2.left, l2 = i2.color, h2 = i2.opacity;
        if ((null === (a3 = s2.config.chart.dropShadow.enabledOnSeries) || void 0 === a3 ? void 0 : a3.length) > 0 && -1 === s2.config.chart.dropShadow.enabledOnSeries.indexOf(e3)) return t4;
        var c3 = t4.flood(Array.isArray(l2) ? l2[e3] : l2, h2).composite(t4.sourceAlpha, "in").offset(n2, o3).gaussianBlur(r3).merge(t4.source);
        return t4.blend(t4.source, c3);
      } }, { key: "dropShadow", value: function(t4, e3) {
        var i2, a3, s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, r3 = e3.top, o3 = e3.left, n2 = e3.blur, l2 = e3.color, h2 = e3.opacity, c3 = e3.noUserSpaceOnUse, d2 = this.w;
        if (t4.unfilter(true), v.isMsEdge() && "radialBar" === d2.config.chart.type) return t4;
        if ((null === (i2 = d2.config.chart.dropShadow.enabledOnSeries) || void 0 === i2 ? void 0 : i2.length) > 0 && -1 === (null === (a3 = d2.config.chart.dropShadow.enabledOnSeries) || void 0 === a3 ? void 0 : a3.indexOf(s2))) return t4;
        return l2 = Array.isArray(l2) ? l2[s2] : l2, t4.filter(function(t5) {
          var e4 = null;
          e4 = v.isSafari() || v.isFirefox() || v.isMsEdge() ? t5.flood(l2, h2).composite(t5.sourceAlpha, "in").offset(o3, r3).gaussianBlur(n2) : t5.flood(l2, h2).composite(t5.sourceAlpha, "in").offset(o3, r3).gaussianBlur(n2).merge(t5.source), t5.blend(t5.source, e4);
        }), c3 || t4.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t4.filterer.node), t4;
      } }, { key: "setSelectionFilter", value: function(t4, e3, i2) {
        var a3 = this.w;
        if (void 0 !== a3.globals.selectedDataPoints[e3] && a3.globals.selectedDataPoints[e3].indexOf(i2) > -1) {
          t4.node.setAttribute("selected", true);
          var s2 = a3.config.states.active.filter;
          "none" !== s2 && this.applyFilter(t4, e3, s2.type, s2.value);
        }
      } }, { key: "_scaleFilterSize", value: function(t4) {
        !function(e3) {
          for (var i2 in e3) e3.hasOwnProperty(i2) && t4.setAttribute(i2, e3[i2]);
        }({ width: "200%", height: "200%", x: "-50%", y: "-50%" });
      } }]), t3;
    }();
    var w = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "roundPathCorners", value: function(t4, e3) {
        function i2(t5, e4, i3) {
          var s3 = e4.x - t5.x, r4 = e4.y - t5.y, o4 = Math.sqrt(s3 * s3 + r4 * r4);
          return a3(t5, e4, Math.min(1, i3 / o4));
        }
        function a3(t5, e4, i3) {
          return { x: t5.x + (e4.x - t5.x) * i3, y: t5.y + (e4.y - t5.y) * i3 };
        }
        function s2(t5, e4) {
          t5.length > 2 && (t5[t5.length - 2] = e4.x, t5[t5.length - 1] = e4.y);
        }
        function r3(t5) {
          return { x: parseFloat(t5[t5.length - 2]), y: parseFloat(t5[t5.length - 1]) };
        }
        t4.indexOf("NaN") > -1 && (t4 = "");
        var o3 = t4.split(/[,\s]/).reduce(function(t5, e4) {
          var i3 = e4.match("([a-zA-Z])(.+)");
          return i3 ? (t5.push(i3[1]), t5.push(i3[2])) : t5.push(e4), t5;
        }, []).reduce(function(t5, e4) {
          return parseFloat(e4) == e4 && t5.length ? t5[t5.length - 1].push(e4) : t5.push([e4]), t5;
        }, []), n2 = [];
        if (o3.length > 1) {
          var l2 = r3(o3[0]), h2 = null;
          "Z" == o3[o3.length - 1][0] && o3[0].length > 2 && (h2 = ["L", l2.x, l2.y], o3[o3.length - 1] = h2), n2.push(o3[0]);
          for (var c3 = 1; c3 < o3.length; c3++) {
            var d2 = n2[n2.length - 1], g2 = o3[c3], u2 = g2 == h2 ? o3[1] : o3[c3 + 1];
            if (u2 && d2 && d2.length > 2 && "L" == g2[0] && u2.length > 2 && "L" == u2[0]) {
              var p2, f2, x2 = r3(d2), b2 = r3(g2), v2 = r3(u2);
              p2 = i2(b2, x2, e3), f2 = i2(b2, v2, e3), s2(g2, p2), g2.origPoint = b2, n2.push(g2);
              var m2 = a3(p2, b2, 0.5), y3 = a3(b2, f2, 0.5), w2 = ["C", m2.x, m2.y, y3.x, y3.y, f2.x, f2.y];
              w2.origPoint = b2, n2.push(w2);
            } else n2.push(g2);
          }
          if (h2) {
            var k2 = r3(n2[n2.length - 1]);
            n2.push(["Z"]), s2(n2[0], k2);
          }
        } else n2 = o3;
        return n2.reduce(function(t5, e4) {
          return t5 + e4.join(" ") + " ";
        }, "");
      } }, { key: "drawLine", value: function(t4, e3, i2, a3) {
        var s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8", r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, o3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, n2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "butt";
        return this.w.globals.dom.Paper.line().attr({ x1: t4, y1: e3, x2: i2, y2: a3, stroke: s2, "stroke-dasharray": r3, "stroke-width": o3, "stroke-linecap": n2 });
      } }, { key: "drawRect", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe", o3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, n2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l2 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h2 = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, c3 = this.w.globals.dom.Paper.rect();
        return c3.attr({ x: t4, y: e3, width: i2 > 0 ? i2 : 0, height: a3 > 0 ? a3 : 0, rx: s2, ry: s2, opacity: o3, "stroke-width": null !== n2 ? n2 : 0, stroke: null !== l2 ? l2 : "none", "stroke-dasharray": h2 }), c3.node.setAttribute("fill", r3), c3;
      } }, { key: "drawPolygon", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1", i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none";
        return this.w.globals.dom.Paper.polygon(t4).attr({ fill: a3, stroke: e3, "stroke-width": i2 });
      } }, { key: "drawCircle", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
        t4 < 0 && (t4 = 0);
        var i2 = this.w.globals.dom.Paper.circle(2 * t4);
        return null !== e3 && i2.attr(e3), i2;
      } }, { key: "drawPath", value: function(t4) {
        var e3 = t4.d, i2 = void 0 === e3 ? "" : e3, a3 = t4.stroke, s2 = void 0 === a3 ? "#a8a8a8" : a3, r3 = t4.strokeWidth, o3 = void 0 === r3 ? 1 : r3, n2 = t4.fill, l2 = t4.fillOpacity, h2 = void 0 === l2 ? 1 : l2, c3 = t4.strokeOpacity, d2 = void 0 === c3 ? 1 : c3, g2 = t4.classes, u2 = t4.strokeLinecap, p2 = void 0 === u2 ? null : u2, f2 = t4.strokeDashArray, x2 = void 0 === f2 ? 0 : f2, b2 = this.w;
        return null === p2 && (p2 = b2.config.stroke.lineCap), (i2.indexOf("undefined") > -1 || i2.indexOf("NaN") > -1) && (i2 = "M 0 ".concat(b2.globals.gridHeight)), b2.globals.dom.Paper.path(i2).attr({ fill: n2, "fill-opacity": h2, stroke: s2, "stroke-opacity": d2, "stroke-linecap": p2, "stroke-width": o3, "stroke-dasharray": x2, class: g2 });
      } }, { key: "group", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e3 = this.w.globals.dom.Paper.group();
        return null !== t4 && e3.attr(t4), e3;
      } }, { key: "move", value: function(t4, e3) {
        var i2 = ["M", t4, e3].join(" ");
        return i2;
      } }, { key: "line", value: function(t4, e3) {
        var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = null;
        return null === i2 ? a3 = [" L", t4, e3].join(" ") : "H" === i2 ? a3 = [" H", t4].join(" ") : "V" === i2 && (a3 = [" V", e3].join(" ")), a3;
      } }, { key: "curve", value: function(t4, e3, i2, a3, s2, r3) {
        var o3 = ["C", t4, e3, i2, a3, s2, r3].join(" ");
        return o3;
      } }, { key: "quadraticCurve", value: function(t4, e3, i2, a3) {
        return ["Q", t4, e3, i2, a3].join(" ");
      } }, { key: "arc", value: function(t4, e3, i2, a3, s2, r3, o3) {
        var n2 = "A";
        arguments.length > 7 && void 0 !== arguments[7] && arguments[7] && (n2 = "a");
        var l2 = [n2, t4, e3, i2, a3, s2, r3, o3].join(" ");
        return l2;
      } }, { key: "renderPaths", value: function(t4) {
        var e3, i2 = t4.j, a3 = t4.realIndex, s2 = t4.pathFrom, r3 = t4.pathTo, o3 = t4.stroke, n2 = t4.strokeWidth, l2 = t4.strokeLinecap, h2 = t4.fill, c3 = t4.animationDelay, g2 = t4.initialSpeed, u2 = t4.dataChangeSpeed, p2 = t4.className, f2 = t4.shouldClipToGrid, x2 = void 0 === f2 || f2, b2 = t4.bindEventsOnPaths, v2 = void 0 === b2 || b2, w2 = t4.drawShadow, k2 = void 0 === w2 || w2, A2 = this.w, S2 = new y2(this.ctx), C3 = new m(this.ctx), L3 = this.w.config.chart.animations.enabled, P3 = L3 && this.w.config.chart.animations.dynamicAnimation.enabled, M2 = !!(L3 && !A2.globals.resized || P3 && A2.globals.dataChanged && A2.globals.shouldAnimate);
        M2 ? e3 = s2 : (e3 = r3, A2.globals.animationEnded = true);
        var I3 = A2.config.stroke.dashArray, T2 = 0;
        T2 = Array.isArray(I3) ? I3[a3] : A2.config.stroke.dashArray;
        var z2 = this.drawPath({ d: e3, stroke: o3, strokeWidth: n2, fill: h2, fillOpacity: 1, classes: p2, strokeLinecap: l2, strokeDashArray: T2 });
        if (z2.attr("index", a3), x2 && z2.attr({ "clip-path": "url(#gridRectMask".concat(A2.globals.cuid, ")") }), "none" !== A2.config.states.normal.filter.type) S2.getDefaultFilter(z2, a3);
        else if (A2.config.chart.dropShadow.enabled && k2) {
          var X3 = A2.config.chart.dropShadow;
          S2.dropShadow(z2, X3, a3);
        }
        v2 && (z2.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, z2)), z2.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, z2)), z2.node.addEventListener("mousedown", this.pathMouseDown.bind(this, z2))), z2.attr({ pathTo: r3, pathFrom: s2 });
        var E2 = { el: z2, j: i2, realIndex: a3, pathFrom: s2, pathTo: r3, fill: h2, strokeWidth: n2, delay: c3 };
        return !L3 || A2.globals.resized || A2.globals.dataChanged ? !A2.globals.resized && A2.globals.dataChanged || C3.showDelayedElements() : C3.animatePathsGradually(d(d({}, E2), {}, { speed: g2 })), A2.globals.dataChanged && P3 && M2 && C3.animatePathsGradually(d(d({}, E2), {}, { speed: u2 })), z2;
      } }, { key: "drawPattern", value: function(t4, e3, i2) {
        var a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8", s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
        return this.w.globals.dom.Paper.pattern(e3, i2, function(r3) {
          "horizontalLines" === t4 ? r3.line(0, 0, i2, 0).stroke({ color: a3, width: s2 + 1 }) : "verticalLines" === t4 ? r3.line(0, 0, 0, e3).stroke({ color: a3, width: s2 + 1 }) : "slantedLines" === t4 ? r3.line(0, 0, e3, i2).stroke({ color: a3, width: s2 }) : "squares" === t4 ? r3.rect(e3, i2).fill("none").stroke({ color: a3, width: s2 }) : "circles" === t4 && r3.circle(e3).fill("none").stroke({ color: a3, width: s2 });
        });
      } }, { key: "drawGradient", value: function(t4, e3, i2, a3, s2) {
        var r3, o3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, n2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, l2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, h2 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, c3 = this.w;
        e3.length < 9 && 0 === e3.indexOf("#") && (e3 = v.hexToRgba(e3, a3)), i2.length < 9 && 0 === i2.indexOf("#") && (i2 = v.hexToRgba(i2, s2));
        var d2 = 0, g2 = 1, u2 = 1, p2 = null;
        null !== n2 && (d2 = void 0 !== n2[0] ? n2[0] / 100 : 0, g2 = void 0 !== n2[1] ? n2[1] / 100 : 1, u2 = void 0 !== n2[2] ? n2[2] / 100 : 1, p2 = void 0 !== n2[3] ? n2[3] / 100 : null);
        var f2 = !("donut" !== c3.config.chart.type && "pie" !== c3.config.chart.type && "polarArea" !== c3.config.chart.type && "bubble" !== c3.config.chart.type);
        if (r3 = null === l2 || 0 === l2.length ? c3.globals.dom.Paper.gradient(f2 ? "radial" : "linear", function(t5) {
          t5.at(d2, e3, a3), t5.at(g2, i2, s2), t5.at(u2, i2, s2), null !== p2 && t5.at(p2, e3, a3);
        }) : c3.globals.dom.Paper.gradient(f2 ? "radial" : "linear", function(t5) {
          (Array.isArray(l2[h2]) ? l2[h2] : l2).forEach(function(e4) {
            t5.at(e4.offset / 100, e4.color, e4.opacity);
          });
        }), f2) {
          var x2 = c3.globals.gridWidth / 2, b2 = c3.globals.gridHeight / 2;
          "bubble" !== c3.config.chart.type ? r3.attr({ gradientUnits: "userSpaceOnUse", cx: x2, cy: b2, r: o3 }) : r3.attr({ cx: 0.5, cy: 0.5, r: 0.8, fx: 0.2, fy: 0.2 });
        } else "vertical" === t4 ? r3.from(0, 0).to(0, 1) : "diagonal" === t4 ? r3.from(0, 0).to(1, 1) : "horizontal" === t4 ? r3.from(0, 1).to(1, 1) : "diagonal2" === t4 && r3.from(1, 0).to(0, 1);
        return r3;
      } }, { key: "getTextBasedOnMaxWidth", value: function(t4) {
        var e3 = t4.text, i2 = t4.maxWidth, a3 = t4.fontSize, s2 = t4.fontFamily, r3 = this.getTextRects(e3, a3, s2), o3 = r3.width / e3.length, n2 = Math.floor(i2 / o3);
        return i2 < r3.width ? e3.slice(0, n2 - 3) + "..." : e3;
      } }, { key: "drawText", value: function(t4) {
        var e3 = this, i2 = t4.x, a3 = t4.y, s2 = t4.text, r3 = t4.textAnchor, o3 = t4.fontSize, n2 = t4.fontFamily, l2 = t4.fontWeight, h2 = t4.foreColor, c3 = t4.opacity, g2 = t4.maxWidth, u2 = t4.cssClass, p2 = void 0 === u2 ? "" : u2, f2 = t4.isPlainText, x2 = void 0 === f2 || f2, b2 = t4.dominantBaseline, v2 = void 0 === b2 ? "auto" : b2, m2 = this.w;
        void 0 === s2 && (s2 = "");
        var y3 = s2;
        r3 || (r3 = "start"), h2 && h2.length || (h2 = m2.config.chart.foreColor), n2 = n2 || m2.config.chart.fontFamily, l2 = l2 || "regular";
        var w2, k2 = { maxWidth: g2, fontSize: o3 = o3 || "11px", fontFamily: n2 };
        return Array.isArray(s2) ? w2 = m2.globals.dom.Paper.text(function(t5) {
          for (var i3 = 0; i3 < s2.length; i3++) y3 = s2[i3], g2 && (y3 = e3.getTextBasedOnMaxWidth(d({ text: s2[i3] }, k2))), 0 === i3 ? t5.tspan(y3) : t5.tspan(y3).newLine();
        }) : (g2 && (y3 = this.getTextBasedOnMaxWidth(d({ text: s2 }, k2))), w2 = x2 ? m2.globals.dom.Paper.plain(s2) : m2.globals.dom.Paper.text(function(t5) {
          return t5.tspan(y3);
        })), w2.attr({ x: i2, y: a3, "text-anchor": r3, "dominant-baseline": v2, "font-size": o3, "font-family": n2, "font-weight": l2, fill: h2, class: "apexcharts-text " + p2 }), w2.node.style.fontFamily = n2, w2.node.style.opacity = c3, w2;
      } }, { key: "getMarkerPath", value: function(t4, e3, i2, a3) {
        var s2 = "";
        switch (i2) {
          case "cross":
            s2 = "M ".concat(t4 - (a3 /= 1.4), " ").concat(e3 - a3, " L ").concat(t4 + a3, " ").concat(e3 + a3, "  M ").concat(t4 - a3, " ").concat(e3 + a3, " L ").concat(t4 + a3, " ").concat(e3 - a3);
            break;
          case "plus":
            s2 = "M ".concat(t4 - (a3 /= 1.12), " ").concat(e3, " L ").concat(t4 + a3, " ").concat(e3, "  M ").concat(t4, " ").concat(e3 - a3, " L ").concat(t4, " ").concat(e3 + a3);
            break;
          case "star":
          case "sparkle":
            var r3 = 5;
            a3 *= 1.15, "sparkle" === i2 && (a3 /= 1.1, r3 = 4);
            for (var o3 = Math.PI / r3, n2 = 0; n2 <= 2 * r3; n2++) {
              var l2 = n2 * o3, h2 = n2 % 2 == 0 ? a3 : a3 / 2;
              s2 += (0 === n2 ? "M" : "L") + (t4 + h2 * Math.sin(l2)) + "," + (e3 - h2 * Math.cos(l2));
            }
            s2 += "Z";
            break;
          case "triangle":
            s2 = "M ".concat(t4, " ").concat(e3 - a3, " \n             L ").concat(t4 + a3, " ").concat(e3 + a3, " \n             L ").concat(t4 - a3, " ").concat(e3 + a3, " \n             Z");
            break;
          case "square":
          case "rect":
            s2 = "M ".concat(t4 - (a3 /= 1.125), " ").concat(e3 - a3, " \n           L ").concat(t4 + a3, " ").concat(e3 - a3, " \n           L ").concat(t4 + a3, " ").concat(e3 + a3, " \n           L ").concat(t4 - a3, " ").concat(e3 + a3, " \n           Z");
            break;
          case "diamond":
            a3 *= 1.05, s2 = "M ".concat(t4, " ").concat(e3 - a3, " \n             L ").concat(t4 + a3, " ").concat(e3, " \n             L ").concat(t4, " ").concat(e3 + a3, " \n             L ").concat(t4 - a3, " ").concat(e3, " \n            Z");
            break;
          case "line":
            s2 = "M ".concat(t4 - (a3 /= 1.1), " ").concat(e3, " \n           L ").concat(t4 + a3, " ").concat(e3);
            break;
          default:
            a3 *= 2, s2 = "M ".concat(t4, ", ").concat(e3, " \n           m -").concat(a3 / 2, ", 0 \n           a ").concat(a3 / 2, ",").concat(a3 / 2, " 0 1,0 ").concat(a3, ",0 \n           a ").concat(a3 / 2, ",").concat(a3 / 2, " 0 1,0 -").concat(a3, ",0");
        }
        return s2;
      } }, { key: "drawMarkerShape", value: function(t4, e3, i2, a3, s2) {
        var r3 = this.drawPath({ d: this.getMarkerPath(t4, e3, i2, a3, s2), stroke: s2.pointStrokeColor, strokeDashArray: s2.pointStrokeDashArray, strokeWidth: s2.pointStrokeWidth, fill: s2.pointFillColor, fillOpacity: s2.pointFillOpacity, strokeOpacity: s2.pointStrokeOpacity });
        return r3.attr({ cx: t4, cy: e3, shape: s2.shape, class: s2.class ? s2.class : "" }), r3;
      } }, { key: "drawMarker", value: function(t4, e3, i2) {
        t4 = t4 || 0;
        var a3 = i2.pSize || 0;
        return v.isNumber(e3) || (a3 = 0, e3 = 0), this.drawMarkerShape(t4, e3, null == i2 ? void 0 : i2.shape, a3, d(d({}, i2), "line" === i2.shape || "plus" === i2.shape || "cross" === i2.shape ? { pointStrokeColor: i2.pointFillColor, pointStrokeOpacity: i2.pointFillOpacity } : {}));
      } }, { key: "pathMouseEnter", value: function(t4, e3) {
        var i2 = this.w, a3 = new y2(this.ctx), s2 = parseInt(t4.node.getAttribute("index"), 10), r3 = parseInt(t4.node.getAttribute("j"), 10);
        if ("function" == typeof i2.config.chart.events.dataPointMouseEnter && i2.config.chart.events.dataPointMouseEnter(e3, this.ctx, { seriesIndex: s2, dataPointIndex: r3, w: i2 }), this.ctx.events.fireEvent("dataPointMouseEnter", [e3, this.ctx, { seriesIndex: s2, dataPointIndex: r3, w: i2 }]), ("none" === i2.config.states.active.filter.type || "true" !== t4.node.getAttribute("selected")) && "none" !== i2.config.states.hover.filter.type && !i2.globals.isTouchDevice) {
          var o3 = i2.config.states.hover.filter;
          a3.applyFilter(t4, s2, o3.type, o3.value);
        }
      } }, { key: "pathMouseLeave", value: function(t4, e3) {
        var i2 = this.w, a3 = new y2(this.ctx), s2 = parseInt(t4.node.getAttribute("index"), 10), r3 = parseInt(t4.node.getAttribute("j"), 10);
        "function" == typeof i2.config.chart.events.dataPointMouseLeave && i2.config.chart.events.dataPointMouseLeave(e3, this.ctx, { seriesIndex: s2, dataPointIndex: r3, w: i2 }), this.ctx.events.fireEvent("dataPointMouseLeave", [e3, this.ctx, { seriesIndex: s2, dataPointIndex: r3, w: i2 }]), "none" !== i2.config.states.active.filter.type && "true" === t4.node.getAttribute("selected") || "none" !== i2.config.states.hover.filter.type && a3.getDefaultFilter(t4, s2);
      } }, { key: "pathMouseDown", value: function(t4, e3) {
        var i2 = this.w, a3 = new y2(this.ctx), s2 = parseInt(t4.node.getAttribute("index"), 10), r3 = parseInt(t4.node.getAttribute("j"), 10), o3 = "false";
        if ("true" === t4.node.getAttribute("selected")) {
          if (t4.node.setAttribute("selected", "false"), i2.globals.selectedDataPoints[s2].indexOf(r3) > -1) {
            var n2 = i2.globals.selectedDataPoints[s2].indexOf(r3);
            i2.globals.selectedDataPoints[s2].splice(n2, 1);
          }
        } else {
          if (!i2.config.states.active.allowMultipleDataPointsSelection && i2.globals.selectedDataPoints.length > 0) {
            i2.globals.selectedDataPoints = [];
            var l2 = i2.globals.dom.Paper.select(".apexcharts-series path").members, h2 = i2.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members, c3 = function(t5) {
              Array.prototype.forEach.call(t5, function(t6) {
                t6.node.setAttribute("selected", "false"), a3.getDefaultFilter(t6, s2);
              });
            };
            c3(l2), c3(h2);
          }
          t4.node.setAttribute("selected", "true"), o3 = "true", void 0 === i2.globals.selectedDataPoints[s2] && (i2.globals.selectedDataPoints[s2] = []), i2.globals.selectedDataPoints[s2].push(r3);
        }
        if ("true" === o3) {
          var d2 = i2.config.states.active.filter;
          if ("none" !== d2) a3.applyFilter(t4, s2, d2.type, d2.value);
          else if ("none" !== i2.config.states.hover.filter && !i2.globals.isTouchDevice) {
            var g2 = i2.config.states.hover.filter;
            a3.applyFilter(t4, s2, g2.type, g2.value);
          }
        } else if ("none" !== i2.config.states.active.filter.type) if ("none" === i2.config.states.hover.filter.type || i2.globals.isTouchDevice) a3.getDefaultFilter(t4, s2);
        else {
          g2 = i2.config.states.hover.filter;
          a3.applyFilter(t4, s2, g2.type, g2.value);
        }
        "function" == typeof i2.config.chart.events.dataPointSelection && i2.config.chart.events.dataPointSelection(e3, this.ctx, { selectedDataPoints: i2.globals.selectedDataPoints, seriesIndex: s2, dataPointIndex: r3, w: i2 }), e3 && this.ctx.events.fireEvent("dataPointSelection", [e3, this.ctx, { selectedDataPoints: i2.globals.selectedDataPoints, seriesIndex: s2, dataPointIndex: r3, w: i2 }]);
      } }, { key: "rotateAroundCenter", value: function(t4) {
        var e3 = {};
        return t4 && "function" == typeof t4.getBBox && (e3 = t4.getBBox()), { x: e3.x + e3.width / 2, y: e3.y + e3.height / 2 };
      } }, { key: "getTextRects", value: function(t4, e3, i2, a3) {
        var s2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], r3 = this.w, o3 = this.drawText({ x: -200, y: -200, text: t4, textAnchor: "start", fontSize: e3, fontFamily: i2, foreColor: "#fff", opacity: 0 });
        a3 && o3.attr("transform", a3), r3.globals.dom.Paper.add(o3);
        var n2 = o3.bbox();
        return s2 || (n2 = o3.node.getBoundingClientRect()), o3.remove(), { width: n2.width, height: n2.height };
      } }, { key: "placeTextWithEllipsis", value: function(t4, e3, i2) {
        if ("function" == typeof t4.getComputedTextLength && (t4.textContent = e3, e3.length > 0 && t4.getComputedTextLength() >= i2 / 1.1)) {
          for (var a3 = e3.length - 3; a3 > 0; a3 -= 3) if (t4.getSubStringLength(0, a3) <= i2 / 1.1) return void (t4.textContent = e3.substring(0, a3) + "...");
          t4.textContent = ".";
        }
      } }], [{ key: "setAttrs", value: function(t4, e3) {
        for (var i2 in e3) e3.hasOwnProperty(i2) && t4.setAttribute(i2, e3[i2]);
      } }]), t3;
    }();
    var k = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "getStackedSeriesTotals", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e3 = this.w, i2 = [];
        if (0 === e3.globals.series.length) return i2;
        for (var a3 = 0; a3 < e3.globals.series[e3.globals.maxValsInArrayIndex].length; a3++) {
          for (var s2 = 0, r3 = 0; r3 < e3.globals.series.length; r3++) void 0 !== e3.globals.series[r3][a3] && -1 === t4.indexOf(r3) && (s2 += e3.globals.series[r3][a3]);
          i2.push(s2);
        }
        return i2;
      } }, { key: "getSeriesTotalByIndex", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        return null === t4 ? this.w.config.series.reduce(function(t5, e3) {
          return t5 + e3;
        }, 0) : this.w.globals.series[t4].reduce(function(t5, e3) {
          return t5 + e3;
        }, 0);
      } }, { key: "getStackedSeriesTotalsByGroups", value: function() {
        var t4 = this, e3 = this.w, i2 = [];
        return e3.globals.seriesGroups.forEach(function(a3) {
          var s2 = [];
          e3.config.series.forEach(function(t5, i3) {
            a3.indexOf(e3.globals.seriesNames[i3]) > -1 && s2.push(i3);
          });
          var r3 = e3.globals.series.map(function(t5, e4) {
            return -1 === s2.indexOf(e4) ? e4 : -1;
          }).filter(function(t5) {
            return -1 !== t5;
          });
          i2.push(t4.getStackedSeriesTotals(r3));
        }), i2;
      } }, { key: "setSeriesYAxisMappings", value: function() {
        var t4 = this.w.globals, e3 = this.w.config, i2 = [], a3 = [], s2 = [], r3 = t4.series.length > e3.yaxis.length || e3.yaxis.some(function(t5) {
          return Array.isArray(t5.seriesName);
        });
        e3.series.forEach(function(t5, e4) {
          s2.push(e4), a3.push(null);
        }), e3.yaxis.forEach(function(t5, e4) {
          i2[e4] = [];
        });
        var o3 = [];
        e3.yaxis.forEach(function(t5, a4) {
          var n3 = false;
          if (t5.seriesName) {
            var l3 = [];
            Array.isArray(t5.seriesName) ? l3 = t5.seriesName : l3.push(t5.seriesName), l3.forEach(function(t6) {
              e3.series.forEach(function(e4, o4) {
                if (e4.name === t6) {
                  var l4 = o4;
                  a4 === o4 || r3 ? !r3 || s2.indexOf(o4) > -1 ? i2[a4].push([a4, o4]) : console.warn("Series '" + e4.name + "' referenced more than once in what looks like the new style. That is, when using either seriesName: [], or when there are more series than yaxes.") : (i2[o4].push([o4, a4]), l4 = a4), n3 = true, -1 !== (l4 = s2.indexOf(l4)) && s2.splice(l4, 1);
                }
              });
            });
          }
          n3 || o3.push(a4);
        }), i2 = i2.map(function(t5, e4) {
          var i3 = [];
          return t5.forEach(function(t6) {
            a3[t6[1]] = t6[0], i3.push(t6[1]);
          }), i3;
        });
        for (var n2 = e3.yaxis.length - 1, l2 = 0; l2 < o3.length && (n2 = o3[l2], i2[n2] = [], s2); l2++) {
          var h2 = s2[0];
          s2.shift(), i2[n2].push(h2), a3[h2] = n2;
        }
        s2.forEach(function(t5) {
          i2[n2].push(t5), a3[t5] = n2;
        }), t4.seriesYAxisMap = i2.map(function(t5) {
          return t5;
        }), t4.seriesYAxisReverseMap = a3.map(function(t5) {
          return t5;
        }), t4.seriesYAxisMap.forEach(function(t5, i3) {
          t5.forEach(function(t6) {
            e3.series[t6] && void 0 === e3.series[t6].group && (e3.series[t6].group = "apexcharts-axis-".concat(i3.toString()));
          });
        });
      } }, { key: "isSeriesNull", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        return 0 === (null === t4 ? this.w.config.series.filter(function(t5) {
          return null !== t5;
        }) : this.w.config.series[t4].data.filter(function(t5) {
          return null !== t5;
        })).length;
      } }, { key: "seriesHaveSameValues", value: function(t4) {
        return this.w.globals.series[t4].every(function(t5, e3, i2) {
          return t5 === i2[0];
        });
      } }, { key: "getCategoryLabels", value: function(t4) {
        var e3 = this.w, i2 = t4.slice();
        return e3.config.xaxis.convertedCatToNumeric && (i2 = t4.map(function(t5, i3) {
          return e3.config.xaxis.labels.formatter(t5 - e3.globals.minX + 1);
        })), i2;
      } }, { key: "getLargestSeries", value: function() {
        var t4 = this.w;
        t4.globals.maxValsInArrayIndex = t4.globals.series.map(function(t5) {
          return t5.length;
        }).indexOf(Math.max.apply(Math, t4.globals.series.map(function(t5) {
          return t5.length;
        })));
      } }, { key: "getLargestMarkerSize", value: function() {
        var t4 = this.w, e3 = 0;
        return t4.globals.markers.size.forEach(function(t5) {
          e3 = Math.max(e3, t5);
        }), t4.config.markers.discrete && t4.config.markers.discrete.length && t4.config.markers.discrete.forEach(function(t5) {
          e3 = Math.max(e3, t5.size);
        }), e3 > 0 && (e3 += t4.config.markers.hover.sizeOffset + 1), t4.globals.markers.largestSize = e3, e3;
      } }, { key: "getSeriesTotals", value: function() {
        var t4 = this.w;
        t4.globals.seriesTotals = t4.globals.series.map(function(t5, e3) {
          var i2 = 0;
          if (Array.isArray(t5)) for (var a3 = 0; a3 < t5.length; a3++) i2 += t5[a3];
          else i2 += t5;
          return i2;
        });
      } }, { key: "getSeriesTotalsXRange", value: function(t4, e3) {
        var i2 = this.w;
        return i2.globals.series.map(function(a3, s2) {
          for (var r3 = 0, o3 = 0; o3 < a3.length; o3++) i2.globals.seriesX[s2][o3] > t4 && i2.globals.seriesX[s2][o3] < e3 && (r3 += a3[o3]);
          return r3;
        });
      } }, { key: "getPercentSeries", value: function() {
        var t4 = this.w;
        t4.globals.seriesPercent = t4.globals.series.map(function(e3, i2) {
          var a3 = [];
          if (Array.isArray(e3)) for (var s2 = 0; s2 < e3.length; s2++) {
            var r3 = t4.globals.stackedSeriesTotals[s2], o3 = 0;
            r3 && (o3 = 100 * e3[s2] / r3), a3.push(o3);
          }
          else {
            var n2 = 100 * e3 / t4.globals.seriesTotals.reduce(function(t5, e4) {
              return t5 + e4;
            }, 0);
            a3.push(n2);
          }
          return a3;
        });
      } }, { key: "getCalculatedRatios", value: function() {
        var t4, e3, i2, a3 = this, s2 = this.w, r3 = s2.globals, o3 = [], n2 = 0, l2 = [], h2 = 0.1, c3 = 0;
        if (r3.yRange = [], r3.isMultipleYAxis) for (var d2 = 0; d2 < r3.minYArr.length; d2++) r3.yRange.push(Math.abs(r3.minYArr[d2] - r3.maxYArr[d2])), l2.push(0);
        else r3.yRange.push(Math.abs(r3.minY - r3.maxY));
        r3.xRange = Math.abs(r3.maxX - r3.minX), r3.zRange = Math.abs(r3.maxZ - r3.minZ);
        for (var g2 = 0; g2 < r3.yRange.length; g2++) o3.push(r3.yRange[g2] / r3.gridHeight);
        if (e3 = r3.xRange / r3.gridWidth, t4 = r3.yRange / r3.gridWidth, i2 = r3.xRange / r3.gridHeight, (n2 = r3.zRange / r3.gridHeight * 16) || (n2 = 1), r3.minY !== Number.MIN_VALUE && 0 !== Math.abs(r3.minY) && (r3.hasNegs = true), s2.globals.seriesYAxisReverseMap.length > 0) {
          var u2 = function(t5, e4) {
            var i3 = s2.config.yaxis[s2.globals.seriesYAxisReverseMap[e4]], r4 = t5 < 0 ? -1 : 1;
            return t5 = Math.abs(t5), i3.logarithmic && (t5 = a3.getBaseLog(i3.logBase, t5)), -r4 * t5 / o3[e4];
          };
          if (r3.isMultipleYAxis) {
            l2 = [];
            for (var p2 = 0; p2 < o3.length; p2++) l2.push(u2(r3.minYArr[p2], p2));
          } else (l2 = []).push(u2(r3.minY, 0)), r3.minY !== Number.MIN_VALUE && 0 !== Math.abs(r3.minY) && (h2 = -r3.minY / t4, c3 = r3.minX / e3);
        } else (l2 = []).push(0), h2 = 0, c3 = 0;
        return { yRatio: o3, invertedYRatio: t4, zRatio: n2, xRatio: e3, invertedXRatio: i2, baseLineInvertedY: h2, baseLineY: l2, baseLineX: c3 };
      } }, { key: "getLogSeries", value: function(t4) {
        var e3 = this, i2 = this.w;
        return i2.globals.seriesLog = t4.map(function(t5, a3) {
          var s2 = i2.globals.seriesYAxisReverseMap[a3];
          return i2.config.yaxis[s2] && i2.config.yaxis[s2].logarithmic ? t5.map(function(t6) {
            return null === t6 ? null : e3.getLogVal(i2.config.yaxis[s2].logBase, t6, a3);
          }) : t5;
        }), i2.globals.invalidLogScale ? t4 : i2.globals.seriesLog;
      } }, { key: "getBaseLog", value: function(t4, e3) {
        return Math.log(e3) / Math.log(t4);
      } }, { key: "getLogVal", value: function(t4, e3, i2) {
        if (e3 <= 0) return 0;
        var a3 = this.w, s2 = 0 === a3.globals.minYArr[i2] ? -1 : this.getBaseLog(t4, a3.globals.minYArr[i2]), r3 = (0 === a3.globals.maxYArr[i2] ? 0 : this.getBaseLog(t4, a3.globals.maxYArr[i2])) - s2;
        return e3 < 1 ? e3 / r3 : (this.getBaseLog(t4, e3) - s2) / r3;
      } }, { key: "getLogYRatios", value: function(t4) {
        var e3 = this, i2 = this.w, a3 = this.w.globals;
        return a3.yLogRatio = t4.slice(), a3.logYRange = a3.yRange.map(function(t5, s2) {
          var r3 = i2.globals.seriesYAxisReverseMap[s2];
          if (i2.config.yaxis[r3] && e3.w.config.yaxis[r3].logarithmic) {
            var o3, n2 = -Number.MAX_VALUE, l2 = Number.MIN_VALUE;
            return a3.seriesLog.forEach(function(t6, e4) {
              t6.forEach(function(t7) {
                i2.config.yaxis[e4] && i2.config.yaxis[e4].logarithmic && (n2 = Math.max(t7, n2), l2 = Math.min(t7, l2));
              });
            }), o3 = Math.pow(a3.yRange[s2], Math.abs(l2 - n2) / a3.yRange[s2]), a3.yLogRatio[s2] = o3 / a3.gridHeight, o3;
          }
        }), a3.invalidLogScale ? t4.slice() : a3.yLogRatio;
      } }, { key: "drawSeriesByGroup", value: function(t4, e3, i2, a3) {
        var s2 = this.w, r3 = [];
        return t4.series.length > 0 && e3.forEach(function(e4) {
          var o3 = [], n2 = [];
          t4.i.forEach(function(i3, a4) {
            s2.config.series[i3].group === e4 && (o3.push(t4.series[a4]), n2.push(i3));
          }), o3.length > 0 && r3.push(a3.draw(o3, i2, n2));
        }), r3;
      } }], [{ key: "checkComboSeries", value: function(t4, e3) {
        var i2 = false, a3 = 0, s2 = 0;
        return void 0 === e3 && (e3 = "line"), t4.length && void 0 !== t4[0].type && t4.forEach(function(t5) {
          "bar" !== t5.type && "column" !== t5.type && "candlestick" !== t5.type && "boxPlot" !== t5.type || a3++, void 0 !== t5.type && t5.type !== e3 && s2++;
        }), s2 > 0 && (i2 = true), { comboBarCount: a3, comboCharts: i2 };
      } }, { key: "extendArrayProps", value: function(t4, e3, i2) {
        var a3, s2, r3, o3, n2, l2;
        (null !== (a3 = e3) && void 0 !== a3 && a3.yaxis && (e3 = t4.extendYAxis(e3, i2)), null !== (s2 = e3) && void 0 !== s2 && s2.annotations) && (e3.annotations.yaxis && (e3 = t4.extendYAxisAnnotations(e3)), null !== (r3 = e3) && void 0 !== r3 && null !== (o3 = r3.annotations) && void 0 !== o3 && o3.xaxis && (e3 = t4.extendXAxisAnnotations(e3)), null !== (n2 = e3) && void 0 !== n2 && null !== (l2 = n2.annotations) && void 0 !== l2 && l2.points && (e3 = t4.extendPointAnnotations(e3)));
        return e3;
      } }]), t3;
    }();
    var A = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.annoCtx = e3;
      }
      return s(t3, [{ key: "setOrientations", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i2 = this.w;
        if ("vertical" === t4.label.orientation) {
          var a3 = null !== e3 ? e3 : 0, s2 = i2.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a3, "']"));
          if (null !== s2) {
            var r3 = s2.getBoundingClientRect();
            s2.setAttribute("x", parseFloat(s2.getAttribute("x")) - r3.height + 4), "top" === t4.label.position ? s2.setAttribute("y", parseFloat(s2.getAttribute("y")) + r3.width) : s2.setAttribute("y", parseFloat(s2.getAttribute("y")) - r3.width);
            var o3 = this.annoCtx.graphics.rotateAroundCenter(s2), n2 = o3.x, l2 = o3.y;
            s2.setAttribute("transform", "rotate(-90 ".concat(n2, " ").concat(l2, ")"));
          }
        }
      } }, { key: "addBackgroundToAnno", value: function(t4, e3) {
        var i2 = this.w;
        if (!t4 || void 0 === e3.label.text || void 0 !== e3.label.text && !String(e3.label.text).trim()) return null;
        var a3 = i2.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(), s2 = t4.getBoundingClientRect(), r3 = e3.label.style.padding.left, o3 = e3.label.style.padding.right, n2 = e3.label.style.padding.top, l2 = e3.label.style.padding.bottom;
        "vertical" === e3.label.orientation && (n2 = e3.label.style.padding.left, l2 = e3.label.style.padding.right, r3 = e3.label.style.padding.top, o3 = e3.label.style.padding.bottom);
        var h2 = s2.left - a3.left - r3, c3 = s2.top - a3.top - n2, d2 = this.annoCtx.graphics.drawRect(h2 - i2.globals.barPadForNumericAxis, c3, s2.width + r3 + o3, s2.height + n2 + l2, e3.label.borderRadius, e3.label.style.background, 1, e3.label.borderWidth, e3.label.borderColor, 0);
        return e3.id && d2.node.classList.add(e3.id), d2;
      } }, { key: "annotationsBackground", value: function() {
        var t4 = this, e3 = this.w, i2 = function(i3, a3, s2) {
          var r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations .apexcharts-").concat(s2, "-annotation-label[rel='").concat(a3, "']"));
          if (r3) {
            var o3 = r3.parentNode, n2 = t4.addBackgroundToAnno(r3, i3);
            n2 && (o3.insertBefore(n2.node, r3), i3.label.mouseEnter && n2.node.addEventListener("mouseenter", i3.label.mouseEnter.bind(t4, i3)), i3.label.mouseLeave && n2.node.addEventListener("mouseleave", i3.label.mouseLeave.bind(t4, i3)), i3.label.click && n2.node.addEventListener("click", i3.label.click.bind(t4, i3)));
          }
        };
        e3.config.annotations.xaxis.map(function(t5, e4) {
          i2(t5, e4, "xaxis");
        }), e3.config.annotations.yaxis.map(function(t5, e4) {
          i2(t5, e4, "yaxis");
        }), e3.config.annotations.points.map(function(t5, e4) {
          i2(t5, e4, "point");
        });
      } }, { key: "getY1Y2", value: function(t4, e3) {
        var i2, a3 = "y1" === t4 ? e3.y : e3.y2, s2 = false, r3 = this.w;
        if (this.annoCtx.invertAxis) {
          var o3 = r3.globals.labels;
          r3.config.xaxis.convertedCatToNumeric && (o3 = r3.globals.categoryLabels);
          var n2 = o3.indexOf(a3), l2 = r3.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (n2 + 1) + ")");
          i2 = l2 ? parseFloat(l2.getAttribute("y")) : (r3.globals.gridHeight / o3.length - 1) * (n2 + 1) - r3.globals.barHeight, void 0 !== e3.seriesIndex && r3.globals.barHeight && (i2 = i2 - r3.globals.barHeight / 2 * (r3.globals.series.length - 1) + r3.globals.barHeight * e3.seriesIndex);
        } else {
          var h2, c3 = r3.globals.seriesYAxisMap[e3.yAxisIndex][0];
          if (r3.config.yaxis[e3.yAxisIndex].logarithmic) h2 = (a3 = new k(this.annoCtx.ctx).getLogVal(r3.config.yaxis[e3.yAxisIndex].logBase, a3, c3)) / r3.globals.yLogRatio[c3];
          else h2 = (a3 - r3.globals.minYArr[c3]) / (r3.globals.yRange[c3] / r3.globals.gridHeight);
          h2 > r3.globals.gridHeight ? (h2 = r3.globals.gridHeight, s2 = true) : h2 < 0 && (h2 = 0, s2 = true), i2 = r3.globals.gridHeight - h2, !e3.marker || void 0 !== e3.y && null !== e3.y || (i2 = 0), r3.config.yaxis[e3.yAxisIndex] && r3.config.yaxis[e3.yAxisIndex].reversed && (i2 = h2);
        }
        return "string" == typeof a3 && a3.indexOf("px") > -1 && (i2 = parseFloat(a3)), { yP: i2, clipped: s2 };
      } }, { key: "getX1X2", value: function(t4, e3) {
        var i2, a3 = "x1" === t4 ? e3.x : e3.x2, s2 = this.w, r3 = this.annoCtx.invertAxis ? s2.globals.minY : s2.globals.minX, o3 = this.annoCtx.invertAxis ? s2.globals.maxY : s2.globals.maxX, n2 = this.annoCtx.invertAxis ? s2.globals.yRange[0] : s2.globals.xRange, l2 = false;
        return i2 = this.annoCtx.inversedReversedAxis ? (o3 - a3) / (n2 / s2.globals.gridWidth) : (a3 - r3) / (n2 / s2.globals.gridWidth), "category" !== s2.config.xaxis.type && !s2.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || s2.globals.dataFormatXNumeric || s2.config.chart.sparkline.enabled || (i2 = this.getStringX(a3)), "string" == typeof a3 && a3.indexOf("px") > -1 && (i2 = parseFloat(a3)), null == a3 && e3.marker && (i2 = s2.globals.gridWidth), void 0 !== e3.seriesIndex && s2.globals.barWidth && !this.annoCtx.invertAxis && (i2 = i2 - s2.globals.barWidth / 2 * (s2.globals.series.length - 1) + s2.globals.barWidth * e3.seriesIndex), i2 > s2.globals.gridWidth ? (i2 = s2.globals.gridWidth, l2 = true) : i2 < 0 && (i2 = 0, l2 = true), { x: i2, clipped: l2 };
      } }, { key: "getStringX", value: function(t4) {
        var e3 = this.w, i2 = t4;
        e3.config.xaxis.convertedCatToNumeric && e3.globals.categoryLabels.length && (t4 = e3.globals.categoryLabels.indexOf(t4) + 1);
        var a3 = e3.globals.labels.indexOf(t4), s2 = e3.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (a3 + 1) + ")");
        return s2 && (i2 = parseFloat(s2.getAttribute("x"))), i2;
      } }]), t3;
    }();
    var S = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.annoCtx = e3, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new A(this.annoCtx);
      }
      return s(t3, [{ key: "addXaxisAnnotation", value: function(t4, e3, i2) {
        var a3, s2 = this.w, r3 = this.helpers.getX1X2("x1", t4), o3 = r3.x, n2 = r3.clipped, l2 = true, h2 = t4.label.text, c3 = t4.strokeDashArray;
        if (v.isNumber(o3)) {
          if (null === t4.x2 || void 0 === t4.x2) {
            if (!n2) {
              var d2 = this.annoCtx.graphics.drawLine(o3 + t4.offsetX, 0 + t4.offsetY, o3 + t4.offsetX, s2.globals.gridHeight + t4.offsetY, t4.borderColor, c3, t4.borderWidth);
              e3.appendChild(d2.node), t4.id && d2.node.classList.add(t4.id);
            }
          } else {
            var g2 = this.helpers.getX1X2("x2", t4);
            if (a3 = g2.x, l2 = g2.clipped, !n2 || !l2) {
              if (a3 < o3) {
                var u2 = o3;
                o3 = a3, a3 = u2;
              }
              var p2 = this.annoCtx.graphics.drawRect(o3 + t4.offsetX, 0 + t4.offsetY, a3 - o3, s2.globals.gridHeight + t4.offsetY, 0, t4.fillColor, t4.opacity, 1, t4.borderColor, c3);
              p2.node.classList.add("apexcharts-annotation-rect"), p2.attr("clip-path", "url(#gridRectMask".concat(s2.globals.cuid, ")")), e3.appendChild(p2.node), t4.id && p2.node.classList.add(t4.id);
            }
          }
          if (!n2 || !l2) {
            var f2 = this.annoCtx.graphics.getTextRects(h2, parseFloat(t4.label.style.fontSize)), x2 = "top" === t4.label.position ? 4 : "center" === t4.label.position ? s2.globals.gridHeight / 2 + ("vertical" === t4.label.orientation ? f2.width / 2 : 0) : s2.globals.gridHeight, b2 = this.annoCtx.graphics.drawText({ x: o3 + t4.label.offsetX, y: x2 + t4.label.offsetY - ("vertical" === t4.label.orientation ? "top" === t4.label.position ? f2.width / 2 - 12 : -f2.width / 2 : 0), text: h2, textAnchor: t4.label.textAnchor, fontSize: t4.label.style.fontSize, fontFamily: t4.label.style.fontFamily, fontWeight: t4.label.style.fontWeight, foreColor: t4.label.style.color, cssClass: "apexcharts-xaxis-annotation-label ".concat(t4.label.style.cssClass, " ").concat(t4.id ? t4.id : "") });
            b2.attr({ rel: i2 }), e3.appendChild(b2.node), this.annoCtx.helpers.setOrientations(t4, i2);
          }
        }
      } }, { key: "drawXAxisAnnotations", value: function() {
        var t4 = this, e3 = this.w, i2 = this.annoCtx.graphics.group({ class: "apexcharts-xaxis-annotations" });
        return e3.config.annotations.xaxis.map(function(e4, a3) {
          t4.addXaxisAnnotation(e4, i2.node, a3);
        }), i2;
      } }]), t3;
    }();
    var C2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
      }
      return s(t3, [{ key: "isValidDate", value: function(t4) {
        return "number" != typeof t4 && !isNaN(this.parseDate(t4));
      } }, { key: "getTimeStamp", value: function(t4) {
        return Date.parse(t4) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t4).toISOString().substr(0, 25)).getTime() : new Date(t4).getTime() : t4;
      } }, { key: "getDate", value: function(t4) {
        return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t4).toUTCString()) : new Date(t4);
      } }, { key: "parseDate", value: function(t4) {
        var e3 = Date.parse(t4);
        if (!isNaN(e3)) return this.getTimeStamp(t4);
        var i2 = Date.parse(t4.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
        return i2 = this.getTimeStamp(i2);
      } }, { key: "parseDateWithTimezone", value: function(t4) {
        return Date.parse(t4.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
      } }, { key: "formatDate", value: function(t4, e3) {
        var i2 = this.w.globals.locale, a3 = this.w.config.xaxis.labels.datetimeUTC, s2 = ["\0"].concat(p(i2.months)), r3 = [""].concat(p(i2.shortMonths)), o3 = [""].concat(p(i2.days)), n2 = [""].concat(p(i2.shortDays));
        function l2(t5, e4) {
          var i3 = t5 + "";
          for (e4 = e4 || 2; i3.length < e4; ) i3 = "0" + i3;
          return i3;
        }
        var h2 = a3 ? t4.getUTCFullYear() : t4.getFullYear();
        e3 = (e3 = (e3 = e3.replace(/(^|[^\\])yyyy+/g, "$1" + h2)).replace(/(^|[^\\])yy/g, "$1" + h2.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + h2);
        var c3 = (a3 ? t4.getUTCMonth() : t4.getMonth()) + 1;
        e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])MMMM+/g, "$1" + s2[0])).replace(/(^|[^\\])MMM/g, "$1" + r3[0])).replace(/(^|[^\\])MM/g, "$1" + l2(c3))).replace(/(^|[^\\])M/g, "$1" + c3);
        var d2 = a3 ? t4.getUTCDate() : t4.getDate();
        e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])dddd+/g, "$1" + o3[0])).replace(/(^|[^\\])ddd/g, "$1" + n2[0])).replace(/(^|[^\\])dd/g, "$1" + l2(d2))).replace(/(^|[^\\])d/g, "$1" + d2);
        var g2 = a3 ? t4.getUTCHours() : t4.getHours(), u2 = g2 > 12 ? g2 - 12 : 0 === g2 ? 12 : g2;
        e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])HH+/g, "$1" + l2(g2))).replace(/(^|[^\\])H/g, "$1" + g2)).replace(/(^|[^\\])hh+/g, "$1" + l2(u2))).replace(/(^|[^\\])h/g, "$1" + u2);
        var f2 = a3 ? t4.getUTCMinutes() : t4.getMinutes();
        e3 = (e3 = e3.replace(/(^|[^\\])mm+/g, "$1" + l2(f2))).replace(/(^|[^\\])m/g, "$1" + f2);
        var x2 = a3 ? t4.getUTCSeconds() : t4.getSeconds();
        e3 = (e3 = e3.replace(/(^|[^\\])ss+/g, "$1" + l2(x2))).replace(/(^|[^\\])s/g, "$1" + x2);
        var b2 = a3 ? t4.getUTCMilliseconds() : t4.getMilliseconds();
        e3 = e3.replace(/(^|[^\\])fff+/g, "$1" + l2(b2, 3)), b2 = Math.round(b2 / 10), e3 = e3.replace(/(^|[^\\])ff/g, "$1" + l2(b2)), b2 = Math.round(b2 / 10);
        var v2 = g2 < 12 ? "AM" : "PM";
        e3 = (e3 = (e3 = e3.replace(/(^|[^\\])f/g, "$1" + b2)).replace(/(^|[^\\])TT+/g, "$1" + v2)).replace(/(^|[^\\])T/g, "$1" + v2.charAt(0));
        var m2 = v2.toLowerCase();
        e3 = (e3 = e3.replace(/(^|[^\\])tt+/g, "$1" + m2)).replace(/(^|[^\\])t/g, "$1" + m2.charAt(0));
        var y3 = -t4.getTimezoneOffset(), w2 = a3 || !y3 ? "Z" : y3 > 0 ? "+" : "-";
        if (!a3) {
          var k2 = (y3 = Math.abs(y3)) % 60;
          w2 += l2(Math.floor(y3 / 60)) + ":" + l2(k2);
        }
        e3 = e3.replace(/(^|[^\\])K/g, "$1" + w2);
        var A2 = (a3 ? t4.getUTCDay() : t4.getDay()) + 1;
        return e3 = (e3 = (e3 = (e3 = (e3 = e3.replace(new RegExp(o3[0], "g"), o3[A2])).replace(new RegExp(n2[0], "g"), n2[A2])).replace(new RegExp(s2[0], "g"), s2[c3])).replace(new RegExp(r3[0], "g"), r3[c3])).replace(/\\(.)/g, "$1");
      } }, { key: "getTimeUnitsfromTimestamp", value: function(t4, e3, i2) {
        var a3 = this.w;
        void 0 !== a3.config.xaxis.min && (t4 = a3.config.xaxis.min), void 0 !== a3.config.xaxis.max && (e3 = a3.config.xaxis.max);
        var s2 = this.getDate(t4), r3 = this.getDate(e3), o3 = this.formatDate(s2, "yyyy MM dd HH mm ss fff").split(" "), n2 = this.formatDate(r3, "yyyy MM dd HH mm ss fff").split(" ");
        return { minMillisecond: parseInt(o3[6], 10), maxMillisecond: parseInt(n2[6], 10), minSecond: parseInt(o3[5], 10), maxSecond: parseInt(n2[5], 10), minMinute: parseInt(o3[4], 10), maxMinute: parseInt(n2[4], 10), minHour: parseInt(o3[3], 10), maxHour: parseInt(n2[3], 10), minDate: parseInt(o3[2], 10), maxDate: parseInt(n2[2], 10), minMonth: parseInt(o3[1], 10) - 1, maxMonth: parseInt(n2[1], 10) - 1, minYear: parseInt(o3[0], 10), maxYear: parseInt(n2[0], 10) };
      } }, { key: "isLeapYear", value: function(t4) {
        return t4 % 4 == 0 && t4 % 100 != 0 || t4 % 400 == 0;
      } }, { key: "calculcateLastDaysOfMonth", value: function(t4, e3, i2) {
        return this.determineDaysOfMonths(t4, e3) - i2;
      } }, { key: "determineDaysOfYear", value: function(t4) {
        var e3 = 365;
        return this.isLeapYear(t4) && (e3 = 366), e3;
      } }, { key: "determineRemainingDaysOfYear", value: function(t4, e3, i2) {
        var a3 = this.daysCntOfYear[e3] + i2;
        return e3 > 1 && this.isLeapYear() && a3++, a3;
      } }, { key: "determineDaysOfMonths", value: function(t4, e3) {
        var i2 = 30;
        switch (t4 = v.monthMod(t4), true) {
          case this.months30.indexOf(t4) > -1:
            2 === t4 && (i2 = this.isLeapYear(e3) ? 29 : 28);
            break;
          case this.months31.indexOf(t4) > -1:
          default:
            i2 = 31;
        }
        return i2;
      } }]), t3;
    }();
    var L2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.tooltipKeyFormat = "dd MMM";
      }
      return s(t3, [{ key: "xLabelFormat", value: function(t4, e3, i2, a3) {
        var s2 = this.w;
        if ("datetime" === s2.config.xaxis.type && void 0 === s2.config.xaxis.labels.formatter && void 0 === s2.config.tooltip.x.formatter) {
          var r3 = new C2(this.ctx);
          return r3.formatDate(r3.getDate(e3), s2.config.tooltip.x.format);
        }
        return t4(e3, i2, a3);
      } }, { key: "defaultGeneralFormatter", value: function(t4) {
        return Array.isArray(t4) ? t4.map(function(t5) {
          return t5;
        }) : t4;
      } }, { key: "defaultYFormatter", value: function(t4, e3, i2) {
        var a3 = this.w;
        if (v.isNumber(t4)) if (0 !== a3.globals.yValueDecimal) t4 = t4.toFixed(void 0 !== e3.decimalsInFloat ? e3.decimalsInFloat : a3.globals.yValueDecimal);
        else {
          var s2 = t4.toFixed(0);
          t4 = t4 == s2 ? s2 : t4.toFixed(1);
        }
        return t4;
      } }, { key: "setLabelFormatters", value: function() {
        var t4 = this, e3 = this.w;
        return e3.globals.xaxisTooltipFormatter = function(e4) {
          return t4.defaultGeneralFormatter(e4);
        }, e3.globals.ttKeyFormatter = function(e4) {
          return t4.defaultGeneralFormatter(e4);
        }, e3.globals.ttZFormatter = function(t5) {
          return t5;
        }, e3.globals.legendFormatter = function(e4) {
          return t4.defaultGeneralFormatter(e4);
        }, void 0 !== e3.config.xaxis.labels.formatter ? e3.globals.xLabelFormatter = e3.config.xaxis.labels.formatter : e3.globals.xLabelFormatter = function(t5) {
          if (v.isNumber(t5)) {
            if (!e3.config.xaxis.convertedCatToNumeric && "numeric" === e3.config.xaxis.type) {
              if (v.isNumber(e3.config.xaxis.decimalsInFloat)) return t5.toFixed(e3.config.xaxis.decimalsInFloat);
              var i2 = e3.globals.maxX - e3.globals.minX;
              return i2 > 0 && i2 < 100 ? t5.toFixed(1) : t5.toFixed(0);
            }
            if (e3.globals.isBarHorizontal) {
              if (e3.globals.maxY - e3.globals.minYArr < 4) return t5.toFixed(1);
            }
            return t5.toFixed(0);
          }
          return t5;
        }, "function" == typeof e3.config.tooltip.x.formatter ? e3.globals.ttKeyFormatter = e3.config.tooltip.x.formatter : e3.globals.ttKeyFormatter = e3.globals.xLabelFormatter, "function" == typeof e3.config.xaxis.tooltip.formatter && (e3.globals.xaxisTooltipFormatter = e3.config.xaxis.tooltip.formatter), (Array.isArray(e3.config.tooltip.y) || void 0 !== e3.config.tooltip.y.formatter) && (e3.globals.ttVal = e3.config.tooltip.y), void 0 !== e3.config.tooltip.z.formatter && (e3.globals.ttZFormatter = e3.config.tooltip.z.formatter), void 0 !== e3.config.legend.formatter && (e3.globals.legendFormatter = e3.config.legend.formatter), e3.config.yaxis.forEach(function(i2, a3) {
          void 0 !== i2.labels.formatter ? e3.globals.yLabelFormatters[a3] = i2.labels.formatter : e3.globals.yLabelFormatters[a3] = function(s2) {
            return e3.globals.xyCharts ? Array.isArray(s2) ? s2.map(function(e4) {
              return t4.defaultYFormatter(e4, i2, a3);
            }) : t4.defaultYFormatter(s2, i2, a3) : s2;
          };
        }), e3.globals;
      } }, { key: "heatmapLabelFormatters", value: function() {
        var t4 = this.w;
        if ("heatmap" === t4.config.chart.type) {
          t4.globals.yAxisScale[0].result = t4.globals.seriesNames.slice();
          var e3 = t4.globals.seriesNames.reduce(function(t5, e4) {
            return t5.length > e4.length ? t5 : e4;
          }, 0);
          t4.globals.yAxisScale[0].niceMax = e3, t4.globals.yAxisScale[0].niceMin = e3;
        }
      } }]), t3;
    }();
    var P2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "getLabel", value: function(t4, e3, i2, a3) {
        var s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [], r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px", o3 = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6], n2 = this.w, l2 = void 0 === t4[a3] ? "" : t4[a3], h2 = l2, c3 = n2.globals.xLabelFormatter, d2 = n2.config.xaxis.labels.formatter, g2 = false, u2 = new L2(this.ctx), p2 = l2;
        o3 && (h2 = u2.xLabelFormat(c3, l2, p2, { i: a3, dateFormatter: new C2(this.ctx).formatDate, w: n2 }), void 0 !== d2 && (h2 = d2(l2, t4[a3], { i: a3, dateFormatter: new C2(this.ctx).formatDate, w: n2 })));
        var f2, x2;
        e3.length > 0 ? (f2 = e3[a3].unit, x2 = null, e3.forEach(function(t5) {
          "month" === t5.unit ? x2 = "year" : "day" === t5.unit ? x2 = "month" : "hour" === t5.unit ? x2 = "day" : "minute" === t5.unit && (x2 = "hour");
        }), g2 = x2 === f2, i2 = e3[a3].position, h2 = e3[a3].value) : "datetime" === n2.config.xaxis.type && void 0 === d2 && (h2 = ""), void 0 === h2 && (h2 = ""), h2 = Array.isArray(h2) ? h2 : h2.toString();
        var b2 = new w(this.ctx), v2 = {};
        v2 = n2.globals.rotateXLabels && o3 ? b2.getTextRects(h2, parseInt(r3, 10), null, "rotate(".concat(n2.config.xaxis.labels.rotate, " 0 0)"), false) : b2.getTextRects(h2, parseInt(r3, 10));
        var m2 = !n2.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
        return !Array.isArray(h2) && ("NaN" === String(h2) || s2.indexOf(h2) >= 0 && m2) && (h2 = ""), { x: i2, text: h2, textRect: v2, isBold: g2 };
      } }, { key: "checkLabelBasedOnTickamount", value: function(t4, e3, i2) {
        var a3 = this.w, s2 = a3.config.xaxis.tickAmount;
        return "dataPoints" === s2 && (s2 = Math.round(a3.globals.gridWidth / 120)), s2 > i2 || t4 % Math.round(i2 / (s2 + 1)) == 0 || (e3.text = ""), e3;
      } }, { key: "checkForOverflowingLabels", value: function(t4, e3, i2, a3, s2) {
        var r3 = this.w;
        if (0 === t4 && r3.globals.skipFirstTimelinelabel && (e3.text = ""), t4 === i2 - 1 && r3.globals.skipLastTimelinelabel && (e3.text = ""), r3.config.xaxis.labels.hideOverlappingLabels && a3.length > 0) {
          var o3 = s2[s2.length - 1];
          e3.x < o3.textRect.width / (r3.globals.rotateXLabels ? Math.abs(r3.config.xaxis.labels.rotate) / 12 : 1.01) + o3.x && (e3.text = "");
        }
        return e3;
      } }, { key: "checkForReversedLabels", value: function(t4, e3) {
        var i2 = this.w;
        return i2.config.yaxis[t4] && i2.config.yaxis[t4].reversed && e3.reverse(), e3;
      } }, { key: "yAxisAllSeriesCollapsed", value: function(t4) {
        var e3 = this.w.globals;
        return !e3.seriesYAxisMap[t4].some(function(t5) {
          return -1 === e3.collapsedSeriesIndices.indexOf(t5);
        });
      } }, { key: "translateYAxisIndex", value: function(t4) {
        var e3 = this.w, i2 = e3.globals, a3 = e3.config.yaxis;
        return i2.series.length > a3.length || a3.some(function(t5) {
          return Array.isArray(t5.seriesName);
        }) ? t4 : i2.seriesYAxisReverseMap[t4];
      } }, { key: "isYAxisHidden", value: function(t4) {
        var e3 = this.w, i2 = e3.config.yaxis[t4];
        if (!i2.show || this.yAxisAllSeriesCollapsed(t4)) return true;
        if (!i2.showForNullSeries) {
          var a3 = e3.globals.seriesYAxisMap[t4], s2 = new k(this.ctx);
          return a3.every(function(t5) {
            return s2.isSeriesNull(t5);
          });
        }
        return false;
      } }, { key: "getYAxisForeColor", value: function(t4, e3) {
        var i2 = this.w;
        return Array.isArray(t4) && i2.globals.yAxisScale[e3] && this.ctx.theme.pushExtraColors(t4, i2.globals.yAxisScale[e3].result.length, false), t4;
      } }, { key: "drawYAxisTicks", value: function(t4, e3, i2, a3, s2, r3, o3) {
        var n2 = this.w, l2 = new w(this.ctx), h2 = n2.globals.translateY + n2.config.yaxis[s2].labels.offsetY;
        if (n2.globals.isBarHorizontal ? h2 = 0 : "heatmap" === n2.config.chart.type && (h2 += r3 / 2), a3.show && e3 > 0) {
          true === n2.config.yaxis[s2].opposite && (t4 += a3.width);
          for (var c3 = e3; c3 >= 0; c3--) {
            var d2 = l2.drawLine(t4 + i2.offsetX - a3.width + a3.offsetX, h2 + a3.offsetY, t4 + i2.offsetX + a3.offsetX, h2 + a3.offsetY, a3.color);
            o3.add(d2), h2 += r3;
          }
        }
      } }]), t3;
    }();
    var M = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.annoCtx = e3, this.helpers = new A(this.annoCtx), this.axesUtils = new P2(this.annoCtx);
      }
      return s(t3, [{ key: "addYaxisAnnotation", value: function(t4, e3, i2) {
        var a3, s2 = this.w, r3 = t4.strokeDashArray, o3 = this.helpers.getY1Y2("y1", t4), n2 = o3.yP, l2 = o3.clipped, h2 = true, c3 = false, d2 = t4.label.text;
        if (null === t4.y2 || void 0 === t4.y2) {
          if (!l2) {
            c3 = true;
            var g2 = this.annoCtx.graphics.drawLine(0 + t4.offsetX, n2 + t4.offsetY, this._getYAxisAnnotationWidth(t4), n2 + t4.offsetY, t4.borderColor, r3, t4.borderWidth);
            e3.appendChild(g2.node), t4.id && g2.node.classList.add(t4.id);
          }
        } else {
          if (a3 = (o3 = this.helpers.getY1Y2("y2", t4)).yP, h2 = o3.clipped, a3 > n2) {
            var u2 = n2;
            n2 = a3, a3 = u2;
          }
          if (!l2 || !h2) {
            c3 = true;
            var p2 = this.annoCtx.graphics.drawRect(0 + t4.offsetX, a3 + t4.offsetY, this._getYAxisAnnotationWidth(t4), n2 - a3, 0, t4.fillColor, t4.opacity, 1, t4.borderColor, r3);
            p2.node.classList.add("apexcharts-annotation-rect"), p2.attr("clip-path", "url(#gridRectMask".concat(s2.globals.cuid, ")")), e3.appendChild(p2.node), t4.id && p2.node.classList.add(t4.id);
          }
        }
        if (c3) {
          var f2 = "right" === t4.label.position ? s2.globals.gridWidth : "center" === t4.label.position ? s2.globals.gridWidth / 2 : 0, x2 = this.annoCtx.graphics.drawText({ x: f2 + t4.label.offsetX, y: (null != a3 ? a3 : n2) + t4.label.offsetY - 3, text: d2, textAnchor: t4.label.textAnchor, fontSize: t4.label.style.fontSize, fontFamily: t4.label.style.fontFamily, fontWeight: t4.label.style.fontWeight, foreColor: t4.label.style.color, cssClass: "apexcharts-yaxis-annotation-label ".concat(t4.label.style.cssClass, " ").concat(t4.id ? t4.id : "") });
          x2.attr({ rel: i2 }), e3.appendChild(x2.node);
        }
      } }, { key: "_getYAxisAnnotationWidth", value: function(t4) {
        var e3 = this.w;
        e3.globals.gridWidth;
        return (t4.width.indexOf("%") > -1 ? e3.globals.gridWidth * parseInt(t4.width, 10) / 100 : parseInt(t4.width, 10)) + t4.offsetX;
      } }, { key: "drawYAxisAnnotations", value: function() {
        var t4 = this, e3 = this.w, i2 = this.annoCtx.graphics.group({ class: "apexcharts-yaxis-annotations" });
        return e3.config.annotations.yaxis.forEach(function(e4, a3) {
          e4.yAxisIndex = t4.axesUtils.translateYAxisIndex(e4.yAxisIndex), t4.axesUtils.isYAxisHidden(e4.yAxisIndex) && t4.axesUtils.yAxisAllSeriesCollapsed(e4.yAxisIndex) || t4.addYaxisAnnotation(e4, i2.node, a3);
        }), i2;
      } }]), t3;
    }();
    var I2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.annoCtx = e3, this.helpers = new A(this.annoCtx);
      }
      return s(t3, [{ key: "addPointAnnotation", value: function(t4, e3, i2) {
        if (!(this.w.globals.collapsedSeriesIndices.indexOf(t4.seriesIndex) > -1)) {
          var a3 = this.helpers.getX1X2("x1", t4), s2 = a3.x, r3 = a3.clipped, o3 = (a3 = this.helpers.getY1Y2("y1", t4)).yP, n2 = a3.clipped;
          if (v.isNumber(s2) && !n2 && !r3) {
            var l2 = { pSize: t4.marker.size, pointStrokeWidth: t4.marker.strokeWidth, pointFillColor: t4.marker.fillColor, pointStrokeColor: t4.marker.strokeColor, shape: t4.marker.shape, pRadius: t4.marker.radius, class: "apexcharts-point-annotation-marker ".concat(t4.marker.cssClass, " ").concat(t4.id ? t4.id : "") }, h2 = this.annoCtx.graphics.drawMarker(s2 + t4.marker.offsetX, o3 + t4.marker.offsetY, l2);
            e3.appendChild(h2.node);
            var c3 = t4.label.text ? t4.label.text : "", d2 = this.annoCtx.graphics.drawText({ x: s2 + t4.label.offsetX, y: o3 + t4.label.offsetY - t4.marker.size - parseFloat(t4.label.style.fontSize) / 1.6, text: c3, textAnchor: t4.label.textAnchor, fontSize: t4.label.style.fontSize, fontFamily: t4.label.style.fontFamily, fontWeight: t4.label.style.fontWeight, foreColor: t4.label.style.color, cssClass: "apexcharts-point-annotation-label ".concat(t4.label.style.cssClass, " ").concat(t4.id ? t4.id : "") });
            if (d2.attr({ rel: i2 }), e3.appendChild(d2.node), t4.customSVG.SVG) {
              var g2 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations-custom-svg " + t4.customSVG.cssClass });
              g2.attr({ transform: "translate(".concat(s2 + t4.customSVG.offsetX, ", ").concat(o3 + t4.customSVG.offsetY, ")") }), g2.node.innerHTML = t4.customSVG.SVG, e3.appendChild(g2.node);
            }
            if (t4.image.path) {
              var u2 = t4.image.width ? t4.image.width : 20, p2 = t4.image.height ? t4.image.height : 20;
              h2 = this.annoCtx.addImage({ x: s2 + t4.image.offsetX - u2 / 2, y: o3 + t4.image.offsetY - p2 / 2, width: u2, height: p2, path: t4.image.path, appendTo: ".apexcharts-point-annotations" });
            }
            t4.mouseEnter && h2.node.addEventListener("mouseenter", t4.mouseEnter.bind(this, t4)), t4.mouseLeave && h2.node.addEventListener("mouseleave", t4.mouseLeave.bind(this, t4)), t4.click && h2.node.addEventListener("click", t4.click.bind(this, t4));
          }
        }
      } }, { key: "drawPointAnnotations", value: function() {
        var t4 = this, e3 = this.w, i2 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations" });
        return e3.config.annotations.points.map(function(e4, a3) {
          t4.addPointAnnotation(e4, i2.node, a3);
        }), i2;
      } }]), t3;
    }();
    var T = { name: "en", options: { months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], toolbar: { exportToSVG: "Download SVG", exportToPNG: "Download PNG", exportToCSV: "Download CSV", menu: "Menu", selection: "Selection", selectionZoom: "Selection Zoom", zoomIn: "Zoom In", zoomOut: "Zoom Out", pan: "Panning", reset: "Reset Zoom" } } };
    var z = function() {
      function t3() {
        i(this, t3), this.yAxis = { show: true, showAlways: false, showForNullSeries: true, seriesName: void 0, opposite: false, reversed: false, logarithmic: false, logBase: 10, tickAmount: void 0, stepSize: void 0, forceNiceScale: false, max: void 0, min: void 0, floating: false, decimalsInFloat: void 0, labels: { show: true, minWidth: 0, maxWidth: 160, offsetX: 0, offsetY: 0, align: void 0, rotate: 0, padding: 20, style: { colors: [], fontSize: "11px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, formatter: void 0 }, axisBorder: { show: false, color: "#e0e0e0", width: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: false, color: "#e0e0e0", width: 6, offsetX: 0, offsetY: 0 }, title: { text: void 0, rotate: -90, offsetY: 0, offsetX: 0, style: { color: void 0, fontSize: "11px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, tooltip: { enabled: false, offsetX: 0 }, crosshairs: { show: true, position: "front", stroke: { color: "#b6b6b6", width: 1, dashArray: 0 } } }, this.pointAnnotation = { id: void 0, x: 0, y: null, yAxisIndex: 0, seriesIndex: void 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, marker: { size: 4, fillColor: "#fff", strokeWidth: 2, strokeColor: "#333", shape: "circle", offsetX: 0, offsetY: 0, cssClass: "" }, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } }, customSVG: { SVG: void 0, cssClass: void 0, offsetX: 0, offsetY: 0 }, image: { path: void 0, width: 20, height: 20, offsetX: 0, offsetY: 0 } }, this.yAxisAnnotation = { id: void 0, y: 0, y2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, width: "100%", yAxisIndex: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "end", position: "right", offsetX: 0, offsetY: -3, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.xAxisAnnotation = { id: void 0, x: 0, x2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", orientation: "vertical", position: "top", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.text = { x: 0, y: 0, text: "", textAnchor: "start", foreColor: void 0, fontSize: "13px", fontFamily: void 0, fontWeight: 400, appendTo: ".apexcharts-annotations", backgroundColor: "transparent", borderColor: "#c2c2c2", borderRadius: 0, borderWidth: 0, paddingLeft: 4, paddingRight: 4, paddingTop: 2, paddingBottom: 2 };
      }
      return s(t3, [{ key: "init", value: function() {
        return { annotations: { yaxis: [this.yAxisAnnotation], xaxis: [this.xAxisAnnotation], points: [this.pointAnnotation], texts: [], images: [], shapes: [] }, chart: { animations: { enabled: true, easing: "easeinout", speed: 800, animateGradually: { delay: 150, enabled: true }, dynamicAnimation: { enabled: true, speed: 350 } }, background: "", locales: [T], defaultLocale: "en", dropShadow: { enabled: false, enabledOnSeries: void 0, top: 2, left: 2, blur: 4, color: "#000", opacity: 0.35 }, events: { animationEnd: void 0, beforeMount: void 0, mounted: void 0, updated: void 0, click: void 0, mouseMove: void 0, mouseLeave: void 0, xAxisLabelClick: void 0, legendClick: void 0, markerClick: void 0, selection: void 0, dataPointSelection: void 0, dataPointMouseEnter: void 0, dataPointMouseLeave: void 0, beforeZoom: void 0, beforeResetZoom: void 0, zoomed: void 0, scrolled: void 0, brushScrolled: void 0 }, foreColor: "#373d3f", fontFamily: "Helvetica, Arial, sans-serif", height: "auto", parentHeightOffset: 15, redrawOnParentResize: true, redrawOnWindowResize: true, id: void 0, group: void 0, nonce: void 0, offsetX: 0, offsetY: 0, selection: { enabled: false, type: "x", fill: { color: "#24292e", opacity: 0.1 }, stroke: { width: 1, color: "#24292e", opacity: 0.4, dashArray: 3 }, xaxis: { min: void 0, max: void 0 }, yaxis: { min: void 0, max: void 0 } }, sparkline: { enabled: false }, brush: { enabled: false, autoScaleYaxis: true, target: void 0, targets: void 0 }, stacked: false, stackOnlyBar: true, stackType: "normal", toolbar: { show: true, offsetX: 0, offsetY: 0, tools: { download: true, selection: true, zoom: true, zoomin: true, zoomout: true, pan: true, reset: true, customIcons: [] }, export: { csv: { filename: void 0, columnDelimiter: ",", headerCategory: "category", headerValue: "value", categoryFormatter: void 0, valueFormatter: void 0 }, png: { filename: void 0 }, svg: { filename: void 0 }, scale: void 0, width: void 0 }, autoSelected: "zoom" }, type: "line", width: "100%", zoom: { enabled: true, type: "x", autoScaleYaxis: false, allowMouseWheelZoom: true, zoomedArea: { fill: { color: "#90CAF9", opacity: 0.4 }, stroke: { color: "#0D47A1", opacity: 0.4, width: 1 } } } }, plotOptions: { line: { isSlopeChart: false }, area: { fillTo: "origin" }, bar: { horizontal: false, columnWidth: "70%", barHeight: "70%", distributed: false, borderRadius: 0, borderRadiusApplication: "around", borderRadiusWhenStacked: "last", rangeBarOverlap: true, rangeBarGroupRows: false, hideZeroBarsWhenGrouped: false, isDumbbell: false, dumbbellColors: void 0, isFunnel: false, isFunnel3d: true, colors: { ranges: [], backgroundBarColors: [], backgroundBarOpacity: 1, backgroundBarRadius: 0 }, dataLabels: { position: "top", maxItems: 100, hideOverflowingLabels: true, orientation: "horizontal", total: { enabled: false, formatter: void 0, offsetX: 0, offsetY: 0, style: { color: "#373d3f", fontSize: "12px", fontFamily: void 0, fontWeight: 600 } } } }, bubble: { zScaling: true, minBubbleRadius: void 0, maxBubbleRadius: void 0 }, candlestick: { colors: { upward: "#00B746", downward: "#EF403C" }, wick: { useFillColor: true } }, boxPlot: { colors: { upper: "#00E396", lower: "#008FFB" } }, heatmap: { radius: 2, enableShades: true, shadeIntensity: 0.5, reverseNegativeShade: false, distributed: false, useFillColorAsStroke: false, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 } }, treemap: { enableShades: true, shadeIntensity: 0.5, distributed: false, reverseNegativeShade: false, useFillColorAsStroke: false, borderRadius: 4, dataLabels: { format: "scale" }, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 } }, radialBar: { inverseOrder: false, startAngle: 0, endAngle: 360, offsetX: 0, offsetY: 0, hollow: { margin: 5, size: "50%", background: "transparent", image: void 0, imageWidth: 150, imageHeight: 150, imageOffsetX: 0, imageOffsetY: 0, imageClipped: true, position: "front", dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, track: { show: true, startAngle: void 0, endAngle: void 0, background: "#f2f2f2", strokeWidth: "97%", opacity: 1, margin: 5, dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, dataLabels: { show: true, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: 0, formatter: function(t4) {
          return t4;
        } }, value: { show: true, fontSize: "14px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 16, formatter: function(t4) {
          return t4 + "%";
        } }, total: { show: false, label: "Total", fontSize: "16px", fontWeight: 600, fontFamily: void 0, color: void 0, formatter: function(t4) {
          return t4.globals.seriesTotals.reduce(function(t5, e3) {
            return t5 + e3;
          }, 0) / t4.globals.series.length + "%";
        } } }, barLabels: { enabled: false, offsetX: 0, offsetY: 0, useSeriesColors: true, fontFamily: void 0, fontWeight: 600, fontSize: "16px", formatter: function(t4) {
          return t4;
        }, onClick: void 0 } }, pie: { customScale: 1, offsetX: 0, offsetY: 0, startAngle: 0, endAngle: 360, expandOnClick: true, dataLabels: { offset: 0, minAngleToShowLabel: 10 }, donut: { size: "65%", background: "transparent", labels: { show: false, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: -10, formatter: function(t4) {
          return t4;
        } }, value: { show: true, fontSize: "20px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 10, formatter: function(t4) {
          return t4;
        } }, total: { show: false, showAlways: false, label: "Total", fontSize: "16px", fontWeight: 400, fontFamily: void 0, color: void 0, formatter: function(t4) {
          return t4.globals.seriesTotals.reduce(function(t5, e3) {
            return t5 + e3;
          }, 0);
        } } } } }, polarArea: { rings: { strokeWidth: 1, strokeColor: "#e8e8e8" }, spokes: { strokeWidth: 1, connectorColors: "#e8e8e8" } }, radar: { size: void 0, offsetX: 0, offsetY: 0, polygons: { strokeWidth: 1, strokeColors: "#e8e8e8", connectorColors: "#e8e8e8", fill: { colors: void 0 } } } }, colors: void 0, dataLabels: { enabled: true, enabledOnSeries: void 0, formatter: function(t4) {
          return null !== t4 ? t4 : "";
        }, textAnchor: "middle", distributed: false, offsetX: 0, offsetY: 0, style: { fontSize: "12px", fontFamily: void 0, fontWeight: 600, colors: void 0 }, background: { enabled: true, foreColor: "#fff", borderRadius: 2, padding: 4, opacity: 0.9, borderWidth: 1, borderColor: "#fff", dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 } }, dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 } }, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] }, image: { src: [], width: void 0, height: void 0 }, pattern: { style: "squares", width: 6, height: 6, strokeWidth: 2 } }, forecastDataPoints: { count: 0, fillOpacity: 0.5, strokeWidth: void 0, dashArray: 4 }, grid: { show: true, borderColor: "#e0e0e0", strokeDashArray: 0, position: "back", xaxis: { lines: { show: false } }, yaxis: { lines: { show: true } }, row: { colors: void 0, opacity: 0.5 }, column: { colors: void 0, opacity: 0.5 }, padding: { top: 0, right: 10, bottom: 0, left: 12 } }, labels: [], legend: { show: true, showForSingleSeries: false, showForNullSeries: true, showForZeroSeries: true, floating: false, position: "bottom", horizontalAlign: "center", inverseOrder: false, fontSize: "12px", fontFamily: void 0, fontWeight: 400, width: void 0, height: void 0, formatter: void 0, tooltipHoverFormatter: void 0, offsetX: -20, offsetY: 4, customLegendItems: [], labels: { colors: void 0, useSeriesColors: false }, markers: { size: 7, fillColors: void 0, strokeWidth: 1, shape: void 0, offsetX: 0, offsetY: 0, customHTML: void 0, onClick: void 0 }, itemMargin: { horizontal: 5, vertical: 4 }, onItemClick: { toggleDataSeries: true }, onItemHover: { highlightDataSeries: true } }, markers: { discrete: [], size: 0, colors: void 0, strokeColors: "#fff", strokeWidth: 2, strokeOpacity: 0.9, strokeDashArray: 0, fillOpacity: 1, shape: "circle", offsetX: 0, offsetY: 0, showNullDataPoints: true, onClick: void 0, onDblClick: void 0, hover: { size: void 0, sizeOffset: 3 } }, noData: { text: void 0, align: "center", verticalAlign: "middle", offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "14px", fontFamily: void 0 } }, responsive: [], series: void 0, states: { normal: { filter: { type: "none", value: 0 } }, hover: { filter: { type: "lighten", value: 0.1 } }, active: { allowMultipleDataPointsSelection: false, filter: { type: "darken", value: 0.5 } } }, title: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 0, floating: false, style: { fontSize: "14px", fontWeight: 900, fontFamily: void 0, color: void 0 } }, subtitle: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 30, floating: false, style: { fontSize: "12px", fontWeight: 400, fontFamily: void 0, color: void 0 } }, stroke: { show: true, curve: "smooth", lineCap: "butt", width: 2, colors: void 0, dashArray: 0, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] } } }, tooltip: { enabled: true, enabledOnSeries: void 0, shared: true, hideEmptySeries: false, followCursor: false, intersect: false, inverseOrder: false, custom: void 0, fillSeriesColor: false, theme: "light", cssClass: "", style: { fontSize: "12px", fontFamily: void 0 }, onDatasetHover: { highlightDataSeries: false }, x: { show: true, format: "dd MMM", formatter: void 0 }, y: { formatter: void 0, title: { formatter: function(t4) {
          return t4 ? t4 + ": " : "";
        } } }, z: { formatter: void 0, title: "Size: " }, marker: { show: true, fillColors: void 0 }, items: { display: "flex" }, fixed: { enabled: false, position: "topRight", offsetX: 0, offsetY: 0 } }, xaxis: { type: "category", categories: [], convertedCatToNumeric: false, offsetX: 0, offsetY: 0, overwriteCategories: void 0, labels: { show: true, rotate: -45, rotateAlways: false, hideOverlappingLabels: true, trim: false, minHeight: void 0, maxHeight: 120, showDuplicates: true, style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, offsetX: 0, offsetY: 0, format: void 0, formatter: void 0, datetimeUTC: true, datetimeFormatter: { year: "yyyy", month: "MMM 'yy", day: "dd MMM", hour: "HH:mm", minute: "HH:mm:ss", second: "HH:mm:ss" } }, group: { groups: [], style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" } }, axisBorder: { show: true, color: "#e0e0e0", width: "100%", height: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: true, color: "#e0e0e0", height: 6, offsetX: 0, offsetY: 0 }, stepSize: void 0, tickAmount: void 0, tickPlacement: "on", min: void 0, max: void 0, range: void 0, floating: false, decimalsInFloat: void 0, position: "bottom", title: { text: void 0, offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "12px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, crosshairs: { show: true, width: 1, position: "back", opacity: 0.9, stroke: { color: "#b6b6b6", width: 1, dashArray: 3 }, fill: { type: "solid", color: "#B1B9C4", gradient: { colorFrom: "#D8E3F0", colorTo: "#BED1E6", stops: [0, 100], opacityFrom: 0.4, opacityTo: 0.5 } }, dropShadow: { enabled: false, left: 0, top: 0, blur: 1, opacity: 0.4 } }, tooltip: { enabled: true, offsetY: 0, formatter: void 0, style: { fontSize: "12px", fontFamily: void 0 } } }, yaxis: this.yAxis, theme: { mode: "", palette: "palette1", monochrome: { enabled: false, color: "#008FFB", shadeTo: "light", shadeIntensity: 0.65 } } };
      } }]), t3;
    }();
    var X2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.graphics = new w(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = true), this.helpers = new A(this), this.xAxisAnnotations = new S(this), this.yAxisAnnotations = new M(this), this.pointsAnnotations = new I2(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = true), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
      }
      return s(t3, [{ key: "drawAxesAnnotations", value: function() {
        var t4 = this.w;
        if (t4.globals.axisCharts) {
          for (var e3 = this.yAxisAnnotations.drawYAxisAnnotations(), i2 = this.xAxisAnnotations.drawXAxisAnnotations(), a3 = this.pointsAnnotations.drawPointAnnotations(), s2 = t4.config.chart.animations.enabled, r3 = [e3, i2, a3], o3 = [i2.node, e3.node, a3.node], n2 = 0; n2 < 3; n2++) t4.globals.dom.elGraphical.add(r3[n2]), !s2 || t4.globals.resized || t4.globals.dataChanged || "scatter" !== t4.config.chart.type && "bubble" !== t4.config.chart.type && t4.globals.dataPoints > 1 && o3[n2].classList.add("apexcharts-element-hidden"), t4.globals.delayedElements.push({ el: o3[n2], index: 0 });
          this.helpers.annotationsBackground();
        }
      } }, { key: "drawImageAnnos", value: function() {
        var t4 = this;
        this.w.config.annotations.images.map(function(e3, i2) {
          t4.addImage(e3, i2);
        });
      } }, { key: "drawTextAnnos", value: function() {
        var t4 = this;
        this.w.config.annotations.texts.map(function(e3, i2) {
          t4.addText(e3, i2);
        });
      } }, { key: "addXaxisAnnotation", value: function(t4, e3, i2) {
        this.xAxisAnnotations.addXaxisAnnotation(t4, e3, i2);
      } }, { key: "addYaxisAnnotation", value: function(t4, e3, i2) {
        this.yAxisAnnotations.addYaxisAnnotation(t4, e3, i2);
      } }, { key: "addPointAnnotation", value: function(t4, e3, i2) {
        this.pointsAnnotations.addPointAnnotation(t4, e3, i2);
      } }, { key: "addText", value: function(t4, e3) {
        var i2 = t4.x, a3 = t4.y, s2 = t4.text, r3 = t4.textAnchor, o3 = t4.foreColor, n2 = t4.fontSize, l2 = t4.fontFamily, h2 = t4.fontWeight, c3 = t4.cssClass, d2 = t4.backgroundColor, g2 = t4.borderWidth, u2 = t4.strokeDashArray, p2 = t4.borderRadius, f2 = t4.borderColor, x2 = t4.appendTo, b2 = void 0 === x2 ? ".apexcharts-svg" : x2, v2 = t4.paddingLeft, m2 = void 0 === v2 ? 4 : v2, y3 = t4.paddingRight, w2 = void 0 === y3 ? 4 : y3, k2 = t4.paddingBottom, A2 = void 0 === k2 ? 2 : k2, S2 = t4.paddingTop, C3 = void 0 === S2 ? 2 : S2, L3 = this.w, P3 = this.graphics.drawText({ x: i2, y: a3, text: s2, textAnchor: r3 || "start", fontSize: n2 || "12px", fontWeight: h2 || "regular", fontFamily: l2 || L3.config.chart.fontFamily, foreColor: o3 || L3.config.chart.foreColor, cssClass: c3 }), M2 = L3.globals.dom.baseEl.querySelector(b2);
        M2 && M2.appendChild(P3.node);
        var I3 = P3.bbox();
        if (s2) {
          var T2 = this.graphics.drawRect(I3.x - m2, I3.y - C3, I3.width + m2 + w2, I3.height + A2 + C3, p2, d2 || "transparent", 1, g2, f2, u2);
          M2.insertBefore(T2.node, P3.node);
        }
      } }, { key: "addImage", value: function(t4, e3) {
        var i2 = this.w, a3 = t4.path, s2 = t4.x, r3 = void 0 === s2 ? 0 : s2, o3 = t4.y, n2 = void 0 === o3 ? 0 : o3, l2 = t4.width, h2 = void 0 === l2 ? 20 : l2, c3 = t4.height, d2 = void 0 === c3 ? 20 : c3, g2 = t4.appendTo, u2 = void 0 === g2 ? ".apexcharts-svg" : g2, p2 = i2.globals.dom.Paper.image(a3);
        p2.size(h2, d2).move(r3, n2);
        var f2 = i2.globals.dom.baseEl.querySelector(u2);
        return f2 && f2.appendChild(p2.node), p2;
      } }, { key: "addXaxisAnnotationExternal", value: function(t4, e3, i2) {
        return this.addAnnotationExternal({ params: t4, pushToMemory: e3, context: i2, type: "xaxis", contextMethod: i2.addXaxisAnnotation }), i2;
      } }, { key: "addYaxisAnnotationExternal", value: function(t4, e3, i2) {
        return this.addAnnotationExternal({ params: t4, pushToMemory: e3, context: i2, type: "yaxis", contextMethod: i2.addYaxisAnnotation }), i2;
      } }, { key: "addPointAnnotationExternal", value: function(t4, e3, i2) {
        return void 0 === this.invertAxis && (this.invertAxis = i2.w.globals.isBarHorizontal), this.addAnnotationExternal({ params: t4, pushToMemory: e3, context: i2, type: "point", contextMethod: i2.addPointAnnotation }), i2;
      } }, { key: "addAnnotationExternal", value: function(t4) {
        var e3 = t4.params, i2 = t4.pushToMemory, a3 = t4.context, s2 = t4.type, r3 = t4.contextMethod, o3 = a3, n2 = o3.w, l2 = n2.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations")), h2 = l2.childNodes.length + 1, c3 = new z(), d2 = Object.assign({}, "xaxis" === s2 ? c3.xAxisAnnotation : "yaxis" === s2 ? c3.yAxisAnnotation : c3.pointAnnotation), g2 = v.extend(d2, e3);
        switch (s2) {
          case "xaxis":
            this.addXaxisAnnotation(g2, l2, h2);
            break;
          case "yaxis":
            this.addYaxisAnnotation(g2, l2, h2);
            break;
          case "point":
            this.addPointAnnotation(g2, l2, h2);
        }
        var u2 = n2.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations .apexcharts-").concat(s2, "-annotation-label[rel='").concat(h2, "']")), p2 = this.helpers.addBackgroundToAnno(u2, g2);
        return p2 && l2.insertBefore(p2.node, u2), i2 && n2.globals.memory.methodsToExec.push({ context: o3, id: g2.id ? g2.id : v.randomId(), method: r3, label: "addAnnotation", params: e3 }), a3;
      } }, { key: "clearAnnotations", value: function(t4) {
        for (var e3 = t4.w, i2 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations"), a3 = e3.globals.memory.methodsToExec.length - 1; a3 >= 0; a3--) "addText" !== e3.globals.memory.methodsToExec[a3].label && "addAnnotation" !== e3.globals.memory.methodsToExec[a3].label || e3.globals.memory.methodsToExec.splice(a3, 1);
        i2 = v.listToArray(i2), Array.prototype.forEach.call(i2, function(t5) {
          for (; t5.firstChild; ) t5.removeChild(t5.firstChild);
        });
      } }, { key: "removeAnnotation", value: function(t4, e3) {
        var i2 = t4.w, a3 = i2.globals.dom.baseEl.querySelectorAll(".".concat(e3));
        a3 && (i2.globals.memory.methodsToExec.map(function(t5, a4) {
          t5.id === e3 && i2.globals.memory.methodsToExec.splice(a4, 1);
        }), Array.prototype.forEach.call(a3, function(t5) {
          t5.parentElement.removeChild(t5);
        }));
      } }]), t3;
    }();
    var E = function(t3) {
      var e3, i2 = t3.isTimeline, a3 = t3.ctx, s2 = t3.seriesIndex, r3 = t3.dataPointIndex, o3 = t3.y1, n2 = t3.y2, l2 = t3.w, h2 = l2.globals.seriesRangeStart[s2][r3], c3 = l2.globals.seriesRangeEnd[s2][r3], d2 = l2.globals.labels[r3], g2 = l2.config.series[s2].name ? l2.config.series[s2].name : "", u2 = l2.globals.ttKeyFormatter, p2 = l2.config.tooltip.y.title.formatter, f2 = { w: l2, seriesIndex: s2, dataPointIndex: r3, start: h2, end: c3 };
      ("function" == typeof p2 && (g2 = p2(g2, f2)), null !== (e3 = l2.config.series[s2].data[r3]) && void 0 !== e3 && e3.x && (d2 = l2.config.series[s2].data[r3].x), i2) || "datetime" === l2.config.xaxis.type && (d2 = new L2(a3).xLabelFormat(l2.globals.ttKeyFormatter, d2, d2, { i: void 0, dateFormatter: new C2(a3).formatDate, w: l2 }));
      "function" == typeof u2 && (d2 = u2(d2, f2)), Number.isFinite(o3) && Number.isFinite(n2) && (h2 = o3, c3 = n2);
      var x2 = "", b2 = "", v2 = l2.globals.colors[s2];
      if (void 0 === l2.config.tooltip.x.formatter) if ("datetime" === l2.config.xaxis.type) {
        var m2 = new C2(a3);
        x2 = m2.formatDate(m2.getDate(h2), l2.config.tooltip.x.format), b2 = m2.formatDate(m2.getDate(c3), l2.config.tooltip.x.format);
      } else x2 = h2, b2 = c3;
      else x2 = l2.config.tooltip.x.formatter(h2), b2 = l2.config.tooltip.x.formatter(c3);
      return { start: h2, end: c3, startVal: x2, endVal: b2, ylabel: d2, color: v2, seriesName: g2 };
    };
    var Y = function(t3) {
      var e3 = t3.color, i2 = t3.seriesName, a3 = t3.ylabel, s2 = t3.start, r3 = t3.end, o3 = t3.seriesIndex, n2 = t3.dataPointIndex, l2 = t3.ctx.tooltip.tooltipLabels.getFormatters(o3);
      s2 = l2.yLbFormatter(s2), r3 = l2.yLbFormatter(r3);
      var h2 = l2.yLbFormatter(t3.w.globals.series[o3][n2]), c3 = '<span class="value start-value">\n  '.concat(s2, '\n  </span> <span class="separator">-</span> <span class="value end-value">\n  ').concat(r3, "\n  </span>");
      return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + e3 + '">' + (i2 || "") + '</span></div><div> <span class="category">' + a3 + ": </span> " + (t3.w.globals.comboCharts ? "rangeArea" === t3.w.config.series[o3].type || "rangeBar" === t3.w.config.series[o3].type ? c3 : "<span>".concat(h2, "</span>") : c3) + " </div></div>";
    };
    var F2 = function() {
      function t3(e3) {
        i(this, t3), this.opts = e3;
      }
      return s(t3, [{ key: "hideYAxis", value: function() {
        this.opts.yaxis[0].show = false, this.opts.yaxis[0].title.text = "", this.opts.yaxis[0].axisBorder.show = false, this.opts.yaxis[0].axisTicks.show = false, this.opts.yaxis[0].floating = true;
      } }, { key: "line", value: function() {
        return { chart: { animations: { easing: "swing" } }, dataLabels: { enabled: false }, stroke: { width: 5, curve: "straight" }, markers: { size: 0, hover: { sizeOffset: 6 } }, xaxis: { crosshairs: { width: 1 } } };
      } }, { key: "sparkline", value: function(t4) {
        this.hideYAxis();
        return v.extend(t4, { grid: { show: false, padding: { left: 0, right: 0, top: 0, bottom: 0 } }, legend: { show: false }, xaxis: { labels: { show: false }, tooltip: { enabled: false }, axisBorder: { show: false }, axisTicks: { show: false } }, chart: { toolbar: { show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false } });
      } }, { key: "slope", value: function() {
        return this.hideYAxis(), { chart: { toolbar: { show: false }, zoom: { enabled: false } }, dataLabels: { enabled: true, formatter: function(t4, e3) {
          var i2 = e3.w.config.series[e3.seriesIndex].name;
          return null !== t4 ? i2 + ": " + t4 : "";
        }, background: { enabled: false }, offsetX: -5 }, grid: { xaxis: { lines: { show: true } }, yaxis: { lines: { show: false } } }, xaxis: { position: "top", labels: { style: { fontSize: 14, fontWeight: 900 } }, tooltip: { enabled: false }, crosshairs: { show: false } }, markers: { size: 8, hover: { sizeOffset: 1 } }, legend: { show: false }, tooltip: { shared: false, intersect: true, followCursor: true }, stroke: { width: 5, curve: "straight" } };
      } }, { key: "bar", value: function() {
        return { chart: { stacked: false, animations: { easing: "swing" } }, plotOptions: { bar: { dataLabels: { position: "center" } } }, dataLabels: { style: { colors: ["#fff"] }, background: { enabled: false } }, stroke: { width: 0, lineCap: "round" }, fill: { opacity: 0.85 }, legend: { markers: { shape: "square" } }, tooltip: { shared: false, intersect: true }, xaxis: { tooltip: { enabled: false }, tickPlacement: "between", crosshairs: { width: "barWidth", position: "back", fill: { type: "gradient" }, dropShadow: { enabled: false }, stroke: { width: 0 } } } };
      } }, { key: "funnel", value: function() {
        return this.hideYAxis(), d(d({}, this.bar()), {}, { chart: { animations: { easing: "linear", speed: 800, animateGradually: { enabled: false } } }, plotOptions: { bar: { horizontal: true, borderRadiusApplication: "around", borderRadius: 0, dataLabels: { position: "center" } } }, grid: { show: false, padding: { left: 0, right: 0 } }, xaxis: { labels: { show: false }, tooltip: { enabled: false }, axisBorder: { show: false }, axisTicks: { show: false } } });
      } }, { key: "candlestick", value: function() {
        var t4 = this;
        return { stroke: { width: 1, colors: ["#333"] }, fill: { opacity: 1 }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e3) {
          var i2 = e3.seriesIndex, a3 = e3.dataPointIndex, s2 = e3.w;
          return t4._getBoxTooltip(s2, i2, a3, ["Open", "High", "", "Low", "Close"], "candlestick");
        } }, states: { active: { filter: { type: "none" } } }, xaxis: { crosshairs: { width: 1 } } };
      } }, { key: "boxPlot", value: function() {
        var t4 = this;
        return { chart: { animations: { dynamicAnimation: { enabled: false } } }, stroke: { width: 1, colors: ["#24292e"] }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e3) {
          var i2 = e3.seriesIndex, a3 = e3.dataPointIndex, s2 = e3.w;
          return t4._getBoxTooltip(s2, i2, a3, ["Minimum", "Q1", "Median", "Q3", "Maximum"], "boxPlot");
        } }, markers: { size: 7, strokeWidth: 1, strokeColors: "#111" }, xaxis: { crosshairs: { width: 1 } } };
      } }, { key: "rangeBar", value: function() {
        return { chart: { animations: { animateGradually: false } }, stroke: { width: 0, lineCap: "square" }, plotOptions: { bar: { borderRadius: 0, dataLabels: { position: "center" } } }, dataLabels: { enabled: false, formatter: function(t4, e3) {
          e3.ctx;
          var i2 = e3.seriesIndex, a3 = e3.dataPointIndex, s2 = e3.w, r3 = function() {
            var t5 = s2.globals.seriesRangeStart[i2][a3];
            return s2.globals.seriesRangeEnd[i2][a3] - t5;
          };
          return s2.globals.comboCharts ? "rangeBar" === s2.config.series[i2].type || "rangeArea" === s2.config.series[i2].type ? r3() : t4 : r3();
        }, background: { enabled: false }, style: { colors: ["#fff"] } }, markers: { size: 10 }, tooltip: { shared: false, followCursor: true, custom: function(t4) {
          return t4.w.config.plotOptions && t4.w.config.plotOptions.bar && t4.w.config.plotOptions.bar.horizontal ? function(t5) {
            var e3 = E(d(d({}, t5), {}, { isTimeline: true })), i2 = e3.color, a3 = e3.seriesName, s2 = e3.ylabel, r3 = e3.startVal, o3 = e3.endVal;
            return Y(d(d({}, t5), {}, { color: i2, seriesName: a3, ylabel: s2, start: r3, end: o3 }));
          }(t4) : function(t5) {
            var e3 = E(t5), i2 = e3.color, a3 = e3.seriesName, s2 = e3.ylabel, r3 = e3.start, o3 = e3.end;
            return Y(d(d({}, t5), {}, { color: i2, seriesName: a3, ylabel: s2, start: r3, end: o3 }));
          }(t4);
        } }, xaxis: { tickPlacement: "between", tooltip: { enabled: false }, crosshairs: { stroke: { width: 0 } } } };
      } }, { key: "dumbbell", value: function(t4) {
        var e3, i2;
        return null !== (e3 = t4.plotOptions.bar) && void 0 !== e3 && e3.barHeight || (t4.plotOptions.bar.barHeight = 2), null !== (i2 = t4.plotOptions.bar) && void 0 !== i2 && i2.columnWidth || (t4.plotOptions.bar.columnWidth = 2), t4;
      } }, { key: "area", value: function() {
        return { stroke: { width: 4, fill: { type: "solid", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } } }, fill: { type: "gradient", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } }, markers: { size: 0, hover: { sizeOffset: 6 } }, tooltip: { followCursor: false } };
      } }, { key: "rangeArea", value: function() {
        return { stroke: { curve: "straight", width: 0 }, fill: { type: "solid", opacity: 0.6 }, markers: { size: 0 }, states: { hover: { filter: { type: "none" } }, active: { filter: { type: "none" } } }, tooltip: { intersect: false, shared: true, followCursor: true, custom: function(t4) {
          return function(t5) {
            var e3 = E(t5), i2 = e3.color, a3 = e3.seriesName, s2 = e3.ylabel, r3 = e3.start, o3 = e3.end;
            return Y(d(d({}, t5), {}, { color: i2, seriesName: a3, ylabel: s2, start: r3, end: o3 }));
          }(t4);
        } } };
      } }, { key: "brush", value: function(t4) {
        return v.extend(t4, { chart: { toolbar: { autoSelected: "selection", show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false }, stroke: { width: 1 }, tooltip: { enabled: false }, xaxis: { tooltip: { enabled: false } } });
      } }, { key: "stacked100", value: function(t4) {
        t4.dataLabels = t4.dataLabels || {}, t4.dataLabels.formatter = t4.dataLabels.formatter || void 0;
        var e3 = t4.dataLabels.formatter;
        return t4.yaxis.forEach(function(e4, i2) {
          t4.yaxis[i2].min = 0, t4.yaxis[i2].max = 100;
        }), "bar" === t4.chart.type && (t4.dataLabels.formatter = e3 || function(t5) {
          return "number" == typeof t5 && t5 ? t5.toFixed(0) + "%" : t5;
        }), t4;
      } }, { key: "stackedBars", value: function() {
        var t4 = this.bar();
        return d(d({}, t4), {}, { plotOptions: d(d({}, t4.plotOptions), {}, { bar: d(d({}, t4.plotOptions.bar), {}, { borderRadiusApplication: "end", borderRadiusWhenStacked: "last" }) }) });
      } }, { key: "convertCatToNumeric", value: function(t4) {
        return t4.xaxis.convertedCatToNumeric = true, t4;
      } }, { key: "convertCatToNumericXaxis", value: function(t4, e3, i2) {
        t4.xaxis.type = "numeric", t4.xaxis.labels = t4.xaxis.labels || {}, t4.xaxis.labels.formatter = t4.xaxis.labels.formatter || function(t5) {
          return v.isNumber(t5) ? Math.floor(t5) : t5;
        };
        var a3 = t4.xaxis.labels.formatter, s2 = t4.xaxis.categories && t4.xaxis.categories.length ? t4.xaxis.categories : t4.labels;
        return i2 && i2.length && (s2 = i2.map(function(t5) {
          return Array.isArray(t5) ? t5 : String(t5);
        })), s2 && s2.length && (t4.xaxis.labels.formatter = function(t5) {
          return v.isNumber(t5) ? a3(s2[Math.floor(t5) - 1]) : a3(t5);
        }), t4.xaxis.categories = [], t4.labels = [], t4.xaxis.tickAmount = t4.xaxis.tickAmount || "dataPoints", t4;
      } }, { key: "bubble", value: function() {
        return { dataLabels: { style: { colors: ["#fff"] } }, tooltip: { shared: false, intersect: true }, xaxis: { crosshairs: { width: 0 } }, fill: { type: "solid", gradient: { shade: "light", inverse: true, shadeIntensity: 0.55, opacityFrom: 0.4, opacityTo: 0.8 } } };
      } }, { key: "scatter", value: function() {
        return { dataLabels: { enabled: false }, tooltip: { shared: false, intersect: true }, markers: { size: 6, strokeWidth: 1, hover: { sizeOffset: 2 } } };
      } }, { key: "heatmap", value: function() {
        return { chart: { stacked: false }, fill: { opacity: 1 }, dataLabels: { style: { colors: ["#fff"] } }, stroke: { colors: ["#fff"] }, tooltip: { followCursor: true, marker: { show: false }, x: { show: false } }, legend: { position: "top", markers: { shape: "square" } }, grid: { padding: { right: 20 } } };
      } }, { key: "treemap", value: function() {
        return { chart: { zoom: { enabled: false } }, dataLabels: { style: { fontSize: 14, fontWeight: 600, colors: ["#fff"] } }, stroke: { show: true, width: 2, colors: ["#fff"] }, legend: { show: false }, fill: { opacity: 1, gradient: { stops: [0, 100] } }, tooltip: { followCursor: true, x: { show: false } }, grid: { padding: { left: 0, right: 0 } }, xaxis: { crosshairs: { show: false }, tooltip: { enabled: false } } };
      } }, { key: "pie", value: function() {
        return { chart: { toolbar: { show: false } }, plotOptions: { pie: { donut: { labels: { show: false } } } }, dataLabels: { formatter: function(t4) {
          return t4.toFixed(1) + "%";
        }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", stops: [0, 100] } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
      } }, { key: "donut", value: function() {
        return { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t4) {
          return t4.toFixed(1) + "%";
        }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", shadeIntensity: 0.35, stops: [80, 100], opacityFrom: 1, opacityTo: 1 } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
      } }, { key: "polarArea", value: function() {
        return { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t4) {
          return t4.toFixed(1) + "%";
        }, enabled: false }, stroke: { show: true, width: 2 }, fill: { opacity: 0.7 }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
      } }, { key: "radar", value: function() {
        return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, { dataLabels: { enabled: false, style: { fontSize: "11px" } }, stroke: { width: 2 }, markers: { size: 5, strokeWidth: 1, strokeOpacity: 1 }, fill: { opacity: 0.2 }, tooltip: { shared: false, intersect: true, followCursor: true }, grid: { show: false }, xaxis: { labels: { formatter: function(t4) {
          return t4;
        }, style: { colors: ["#a8a8a8"], fontSize: "11px" } }, tooltip: { enabled: false }, crosshairs: { show: false } } };
      } }, { key: "radialBar", value: function() {
        return { chart: { animations: { dynamicAnimation: { enabled: true, speed: 800 } }, toolbar: { show: false } }, fill: { gradient: { shade: "dark", shadeIntensity: 0.4, inverseColors: false, type: "diagonal2", opacityFrom: 1, opacityTo: 1, stops: [70, 98, 100] } }, legend: { show: false, position: "right" }, tooltip: { enabled: false, fillSeriesColor: true } };
      } }, { key: "_getBoxTooltip", value: function(t4, e3, i2, a3, s2) {
        var r3 = t4.globals.seriesCandleO[e3][i2], o3 = t4.globals.seriesCandleH[e3][i2], n2 = t4.globals.seriesCandleM[e3][i2], l2 = t4.globals.seriesCandleL[e3][i2], h2 = t4.globals.seriesCandleC[e3][i2];
        return t4.config.series[e3].type && t4.config.series[e3].type !== s2 ? '<div class="apexcharts-custom-tooltip">\n          '.concat(t4.config.series[e3].name ? t4.config.series[e3].name : "series-" + (e3 + 1), ": <strong>").concat(t4.globals.series[e3][i2], "</strong>\n        </div>") : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(t4.config.chart.type, '">') + "<div>".concat(a3[0], ': <span class="value">') + r3 + "</span></div>" + "<div>".concat(a3[1], ': <span class="value">') + o3 + "</span></div>" + (n2 ? "<div>".concat(a3[2], ': <span class="value">') + n2 + "</span></div>" : "") + "<div>".concat(a3[3], ': <span class="value">') + l2 + "</span></div>" + "<div>".concat(a3[4], ': <span class="value">') + h2 + "</span></div></div>";
      } }]), t3;
    }();
    var R2 = function() {
      function t3(e3) {
        i(this, t3), this.opts = e3;
      }
      return s(t3, [{ key: "init", value: function(t4) {
        var e3 = t4.responsiveOverride, i2 = this.opts, a3 = new z(), s2 = new F2(i2);
        this.chartType = i2.chart.type, i2 = this.extendYAxis(i2), i2 = this.extendAnnotations(i2);
        var r3 = a3.init(), o3 = {};
        if (i2 && "object" === x(i2)) {
          var n2, l2, h2, c3, d2, g2, u2, p2, f2, b2, m2 = {};
          m2 = -1 !== ["line", "area", "bar", "candlestick", "boxPlot", "rangeBar", "rangeArea", "bubble", "scatter", "heatmap", "treemap", "pie", "polarArea", "donut", "radar", "radialBar"].indexOf(i2.chart.type) ? s2[i2.chart.type]() : s2.line(), null !== (n2 = i2.plotOptions) && void 0 !== n2 && null !== (l2 = n2.bar) && void 0 !== l2 && l2.isFunnel && (m2 = s2.funnel()), i2.chart.stacked && "bar" === i2.chart.type && (m2 = s2.stackedBars()), null !== (h2 = i2.chart.brush) && void 0 !== h2 && h2.enabled && (m2 = s2.brush(m2)), null !== (c3 = i2.plotOptions) && void 0 !== c3 && null !== (d2 = c3.line) && void 0 !== d2 && d2.isSlopeChart && (m2 = s2.slope()), i2.chart.stacked && "100%" === i2.chart.stackType && (i2 = s2.stacked100(i2)), null !== (g2 = i2.plotOptions) && void 0 !== g2 && null !== (u2 = g2.bar) && void 0 !== u2 && u2.isDumbbell && (i2 = s2.dumbbell(i2)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(i2), i2.xaxis = i2.xaxis || window.Apex.xaxis || {}, e3 || (i2.xaxis.convertedCatToNumeric = false), (null !== (p2 = (i2 = this.checkForCatToNumericXAxis(this.chartType, m2, i2)).chart.sparkline) && void 0 !== p2 && p2.enabled || null !== (f2 = window.Apex.chart) && void 0 !== f2 && null !== (b2 = f2.sparkline) && void 0 !== b2 && b2.enabled) && (m2 = s2.sparkline(m2)), o3 = v.extend(r3, m2);
        }
        var y3 = v.extend(o3, window.Apex);
        return r3 = v.extend(y3, i2), r3 = this.handleUserInputErrors(r3);
      } }, { key: "checkForCatToNumericXAxis", value: function(t4, e3, i2) {
        var a3, s2, r3 = new F2(i2), o3 = ("bar" === t4 || "boxPlot" === t4) && (null === (a3 = i2.plotOptions) || void 0 === a3 || null === (s2 = a3.bar) || void 0 === s2 ? void 0 : s2.horizontal), n2 = "pie" === t4 || "polarArea" === t4 || "donut" === t4 || "radar" === t4 || "radialBar" === t4 || "heatmap" === t4, l2 = "datetime" !== i2.xaxis.type && "numeric" !== i2.xaxis.type, h2 = i2.xaxis.tickPlacement ? i2.xaxis.tickPlacement : e3.xaxis && e3.xaxis.tickPlacement;
        return o3 || n2 || !l2 || "between" === h2 || (i2 = r3.convertCatToNumeric(i2)), i2;
      } }, { key: "extendYAxis", value: function(t4, e3) {
        var i2 = new z();
        (void 0 === t4.yaxis || !t4.yaxis || Array.isArray(t4.yaxis) && 0 === t4.yaxis.length) && (t4.yaxis = {}), t4.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t4.yaxis = v.extend(t4.yaxis, window.Apex.yaxis)), t4.yaxis.constructor !== Array ? t4.yaxis = [v.extend(i2.yAxis, t4.yaxis)] : t4.yaxis = v.extendArray(t4.yaxis, i2.yAxis);
        var a3 = false;
        t4.yaxis.forEach(function(t5) {
          t5.logarithmic && (a3 = true);
        });
        var s2 = t4.series;
        return e3 && !s2 && (s2 = e3.config.series), a3 && s2.length !== t4.yaxis.length && s2.length && (t4.yaxis = s2.map(function(e4, a4) {
          if (e4.name || (s2[a4].name = "series-".concat(a4 + 1)), t4.yaxis[a4]) return t4.yaxis[a4].seriesName = s2[a4].name, t4.yaxis[a4];
          var r3 = v.extend(i2.yAxis, t4.yaxis[0]);
          return r3.show = false, r3;
        })), a3 && s2.length > 1 && s2.length !== t4.yaxis.length && console.warn("A multi-series logarithmic chart should have equal number of series and y-axes"), t4;
      } }, { key: "extendAnnotations", value: function(t4) {
        return void 0 === t4.annotations && (t4.annotations = {}, t4.annotations.yaxis = [], t4.annotations.xaxis = [], t4.annotations.points = []), t4 = this.extendYAxisAnnotations(t4), t4 = this.extendXAxisAnnotations(t4), t4 = this.extendPointAnnotations(t4);
      } }, { key: "extendYAxisAnnotations", value: function(t4) {
        var e3 = new z();
        return t4.annotations.yaxis = v.extendArray(void 0 !== t4.annotations.yaxis ? t4.annotations.yaxis : [], e3.yAxisAnnotation), t4;
      } }, { key: "extendXAxisAnnotations", value: function(t4) {
        var e3 = new z();
        return t4.annotations.xaxis = v.extendArray(void 0 !== t4.annotations.xaxis ? t4.annotations.xaxis : [], e3.xAxisAnnotation), t4;
      } }, { key: "extendPointAnnotations", value: function(t4) {
        var e3 = new z();
        return t4.annotations.points = v.extendArray(void 0 !== t4.annotations.points ? t4.annotations.points : [], e3.pointAnnotation), t4;
      } }, { key: "checkForDarkTheme", value: function(t4) {
        t4.theme && "dark" === t4.theme.mode && (t4.tooltip || (t4.tooltip = {}), "light" !== t4.tooltip.theme && (t4.tooltip.theme = "dark"), t4.chart.foreColor || (t4.chart.foreColor = "#f6f7f8"), t4.theme.palette || (t4.theme.palette = "palette4"));
      } }, { key: "handleUserInputErrors", value: function(t4) {
        var e3 = t4;
        if (e3.tooltip.shared && e3.tooltip.intersect) throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");
        if ("bar" === e3.chart.type && e3.plotOptions.bar.horizontal) {
          if (e3.yaxis.length > 1) throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
          e3.yaxis[0].reversed && (e3.yaxis[0].opposite = true), e3.xaxis.tooltip.enabled = false, e3.yaxis[0].tooltip.enabled = false, e3.chart.zoom.enabled = false;
        }
        return "bar" !== e3.chart.type && "rangeBar" !== e3.chart.type || e3.tooltip.shared && "barWidth" === e3.xaxis.crosshairs.width && e3.series.length > 1 && (e3.xaxis.crosshairs.width = "tickWidth"), "candlestick" !== e3.chart.type && "boxPlot" !== e3.chart.type || e3.yaxis[0].reversed && (console.warn("Reversed y-axis in ".concat(e3.chart.type, " chart is not supported.")), e3.yaxis[0].reversed = false), e3;
      } }]), t3;
    }();
    var D = function() {
      function t3() {
        i(this, t3);
      }
      return s(t3, [{ key: "initGlobalVars", value: function(t4) {
        t4.series = [], t4.seriesCandleO = [], t4.seriesCandleH = [], t4.seriesCandleM = [], t4.seriesCandleL = [], t4.seriesCandleC = [], t4.seriesRangeStart = [], t4.seriesRangeEnd = [], t4.seriesRange = [], t4.seriesPercent = [], t4.seriesGoals = [], t4.seriesX = [], t4.seriesZ = [], t4.seriesNames = [], t4.seriesTotals = [], t4.seriesLog = [], t4.seriesColors = [], t4.stackedSeriesTotals = [], t4.seriesXvalues = [], t4.seriesYvalues = [], t4.labels = [], t4.hasXaxisGroups = false, t4.groups = [], t4.barGroups = [], t4.lineGroups = [], t4.areaGroups = [], t4.hasSeriesGroups = false, t4.seriesGroups = [], t4.categoryLabels = [], t4.timescaleLabels = [], t4.noLabelsProvided = false, t4.resizeTimer = null, t4.selectionResizeTimer = null, t4.lastWheelExecution = 0, t4.delayedElements = [], t4.pointsArray = [], t4.dataLabelsRects = [], t4.isXNumeric = false, t4.skipLastTimelinelabel = false, t4.skipFirstTimelinelabel = false, t4.isDataXYZ = false, t4.isMultiLineX = false, t4.isMultipleYAxis = false, t4.maxY = -Number.MAX_VALUE, t4.minY = Number.MIN_VALUE, t4.minYArr = [], t4.maxYArr = [], t4.maxX = -Number.MAX_VALUE, t4.minX = Number.MAX_VALUE, t4.initialMaxX = -Number.MAX_VALUE, t4.initialMinX = Number.MAX_VALUE, t4.maxDate = 0, t4.minDate = Number.MAX_VALUE, t4.minZ = Number.MAX_VALUE, t4.maxZ = -Number.MAX_VALUE, t4.minXDiff = Number.MAX_VALUE, t4.yAxisScale = [], t4.xAxisScale = null, t4.xAxisTicksPositions = [], t4.yLabelsCoords = [], t4.yTitleCoords = [], t4.barPadForNumericAxis = 0, t4.padHorizontal = 0, t4.xRange = 0, t4.yRange = [], t4.zRange = 0, t4.dataPoints = 0, t4.xTickAmount = 0, t4.multiAxisTickAmount = 0;
      } }, { key: "globalVars", value: function(t4) {
        return { chartID: null, cuid: null, events: { beforeMount: [], mounted: [], updated: [], clicked: [], selection: [], dataPointSelection: [], zoomed: [], scrolled: [] }, colors: [], clientX: null, clientY: null, fill: { colors: [] }, stroke: { colors: [] }, dataLabels: { style: { colors: [] } }, radarPolygons: { fill: { colors: [] } }, markers: { colors: [], size: t4.markers.size, largestSize: 0 }, animationEnded: false, isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints, isDirty: false, isExecCalled: false, initialConfig: null, initialSeries: [], lastXAxis: [], lastYAxis: [], columnSeries: null, labels: [], timescaleLabels: [], noLabelsProvided: false, allSeriesCollapsed: false, collapsedSeries: [], collapsedSeriesIndices: [], ancillaryCollapsedSeries: [], ancillaryCollapsedSeriesIndices: [], risingSeries: [], dataFormatXNumeric: false, capturedSeriesIndex: -1, capturedDataPointIndex: -1, selectedDataPoints: [], goldenPadding: 35, invalidLogScale: false, ignoreYAxisIndexes: [], maxValsInArrayIndex: 0, radialSize: 0, selection: void 0, zoomEnabled: "zoom" === t4.chart.toolbar.autoSelected && t4.chart.toolbar.tools.zoom && t4.chart.zoom.enabled, panEnabled: "pan" === t4.chart.toolbar.autoSelected && t4.chart.toolbar.tools.pan, selectionEnabled: "selection" === t4.chart.toolbar.autoSelected && t4.chart.toolbar.tools.selection, yaxis: null, mousedown: false, lastClientPosition: {}, visibleXRange: void 0, yValueDecimal: 0, total: 0, SVGNS: "http://www.w3.org/2000/svg", svgWidth: 0, svgHeight: 0, noData: false, locale: {}, dom: {}, memory: { methodsToExec: [] }, shouldAnimate: true, skipLastTimelinelabel: false, skipFirstTimelinelabel: false, delayedElements: [], axisCharts: true, isDataXYZ: false, isSlopeChart: t4.plotOptions.line.isSlopeChart, resized: false, resizeTimer: null, comboCharts: false, dataChanged: false, previousPaths: [], allSeriesHasEqualX: true, pointsArray: [], dataLabelsRects: [], lastDrawnDataLabelsIndexes: [], hasNullValues: false, easing: null, zoomed: false, gridWidth: 0, gridHeight: 0, rotateXLabels: false, defaultLabels: false, xLabelFormatter: void 0, yLabelFormatters: [], xaxisTooltipFormatter: void 0, ttKeyFormatter: void 0, ttVal: void 0, ttZFormatter: void 0, LINE_HEIGHT_RATIO: 1.618, xAxisLabelsHeight: 0, xAxisGroupLabelsHeight: 0, xAxisLabelsWidth: 0, yAxisLabelsWidth: 0, scaleX: 1, scaleY: 1, translateX: 0, translateY: 0, translateYAxisX: [], yAxisWidths: [], translateXAxisY: 0, translateXAxisX: 0, tooltip: null, niceScaleAllowedMagMsd: [[1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10], [1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10]], niceScaleDefaultTicks: [1, 2, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 24], seriesYAxisMap: [], seriesYAxisReverseMap: [] };
      } }, { key: "init", value: function(t4) {
        var e3 = this.globalVars(t4);
        return this.initGlobalVars(e3), e3.initialConfig = v.extend({}, t4), e3.initialSeries = v.clone(t4.series), e3.lastXAxis = v.clone(e3.initialConfig.xaxis), e3.lastYAxis = v.clone(e3.initialConfig.yaxis), e3;
      } }]), t3;
    }();
    var H = function() {
      function t3(e3) {
        i(this, t3), this.opts = e3;
      }
      return s(t3, [{ key: "init", value: function() {
        var t4 = new R2(this.opts).init({ responsiveOverride: false });
        return { config: t4, globals: new D().init(t4) };
      } }]), t3;
    }();
    var O2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.opts = null, this.seriesIndex = 0, this.patternIDs = [];
      }
      return s(t3, [{ key: "clippedImgArea", value: function(t4) {
        var e3 = this.w, i2 = e3.config, a3 = parseInt(e3.globals.gridWidth, 10), s2 = parseInt(e3.globals.gridHeight, 10), r3 = a3 > s2 ? a3 : s2, o3 = t4.image, n2 = 0, l2 = 0;
        void 0 === t4.width && void 0 === t4.height ? void 0 !== i2.fill.image.width && void 0 !== i2.fill.image.height ? (n2 = i2.fill.image.width + 1, l2 = i2.fill.image.height) : (n2 = r3 + 1, l2 = r3) : (n2 = t4.width, l2 = t4.height);
        var h2 = document.createElementNS(e3.globals.SVGNS, "pattern");
        w.setAttrs(h2, { id: t4.patternID, patternUnits: t4.patternUnits ? t4.patternUnits : "userSpaceOnUse", width: n2 + "px", height: l2 + "px" });
        var c3 = document.createElementNS(e3.globals.SVGNS, "image");
        h2.appendChild(c3), c3.setAttributeNS(window.SVG.xlink, "href", o3), w.setAttrs(c3, { x: 0, y: 0, preserveAspectRatio: "none", width: n2 + "px", height: l2 + "px" }), c3.style.opacity = t4.opacity, e3.globals.dom.elDefs.node.appendChild(h2);
      } }, { key: "getSeriesIndex", value: function(t4) {
        var e3 = this.w, i2 = e3.config.chart.type;
        return ("bar" === i2 || "rangeBar" === i2) && e3.config.plotOptions.bar.distributed || "heatmap" === i2 || "treemap" === i2 ? this.seriesIndex = t4.seriesNumber : this.seriesIndex = t4.seriesNumber % e3.globals.series.length, this.seriesIndex;
      } }, { key: "fillPath", value: function(t4) {
        var e3 = this.w;
        this.opts = t4;
        var i2, a3, s2, r3 = this.w.config;
        this.seriesIndex = this.getSeriesIndex(t4);
        var o3 = this.getFillColors()[this.seriesIndex];
        void 0 !== e3.globals.seriesColors[this.seriesIndex] && (o3 = e3.globals.seriesColors[this.seriesIndex]), "function" == typeof o3 && (o3 = o3({ seriesIndex: this.seriesIndex, dataPointIndex: t4.dataPointIndex, value: t4.value, w: e3 }));
        var n2 = t4.fillType ? t4.fillType : this.getFillType(this.seriesIndex), l2 = Array.isArray(r3.fill.opacity) ? r3.fill.opacity[this.seriesIndex] : r3.fill.opacity;
        t4.color && (o3 = t4.color), o3 || (o3 = "#fff", console.warn("undefined color - ApexCharts"));
        var h2 = o3;
        if (-1 === o3.indexOf("rgb") ? o3.length < 9 && (h2 = v.hexToRgba(o3, l2)) : o3.indexOf("rgba") > -1 && (l2 = v.getOpacityFromRGBA(o3)), t4.opacity && (l2 = t4.opacity), "pattern" === n2 && (a3 = this.handlePatternFill({ fillConfig: t4.fillConfig, patternFill: a3, fillColor: o3, fillOpacity: l2, defaultColor: h2 })), "gradient" === n2 && (s2 = this.handleGradientFill({ fillConfig: t4.fillConfig, fillColor: o3, fillOpacity: l2, i: this.seriesIndex })), "image" === n2) {
          var c3 = r3.fill.image.src, d2 = t4.patternID ? t4.patternID : "", g2 = "pattern".concat(e3.globals.cuid).concat(t4.seriesNumber + 1).concat(d2);
          -1 === this.patternIDs.indexOf(g2) && (this.clippedImgArea({ opacity: l2, image: Array.isArray(c3) ? t4.seriesNumber < c3.length ? c3[t4.seriesNumber] : c3[0] : c3, width: t4.width ? t4.width : void 0, height: t4.height ? t4.height : void 0, patternUnits: t4.patternUnits, patternID: g2 }), this.patternIDs.push(g2)), i2 = "url(#".concat(g2, ")");
        } else i2 = "gradient" === n2 ? s2 : "pattern" === n2 ? a3 : h2;
        return t4.solid && (i2 = h2), i2;
      } }, { key: "getFillType", value: function(t4) {
        var e3 = this.w;
        return Array.isArray(e3.config.fill.type) ? e3.config.fill.type[t4] : e3.config.fill.type;
      } }, { key: "getFillColors", value: function() {
        var t4 = this.w, e3 = t4.config, i2 = this.opts, a3 = [];
        return t4.globals.comboCharts ? "line" === t4.config.series[this.seriesIndex].type ? Array.isArray(t4.globals.stroke.colors) ? a3 = t4.globals.stroke.colors : a3.push(t4.globals.stroke.colors) : Array.isArray(t4.globals.fill.colors) ? a3 = t4.globals.fill.colors : a3.push(t4.globals.fill.colors) : "line" === e3.chart.type ? Array.isArray(t4.globals.stroke.colors) ? a3 = t4.globals.stroke.colors : a3.push(t4.globals.stroke.colors) : Array.isArray(t4.globals.fill.colors) ? a3 = t4.globals.fill.colors : a3.push(t4.globals.fill.colors), void 0 !== i2.fillColors && (a3 = [], Array.isArray(i2.fillColors) ? a3 = i2.fillColors.slice() : a3.push(i2.fillColors)), a3;
      } }, { key: "handlePatternFill", value: function(t4) {
        var e3 = t4.fillConfig, i2 = t4.patternFill, a3 = t4.fillColor, s2 = t4.fillOpacity, r3 = t4.defaultColor, o3 = this.w.config.fill;
        e3 && (o3 = e3);
        var n2 = this.opts, l2 = new w(this.ctx), h2 = Array.isArray(o3.pattern.strokeWidth) ? o3.pattern.strokeWidth[this.seriesIndex] : o3.pattern.strokeWidth, c3 = a3;
        Array.isArray(o3.pattern.style) ? i2 = void 0 !== o3.pattern.style[n2.seriesNumber] ? l2.drawPattern(o3.pattern.style[n2.seriesNumber], o3.pattern.width, o3.pattern.height, c3, h2, s2) : r3 : i2 = l2.drawPattern(o3.pattern.style, o3.pattern.width, o3.pattern.height, c3, h2, s2);
        return i2;
      } }, { key: "handleGradientFill", value: function(t4) {
        var e3 = t4.fillColor, i2 = t4.fillOpacity, a3 = t4.fillConfig, s2 = t4.i, r3 = this.w.config.fill;
        a3 && (r3 = d(d({}, r3), a3));
        var o3, n2 = this.opts, l2 = new w(this.ctx), h2 = new v(), c3 = r3.gradient.type, g2 = e3, u2 = void 0 === r3.gradient.opacityFrom ? i2 : Array.isArray(r3.gradient.opacityFrom) ? r3.gradient.opacityFrom[s2] : r3.gradient.opacityFrom;
        g2.indexOf("rgba") > -1 && (u2 = v.getOpacityFromRGBA(g2));
        var p2 = void 0 === r3.gradient.opacityTo ? i2 : Array.isArray(r3.gradient.opacityTo) ? r3.gradient.opacityTo[s2] : r3.gradient.opacityTo;
        if (void 0 === r3.gradient.gradientToColors || 0 === r3.gradient.gradientToColors.length) o3 = "dark" === r3.gradient.shade ? h2.shadeColor(-1 * parseFloat(r3.gradient.shadeIntensity), e3.indexOf("rgb") > -1 ? v.rgb2hex(e3) : e3) : h2.shadeColor(parseFloat(r3.gradient.shadeIntensity), e3.indexOf("rgb") > -1 ? v.rgb2hex(e3) : e3);
        else if (r3.gradient.gradientToColors[n2.seriesNumber]) {
          var f2 = r3.gradient.gradientToColors[n2.seriesNumber];
          o3 = f2, f2.indexOf("rgba") > -1 && (p2 = v.getOpacityFromRGBA(f2));
        } else o3 = e3;
        if (r3.gradient.gradientFrom && (g2 = r3.gradient.gradientFrom), r3.gradient.gradientTo && (o3 = r3.gradient.gradientTo), r3.gradient.inverseColors) {
          var x2 = g2;
          g2 = o3, o3 = x2;
        }
        return g2.indexOf("rgb") > -1 && (g2 = v.rgb2hex(g2)), o3.indexOf("rgb") > -1 && (o3 = v.rgb2hex(o3)), l2.drawGradient(c3, g2, o3, u2, p2, n2.size, r3.gradient.stops, r3.gradient.colorStops, s2);
      } }]), t3;
    }();
    var N = function() {
      function t3(e3, a3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "setGlobalMarkerSize", value: function() {
        var t4 = this.w;
        if (t4.globals.markers.size = Array.isArray(t4.config.markers.size) ? t4.config.markers.size : [t4.config.markers.size], t4.globals.markers.size.length > 0) {
          if (t4.globals.markers.size.length < t4.globals.series.length + 1) for (var e3 = 0; e3 <= t4.globals.series.length; e3++) void 0 === t4.globals.markers.size[e3] && t4.globals.markers.size.push(t4.globals.markers.size[0]);
        } else t4.globals.markers.size = t4.config.series.map(function(e4) {
          return t4.config.markers.size;
        });
      } }, { key: "plotChartMarkers", value: function(t4, e3, i2, a3) {
        var s2, r3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], o3 = this.w, n2 = e3, l2 = t4, h2 = null, c3 = new w(this.ctx), d2 = o3.config.markers.discrete && o3.config.markers.discrete.length;
        if ((o3.globals.markers.size[e3] > 0 || r3 || d2) && (h2 = c3.group({ class: r3 || d2 ? "" : "apexcharts-series-markers" })).attr("clip-path", "url(#gridRectMarkerMask".concat(o3.globals.cuid, ")")), Array.isArray(l2.x)) for (var g2 = 0; g2 < l2.x.length; g2++) {
          var u2 = i2;
          1 === i2 && 0 === g2 && (u2 = 0), 1 === i2 && 1 === g2 && (u2 = 1);
          var p2 = "apexcharts-marker";
          if ("line" !== o3.config.chart.type && "area" !== o3.config.chart.type || o3.globals.comboCharts || o3.config.tooltip.intersect || (p2 += " no-pointer-events"), (Array.isArray(o3.config.markers.size) ? o3.globals.markers.size[e3] > 0 : o3.config.markers.size > 0) || r3 || d2) {
            v.isNumber(l2.y[g2]) ? p2 += " w".concat(v.randomId()) : p2 = "apexcharts-nullpoint";
            var f2 = this.getMarkerConfig({ cssClass: p2, seriesIndex: e3, dataPointIndex: u2 });
            o3.config.series[n2].data[u2] && (o3.config.series[n2].data[u2].fillColor && (f2.pointFillColor = o3.config.series[n2].data[u2].fillColor), o3.config.series[n2].data[u2].strokeColor && (f2.pointStrokeColor = o3.config.series[n2].data[u2].strokeColor)), void 0 !== a3 && (f2.pSize = a3), (l2.x[g2] < -o3.globals.markers.largestSize || l2.x[g2] > o3.globals.gridWidth + o3.globals.markers.largestSize || l2.y[g2] < -o3.globals.markers.largestSize || l2.y[g2] > o3.globals.gridHeight + o3.globals.markers.largestSize) && (f2.pSize = 0), (s2 = c3.drawMarker(l2.x[g2], l2.y[g2], f2)).attr("rel", u2), s2.attr("j", u2), s2.attr("index", e3), s2.node.setAttribute("default-marker-size", f2.pSize), new y2(this.ctx).setSelectionFilter(s2, e3, u2), this.addEvents(s2), h2 && h2.add(s2);
          } else void 0 === o3.globals.pointsArray[e3] && (o3.globals.pointsArray[e3] = []), o3.globals.pointsArray[e3].push([l2.x[g2], l2.y[g2]]);
        }
        return h2;
      } }, { key: "getMarkerConfig", value: function(t4) {
        var e3 = t4.cssClass, i2 = t4.seriesIndex, a3 = t4.dataPointIndex, s2 = void 0 === a3 ? null : a3, r3 = t4.radius, o3 = void 0 === r3 ? null : r3, n2 = t4.size, l2 = void 0 === n2 ? null : n2, h2 = t4.strokeWidth, c3 = void 0 === h2 ? null : h2, d2 = this.w, g2 = this.getMarkerStyle(i2), u2 = null === l2 ? d2.globals.markers.size[i2] : l2, p2 = d2.config.markers;
        return null !== s2 && p2.discrete.length && p2.discrete.map(function(t5) {
          t5.seriesIndex === i2 && t5.dataPointIndex === s2 && (g2.pointStrokeColor = t5.strokeColor, g2.pointFillColor = t5.fillColor, u2 = t5.size, g2.pointShape = t5.shape);
        }), { pSize: null === o3 ? u2 : o3, pRadius: null !== o3 ? o3 : p2.radius, pointStrokeWidth: null !== c3 ? c3 : Array.isArray(p2.strokeWidth) ? p2.strokeWidth[i2] : p2.strokeWidth, pointStrokeColor: g2.pointStrokeColor, pointFillColor: g2.pointFillColor, shape: g2.pointShape || (Array.isArray(p2.shape) ? p2.shape[i2] : p2.shape), class: e3, pointStrokeOpacity: Array.isArray(p2.strokeOpacity) ? p2.strokeOpacity[i2] : p2.strokeOpacity, pointStrokeDashArray: Array.isArray(p2.strokeDashArray) ? p2.strokeDashArray[i2] : p2.strokeDashArray, pointFillOpacity: Array.isArray(p2.fillOpacity) ? p2.fillOpacity[i2] : p2.fillOpacity, seriesIndex: i2 };
      } }, { key: "addEvents", value: function(t4) {
        var e3 = this.w, i2 = new w(this.ctx);
        t4.node.addEventListener("mouseenter", i2.pathMouseEnter.bind(this.ctx, t4)), t4.node.addEventListener("mouseleave", i2.pathMouseLeave.bind(this.ctx, t4)), t4.node.addEventListener("mousedown", i2.pathMouseDown.bind(this.ctx, t4)), t4.node.addEventListener("click", e3.config.markers.onClick), t4.node.addEventListener("dblclick", e3.config.markers.onDblClick), t4.node.addEventListener("touchstart", i2.pathMouseDown.bind(this.ctx, t4), { passive: true });
      } }, { key: "getMarkerStyle", value: function(t4) {
        var e3 = this.w, i2 = e3.globals.markers.colors, a3 = e3.config.markers.strokeColor || e3.config.markers.strokeColors;
        return { pointStrokeColor: Array.isArray(a3) ? a3[t4] : a3, pointFillColor: Array.isArray(i2) ? i2[t4] : i2 };
      } }]), t3;
    }();
    var W = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.initialAnim = this.w.config.chart.animations.enabled;
      }
      return s(t3, [{ key: "draw", value: function(t4, e3, i2) {
        var a3 = this.w, s2 = new w(this.ctx), r3 = i2.realIndex, o3 = i2.pointsPos, n2 = i2.zRatio, l2 = i2.elParent, h2 = s2.group({ class: "apexcharts-series-markers apexcharts-series-".concat(a3.config.chart.type) });
        if (h2.attr("clip-path", "url(#gridRectMarkerMask".concat(a3.globals.cuid, ")")), Array.isArray(o3.x)) for (var c3 = 0; c3 < o3.x.length; c3++) {
          var d2 = e3 + 1, g2 = true;
          0 === e3 && 0 === c3 && (d2 = 0), 0 === e3 && 1 === c3 && (d2 = 1);
          var u2 = a3.globals.markers.size[r3];
          if (n2 !== 1 / 0) {
            var p2 = a3.config.plotOptions.bubble;
            u2 = a3.globals.seriesZ[r3][d2], p2.zScaling && (u2 /= n2), p2.minBubbleRadius && u2 < p2.minBubbleRadius && (u2 = p2.minBubbleRadius), p2.maxBubbleRadius && u2 > p2.maxBubbleRadius && (u2 = p2.maxBubbleRadius);
          }
          var f2 = o3.x[c3], x2 = o3.y[c3];
          if (u2 = u2 || 0, null !== x2 && void 0 !== a3.globals.series[r3][d2] || (g2 = false), g2) {
            var b2 = this.drawPoint(f2, x2, u2, r3, d2, e3);
            h2.add(b2);
          }
          l2.add(h2);
        }
      } }, { key: "drawPoint", value: function(t4, e3, i2, a3, s2, r3) {
        var o3 = this.w, n2 = a3, l2 = new m(this.ctx), h2 = new y2(this.ctx), c3 = new O2(this.ctx), d2 = new N(this.ctx), g2 = new w(this.ctx), u2 = d2.getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: n2, dataPointIndex: s2, radius: "bubble" === o3.config.chart.type || o3.globals.comboCharts && o3.config.series[a3] && "bubble" === o3.config.series[a3].type ? i2 : null }), p2 = c3.fillPath({ seriesNumber: a3, dataPointIndex: s2, color: u2.pointFillColor, patternUnits: "objectBoundingBox", value: o3.globals.series[a3][r3] }), f2 = g2.drawMarker(t4, e3, u2);
        if (o3.config.series[n2].data[s2] && o3.config.series[n2].data[s2].fillColor && (p2 = o3.config.series[n2].data[s2].fillColor), f2.attr({ fill: p2 }), o3.config.chart.dropShadow.enabled) {
          var x2 = o3.config.chart.dropShadow;
          h2.dropShadow(f2, x2, a3);
        }
        if (!this.initialAnim || o3.globals.dataChanged || o3.globals.resized) o3.globals.animationEnded = true;
        else {
          var b2 = o3.config.chart.animations.speed;
          l2.animateMarker(f2, b2, o3.globals.easing, function() {
            window.setTimeout(function() {
              l2.animationCompleted(f2);
            }, 100);
          });
        }
        return f2.attr({ rel: s2, j: s2, index: a3, "default-marker-size": u2.pSize }), h2.setSelectionFilter(f2, a3, s2), d2.addEvents(f2), f2.node.classList.add("apexcharts-marker"), f2;
      } }, { key: "centerTextInBubble", value: function(t4) {
        var e3 = this.w;
        return { y: t4 += parseInt(e3.config.dataLabels.style.fontSize, 10) / 4 };
      } }]), t3;
    }();
    var B2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "dataLabelsCorrection", value: function(t4, e3, i2, a3, s2, r3, o3) {
        var n2 = this.w, l2 = false, h2 = new w(this.ctx).getTextRects(i2, o3), c3 = h2.width, d2 = h2.height;
        e3 < 0 && (e3 = 0), e3 > n2.globals.gridHeight + d2 && (e3 = n2.globals.gridHeight + d2 / 2), void 0 === n2.globals.dataLabelsRects[a3] && (n2.globals.dataLabelsRects[a3] = []), n2.globals.dataLabelsRects[a3].push({ x: t4, y: e3, width: c3, height: d2 });
        var g2 = n2.globals.dataLabelsRects[a3].length - 2, u2 = void 0 !== n2.globals.lastDrawnDataLabelsIndexes[a3] ? n2.globals.lastDrawnDataLabelsIndexes[a3][n2.globals.lastDrawnDataLabelsIndexes[a3].length - 1] : 0;
        if (void 0 !== n2.globals.dataLabelsRects[a3][g2]) {
          var p2 = n2.globals.dataLabelsRects[a3][u2];
          (t4 > p2.x + p2.width || e3 > p2.y + p2.height || e3 + d2 < p2.y || t4 + c3 < p2.x) && (l2 = true);
        }
        return (0 === s2 || r3) && (l2 = true), { x: t4, y: e3, textRects: h2, drawnextLabel: l2 };
      } }, { key: "drawDataLabel", value: function(t4) {
        var e3 = this, i2 = t4.type, a3 = t4.pos, s2 = t4.i, r3 = t4.j, o3 = t4.isRangeStart, n2 = t4.strokeWidth, l2 = void 0 === n2 ? 2 : n2, h2 = this.w, c3 = new w(this.ctx), d2 = h2.config.dataLabels, g2 = 0, u2 = 0, p2 = r3, f2 = null;
        if (-1 !== h2.globals.collapsedSeriesIndices.indexOf(s2) || !d2.enabled || !Array.isArray(a3.x)) return f2;
        f2 = c3.group({ class: "apexcharts-data-labels" });
        for (var x2 = 0; x2 < a3.x.length; x2++) if (g2 = a3.x[x2] + d2.offsetX, u2 = a3.y[x2] + d2.offsetY + l2, !isNaN(g2)) {
          1 === r3 && 0 === x2 && (p2 = 0), 1 === r3 && 1 === x2 && (p2 = 1);
          var b2 = h2.globals.series[s2][p2];
          "rangeArea" === i2 && (b2 = o3 ? h2.globals.seriesRangeStart[s2][p2] : h2.globals.seriesRangeEnd[s2][p2]);
          var v2 = "", m2 = function(t5) {
            return h2.config.dataLabels.formatter(t5, { ctx: e3.ctx, seriesIndex: s2, dataPointIndex: p2, w: h2 });
          };
          if ("bubble" === h2.config.chart.type) v2 = m2(b2 = h2.globals.seriesZ[s2][p2]), u2 = a3.y[x2], u2 = new W(this.ctx).centerTextInBubble(u2, s2, p2).y;
          else void 0 !== b2 && (v2 = m2(b2));
          var y3 = h2.config.dataLabels.textAnchor;
          h2.globals.isSlopeChart && (y3 = 0 === p2 ? "end" : p2 === h2.config.series[s2].data.length - 1 ? "start" : "middle"), this.plotDataLabelsText({ x: g2, y: u2, text: v2, i: s2, j: p2, parent: f2, offsetCorrection: true, dataLabelsConfig: h2.config.dataLabels, textAnchor: y3 });
        }
        return f2;
      } }, { key: "plotDataLabelsText", value: function(t4) {
        var e3 = this.w, i2 = new w(this.ctx), a3 = t4.x, s2 = t4.y, r3 = t4.i, o3 = t4.j, n2 = t4.text, l2 = t4.textAnchor, h2 = t4.fontSize, c3 = t4.parent, d2 = t4.dataLabelsConfig, g2 = t4.color, u2 = t4.alwaysDrawDataLabel, p2 = t4.offsetCorrection, f2 = t4.className, x2 = null;
        if (Array.isArray(e3.config.dataLabels.enabledOnSeries) && e3.config.dataLabels.enabledOnSeries.indexOf(r3) < 0) return x2;
        var b2 = { x: a3, y: s2, drawnextLabel: true, textRects: null };
        p2 && (b2 = this.dataLabelsCorrection(a3, s2, n2, r3, o3, u2, parseInt(d2.style.fontSize, 10))), e3.globals.zoomed || (a3 = b2.x, s2 = b2.y), b2.textRects && (a3 < -20 - b2.textRects.width || a3 > e3.globals.gridWidth + b2.textRects.width + 30) && (n2 = "");
        var v2 = e3.globals.dataLabels.style.colors[r3];
        (("bar" === e3.config.chart.type || "rangeBar" === e3.config.chart.type) && e3.config.plotOptions.bar.distributed || e3.config.dataLabels.distributed) && (v2 = e3.globals.dataLabels.style.colors[o3]), "function" == typeof v2 && (v2 = v2({ series: e3.globals.series, seriesIndex: r3, dataPointIndex: o3, w: e3 })), g2 && (v2 = g2);
        var m2 = d2.offsetX, k2 = d2.offsetY;
        if ("bar" !== e3.config.chart.type && "rangeBar" !== e3.config.chart.type || (m2 = 0, k2 = 0), e3.globals.isSlopeChart && (0 !== o3 && (m2 = -2 * d2.offsetX + 5), 0 !== o3 && o3 !== e3.config.series[r3].data.length - 1 && (m2 = 0)), b2.drawnextLabel) {
          if ((x2 = i2.drawText({ width: 100, height: parseInt(d2.style.fontSize, 10), x: a3 + m2, y: s2 + k2, foreColor: v2, textAnchor: l2 || d2.textAnchor, text: n2, fontSize: h2 || d2.style.fontSize, fontFamily: d2.style.fontFamily, fontWeight: d2.style.fontWeight || "normal" })).attr({ class: f2 || "apexcharts-datalabel", cx: a3, cy: s2 }), d2.dropShadow.enabled) {
            var A2 = d2.dropShadow;
            new y2(this.ctx).dropShadow(x2, A2);
          }
          c3.add(x2), void 0 === e3.globals.lastDrawnDataLabelsIndexes[r3] && (e3.globals.lastDrawnDataLabelsIndexes[r3] = []), e3.globals.lastDrawnDataLabelsIndexes[r3].push(o3);
        }
        return x2;
      } }, { key: "addBackgroundToDataLabel", value: function(t4, e3) {
        var i2 = this.w, a3 = i2.config.dataLabels.background, s2 = a3.padding, r3 = a3.padding / 2, o3 = e3.width, n2 = e3.height, l2 = new w(this.ctx).drawRect(e3.x - s2, e3.y - r3 / 2, o3 + 2 * s2, n2 + r3, a3.borderRadius, "transparent" !== i2.config.chart.background && i2.config.chart.background ? i2.config.chart.background : "#fff", a3.opacity, a3.borderWidth, a3.borderColor);
        a3.dropShadow.enabled && new y2(this.ctx).dropShadow(l2, a3.dropShadow);
        return l2;
      } }, { key: "dataLabelsBackground", value: function() {
        var t4 = this.w;
        if ("bubble" !== t4.config.chart.type) for (var e3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), i2 = 0; i2 < e3.length; i2++) {
          var a3 = e3[i2], s2 = a3.getBBox(), r3 = null;
          if (s2.width && s2.height && (r3 = this.addBackgroundToDataLabel(a3, s2)), r3) {
            a3.parentNode.insertBefore(r3.node, a3);
            var o3 = a3.getAttribute("fill");
            t4.config.chart.animations.enabled && !t4.globals.resized && !t4.globals.dataChanged ? r3.animate().attr({ fill: o3 }) : r3.attr({ fill: o3 }), a3.setAttribute("fill", t4.config.dataLabels.background.foreColor);
          }
        }
      } }, { key: "bringForward", value: function() {
        for (var t4 = this.w, e3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), i2 = t4.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), a3 = 0; a3 < e3.length; a3++) i2 && i2.insertBefore(e3[a3], i2.nextSibling);
      } }]), t3;
    }();
    var G2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.legendInactiveClass = "legend-mouseover-inactive";
      }
      return s(t3, [{ key: "getAllSeriesEls", value: function() {
        return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series");
      } }, { key: "getSeriesByName", value: function(t4) {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(v.escapeString(t4), "']"));
      } }, { key: "isSeriesHidden", value: function(t4) {
        var e3 = this.getSeriesByName(t4), i2 = parseInt(e3.getAttribute("data:realIndex"), 10);
        return { isHidden: e3.classList.contains("apexcharts-series-collapsed"), realIndex: i2 };
      } }, { key: "addCollapsedClassToSeries", value: function(t4, e3) {
        var i2 = this.w;
        function a3(i3) {
          for (var a4 = 0; a4 < i3.length; a4++) i3[a4].index === e3 && t4.node.classList.add("apexcharts-series-collapsed");
        }
        a3(i2.globals.collapsedSeries), a3(i2.globals.ancillaryCollapsedSeries);
      } }, { key: "toggleSeries", value: function(t4) {
        var e3 = this.isSeriesHidden(t4);
        return this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, e3.isHidden), e3.isHidden;
      } }, { key: "showSeries", value: function(t4) {
        var e3 = this.isSeriesHidden(t4);
        e3.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, true);
      } }, { key: "hideSeries", value: function(t4) {
        var e3 = this.isSeriesHidden(t4);
        e3.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, false);
      } }, { key: "resetSeries", value: function() {
        var t4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a3 = this.w, s2 = v.clone(a3.globals.initialSeries);
        a3.globals.previousPaths = [], i2 ? (a3.globals.collapsedSeries = [], a3.globals.ancillaryCollapsedSeries = [], a3.globals.collapsedSeriesIndices = [], a3.globals.ancillaryCollapsedSeriesIndices = []) : s2 = this.emptyCollapsedSeries(s2), a3.config.series = s2, t4 && (e3 && (a3.globals.zoomed = false, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s2, a3.config.chart.animations.dynamicAnimation.enabled));
      } }, { key: "emptyCollapsedSeries", value: function(t4) {
        for (var e3 = this.w, i2 = 0; i2 < t4.length; i2++) e3.globals.collapsedSeriesIndices.indexOf(i2) > -1 && (t4[i2].data = []);
        return t4;
      } }, { key: "highlightSeries", value: function(t4) {
        var e3 = this.w, i2 = this.getSeriesByName(t4), a3 = parseInt(i2.getAttribute("data:realIndex"), 10), s2 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis"), r3 = null, o3 = null, n2 = null;
        if (e3.globals.axisCharts || "radialBar" === e3.config.chart.type) if (e3.globals.axisCharts) {
          r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(a3, "']")), o3 = e3.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(a3, "']"));
          var l2 = e3.globals.seriesYAxisReverseMap[a3];
          n2 = e3.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(l2, "']"));
        } else r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(a3 + 1, "']"));
        else r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(a3 + 1, "'] path"));
        for (var h2 = 0; h2 < s2.length; h2++) s2[h2].classList.add(this.legendInactiveClass);
        null !== r3 && (e3.globals.axisCharts || r3.parentNode.classList.remove(this.legendInactiveClass), r3.classList.remove(this.legendInactiveClass), null !== o3 && o3.classList.remove(this.legendInactiveClass), null !== n2 && n2.classList.remove(this.legendInactiveClass));
      } }, { key: "toggleSeriesOnHover", value: function(t4, e3) {
        var i2 = this.w;
        e3 || (e3 = t4.target);
        var a3 = i2.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis");
        if ("mousemove" === t4.type) {
          var s2 = parseInt(e3.getAttribute("rel"), 10) - 1;
          this.highlightSeries(i2.config.series[s2].name);
        } else if ("mouseout" === t4.type) for (var r3 = 0; r3 < a3.length; r3++) a3[r3].classList.remove(this.legendInactiveClass);
      } }, { key: "highlightRangeInSeries", value: function(t4, e3) {
        var i2 = this, a3 = this.w, s2 = a3.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"), r3 = function(t5) {
          for (var e4 = 0; e4 < s2.length; e4++) s2[e4].classList[t5](i2.legendInactiveClass);
        };
        if ("mousemove" === t4.type) {
          var o3 = parseInt(e3.getAttribute("rel"), 10) - 1;
          r3("add");
          var n2 = a3.config.plotOptions.heatmap.colorScale.ranges;
          !function(t5, e4) {
            for (var a4 = 0; a4 < s2.length; a4++) {
              var r4 = Number(s2[a4].getAttribute("val"));
              r4 >= t5.from && (r4 < t5.to || t5.to === e4 && r4 === e4) && s2[a4].classList.remove(i2.legendInactiveClass);
            }
          }(n2[o3], n2.reduce(function(t5, e4) {
            return Math.max(t5, e4.to);
          }, 0));
        } else "mouseout" === t4.type && r3("remove");
      } }, { key: "getActiveConfigSeriesIndex", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "asc", e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i2 = this.w, a3 = 0;
        if (i2.config.series.length > 1) {
          for (var s2 = i2.config.series.map(function(t5, a4) {
            return t5.data && t5.data.length > 0 && -1 === i2.globals.collapsedSeriesIndices.indexOf(a4) && (!i2.globals.comboCharts || 0 === e3.length || e3.length && e3.indexOf(i2.config.series[a4].type) > -1) ? a4 : -1;
          }), r3 = "asc" === t4 ? 0 : s2.length - 1; "asc" === t4 ? r3 < s2.length : r3 >= 0; "asc" === t4 ? r3++ : r3--) if (-1 !== s2[r3]) {
            a3 = s2[r3];
            break;
          }
        }
        return a3;
      } }, { key: "getBarSeriesIndices", value: function() {
        return this.w.globals.comboCharts ? this.w.config.series.map(function(t4, e3) {
          return "bar" === t4.type || "column" === t4.type ? e3 : -1;
        }).filter(function(t4) {
          return -1 !== t4;
        }) : this.w.config.series.map(function(t4, e3) {
          return e3;
        });
      } }, { key: "getPreviousPaths", value: function() {
        var t4 = this.w;
        function e3(e4, i3, a4) {
          for (var s3 = e4[i3].childNodes, r3 = { type: a4, paths: [], realIndex: e4[i3].getAttribute("data:realIndex") }, o3 = 0; o3 < s3.length; o3++) if (s3[o3].hasAttribute("pathTo")) {
            var n2 = s3[o3].getAttribute("pathTo");
            r3.paths.push({ d: n2 });
          }
          t4.globals.previousPaths.push(r3);
        }
        t4.globals.previousPaths = [];
        ["line", "area", "bar", "rangebar", "rangeArea", "candlestick", "radar"].forEach(function(i3) {
          for (var a4, s3 = (a4 = i3, t4.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(a4, "-series .apexcharts-series"))), r3 = 0; r3 < s3.length; r3++) e3(s3, r3, i3);
        }), this.handlePrevBubbleScatterPaths("bubble"), this.handlePrevBubbleScatterPaths("scatter");
        var i2 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4.config.chart.type, " .apexcharts-series"));
        if (i2.length > 0) for (var a3 = function(e4) {
          for (var i3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4.config.chart.type, " .apexcharts-series[data\\:realIndex='").concat(e4, "'] rect")), a4 = [], s3 = function(t5) {
            var e5 = function(e6) {
              return i3[t5].getAttribute(e6);
            }, s4 = { x: parseFloat(e5("x")), y: parseFloat(e5("y")), width: parseFloat(e5("width")), height: parseFloat(e5("height")) };
            a4.push({ rect: s4, color: i3[t5].getAttribute("color") });
          }, r3 = 0; r3 < i3.length; r3++) s3(r3);
          t4.globals.previousPaths.push(a4);
        }, s2 = 0; s2 < i2.length; s2++) a3(s2);
        t4.globals.axisCharts || (t4.globals.previousPaths = t4.globals.series);
      } }, { key: "handlePrevBubbleScatterPaths", value: function(t4) {
        var e3 = this.w, i2 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4, "-series .apexcharts-series"));
        if (i2.length > 0) for (var a3 = 0; a3 < i2.length; a3++) {
          for (var s2 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4, "-series .apexcharts-series[data\\:realIndex='").concat(a3, "'] circle")), r3 = [], o3 = 0; o3 < s2.length; o3++) r3.push({ x: s2[o3].getAttribute("cx"), y: s2[o3].getAttribute("cy"), r: s2[o3].getAttribute("r") });
          e3.globals.previousPaths.push(r3);
        }
      } }, { key: "clearPreviousPaths", value: function() {
        var t4 = this.w;
        t4.globals.previousPaths = [], t4.globals.allSeriesCollapsed = false;
      } }, { key: "handleNoData", value: function() {
        var t4 = this.w, e3 = t4.config.noData, i2 = new w(this.ctx), a3 = t4.globals.svgWidth / 2, s2 = t4.globals.svgHeight / 2, r3 = "middle";
        if (t4.globals.noData = true, t4.globals.animationEnded = true, "left" === e3.align ? (a3 = 10, r3 = "start") : "right" === e3.align && (a3 = t4.globals.svgWidth - 10, r3 = "end"), "top" === e3.verticalAlign ? s2 = 50 : "bottom" === e3.verticalAlign && (s2 = t4.globals.svgHeight - 50), a3 += e3.offsetX, s2 = s2 + parseInt(e3.style.fontSize, 10) + 2 + e3.offsetY, void 0 !== e3.text && "" !== e3.text) {
          var o3 = i2.drawText({ x: a3, y: s2, text: e3.text, textAnchor: r3, fontSize: e3.style.fontSize, fontFamily: e3.style.fontFamily, foreColor: e3.style.color, opacity: 1, class: "apexcharts-text-nodata" });
          t4.globals.dom.Paper.add(o3);
        }
      } }, { key: "setNullSeriesToZeroValues", value: function(t4) {
        for (var e3 = this.w, i2 = 0; i2 < t4.length; i2++) if (0 === t4[i2].length) for (var a3 = 0; a3 < t4[e3.globals.maxValsInArrayIndex].length; a3++) t4[i2].push(0);
        return t4;
      } }, { key: "hasAllSeriesEqualX", value: function() {
        for (var t4 = true, e3 = this.w, i2 = this.filteredSeriesX(), a3 = 0; a3 < i2.length - 1; a3++) if (i2[a3][0] !== i2[a3 + 1][0]) {
          t4 = false;
          break;
        }
        return e3.globals.allSeriesHasEqualX = t4, t4;
      } }, { key: "filteredSeriesX", value: function() {
        var t4 = this.w.globals.seriesX.map(function(t5) {
          return t5.length > 0 ? t5 : [];
        });
        return t4;
      } }]), t3;
    }();
    var V = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new k(this.ctx);
      }
      return s(t3, [{ key: "isMultiFormat", value: function() {
        return this.isFormatXY() || this.isFormat2DArray();
      } }, { key: "isFormatXY", value: function() {
        var t4 = this.w.config.series.slice(), e3 = new G2(this.ctx);
        if (this.activeSeriesIndex = e3.getActiveConfigSeriesIndex(), void 0 !== t4[this.activeSeriesIndex].data && t4[this.activeSeriesIndex].data.length > 0 && null !== t4[this.activeSeriesIndex].data[0] && void 0 !== t4[this.activeSeriesIndex].data[0].x && null !== t4[this.activeSeriesIndex].data[0]) return true;
      } }, { key: "isFormat2DArray", value: function() {
        var t4 = this.w.config.series.slice(), e3 = new G2(this.ctx);
        if (this.activeSeriesIndex = e3.getActiveConfigSeriesIndex(), void 0 !== t4[this.activeSeriesIndex].data && t4[this.activeSeriesIndex].data.length > 0 && void 0 !== t4[this.activeSeriesIndex].data[0] && null !== t4[this.activeSeriesIndex].data[0] && t4[this.activeSeriesIndex].data[0].constructor === Array) return true;
      } }, { key: "handleFormat2DArray", value: function(t4, e3) {
        for (var i2 = this.w.config, a3 = this.w.globals, s2 = "boxPlot" === i2.chart.type || "boxPlot" === i2.series[e3].type, r3 = 0; r3 < t4[e3].data.length; r3++) if (void 0 !== t4[e3].data[r3][1] && (Array.isArray(t4[e3].data[r3][1]) && 4 === t4[e3].data[r3][1].length && !s2 ? this.twoDSeries.push(v.parseNumber(t4[e3].data[r3][1][3])) : t4[e3].data[r3].length >= 5 ? this.twoDSeries.push(v.parseNumber(t4[e3].data[r3][4])) : this.twoDSeries.push(v.parseNumber(t4[e3].data[r3][1])), a3.dataFormatXNumeric = true), "datetime" === i2.xaxis.type) {
          var o3 = new Date(t4[e3].data[r3][0]);
          o3 = new Date(o3).getTime(), this.twoDSeriesX.push(o3);
        } else this.twoDSeriesX.push(t4[e3].data[r3][0]);
        for (var n2 = 0; n2 < t4[e3].data.length; n2++) void 0 !== t4[e3].data[n2][2] && (this.threeDSeries.push(t4[e3].data[n2][2]), a3.isDataXYZ = true);
      } }, { key: "handleFormatXY", value: function(t4, e3) {
        var i2 = this.w.config, a3 = this.w.globals, s2 = new C2(this.ctx), r3 = e3;
        a3.collapsedSeriesIndices.indexOf(e3) > -1 && (r3 = this.activeSeriesIndex);
        for (var o3 = 0; o3 < t4[e3].data.length; o3++) void 0 !== t4[e3].data[o3].y && (Array.isArray(t4[e3].data[o3].y) ? this.twoDSeries.push(v.parseNumber(t4[e3].data[o3].y[t4[e3].data[o3].y.length - 1])) : this.twoDSeries.push(v.parseNumber(t4[e3].data[o3].y))), void 0 !== t4[e3].data[o3].goals && Array.isArray(t4[e3].data[o3].goals) ? (void 0 === this.seriesGoals[e3] && (this.seriesGoals[e3] = []), this.seriesGoals[e3].push(t4[e3].data[o3].goals)) : (void 0 === this.seriesGoals[e3] && (this.seriesGoals[e3] = []), this.seriesGoals[e3].push(null));
        for (var n2 = 0; n2 < t4[r3].data.length; n2++) {
          var l2 = "string" == typeof t4[r3].data[n2].x, h2 = Array.isArray(t4[r3].data[n2].x), c3 = !h2 && !!s2.isValidDate(t4[r3].data[n2].x);
          if (l2 || c3) if (l2 || i2.xaxis.convertedCatToNumeric) {
            var d2 = a3.isBarHorizontal && a3.isRangeData;
            "datetime" !== i2.xaxis.type || d2 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t4[r3].data[n2].x), isNaN(t4[r3].data[n2].x) || "category" === this.w.config.xaxis.type || "string" == typeof t4[r3].data[n2].x || (a3.isXNumeric = true)) : this.twoDSeriesX.push(s2.parseDate(t4[r3].data[n2].x));
          } else "datetime" === i2.xaxis.type ? this.twoDSeriesX.push(s2.parseDate(t4[r3].data[n2].x.toString())) : (a3.dataFormatXNumeric = true, a3.isXNumeric = true, this.twoDSeriesX.push(parseFloat(t4[r3].data[n2].x)));
          else h2 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t4[r3].data[n2].x)) : (a3.isXNumeric = true, a3.dataFormatXNumeric = true, this.twoDSeriesX.push(t4[r3].data[n2].x));
        }
        if (t4[e3].data[0] && void 0 !== t4[e3].data[0].z) {
          for (var g2 = 0; g2 < t4[e3].data.length; g2++) this.threeDSeries.push(t4[e3].data[g2].z);
          a3.isDataXYZ = true;
        }
      } }, { key: "handleRangeData", value: function(t4, e3) {
        var i2 = this.w.globals, a3 = {};
        return this.isFormat2DArray() ? a3 = this.handleRangeDataFormat("array", t4, e3) : this.isFormatXY() && (a3 = this.handleRangeDataFormat("xy", t4, e3)), i2.seriesRangeStart.push(void 0 === a3.start ? [] : a3.start), i2.seriesRangeEnd.push(void 0 === a3.end ? [] : a3.end), i2.seriesRange.push(a3.rangeUniques), i2.seriesRange.forEach(function(t5, e4) {
          t5 && t5.forEach(function(t6, e5) {
            t6.y.forEach(function(e6, i3) {
              for (var a4 = 0; a4 < t6.y.length; a4++) if (i3 !== a4) {
                var s2 = e6.y1, r3 = e6.y2, o3 = t6.y[a4].y1;
                s2 <= t6.y[a4].y2 && o3 <= r3 && (t6.overlaps.indexOf(e6.rangeName) < 0 && t6.overlaps.push(e6.rangeName), t6.overlaps.indexOf(t6.y[a4].rangeName) < 0 && t6.overlaps.push(t6.y[a4].rangeName));
              }
            });
          });
        }), a3;
      } }, { key: "handleCandleStickBoxData", value: function(t4, e3) {
        var i2 = this.w.globals, a3 = {};
        return this.isFormat2DArray() ? a3 = this.handleCandleStickBoxDataFormat("array", t4, e3) : this.isFormatXY() && (a3 = this.handleCandleStickBoxDataFormat("xy", t4, e3)), i2.seriesCandleO[e3] = a3.o, i2.seriesCandleH[e3] = a3.h, i2.seriesCandleM[e3] = a3.m, i2.seriesCandleL[e3] = a3.l, i2.seriesCandleC[e3] = a3.c, a3;
      } }, { key: "handleRangeDataFormat", value: function(t4, e3, i2) {
        var a3 = [], s2 = [], r3 = e3[i2].data.filter(function(t5, e4, i3) {
          return e4 === i3.findIndex(function(e5) {
            return e5.x === t5.x;
          });
        }).map(function(t5, e4) {
          return { x: t5.x, overlaps: [], y: [] };
        });
        if ("array" === t4) for (var o3 = 0; o3 < e3[i2].data.length; o3++) Array.isArray(e3[i2].data[o3]) ? (a3.push(e3[i2].data[o3][1][0]), s2.push(e3[i2].data[o3][1][1])) : (a3.push(e3[i2].data[o3]), s2.push(e3[i2].data[o3]));
        else if ("xy" === t4) for (var n2 = function(t5) {
          var o4 = Array.isArray(e3[i2].data[t5].y), n3 = v.randomId(), l3 = e3[i2].data[t5].x, h2 = { y1: o4 ? e3[i2].data[t5].y[0] : e3[i2].data[t5].y, y2: o4 ? e3[i2].data[t5].y[1] : e3[i2].data[t5].y, rangeName: n3 };
          e3[i2].data[t5].rangeName = n3;
          var c3 = r3.findIndex(function(t6) {
            return t6.x === l3;
          });
          r3[c3].y.push(h2), a3.push(h2.y1), s2.push(h2.y2);
        }, l2 = 0; l2 < e3[i2].data.length; l2++) n2(l2);
        return { start: a3, end: s2, rangeUniques: r3 };
      } }, { key: "handleCandleStickBoxDataFormat", value: function(t4, e3, i2) {
        var a3 = this.w, s2 = "boxPlot" === a3.config.chart.type || "boxPlot" === a3.config.series[i2].type, r3 = [], o3 = [], n2 = [], l2 = [], h2 = [];
        if ("array" === t4) if (s2 && 6 === e3[i2].data[0].length || !s2 && 5 === e3[i2].data[0].length) for (var c3 = 0; c3 < e3[i2].data.length; c3++) r3.push(e3[i2].data[c3][1]), o3.push(e3[i2].data[c3][2]), s2 ? (n2.push(e3[i2].data[c3][3]), l2.push(e3[i2].data[c3][4]), h2.push(e3[i2].data[c3][5])) : (l2.push(e3[i2].data[c3][3]), h2.push(e3[i2].data[c3][4]));
        else for (var d2 = 0; d2 < e3[i2].data.length; d2++) Array.isArray(e3[i2].data[d2][1]) && (r3.push(e3[i2].data[d2][1][0]), o3.push(e3[i2].data[d2][1][1]), s2 ? (n2.push(e3[i2].data[d2][1][2]), l2.push(e3[i2].data[d2][1][3]), h2.push(e3[i2].data[d2][1][4])) : (l2.push(e3[i2].data[d2][1][2]), h2.push(e3[i2].data[d2][1][3])));
        else if ("xy" === t4) for (var g2 = 0; g2 < e3[i2].data.length; g2++) Array.isArray(e3[i2].data[g2].y) && (r3.push(e3[i2].data[g2].y[0]), o3.push(e3[i2].data[g2].y[1]), s2 ? (n2.push(e3[i2].data[g2].y[2]), l2.push(e3[i2].data[g2].y[3]), h2.push(e3[i2].data[g2].y[4])) : (l2.push(e3[i2].data[g2].y[2]), h2.push(e3[i2].data[g2].y[3])));
        return { o: r3, h: o3, m: n2, l: l2, c: h2 };
      } }, { key: "parseDataAxisCharts", value: function(t4) {
        var e3 = this, i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, a3 = this.w.config, s2 = this.w.globals, r3 = new C2(i2), o3 = a3.labels.length > 0 ? a3.labels.slice() : a3.xaxis.categories.slice();
        s2.isRangeBar = "rangeBar" === a3.chart.type && s2.isBarHorizontal, s2.hasXaxisGroups = "category" === a3.xaxis.type && a3.xaxis.group.groups.length > 0, s2.hasXaxisGroups && (s2.groups = a3.xaxis.group.groups), t4.forEach(function(t5, e4) {
          void 0 !== t5.name ? s2.seriesNames.push(t5.name) : s2.seriesNames.push("series-" + parseInt(e4 + 1, 10));
        }), this.coreUtils.setSeriesYAxisMappings();
        var n2 = [], l2 = p(new Set(a3.series.map(function(t5) {
          return t5.group;
        })));
        a3.series.forEach(function(t5, e4) {
          var i3 = l2.indexOf(t5.group);
          n2[i3] || (n2[i3] = []), n2[i3].push(s2.seriesNames[e4]);
        }), s2.seriesGroups = n2;
        for (var h2 = function() {
          for (var t5 = 0; t5 < o3.length; t5++) if ("string" == typeof o3[t5]) {
            if (!r3.isValidDate(o3[t5])) throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
            e3.twoDSeriesX.push(r3.parseDate(o3[t5]));
          } else e3.twoDSeriesX.push(o3[t5]);
        }, c3 = 0; c3 < t4.length; c3++) {
          if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t4[c3].data) return void console.error("It is a possibility that you may have not included 'data' property in series.");
          if ("rangeBar" !== a3.chart.type && "rangeArea" !== a3.chart.type && "rangeBar" !== t4[c3].type && "rangeArea" !== t4[c3].type || (s2.isRangeData = true, "rangeBar" !== a3.chart.type && "rangeArea" !== a3.chart.type || this.handleRangeData(t4, c3)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t4, c3) : this.isFormatXY() && this.handleFormatXY(t4, c3), "candlestick" !== a3.chart.type && "candlestick" !== t4[c3].type && "boxPlot" !== a3.chart.type && "boxPlot" !== t4[c3].type || this.handleCandleStickBoxData(t4, c3), s2.series.push(this.twoDSeries), s2.labels.push(this.twoDSeriesX), s2.seriesX.push(this.twoDSeriesX), s2.seriesGoals = this.seriesGoals, c3 !== this.activeSeriesIndex || this.fallbackToCategory || (s2.isXNumeric = true);
          else {
            "datetime" === a3.xaxis.type ? (s2.isXNumeric = true, h2(), s2.seriesX.push(this.twoDSeriesX)) : "numeric" === a3.xaxis.type && (s2.isXNumeric = true, o3.length > 0 && (this.twoDSeriesX = o3, s2.seriesX.push(this.twoDSeriesX))), s2.labels.push(this.twoDSeriesX);
            var d2 = t4[c3].data.map(function(t5) {
              return v.parseNumber(t5);
            });
            s2.series.push(d2);
          }
          s2.seriesZ.push(this.threeDSeries), void 0 !== t4[c3].color ? s2.seriesColors.push(t4[c3].color) : s2.seriesColors.push(void 0);
        }
        return this.w;
      } }, { key: "parseDataNonAxisCharts", value: function(t4) {
        var e3 = this.w.globals, i2 = this.w.config;
        e3.series = t4.slice(), e3.seriesNames = i2.labels.slice();
        for (var a3 = 0; a3 < e3.series.length; a3++) void 0 === e3.seriesNames[a3] && e3.seriesNames.push("series-" + (a3 + 1));
        return this.w;
      } }, { key: "handleExternalLabelsData", value: function(t4) {
        var e3 = this.w.config, i2 = this.w.globals;
        if (e3.xaxis.categories.length > 0) i2.labels = e3.xaxis.categories;
        else if (e3.labels.length > 0) i2.labels = e3.labels.slice();
        else if (this.fallbackToCategory) {
          if (i2.labels = i2.labels[0], i2.seriesRange.length && (i2.seriesRange.map(function(t5) {
            t5.forEach(function(t6) {
              i2.labels.indexOf(t6.x) < 0 && t6.x && i2.labels.push(t6.x);
            });
          }), i2.labels = Array.from(new Set(i2.labels.map(JSON.stringify)), JSON.parse)), e3.xaxis.convertedCatToNumeric) new F2(e3).convertCatToNumericXaxis(e3, this.ctx, i2.seriesX[0]), this._generateExternalLabels(t4);
        } else this._generateExternalLabels(t4);
      } }, { key: "_generateExternalLabels", value: function(t4) {
        var e3 = this.w.globals, i2 = this.w.config, a3 = [];
        if (e3.axisCharts) {
          if (e3.series.length > 0) if (this.isFormatXY()) for (var s2 = i2.series.map(function(t5, e4) {
            return t5.data.filter(function(t6, e5, i3) {
              return i3.findIndex(function(e6) {
                return e6.x === t6.x;
              }) === e5;
            });
          }), r3 = s2.reduce(function(t5, e4, i3, a4) {
            return a4[t5].length > e4.length ? t5 : i3;
          }, 0), o3 = 0; o3 < s2[r3].length; o3++) a3.push(o3 + 1);
          else for (var n2 = 0; n2 < e3.series[e3.maxValsInArrayIndex].length; n2++) a3.push(n2 + 1);
          e3.seriesX = [];
          for (var l2 = 0; l2 < t4.length; l2++) e3.seriesX.push(a3);
          this.w.globals.isBarHorizontal || (e3.isXNumeric = true);
        }
        if (0 === a3.length) {
          a3 = e3.axisCharts ? [] : e3.series.map(function(t5, e4) {
            return e4 + 1;
          });
          for (var h2 = 0; h2 < t4.length; h2++) e3.seriesX.push(a3);
        }
        e3.labels = a3, i2.xaxis.convertedCatToNumeric && (e3.categoryLabels = a3.map(function(t5) {
          return i2.xaxis.labels.formatter(t5);
        })), e3.noLabelsProvided = true;
      } }, { key: "parseData", value: function(t4) {
        var e3 = this.w, i2 = e3.config, a3 = e3.globals;
        if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = false, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a3.axisCharts ? (this.parseDataAxisCharts(t4), this.coreUtils.getLargestSeries()) : this.parseDataNonAxisCharts(t4), i2.chart.stacked) {
          var s2 = new G2(this.ctx);
          a3.series = s2.setNullSeriesToZeroValues(a3.series);
        }
        this.coreUtils.getSeriesTotals(), a3.axisCharts && (a3.stackedSeriesTotals = this.coreUtils.getStackedSeriesTotals(), a3.stackedSeriesTotalsByGroups = this.coreUtils.getStackedSeriesTotalsByGroups()), this.coreUtils.getPercentSeries(), a3.dataFormatXNumeric || a3.isXNumeric && ("numeric" !== i2.xaxis.type || 0 !== i2.labels.length || 0 !== i2.xaxis.categories.length) || this.handleExternalLabelsData(t4);
        for (var r3 = this.coreUtils.getCategoryLabels(a3.labels), o3 = 0; o3 < r3.length; o3++) if (Array.isArray(r3[o3])) {
          a3.isMultiLineX = true;
          break;
        }
      } }, { key: "excludeCollapsedSeriesInYAxis", value: function() {
        var t4 = this.w, e3 = [];
        t4.globals.seriesYAxisMap.forEach(function(i2, a3) {
          var s2 = 0;
          i2.forEach(function(e4) {
            -1 !== t4.globals.collapsedSeriesIndices.indexOf(e4) && s2++;
          }), s2 > 0 && s2 == i2.length && e3.push(a3);
        }), t4.globals.ignoreYAxisIndexes = e3.map(function(t5) {
          return t5;
        });
      } }]), t3;
    }();
    var j = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "scaleSvgNode", value: function(t4, e3) {
        var i2 = parseFloat(t4.getAttributeNS(null, "width")), a3 = parseFloat(t4.getAttributeNS(null, "height"));
        t4.setAttributeNS(null, "width", i2 * e3), t4.setAttributeNS(null, "height", a3 * e3), t4.setAttributeNS(null, "viewBox", "0 0 " + i2 + " " + a3);
      } }, { key: "getSvgString", value: function() {
        var t4 = this;
        return new Promise(function(e3) {
          var i2 = t4.w, a3 = i2.config.chart.toolbar.export.width, s2 = i2.config.chart.toolbar.export.scale || a3 / i2.globals.svgWidth;
          s2 || (s2 = 1);
          var r3 = t4.w.globals.dom.Paper.svg(), o3 = t4.w.globals.dom.Paper.node.cloneNode(true);
          1 !== s2 && t4.scaleSvgNode(o3, s2), t4.convertImagesToBase64(o3).then(function() {
            r3 = new XMLSerializer().serializeToString(o3), e3(r3.replace(/&nbsp;/g, "&#160;"));
          });
        });
      } }, { key: "convertImagesToBase64", value: function(t4) {
        var e3 = this, i2 = t4.getElementsByTagName("image"), a3 = Array.from(i2).map(function(t5) {
          var i3 = t5.getAttributeNS("http://www.w3.org/1999/xlink", "href");
          return i3 && !i3.startsWith("data:") ? e3.getBase64FromUrl(i3).then(function(e4) {
            t5.setAttributeNS("http://www.w3.org/1999/xlink", "href", e4);
          }).catch(function(t6) {
            console.error("Error converting image to base64:", t6);
          }) : Promise.resolve();
        });
        return Promise.all(a3);
      } }, { key: "getBase64FromUrl", value: function(t4) {
        return new Promise(function(e3, i2) {
          var a3 = new Image();
          a3.crossOrigin = "Anonymous", a3.onload = function() {
            var t5 = document.createElement("canvas");
            t5.width = a3.width, t5.height = a3.height, t5.getContext("2d").drawImage(a3, 0, 0), e3(t5.toDataURL());
          }, a3.onerror = i2, a3.src = t4;
        });
      } }, { key: "cleanup", value: function() {
        var t4 = this.w, e3 = t4.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"), i2 = t4.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"), a3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");
        Array.prototype.forEach.call(a3, function(t5) {
          t5.setAttribute("width", 0);
        }), e3 && e3[0] && (e3[0].setAttribute("x", -500), e3[0].setAttribute("x1", -500), e3[0].setAttribute("x2", -500)), i2 && i2[0] && (i2[0].setAttribute("y", -100), i2[0].setAttribute("y1", -100), i2[0].setAttribute("y2", -100));
      } }, { key: "svgUrl", value: function() {
        var t4 = this;
        return new Promise(function(e3) {
          t4.cleanup(), t4.getSvgString().then(function(t5) {
            var i2 = new Blob([t5], { type: "image/svg+xml;charset=utf-8" });
            e3(URL.createObjectURL(i2));
          });
        });
      } }, { key: "dataURI", value: function(t4) {
        var e3 = this;
        return new Promise(function(i2) {
          var a3 = e3.w, s2 = t4 ? t4.scale || t4.width / a3.globals.svgWidth : 1;
          e3.cleanup();
          var r3 = document.createElement("canvas");
          r3.width = a3.globals.svgWidth * s2, r3.height = parseInt(a3.globals.dom.elWrap.style.height, 10) * s2;
          var o3 = "transparent" !== a3.config.chart.background && a3.config.chart.background ? a3.config.chart.background : "#fff", n2 = r3.getContext("2d");
          n2.fillStyle = o3, n2.fillRect(0, 0, r3.width * s2, r3.height * s2), e3.getSvgString().then(function(t5) {
            var e4 = "data:image/svg+xml," + encodeURIComponent(t5), a4 = new Image();
            a4.crossOrigin = "anonymous", a4.onload = function() {
              if (n2.drawImage(a4, 0, 0), r3.msToBlob) {
                var t6 = r3.msToBlob();
                i2({ blob: t6 });
              } else {
                var e5 = r3.toDataURL("image/png");
                i2({ imgURI: e5 });
              }
            }, a4.src = e4;
          });
        });
      } }, { key: "exportToSVG", value: function() {
        var t4 = this;
        this.svgUrl().then(function(e3) {
          t4.triggerDownload(e3, t4.w.config.chart.toolbar.export.svg.filename, ".svg");
        });
      } }, { key: "exportToPng", value: function() {
        var t4 = this, e3 = this.w.config.chart.toolbar.export.scale, i2 = this.w.config.chart.toolbar.export.width, a3 = e3 ? { scale: e3 } : i2 ? { width: i2 } : void 0;
        this.dataURI(a3).then(function(e4) {
          var i3 = e4.imgURI, a4 = e4.blob;
          a4 ? navigator.msSaveOrOpenBlob(a4, t4.w.globals.chartID + ".png") : t4.triggerDownload(i3, t4.w.config.chart.toolbar.export.png.filename, ".png");
        });
      } }, { key: "exportToCSV", value: function(t4) {
        var e3 = this, i2 = t4.series, a3 = t4.fileName, s2 = t4.columnDelimiter, r3 = void 0 === s2 ? "," : s2, o3 = t4.lineDelimiter, n2 = void 0 === o3 ? "\n" : o3, l2 = this.w;
        i2 || (i2 = l2.config.series);
        var h2, c3, d2 = [], g2 = [], u2 = "", f2 = l2.globals.series.map(function(t5, e4) {
          return -1 === l2.globals.collapsedSeriesIndices.indexOf(e4) ? t5 : [];
        }), x2 = function(t5) {
          return "function" == typeof l2.config.chart.toolbar.export.csv.categoryFormatter ? l2.config.chart.toolbar.export.csv.categoryFormatter(t5) : "datetime" === l2.config.xaxis.type && String(t5).length >= 10 ? new Date(t5).toDateString() : v.isNumber(t5) ? t5 : t5.split(r3).join("");
        }, b2 = function(t5) {
          return "function" == typeof l2.config.chart.toolbar.export.csv.valueFormatter ? l2.config.chart.toolbar.export.csv.valueFormatter(t5) : t5;
        }, m2 = Math.max.apply(Math, p(i2.map(function(t5) {
          return t5.data ? t5.data.length : 0;
        }))), y3 = new V(this.ctx), w2 = new P2(this.ctx), k2 = function(t5) {
          var i3 = "";
          if (l2.globals.axisCharts) {
            if ("category" === l2.config.xaxis.type || l2.config.xaxis.convertedCatToNumeric) if (l2.globals.isBarHorizontal) {
              var a4 = l2.globals.yLabelFormatters[0], s3 = new G2(e3.ctx).getActiveConfigSeriesIndex();
              i3 = a4(l2.globals.labels[t5], { seriesIndex: s3, dataPointIndex: t5, w: l2 });
            } else i3 = w2.getLabel(l2.globals.labels, l2.globals.timescaleLabels, 0, t5).text;
            "datetime" === l2.config.xaxis.type && (l2.config.xaxis.categories.length ? i3 = l2.config.xaxis.categories[t5] : l2.config.labels.length && (i3 = l2.config.labels[t5]));
          } else i3 = l2.config.labels[t5];
          return null === i3 ? "nullvalue" : (Array.isArray(i3) && (i3 = i3.join(" ")), v.isNumber(i3) ? i3 : i3.split(r3).join(""));
        }, A2 = function(t5, e4) {
          if (d2.length && 0 === e4 && g2.push(d2.join(r3)), t5.data) {
            t5.data = t5.data.length && t5.data || p(Array(m2)).map(function() {
              return "";
            });
            for (var a4 = 0; a4 < t5.data.length; a4++) {
              d2 = [];
              var s3 = k2(a4);
              if ("nullvalue" !== s3) {
                if (s3 || (y3.isFormatXY() ? s3 = i2[e4].data[a4].x : y3.isFormat2DArray() && (s3 = i2[e4].data[a4] ? i2[e4].data[a4][0] : "")), 0 === e4) {
                  d2.push(x2(s3));
                  for (var o4 = 0; o4 < l2.globals.series.length; o4++) {
                    var n3, h3 = y3.isFormatXY() ? null === (n3 = i2[o4].data[a4]) || void 0 === n3 ? void 0 : n3.y : f2[o4][a4];
                    d2.push(b2(h3));
                  }
                }
                ("candlestick" === l2.config.chart.type || t5.type && "candlestick" === t5.type) && (d2.pop(), d2.push(l2.globals.seriesCandleO[e4][a4]), d2.push(l2.globals.seriesCandleH[e4][a4]), d2.push(l2.globals.seriesCandleL[e4][a4]), d2.push(l2.globals.seriesCandleC[e4][a4])), ("boxPlot" === l2.config.chart.type || t5.type && "boxPlot" === t5.type) && (d2.pop(), d2.push(l2.globals.seriesCandleO[e4][a4]), d2.push(l2.globals.seriesCandleH[e4][a4]), d2.push(l2.globals.seriesCandleM[e4][a4]), d2.push(l2.globals.seriesCandleL[e4][a4]), d2.push(l2.globals.seriesCandleC[e4][a4])), "rangeBar" === l2.config.chart.type && (d2.pop(), d2.push(l2.globals.seriesRangeStart[e4][a4]), d2.push(l2.globals.seriesRangeEnd[e4][a4])), d2.length && g2.push(d2.join(r3));
              }
            }
          }
        };
        d2.push(l2.config.chart.toolbar.export.csv.headerCategory), "boxPlot" === l2.config.chart.type ? (d2.push("minimum"), d2.push("q1"), d2.push("median"), d2.push("q3"), d2.push("maximum")) : "candlestick" === l2.config.chart.type ? (d2.push("open"), d2.push("high"), d2.push("low"), d2.push("close")) : "rangeBar" === l2.config.chart.type ? (d2.push("minimum"), d2.push("maximum")) : i2.map(function(t5, e4) {
          var i3 = (t5.name ? t5.name : "series-".concat(e4)) + "";
          l2.globals.axisCharts && d2.push(i3.split(r3).join("") ? i3.split(r3).join("") : "series-".concat(e4));
        }), l2.globals.axisCharts || (d2.push(l2.config.chart.toolbar.export.csv.headerValue), g2.push(d2.join(r3))), l2.globals.allSeriesHasEqualX || !l2.globals.axisCharts || l2.config.xaxis.categories.length || l2.config.labels.length ? i2.map(function(t5, e4) {
          l2.globals.axisCharts ? A2(t5, e4) : ((d2 = []).push(x2(l2.globals.labels[e4])), d2.push(b2(f2[e4])), g2.push(d2.join(r3)));
        }) : (h2 = /* @__PURE__ */ new Set(), c3 = {}, i2.forEach(function(t5, e4) {
          null == t5 || t5.data.forEach(function(t6) {
            var a4, s3;
            if (y3.isFormatXY()) a4 = t6.x, s3 = t6.y;
            else {
              if (!y3.isFormat2DArray()) return;
              a4 = t6[0], s3 = t6[1];
            }
            c3[a4] || (c3[a4] = Array(i2.length).fill("")), c3[a4][e4] = b2(s3), h2.add(a4);
          });
        }), d2.length && g2.push(d2.join(r3)), Array.from(h2).sort().forEach(function(t5) {
          g2.push([x2(t5), c3[t5].join(r3)]);
        })), u2 += g2.join(n2), this.triggerDownload("data:text/csv; charset=utf-8," + encodeURIComponent("\uFEFF" + u2), a3 || l2.config.chart.toolbar.export.csv.filename, ".csv");
      } }, { key: "triggerDownload", value: function(t4, e3, i2) {
        var a3 = document.createElement("a");
        a3.href = t4, a3.download = (e3 || this.w.globals.chartID) + i2, document.body.appendChild(a3), a3.click(), document.body.removeChild(a3);
      } }]), t3;
    }();
    var _ = function() {
      function t3(e3, a3) {
        i(this, t3), this.ctx = e3, this.elgrid = a3, this.w = e3.w;
        var s2 = this.w;
        this.axesUtils = new P2(e3), this.xaxisLabels = s2.globals.labels.slice(), s2.globals.timescaleLabels.length > 0 && !s2.globals.isBarHorizontal && (this.xaxisLabels = s2.globals.timescaleLabels.slice()), s2.config.xaxis.overwriteCategories && (this.xaxisLabels = s2.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], "top" === s2.config.xaxis.position ? this.offY = 0 : this.offY = s2.globals.gridHeight, this.offY = this.offY + s2.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = "bar" === s2.config.chart.type && s2.config.plotOptions.bar.horizontal, this.xaxisFontSize = s2.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = s2.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s2.config.xaxis.labels.style.colors, this.xaxisBorderWidth = s2.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = s2.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = s2.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = s2.config.xaxis.axisBorder.height, this.yaxis = s2.config.yaxis[0];
      }
      return s(t3, [{ key: "drawXaxis", value: function() {
        var t4 = this.w, e3 = new w(this.ctx), i2 = e3.group({ class: "apexcharts-xaxis", transform: "translate(".concat(t4.config.xaxis.offsetX, ", ").concat(t4.config.xaxis.offsetY, ")") }), a3 = e3.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(t4.globals.translateXAxisX, ", ").concat(t4.globals.translateXAxisY, ")") });
        i2.add(a3);
        for (var s2 = [], r3 = 0; r3 < this.xaxisLabels.length; r3++) s2.push(this.xaxisLabels[r3]);
        if (this.drawXAxisLabelAndGroup(true, e3, a3, s2, t4.globals.isXNumeric, function(t5, e4) {
          return e4;
        }), t4.globals.hasXaxisGroups) {
          var o3 = t4.globals.groups;
          s2 = [];
          for (var n2 = 0; n2 < o3.length; n2++) s2.push(o3[n2].title);
          var l2 = {};
          t4.config.xaxis.group.style && (l2.xaxisFontSize = t4.config.xaxis.group.style.fontSize, l2.xaxisFontFamily = t4.config.xaxis.group.style.fontFamily, l2.xaxisForeColors = t4.config.xaxis.group.style.colors, l2.fontWeight = t4.config.xaxis.group.style.fontWeight, l2.cssClass = t4.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(false, e3, a3, s2, false, function(t5, e4) {
            return o3[t5].cols * e4;
          }, l2);
        }
        if (void 0 !== t4.config.xaxis.title.text) {
          var h2 = e3.group({ class: "apexcharts-xaxis-title" }), c3 = e3.drawText({ x: t4.globals.gridWidth / 2 + t4.config.xaxis.title.offsetX, y: this.offY + parseFloat(this.xaxisFontSize) + ("bottom" === t4.config.xaxis.position ? t4.globals.xAxisLabelsHeight : -t4.globals.xAxisLabelsHeight - 10) + t4.config.xaxis.title.offsetY, text: t4.config.xaxis.title.text, textAnchor: "middle", fontSize: t4.config.xaxis.title.style.fontSize, fontFamily: t4.config.xaxis.title.style.fontFamily, fontWeight: t4.config.xaxis.title.style.fontWeight, foreColor: t4.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text " + t4.config.xaxis.title.style.cssClass });
          h2.add(c3), i2.add(h2);
        }
        if (t4.config.xaxis.axisBorder.show) {
          var d2 = t4.globals.barPadForNumericAxis, g2 = e3.drawLine(t4.globals.padHorizontal + t4.config.xaxis.axisBorder.offsetX - d2, this.offY, this.xaxisBorderWidth + d2, this.offY, t4.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
          this.elgrid && this.elgrid.elGridBorders && t4.config.grid.show ? this.elgrid.elGridBorders.add(g2) : i2.add(g2);
        }
        return i2;
      } }, { key: "drawXAxisLabelAndGroup", value: function(t4, e3, i2, a3, s2, r3) {
        var o3, n2 = this, l2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {}, h2 = [], c3 = [], d2 = this.w, g2 = l2.xaxisFontSize || this.xaxisFontSize, u2 = l2.xaxisFontFamily || this.xaxisFontFamily, p2 = l2.xaxisForeColors || this.xaxisForeColors, f2 = l2.fontWeight || d2.config.xaxis.labels.style.fontWeight, x2 = l2.cssClass || d2.config.xaxis.labels.style.cssClass, b2 = d2.globals.padHorizontal, v2 = a3.length, m2 = "category" === d2.config.xaxis.type ? d2.globals.dataPoints : v2;
        if (0 === m2 && v2 > m2 && (m2 = v2), s2) {
          var y3 = m2 > 1 ? m2 - 1 : m2;
          o3 = d2.globals.gridWidth / Math.min(y3, v2 - 1), b2 = b2 + r3(0, o3) / 2 + d2.config.xaxis.labels.offsetX;
        } else o3 = d2.globals.gridWidth / m2, b2 = b2 + r3(0, o3) + d2.config.xaxis.labels.offsetX;
        for (var w2 = function(s3) {
          var l3 = b2 - r3(s3, o3) / 2 + d2.config.xaxis.labels.offsetX;
          0 === s3 && 1 === v2 && o3 / 2 === b2 && 1 === m2 && (l3 = d2.globals.gridWidth / 2);
          var y4 = n2.axesUtils.getLabel(a3, d2.globals.timescaleLabels, l3, s3, h2, g2, t4), w3 = 28;
          d2.globals.rotateXLabels && t4 && (w3 = 22), d2.config.xaxis.title.text && "top" === d2.config.xaxis.position && (w3 += parseFloat(d2.config.xaxis.title.style.fontSize) + 2), t4 || (w3 = w3 + parseFloat(g2) + (d2.globals.xAxisLabelsHeight - d2.globals.xAxisGroupLabelsHeight) + (d2.globals.rotateXLabels ? 10 : 0)), y4 = void 0 !== d2.config.xaxis.tickAmount && "dataPoints" !== d2.config.xaxis.tickAmount && "datetime" !== d2.config.xaxis.type ? n2.axesUtils.checkLabelBasedOnTickamount(s3, y4, v2) : n2.axesUtils.checkForOverflowingLabels(s3, y4, v2, h2, c3);
          if (d2.config.xaxis.labels.show) {
            var k3 = e3.drawText({ x: y4.x, y: n2.offY + d2.config.xaxis.labels.offsetY + w3 - ("top" === d2.config.xaxis.position ? d2.globals.xAxisHeight + d2.config.xaxis.axisTicks.height - 2 : 0), text: y4.text, textAnchor: "middle", fontWeight: y4.isBold ? 600 : f2, fontSize: g2, fontFamily: u2, foreColor: Array.isArray(p2) ? t4 && d2.config.xaxis.convertedCatToNumeric ? p2[d2.globals.minX + s3 - 1] : p2[s3] : p2, isPlainText: false, cssClass: (t4 ? "apexcharts-xaxis-label " : "apexcharts-xaxis-group-label ") + x2 });
            if (i2.add(k3), k3.on("click", function(t5) {
              if ("function" == typeof d2.config.chart.events.xAxisLabelClick) {
                var e4 = Object.assign({}, d2, { labelIndex: s3 });
                d2.config.chart.events.xAxisLabelClick(t5, n2.ctx, e4);
              }
            }), t4) {
              var A2 = document.createElementNS(d2.globals.SVGNS, "title");
              A2.textContent = Array.isArray(y4.text) ? y4.text.join(" ") : y4.text, k3.node.appendChild(A2), "" !== y4.text && (h2.push(y4.text), c3.push(y4));
            }
          }
          s3 < v2 - 1 && (b2 += r3(s3 + 1, o3));
        }, k2 = 0; k2 <= v2 - 1; k2++) w2(k2);
      } }, { key: "drawXaxisInversed", value: function(t4) {
        var e3, i2, a3 = this, s2 = this.w, r3 = new w(this.ctx), o3 = s2.config.yaxis[0].opposite ? s2.globals.translateYAxisX[t4] : 0, n2 = r3.group({ class: "apexcharts-yaxis apexcharts-xaxis-inversed", rel: t4 }), l2 = r3.group({ class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g", transform: "translate(" + o3 + ", 0)" });
        n2.add(l2);
        var h2 = [];
        if (s2.config.yaxis[t4].show) for (var c3 = 0; c3 < this.xaxisLabels.length; c3++) h2.push(this.xaxisLabels[c3]);
        e3 = s2.globals.gridHeight / h2.length, i2 = -e3 / 2.2;
        var d2 = s2.globals.yLabelFormatters[0], g2 = s2.config.yaxis[0].labels;
        if (g2.show) for (var u2 = function(o4) {
          var n3 = void 0 === h2[o4] ? "" : h2[o4];
          n3 = d2(n3, { seriesIndex: t4, dataPointIndex: o4, w: s2 });
          var c4 = a3.axesUtils.getYAxisForeColor(g2.style.colors, t4), u3 = 0;
          Array.isArray(n3) && (u3 = n3.length / 2 * parseInt(g2.style.fontSize, 10));
          var p3 = g2.offsetX - 15, f3 = "end";
          a3.yaxis.opposite && (f3 = "start"), "left" === s2.config.yaxis[0].labels.align ? (p3 = g2.offsetX, f3 = "start") : "center" === s2.config.yaxis[0].labels.align ? (p3 = g2.offsetX, f3 = "middle") : "right" === s2.config.yaxis[0].labels.align && (f3 = "end");
          var x3 = r3.drawText({ x: p3, y: i2 + e3 + g2.offsetY - u3, text: n3, textAnchor: f3, foreColor: Array.isArray(c4) ? c4[o4] : c4, fontSize: g2.style.fontSize, fontFamily: g2.style.fontFamily, fontWeight: g2.style.fontWeight, isPlainText: false, cssClass: "apexcharts-yaxis-label " + g2.style.cssClass, maxWidth: g2.maxWidth });
          l2.add(x3), x3.on("click", function(t5) {
            if ("function" == typeof s2.config.chart.events.xAxisLabelClick) {
              var e4 = Object.assign({}, s2, { labelIndex: o4 });
              s2.config.chart.events.xAxisLabelClick(t5, a3.ctx, e4);
            }
          });
          var b3 = document.createElementNS(s2.globals.SVGNS, "title");
          if (b3.textContent = Array.isArray(n3) ? n3.join(" ") : n3, x3.node.appendChild(b3), 0 !== s2.config.yaxis[t4].labels.rotate) {
            var v3 = r3.rotateAroundCenter(x3.node);
            x3.node.setAttribute("transform", "rotate(".concat(s2.config.yaxis[t4].labels.rotate, " 0 ").concat(v3.y, ")"));
          }
          i2 += e3;
        }, p2 = 0; p2 <= h2.length - 1; p2++) u2(p2);
        if (void 0 !== s2.config.yaxis[0].title.text) {
          var f2 = r3.group({ class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed", transform: "translate(" + o3 + ", 0)" }), x2 = r3.drawText({ x: s2.config.yaxis[0].title.offsetX, y: s2.globals.gridHeight / 2 + s2.config.yaxis[0].title.offsetY, text: s2.config.yaxis[0].title.text, textAnchor: "middle", foreColor: s2.config.yaxis[0].title.style.color, fontSize: s2.config.yaxis[0].title.style.fontSize, fontWeight: s2.config.yaxis[0].title.style.fontWeight, fontFamily: s2.config.yaxis[0].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text " + s2.config.yaxis[0].title.style.cssClass });
          f2.add(x2), n2.add(f2);
        }
        var b2 = 0;
        this.isCategoryBarHorizontal && s2.config.yaxis[0].opposite && (b2 = s2.globals.gridWidth);
        var v2 = s2.config.xaxis.axisBorder;
        if (v2.show) {
          var m2 = r3.drawLine(s2.globals.padHorizontal + v2.offsetX + b2, 1 + v2.offsetY, s2.globals.padHorizontal + v2.offsetX + b2, s2.globals.gridHeight + v2.offsetY, v2.color, 0);
          this.elgrid && this.elgrid.elGridBorders && s2.config.grid.show ? this.elgrid.elGridBorders.add(m2) : n2.add(m2);
        }
        return s2.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b2, h2.length, s2.config.yaxis[0].axisBorder, s2.config.yaxis[0].axisTicks, 0, e3, n2), n2;
      } }, { key: "drawXaxisTicks", value: function(t4, e3, i2) {
        var a3 = this.w, s2 = t4;
        if (!(t4 < 0 || t4 - 2 > a3.globals.gridWidth)) {
          var r3 = this.offY + a3.config.xaxis.axisTicks.offsetY;
          if (e3 = e3 + r3 + a3.config.xaxis.axisTicks.height, "top" === a3.config.xaxis.position && (e3 = r3 - a3.config.xaxis.axisTicks.height), a3.config.xaxis.axisTicks.show) {
            var o3 = new w(this.ctx).drawLine(t4 + a3.config.xaxis.axisTicks.offsetX, r3 + a3.config.xaxis.offsetY, s2 + a3.config.xaxis.axisTicks.offsetX, e3 + a3.config.xaxis.offsetY, a3.config.xaxis.axisTicks.color);
            i2.add(o3), o3.node.classList.add("apexcharts-xaxis-tick");
          }
        }
      } }, { key: "getXAxisTicksPositions", value: function() {
        var t4 = this.w, e3 = [], i2 = this.xaxisLabels.length, a3 = t4.globals.padHorizontal;
        if (t4.globals.timescaleLabels.length > 0) for (var s2 = 0; s2 < i2; s2++) a3 = this.xaxisLabels[s2].position, e3.push(a3);
        else for (var r3 = i2, o3 = 0; o3 < r3; o3++) {
          var n2 = r3;
          t4.globals.isXNumeric && "bar" !== t4.config.chart.type && (n2 -= 1), a3 += t4.globals.gridWidth / n2, e3.push(a3);
        }
        return e3;
      } }, { key: "xAxisLabelCorrections", value: function() {
        var t4 = this.w, e3 = new w(this.ctx), i2 = t4.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"), a3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"), s2 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"), r3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
        if (t4.globals.rotateXLabels || t4.config.xaxis.labels.rotateAlways) for (var o3 = 0; o3 < a3.length; o3++) {
          var n2 = e3.rotateAroundCenter(a3[o3]);
          n2.y = n2.y - 1, n2.x = n2.x + 1, a3[o3].setAttribute("transform", "rotate(".concat(t4.config.xaxis.labels.rotate, " ").concat(n2.x, " ").concat(n2.y, ")")), a3[o3].setAttribute("text-anchor", "end");
          i2.setAttribute("transform", "translate(0, ".concat(-10, ")"));
          var l2 = a3[o3].childNodes;
          t4.config.xaxis.labels.trim && Array.prototype.forEach.call(l2, function(i3) {
            e3.placeTextWithEllipsis(i3, i3.textContent, t4.globals.xAxisLabelsHeight - ("bottom" === t4.config.legend.position ? 20 : 10));
          });
        }
        else !function() {
          for (var i3 = t4.globals.gridWidth / (t4.globals.labels.length + 1), s3 = 0; s3 < a3.length; s3++) {
            var r4 = a3[s3].childNodes;
            t4.config.xaxis.labels.trim && "datetime" !== t4.config.xaxis.type && Array.prototype.forEach.call(r4, function(t5) {
              e3.placeTextWithEllipsis(t5, t5.textContent, i3);
            });
          }
        }();
        if (s2.length > 0) {
          var h2 = s2[s2.length - 1].getBBox(), c3 = s2[0].getBBox();
          h2.x < -20 && s2[s2.length - 1].parentNode.removeChild(s2[s2.length - 1]), c3.x + c3.width > t4.globals.gridWidth && !t4.globals.isBarHorizontal && s2[0].parentNode.removeChild(s2[0]);
          for (var d2 = 0; d2 < r3.length; d2++) e3.placeTextWithEllipsis(r3[d2], r3[d2].textContent, t4.config.yaxis[0].labels.maxWidth - (t4.config.yaxis[0].title.text ? 2 * parseFloat(t4.config.yaxis[0].title.style.fontSize) : 0) - 15);
        }
      } }]), t3;
    }();
    var U2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
        var a3 = this.w;
        this.xaxisLabels = a3.globals.labels.slice(), this.axesUtils = new P2(e3), this.isRangeBar = a3.globals.seriesRange.length && a3.globals.isBarHorizontal, a3.globals.timescaleLabels.length > 0 && (this.xaxisLabels = a3.globals.timescaleLabels.slice());
      }
      return s(t3, [{ key: "drawGridArea", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e3 = this.w, i2 = new w(this.ctx);
        null === t4 && (t4 = i2.group({ class: "apexcharts-grid" }));
        var a3 = i2.drawLine(e3.globals.padHorizontal, 1, e3.globals.padHorizontal, e3.globals.gridHeight, "transparent"), s2 = i2.drawLine(e3.globals.padHorizontal, e3.globals.gridHeight, e3.globals.gridWidth, e3.globals.gridHeight, "transparent");
        return t4.add(s2), t4.add(a3), t4;
      } }, { key: "drawGrid", value: function() {
        var t4 = null;
        return this.w.globals.axisCharts && (t4 = this.renderGrid(), this.drawGridArea(t4.el)), t4;
      } }, { key: "createGridMask", value: function() {
        var t4 = this.w, e3 = t4.globals, i2 = new w(this.ctx), a3 = Array.isArray(t4.config.stroke.width) ? 0 : t4.config.stroke.width;
        if (Array.isArray(t4.config.stroke.width)) {
          var s2 = 0;
          t4.config.stroke.width.forEach(function(t5) {
            s2 = Math.max(s2, t5);
          }), a3 = s2;
        }
        e3.dom.elGridRectMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elGridRectMask.setAttribute("id", "gridRectMask".concat(e3.cuid)), e3.dom.elGridRectMarkerMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elGridRectMarkerMask.setAttribute("id", "gridRectMarkerMask".concat(e3.cuid)), e3.dom.elForecastMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elForecastMask.setAttribute("id", "forecastMask".concat(e3.cuid)), e3.dom.elNonForecastMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elNonForecastMask.setAttribute("id", "nonForecastMask".concat(e3.cuid));
        var r3 = t4.config.chart.type, o3 = 0, n2 = 0;
        ("bar" === r3 || "rangeBar" === r3 || "candlestick" === r3 || "boxPlot" === r3 || t4.globals.comboBarCount > 0) && t4.globals.isXNumeric && !t4.globals.isBarHorizontal && (o3 = t4.config.grid.padding.left, n2 = t4.config.grid.padding.right, e3.barPadForNumericAxis > o3 && (o3 = e3.barPadForNumericAxis, n2 = e3.barPadForNumericAxis)), e3.dom.elGridRect = i2.drawRect(-a3 / 2 - o3 - 2, -a3 / 2 - 2, e3.gridWidth + a3 + n2 + o3 + 4, e3.gridHeight + a3 + 4, 0, "#fff");
        var l2 = t4.globals.markers.largestSize + 1;
        e3.dom.elGridRectMarker = i2.drawRect(2 * -l2, 2 * -l2, e3.gridWidth + 4 * l2, e3.gridHeight + 4 * l2, 0, "#fff"), e3.dom.elGridRectMask.appendChild(e3.dom.elGridRect.node), e3.dom.elGridRectMarkerMask.appendChild(e3.dom.elGridRectMarker.node);
        var h2 = e3.dom.baseEl.querySelector("defs");
        h2.appendChild(e3.dom.elGridRectMask), h2.appendChild(e3.dom.elForecastMask), h2.appendChild(e3.dom.elNonForecastMask), h2.appendChild(e3.dom.elGridRectMarkerMask);
      } }, { key: "_drawGridLines", value: function(t4) {
        var e3 = t4.i, i2 = t4.x1, a3 = t4.y1, s2 = t4.x2, r3 = t4.y2, o3 = t4.xCount, n2 = t4.parent, l2 = this.w;
        if (!(0 === e3 && l2.globals.skipFirstTimelinelabel || e3 === o3 - 1 && l2.globals.skipLastTimelinelabel && !l2.config.xaxis.labels.formatter || "radar" === l2.config.chart.type)) {
          l2.config.grid.xaxis.lines.show && this._drawGridLine({ i: e3, x1: i2, y1: a3, x2: s2, y2: r3, xCount: o3, parent: n2 });
          var h2 = 0;
          if (l2.globals.hasXaxisGroups && "between" === l2.config.xaxis.tickPlacement) {
            var c3 = l2.globals.groups;
            if (c3) {
              for (var d2 = 0, g2 = 0; d2 < e3 && g2 < c3.length; g2++) d2 += c3[g2].cols;
              d2 === e3 && (h2 = 0.6 * l2.globals.xAxisLabelsHeight);
            }
          }
          new _(this.ctx).drawXaxisTicks(i2, h2, l2.globals.dom.elGraphical);
        }
      } }, { key: "_drawGridLine", value: function(t4) {
        var e3 = t4.i, i2 = t4.x1, a3 = t4.y1, s2 = t4.x2, r3 = t4.y2, o3 = t4.xCount, n2 = t4.parent, l2 = this.w, h2 = false, c3 = n2.node.classList.contains("apexcharts-gridlines-horizontal"), d2 = l2.config.grid.strokeDashArray, g2 = l2.globals.barPadForNumericAxis;
        (0 === a3 && 0 === r3 || 0 === i2 && 0 === s2) && (h2 = true), a3 === l2.globals.gridHeight && r3 === l2.globals.gridHeight && (h2 = true), !l2.globals.isBarHorizontal || 0 !== e3 && e3 !== o3 - 1 || (h2 = true);
        var u2 = new w(this).drawLine(i2 - (c3 ? g2 : 0), a3, s2 + (c3 ? g2 : 0), r3, l2.config.grid.borderColor, d2);
        u2.node.classList.add("apexcharts-gridline"), h2 && l2.config.grid.show ? this.elGridBorders.add(u2) : n2.add(u2);
      } }, { key: "_drawGridBandRect", value: function(t4) {
        var e3 = t4.c, i2 = t4.x1, a3 = t4.y1, s2 = t4.x2, r3 = t4.y2, o3 = t4.type, n2 = this.w, l2 = new w(this.ctx), h2 = n2.globals.barPadForNumericAxis, c3 = n2.config.grid[o3].colors[e3], d2 = l2.drawRect(i2 - ("row" === o3 ? h2 : 0), a3, s2 + ("row" === o3 ? 2 * h2 : 0), r3, 0, c3, n2.config.grid[o3].opacity);
        this.elg.add(d2), d2.attr("clip-path", "url(#gridRectMask".concat(n2.globals.cuid, ")")), d2.node.classList.add("apexcharts-grid-".concat(o3));
      } }, { key: "_drawXYLines", value: function(t4) {
        var e3 = this, i2 = t4.xCount, a3 = t4.tickAmount, s2 = this.w;
        if (s2.config.grid.xaxis.lines.show || s2.config.xaxis.axisTicks.show) {
          var r3, o3 = s2.globals.padHorizontal, n2 = s2.globals.gridHeight;
          s2.globals.timescaleLabels.length ? function(t5) {
            for (var a4 = t5.xC, s3 = t5.x1, r4 = t5.y1, o4 = t5.x2, n3 = t5.y2, l3 = 0; l3 < a4; l3++) s3 = e3.xaxisLabels[l3].position, o4 = e3.xaxisLabels[l3].position, e3._drawGridLines({ i: l3, x1: s3, y1: r4, x2: o4, y2: n3, xCount: i2, parent: e3.elgridLinesV });
          }({ xC: i2, x1: o3, y1: 0, x2: r3, y2: n2 }) : (s2.globals.isXNumeric && (i2 = s2.globals.xAxisScale.result.length), function(t5) {
            for (var a4 = t5.xC, r4 = t5.x1, o4 = t5.y1, n3 = t5.x2, l3 = t5.y2, h3 = 0; h3 < a4 + (s2.globals.isXNumeric ? 0 : 1); h3++) 0 === h3 && 1 === a4 && 1 === s2.globals.dataPoints && (n3 = r4 = s2.globals.gridWidth / 2), e3._drawGridLines({ i: h3, x1: r4, y1: o4, x2: n3, y2: l3, xCount: i2, parent: e3.elgridLinesV }), n3 = r4 += s2.globals.gridWidth / (s2.globals.isXNumeric ? a4 - 1 : a4);
          }({ xC: i2, x1: o3, y1: 0, x2: r3, y2: n2 }));
        }
        if (s2.config.grid.yaxis.lines.show) {
          var l2 = 0, h2 = 0, c3 = s2.globals.gridWidth, d2 = a3 + 1;
          this.isRangeBar && (d2 = s2.globals.labels.length);
          for (var g2 = 0; g2 < d2 + (this.isRangeBar ? 1 : 0); g2++) this._drawGridLine({ i: g2, xCount: d2 + (this.isRangeBar ? 1 : 0), x1: 0, y1: l2, x2: c3, y2: h2, parent: this.elgridLinesH }), h2 = l2 += s2.globals.gridHeight / (this.isRangeBar ? d2 : a3);
        }
      } }, { key: "_drawInvertedXYLines", value: function(t4) {
        var e3 = t4.xCount, i2 = this.w;
        if (i2.config.grid.xaxis.lines.show || i2.config.xaxis.axisTicks.show) for (var a3, s2 = i2.globals.padHorizontal, r3 = i2.globals.gridHeight, o3 = 0; o3 < e3 + 1; o3++) {
          i2.config.grid.xaxis.lines.show && this._drawGridLine({ i: o3, xCount: e3 + 1, x1: s2, y1: 0, x2: a3, y2: r3, parent: this.elgridLinesV }), new _(this.ctx).drawXaxisTicks(s2, 0, i2.globals.dom.elGraphical), a3 = s2 += i2.globals.gridWidth / e3;
        }
        if (i2.config.grid.yaxis.lines.show) for (var n2 = 0, l2 = 0, h2 = i2.globals.gridWidth, c3 = 0; c3 < i2.globals.dataPoints + 1; c3++) this._drawGridLine({ i: c3, xCount: i2.globals.dataPoints + 1, x1: 0, y1: n2, x2: h2, y2: l2, parent: this.elgridLinesH }), l2 = n2 += i2.globals.gridHeight / i2.globals.dataPoints;
      } }, { key: "renderGrid", value: function() {
        var t4 = this.w, e3 = t4.globals, i2 = new w(this.ctx);
        this.elg = i2.group({ class: "apexcharts-grid" }), this.elgridLinesH = i2.group({ class: "apexcharts-gridlines-horizontal" }), this.elgridLinesV = i2.group({ class: "apexcharts-gridlines-vertical" }), this.elGridBorders = i2.group({ class: "apexcharts-grid-borders" }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t4.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide(), this.elGridBorders.hide());
        for (var a3 = 0; a3 < e3.seriesYAxisMap.length && -1 !== e3.ignoreYAxisIndexes.indexOf(a3); ) a3++;
        a3 === e3.seriesYAxisMap.length && (a3 = 0);
        var s2, r3 = e3.yAxisScale[a3].result.length - 1;
        if (!e3.isBarHorizontal || this.isRangeBar) {
          var o3, n2, l2;
          if (s2 = this.xaxisLabels.length, this.isRangeBar) r3 = e3.labels.length, t4.config.xaxis.tickAmount && t4.config.xaxis.labels.formatter && (s2 = t4.config.xaxis.tickAmount), (null === (o3 = e3.yAxisScale) || void 0 === o3 || null === (n2 = o3[a3]) || void 0 === n2 || null === (l2 = n2.result) || void 0 === l2 ? void 0 : l2.length) > 0 && "datetime" !== t4.config.xaxis.type && (s2 = e3.yAxisScale[a3].result.length - 1);
          this._drawXYLines({ xCount: s2, tickAmount: r3 });
        } else s2 = r3, r3 = e3.xTickAmount, this._drawInvertedXYLines({ xCount: s2, tickAmount: r3 });
        return this.drawGridBands(s2, r3), { el: this.elg, elGridBorders: this.elGridBorders, xAxisTickWidth: e3.gridWidth / s2 };
      } }, { key: "drawGridBands", value: function(t4, e3) {
        var i2 = this.w;
        if (void 0 !== i2.config.grid.row.colors && i2.config.grid.row.colors.length > 0) for (var a3 = 0, s2 = i2.globals.gridHeight / e3, r3 = i2.globals.gridWidth, o3 = 0, n2 = 0; o3 < e3; o3++, n2++) n2 >= i2.config.grid.row.colors.length && (n2 = 0), this._drawGridBandRect({ c: n2, x1: 0, y1: a3, x2: r3, y2: s2, type: "row" }), a3 += i2.globals.gridHeight / e3;
        if (void 0 !== i2.config.grid.column.colors && i2.config.grid.column.colors.length > 0) {
          var l2 = i2.globals.isBarHorizontal || "on" !== i2.config.xaxis.tickPlacement || "category" !== i2.config.xaxis.type && !i2.config.xaxis.convertedCatToNumeric ? t4 : t4 - 1;
          i2.globals.isXNumeric && (l2 = i2.globals.xAxisScale.result.length - 1);
          for (var h2 = i2.globals.padHorizontal, c3 = i2.globals.padHorizontal + i2.globals.gridWidth / l2, d2 = i2.globals.gridHeight, g2 = 0, u2 = 0; g2 < t4; g2++, u2++) {
            var p2;
            if (u2 >= i2.config.grid.column.colors.length && (u2 = 0), "datetime" === i2.config.xaxis.type) h2 = this.xaxisLabels[g2].position, c3 = ((null === (p2 = this.xaxisLabels[g2 + 1]) || void 0 === p2 ? void 0 : p2.position) || i2.globals.gridWidth) - this.xaxisLabels[g2].position;
            this._drawGridBandRect({ c: u2, x1: h2, y1: 0, x2: c3, y2: d2, type: "column" }), h2 += i2.globals.gridWidth / l2;
          }
        }
      } }]), t3;
    }();
    var q = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "niceScale", value: function(t4, e3) {
        var i2, a3, s2, r3, o3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n2 = 1e-11, l2 = this.w, h2 = l2.globals;
        h2.isBarHorizontal ? (i2 = l2.config.xaxis, a3 = Math.max((h2.svgWidth - 100) / 25, 2)) : (i2 = l2.config.yaxis[o3], a3 = Math.max((h2.svgHeight - 100) / 15, 2)), v.isNumber(a3) || (a3 = 10), s2 = void 0 !== i2.min && null !== i2.min, r3 = void 0 !== i2.max && null !== i2.min;
        var c3 = void 0 !== i2.stepSize && null !== i2.stepSize, d2 = void 0 !== i2.tickAmount && null !== i2.tickAmount, g2 = d2 ? i2.tickAmount : h2.niceScaleDefaultTicks[Math.min(Math.round(a3 / 2), h2.niceScaleDefaultTicks.length - 1)];
        if (h2.isMultipleYAxis && !d2 && h2.multiAxisTickAmount > 0 && (g2 = h2.multiAxisTickAmount, d2 = true), g2 = "dataPoints" === g2 ? h2.dataPoints - 1 : Math.abs(Math.round(g2)), (t4 === Number.MIN_VALUE && 0 === e3 || !v.isNumber(t4) && !v.isNumber(e3) || t4 === Number.MIN_VALUE && e3 === -Number.MAX_VALUE) && (t4 = v.isNumber(i2.min) ? i2.min : 0, e3 = v.isNumber(i2.max) ? i2.max : t4 + g2, h2.allSeriesCollapsed = false), t4 > e3) {
          console.warn("axis.min cannot be greater than axis.max: swapping min and max");
          var u2 = e3;
          e3 = t4, t4 = u2;
        } else t4 === e3 && (t4 = 0 === t4 ? 0 : t4 - 1, e3 = 0 === e3 ? 2 : e3 + 1);
        var p2 = [];
        g2 < 1 && (g2 = 1);
        var f2 = g2, x2 = Math.abs(e3 - t4);
        !s2 && t4 > 0 && t4 / x2 < 0.15 && (t4 = 0, s2 = true), !r3 && e3 < 0 && -e3 / x2 < 0.15 && (e3 = 0, r3 = true);
        var b2 = (x2 = Math.abs(e3 - t4)) / f2, m2 = b2, y3 = Math.floor(Math.log10(m2)), w2 = Math.pow(10, y3), k2 = Math.ceil(m2 / w2);
        if (b2 = m2 = (k2 = h2.niceScaleAllowedMagMsd[0 === h2.yValueDecimal ? 0 : 1][k2]) * w2, h2.isBarHorizontal && i2.stepSize && "datetime" !== i2.type ? (b2 = i2.stepSize, c3 = true) : c3 && (b2 = i2.stepSize), c3 && i2.forceNiceScale) {
          var A2 = Math.floor(Math.log10(b2));
          b2 *= Math.pow(10, y3 - A2);
        }
        if (s2 && r3) {
          var S2 = x2 / f2;
          if (d2) if (c3) if (0 != v.mod(x2, b2)) {
            var C3 = v.getGCD(b2, S2);
            b2 = S2 / C3 < 10 ? C3 : S2;
          } else 0 == v.mod(b2, S2) ? b2 = S2 : (S2 = b2, d2 = false);
          else b2 = S2;
          else if (c3) 0 == v.mod(x2, b2) ? S2 = b2 : b2 = S2;
          else if (0 == v.mod(x2, b2)) S2 = b2;
          else {
            S2 = x2 / (f2 = Math.ceil(x2 / b2));
            var L3 = v.getGCD(x2, b2);
            x2 / L3 < a3 && (S2 = L3), b2 = S2;
          }
          f2 = Math.round(x2 / b2);
        } else {
          if (s2 || r3) {
            if (r3) if (d2) t4 = e3 - b2 * f2;
            else {
              var P3 = t4;
              t4 = b2 * Math.floor(t4 / b2), Math.abs(e3 - t4) / v.getGCD(x2, b2) > a3 && (t4 = e3 - b2 * g2, t4 += b2 * Math.floor((P3 - t4) / b2));
            }
            else if (s2) if (d2) e3 = t4 + b2 * f2;
            else {
              var M2 = e3;
              e3 = b2 * Math.ceil(e3 / b2), Math.abs(e3 - t4) / v.getGCD(x2, b2) > a3 && (e3 = t4 + b2 * g2, e3 += b2 * Math.ceil((M2 - e3) / b2));
            }
          } else if (h2.isMultipleYAxis && d2) {
            var I3 = b2 * Math.floor(t4 / b2), T2 = I3 + b2 * f2;
            T2 < e3 && (b2 *= 2), T2 = e3, e3 = (t4 = I3) + b2 * f2, x2 = Math.abs(e3 - t4), t4 > 0 && t4 < Math.abs(T2 - e3) && (t4 = 0, e3 = b2 * f2), e3 < 0 && -e3 < Math.abs(I3 - t4) && (e3 = 0, t4 = -b2 * f2);
          } else t4 = b2 * Math.floor(t4 / b2), e3 = b2 * Math.ceil(e3 / b2);
          x2 = Math.abs(e3 - t4), b2 = v.getGCD(x2, b2), f2 = Math.round(x2 / b2);
        }
        if (d2 || s2 || r3 || (f2 = Math.ceil((x2 - n2) / (b2 + n2))) > 16 && v.getPrimeFactors(f2).length < 2 && f2++, !d2 && i2.forceNiceScale && 0 === h2.yValueDecimal && f2 > x2 && (f2 = x2, b2 = Math.round(x2 / f2)), f2 > a3 && (!d2 && !c3 || i2.forceNiceScale)) {
          var z2 = v.getPrimeFactors(f2), X3 = z2.length - 1, E2 = f2;
          t: for (var Y2 = 0; Y2 < X3; Y2++) for (var F3 = 0; F3 <= X3 - Y2; F3++) {
            for (var R3 = Math.min(F3 + Y2, X3), D2 = E2, H2 = 1, O3 = F3; O3 <= R3; O3++) H2 *= z2[O3];
            if ((D2 /= H2) < a3) {
              E2 = D2;
              break t;
            }
          }
          b2 = E2 === f2 ? x2 : x2 / E2, f2 = Math.round(x2 / b2);
        }
        h2.isMultipleYAxis && 0 == h2.multiAxisTickAmount && h2.ignoreYAxisIndexes.indexOf(o3) < 0 && (h2.multiAxisTickAmount = f2);
        var N2 = t4 - b2, W2 = b2 * n2;
        do {
          N2 += b2, p2.push(v.stripNumber(N2, 7));
        } while (e3 - N2 > W2);
        return { result: p2, niceMin: p2[0], niceMax: p2[p2.length - 1] };
      } }, { key: "linearScale", value: function(t4, e3) {
        var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0, r3 = Math.abs(e3 - t4), o3 = [];
        if (t4 === e3) return { result: o3 = [t4], niceMin: o3[0], niceMax: o3[o3.length - 1] };
        "dataPoints" === (i2 = this._adjustTicksForSmallRange(i2, a3, r3)) && (i2 = this.w.globals.dataPoints - 1), s2 || (s2 = r3 / i2), s2 = Math.round(10 * (s2 + Number.EPSILON)) / 10, i2 === Number.MAX_VALUE && (i2 = 5, s2 = 1);
        for (var n2 = t4; i2 >= 0; ) o3.push(n2), n2 = v.preciseAddition(n2, s2), i2 -= 1;
        return { result: o3, niceMin: o3[0], niceMax: o3[o3.length - 1] };
      } }, { key: "logarithmicScaleNice", value: function(t4, e3, i2) {
        e3 <= 0 && (e3 = Math.max(t4, i2)), t4 <= 0 && (t4 = Math.min(e3, i2));
        for (var a3 = [], s2 = Math.ceil(Math.log(e3) / Math.log(i2) + 1), r3 = Math.floor(Math.log(t4) / Math.log(i2)); r3 < s2; r3++) a3.push(Math.pow(i2, r3));
        return { result: a3, niceMin: a3[0], niceMax: a3[a3.length - 1] };
      } }, { key: "logarithmicScale", value: function(t4, e3, i2) {
        e3 <= 0 && (e3 = Math.max(t4, i2)), t4 <= 0 && (t4 = Math.min(e3, i2));
        for (var a3 = [], s2 = Math.log(e3) / Math.log(i2), r3 = Math.log(t4) / Math.log(i2), o3 = s2 - r3, n2 = Math.round(o3), l2 = o3 / n2, h2 = 0, c3 = r3; h2 < n2; h2++, c3 += l2) a3.push(Math.pow(i2, c3));
        return a3.push(Math.pow(i2, s2)), { result: a3, niceMin: t4, niceMax: e3 };
      } }, { key: "_adjustTicksForSmallRange", value: function(t4, e3, i2) {
        var a3 = t4;
        if (void 0 !== e3 && this.w.config.yaxis[e3].labels.formatter && void 0 === this.w.config.yaxis[e3].tickAmount) {
          var s2 = Number(this.w.config.yaxis[e3].labels.formatter(1));
          v.isNumber(s2) && 0 === this.w.globals.yValueDecimal && (a3 = Math.ceil(i2));
        }
        return a3 < t4 ? a3 : t4;
      } }, { key: "setYScaleForIndex", value: function(t4, e3, i2) {
        var a3 = this.w.globals, s2 = this.w.config, r3 = a3.isBarHorizontal ? s2.xaxis : s2.yaxis[t4];
        void 0 === a3.yAxisScale[t4] && (a3.yAxisScale[t4] = []);
        var o3 = Math.abs(i2 - e3);
        r3.logarithmic && o3 <= 5 && (a3.invalidLogScale = true), r3.logarithmic && o3 > 5 ? (a3.allSeriesCollapsed = false, a3.yAxisScale[t4] = r3.forceNiceScale ? this.logarithmicScaleNice(e3, i2, r3.logBase) : this.logarithmicScale(e3, i2, r3.logBase)) : i2 !== -Number.MAX_VALUE && v.isNumber(i2) && e3 !== Number.MAX_VALUE && v.isNumber(e3) ? (a3.allSeriesCollapsed = false, a3.yAxisScale[t4] = this.niceScale(e3, i2, t4)) : a3.yAxisScale[t4] = this.niceScale(Number.MIN_VALUE, 0, t4);
      } }, { key: "setXScale", value: function(t4, e3) {
        var i2 = this.w, a3 = i2.globals, s2 = Math.abs(e3 - t4);
        if (e3 !== -Number.MAX_VALUE && v.isNumber(e3)) {
          var r3 = a3.xTickAmount + 1;
          s2 < 10 && s2 > 1 && (r3 = s2), a3.xAxisScale = this.linearScale(t4, e3, r3, 0, i2.config.xaxis.stepSize);
        } else a3.xAxisScale = this.linearScale(0, 10, 10);
        return a3.xAxisScale;
      } }, { key: "setSeriesYAxisMappings", value: function() {
        var t4 = this.w.globals, e3 = this.w.config, i2 = [], a3 = [], s2 = [], r3 = t4.series.length > e3.yaxis.length || e3.yaxis.some(function(t5) {
          return Array.isArray(t5.seriesName);
        });
        e3.series.forEach(function(t5, e4) {
          s2.push(e4), a3.push(null);
        }), e3.yaxis.forEach(function(t5, e4) {
          i2[e4] = [];
        });
        var o3 = [];
        e3.yaxis.forEach(function(t5, a4) {
          var n3 = false;
          if (t5.seriesName) {
            var l3 = [];
            Array.isArray(t5.seriesName) ? l3 = t5.seriesName : l3.push(t5.seriesName), l3.forEach(function(t6) {
              e3.series.forEach(function(e4, o4) {
                if (e4.name === t6) {
                  var l4 = o4;
                  a4 === o4 || r3 ? !r3 || s2.indexOf(o4) > -1 ? i2[a4].push([a4, o4]) : console.warn("Series '" + e4.name + "' referenced more than once in what looks like the new style. That is, when using either seriesName: [], or when there are more series than yaxes.") : (i2[o4].push([o4, a4]), l4 = a4), n3 = true, -1 !== (l4 = s2.indexOf(l4)) && s2.splice(l4, 1);
                }
              });
            });
          }
          n3 || o3.push(a4);
        }), i2 = i2.map(function(t5, e4) {
          var i3 = [];
          return t5.forEach(function(t6) {
            a3[t6[1]] = t6[0], i3.push(t6[1]);
          }), i3;
        });
        for (var n2 = e3.yaxis.length - 1, l2 = 0; l2 < o3.length && (n2 = o3[l2], i2[n2] = [], s2); l2++) {
          var h2 = s2[0];
          s2.shift(), i2[n2].push(h2), a3[h2] = n2;
        }
        s2.forEach(function(t5) {
          i2[n2].push(t5), a3[t5] = n2;
        }), t4.seriesYAxisMap = i2.map(function(t5) {
          return t5;
        }), t4.seriesYAxisReverseMap = a3.map(function(t5) {
          return t5;
        });
      } }, { key: "scaleMultipleYAxes", value: function() {
        var t4 = this, e3 = this.w.config, i2 = this.w.globals;
        this.setSeriesYAxisMappings();
        var a3 = i2.seriesYAxisMap, s2 = i2.minYArr, r3 = i2.maxYArr;
        i2.allSeriesCollapsed = true, i2.barGroups = [], a3.forEach(function(a4, o3) {
          var n2 = [];
          a4.forEach(function(t5) {
            var i3 = e3.series[t5].group;
            n2.indexOf(i3) < 0 && n2.push(i3);
          }), a4.length > 0 ? function() {
            var l2, h2, c3 = Number.MAX_VALUE, d2 = -Number.MAX_VALUE, g2 = c3, u2 = d2;
            if (e3.chart.stacked) !function() {
              var t5 = i2.seriesX[a4[0]], s3 = [], r4 = [], p3 = [];
              n2.forEach(function() {
                s3.push(t5.map(function() {
                  return Number.MIN_VALUE;
                })), r4.push(t5.map(function() {
                  return Number.MIN_VALUE;
                })), p3.push(t5.map(function() {
                  return Number.MIN_VALUE;
                }));
              });
              for (var f3 = function(t6) {
                !l2 && e3.series[a4[t6]].type && (l2 = e3.series[a4[t6]].type);
                var c4 = a4[t6];
                h2 = e3.series[c4].group ? e3.series[c4].group : "axis-".concat(o3), !(i2.collapsedSeriesIndices.indexOf(c4) < 0 && i2.ancillaryCollapsedSeriesIndices.indexOf(c4) < 0) || (i2.allSeriesCollapsed = false, n2.forEach(function(t7, a5) {
                  if (e3.series[c4].group === t7) for (var o4 = 0; o4 < i2.series[c4].length; o4++) {
                    var n3 = i2.series[c4][o4];
                    n3 >= 0 ? r4[a5][o4] += n3 : p3[a5][o4] += n3, s3[a5][o4] += n3, g2 = Math.min(g2, n3), u2 = Math.max(u2, n3);
                  }
                })), "bar" !== l2 && "column" !== l2 || i2.barGroups.push(h2);
              }, x2 = 0; x2 < a4.length; x2++) f3(x2);
              l2 || (l2 = e3.chart.type), "bar" === l2 || "column" === l2 ? n2.forEach(function(t6, e4) {
                c3 = Math.min(c3, Math.min.apply(null, p3[e4])), d2 = Math.max(d2, Math.max.apply(null, r4[e4]));
              }) : (n2.forEach(function(t6, e4) {
                g2 = Math.min(g2, Math.min.apply(null, s3[e4])), u2 = Math.max(u2, Math.max.apply(null, s3[e4]));
              }), c3 = g2, d2 = u2), c3 === Number.MIN_VALUE && d2 === Number.MIN_VALUE && (d2 = -Number.MAX_VALUE);
            }();
            else for (var p2 = 0; p2 < a4.length; p2++) {
              var f2 = a4[p2];
              c3 = Math.min(c3, s2[f2]), d2 = Math.max(d2, r3[f2]), !(i2.collapsedSeriesIndices.indexOf(f2) < 0 && i2.ancillaryCollapsedSeriesIndices.indexOf(f2) < 0) || (i2.allSeriesCollapsed = false);
            }
            void 0 !== e3.yaxis[o3].min && (c3 = "function" == typeof e3.yaxis[o3].min ? e3.yaxis[o3].min(c3) : e3.yaxis[o3].min), void 0 !== e3.yaxis[o3].max && (d2 = "function" == typeof e3.yaxis[o3].max ? e3.yaxis[o3].max(d2) : e3.yaxis[o3].max), i2.barGroups = i2.barGroups.filter(function(t5, e4, i3) {
              return i3.indexOf(t5) === e4;
            }), t4.setYScaleForIndex(o3, c3, d2), a4.forEach(function(t5) {
              s2[t5] = i2.yAxisScale[o3].niceMin, r3[t5] = i2.yAxisScale[o3].niceMax;
            });
          }() : t4.setYScaleForIndex(o3, 0, -Number.MAX_VALUE);
        });
      } }]), t3;
    }();
    var Z2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.scales = new q(e3);
      }
      return s(t3, [{ key: "init", value: function() {
        this.setYRange(), this.setXRange(), this.setZRange();
      } }, { key: "getMinYMaxY", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s2 = this.w.config, r3 = this.w.globals, o3 = -Number.MAX_VALUE, n2 = Number.MIN_VALUE;
        null === a3 && (a3 = t4 + 1);
        var l2 = r3.series, h2 = l2, c3 = l2;
        "candlestick" === s2.chart.type ? (h2 = r3.seriesCandleL, c3 = r3.seriesCandleH) : "boxPlot" === s2.chart.type ? (h2 = r3.seriesCandleO, c3 = r3.seriesCandleC) : r3.isRangeData && (h2 = r3.seriesRangeStart, c3 = r3.seriesRangeEnd);
        var d2 = false;
        if (r3.seriesX.length >= a3) {
          var g2, u2 = null === (g2 = r3.brushSource) || void 0 === g2 ? void 0 : g2.w.config.chart.brush;
          (s2.chart.zoom.enabled && s2.chart.zoom.autoScaleYaxis || null != u2 && u2.enabled && null != u2 && u2.autoScaleYaxis) && (d2 = true);
        }
        for (var p2 = t4; p2 < a3; p2++) {
          r3.dataPoints = Math.max(r3.dataPoints, l2[p2].length);
          var f2 = s2.series[p2].type;
          r3.categoryLabels.length && (r3.dataPoints = r3.categoryLabels.filter(function(t5) {
            return void 0 !== t5;
          }).length), r3.labels.length && "datetime" !== s2.xaxis.type && 0 !== r3.series.reduce(function(t5, e4) {
            return t5 + e4.length;
          }, 0) && (r3.dataPoints = Math.max(r3.dataPoints, r3.labels.length));
          var x2 = 0, b2 = l2[p2].length - 1;
          if (d2) {
            if (s2.xaxis.min) for (; x2 < b2 && r3.seriesX[p2][x2] < s2.xaxis.min; x2++) ;
            if (s2.xaxis.max) for (; b2 > x2 && r3.seriesX[p2][b2] > s2.xaxis.max; b2--) ;
          }
          for (var m2 = x2; m2 <= b2 && m2 < r3.series[p2].length; m2++) {
            var y3 = l2[p2][m2];
            if (null !== y3 && v.isNumber(y3)) {
              switch (void 0 !== c3[p2][m2] && (o3 = Math.max(o3, c3[p2][m2]), e3 = Math.min(e3, c3[p2][m2])), void 0 !== h2[p2][m2] && (e3 = Math.min(e3, h2[p2][m2]), i2 = Math.max(i2, h2[p2][m2])), f2) {
                case "candlestick":
                  void 0 !== r3.seriesCandleC[p2][m2] && (o3 = Math.max(o3, r3.seriesCandleH[p2][m2]), e3 = Math.min(e3, r3.seriesCandleL[p2][m2]));
                  break;
                case "boxPlot":
                  void 0 !== r3.seriesCandleC[p2][m2] && (o3 = Math.max(o3, r3.seriesCandleC[p2][m2]), e3 = Math.min(e3, r3.seriesCandleO[p2][m2]));
              }
              f2 && "candlestick" !== f2 && "boxPlot" !== f2 && "rangeArea" !== f2 && "rangeBar" !== f2 && (o3 = Math.max(o3, r3.series[p2][m2]), e3 = Math.min(e3, r3.series[p2][m2])), i2 = o3, r3.seriesGoals[p2] && r3.seriesGoals[p2][m2] && Array.isArray(r3.seriesGoals[p2][m2]) && r3.seriesGoals[p2][m2].forEach(function(t5) {
                n2 !== Number.MIN_VALUE && (n2 = Math.min(n2, t5.value), e3 = n2), o3 = Math.max(o3, t5.value), i2 = o3;
              }), v.isFloat(y3) && (y3 = v.noExponents(y3), r3.yValueDecimal = Math.max(r3.yValueDecimal, y3.toString().split(".")[1].length)), n2 > h2[p2][m2] && h2[p2][m2] < 0 && (n2 = h2[p2][m2]);
            } else r3.hasNullValues = true;
          }
          "bar" !== f2 && "column" !== f2 || (n2 < 0 && o3 < 0 && (o3 = 0, i2 = Math.max(i2, 0)), n2 === Number.MIN_VALUE && (n2 = 0, e3 = Math.min(e3, 0)));
        }
        return "rangeBar" === s2.chart.type && r3.seriesRangeStart.length && r3.isBarHorizontal && (n2 = e3), "bar" === s2.chart.type && (n2 < 0 && o3 < 0 && (o3 = 0), n2 === Number.MIN_VALUE && (n2 = 0)), { minY: n2, maxY: o3, lowestY: e3, highestY: i2 };
      } }, { key: "setYRange", value: function() {
        var t4 = this.w.globals, e3 = this.w.config;
        t4.maxY = -Number.MAX_VALUE, t4.minY = Number.MIN_VALUE;
        var i2, a3 = Number.MAX_VALUE;
        if (t4.isMultipleYAxis) {
          a3 = Number.MAX_VALUE;
          for (var s2 = 0; s2 < t4.series.length; s2++) i2 = this.getMinYMaxY(s2), t4.minYArr[s2] = i2.lowestY, t4.maxYArr[s2] = i2.highestY, a3 = Math.min(a3, i2.lowestY);
        }
        if (i2 = this.getMinYMaxY(0, a3, null, t4.series.length), "bar" === e3.chart.type ? (t4.minY = i2.minY, t4.maxY = i2.maxY) : (t4.minY = i2.lowestY, t4.maxY = i2.highestY), a3 = i2.lowestY, e3.chart.stacked && this._setStackedMinMax(), "line" === e3.chart.type || "area" === e3.chart.type || "scatter" === e3.chart.type || "candlestick" === e3.chart.type || "boxPlot" === e3.chart.type || "rangeBar" === e3.chart.type && !t4.isBarHorizontal ? t4.minY === Number.MIN_VALUE && a3 !== -Number.MAX_VALUE && a3 !== t4.maxY && (t4.minY = a3) : t4.minY = i2.minY, e3.yaxis.forEach(function(e4, i3) {
          void 0 !== e4.max && ("number" == typeof e4.max ? t4.maxYArr[i3] = e4.max : "function" == typeof e4.max && (t4.maxYArr[i3] = e4.max(t4.isMultipleYAxis ? t4.maxYArr[i3] : t4.maxY)), t4.maxY = t4.maxYArr[i3]), void 0 !== e4.min && ("number" == typeof e4.min ? t4.minYArr[i3] = e4.min : "function" == typeof e4.min && (t4.minYArr[i3] = e4.min(t4.isMultipleYAxis ? t4.minYArr[i3] === Number.MIN_VALUE ? 0 : t4.minYArr[i3] : t4.minY)), t4.minY = t4.minYArr[i3]);
        }), t4.isBarHorizontal) {
          ["min", "max"].forEach(function(i3) {
            void 0 !== e3.xaxis[i3] && "number" == typeof e3.xaxis[i3] && ("min" === i3 ? t4.minY = e3.xaxis[i3] : t4.maxY = e3.xaxis[i3]);
          });
        }
        return t4.isMultipleYAxis ? (this.scales.scaleMultipleYAxes(), t4.minY = a3) : (this.scales.setYScaleForIndex(0, t4.minY, t4.maxY), t4.minY = t4.yAxisScale[0].niceMin, t4.maxY = t4.yAxisScale[0].niceMax, t4.minYArr[0] = t4.minY, t4.maxYArr[0] = t4.maxY), t4.barGroups = [], t4.lineGroups = [], t4.areaGroups = [], e3.series.forEach(function(i3) {
          switch (i3.type || e3.chart.type) {
            case "bar":
            case "column":
              t4.barGroups.push(i3.group);
              break;
            case "line":
              t4.lineGroups.push(i3.group);
              break;
            case "area":
              t4.areaGroups.push(i3.group);
          }
        }), t4.barGroups = t4.barGroups.filter(function(t5, e4, i3) {
          return i3.indexOf(t5) === e4;
        }), t4.lineGroups = t4.lineGroups.filter(function(t5, e4, i3) {
          return i3.indexOf(t5) === e4;
        }), t4.areaGroups = t4.areaGroups.filter(function(t5, e4, i3) {
          return i3.indexOf(t5) === e4;
        }), { minY: t4.minY, maxY: t4.maxY, minYArr: t4.minYArr, maxYArr: t4.maxYArr, yAxisScale: t4.yAxisScale };
      } }, { key: "setXRange", value: function() {
        var t4 = this.w.globals, e3 = this.w.config, i2 = "numeric" === e3.xaxis.type || "datetime" === e3.xaxis.type || "category" === e3.xaxis.type && !t4.noLabelsProvided || t4.noLabelsProvided || t4.isXNumeric;
        if (t4.isXNumeric && function() {
          for (var e4 = 0; e4 < t4.series.length; e4++) if (t4.labels[e4]) for (var i3 = 0; i3 < t4.labels[e4].length; i3++) null !== t4.labels[e4][i3] && v.isNumber(t4.labels[e4][i3]) && (t4.maxX = Math.max(t4.maxX, t4.labels[e4][i3]), t4.initialMaxX = Math.max(t4.maxX, t4.labels[e4][i3]), t4.minX = Math.min(t4.minX, t4.labels[e4][i3]), t4.initialMinX = Math.min(t4.minX, t4.labels[e4][i3]));
        }(), t4.noLabelsProvided && 0 === e3.xaxis.categories.length && (t4.maxX = t4.labels[t4.labels.length - 1], t4.initialMaxX = t4.labels[t4.labels.length - 1], t4.minX = 1, t4.initialMinX = 1), t4.isXNumeric || t4.noLabelsProvided || t4.dataFormatXNumeric) {
          var a3 = 10;
          if (void 0 === e3.xaxis.tickAmount) a3 = Math.round(t4.svgWidth / 150), "numeric" === e3.xaxis.type && t4.dataPoints < 30 && (a3 = t4.dataPoints - 1), a3 > t4.dataPoints && 0 !== t4.dataPoints && (a3 = t4.dataPoints - 1);
          else if ("dataPoints" === e3.xaxis.tickAmount) {
            if (t4.series.length > 1 && (a3 = t4.series[t4.maxValsInArrayIndex].length - 1), t4.isXNumeric) {
              var s2 = t4.maxX - t4.minX;
              s2 < 30 && (a3 = s2 - 1);
            }
          } else a3 = e3.xaxis.tickAmount;
          if (t4.xTickAmount = a3, void 0 !== e3.xaxis.max && "number" == typeof e3.xaxis.max && (t4.maxX = e3.xaxis.max), void 0 !== e3.xaxis.min && "number" == typeof e3.xaxis.min && (t4.minX = e3.xaxis.min), void 0 !== e3.xaxis.range && (t4.minX = t4.maxX - e3.xaxis.range), t4.minX !== Number.MAX_VALUE && t4.maxX !== -Number.MAX_VALUE) if (e3.xaxis.convertedCatToNumeric && !t4.dataFormatXNumeric) {
            for (var r3 = [], o3 = t4.minX - 1; o3 < t4.maxX; o3++) r3.push(o3 + 1);
            t4.xAxisScale = { result: r3, niceMin: r3[0], niceMax: r3[r3.length - 1] };
          } else t4.xAxisScale = this.scales.setXScale(t4.minX, t4.maxX);
          else t4.xAxisScale = this.scales.linearScale(0, a3, a3, 0, e3.xaxis.stepSize), t4.noLabelsProvided && t4.labels.length > 0 && (t4.xAxisScale = this.scales.linearScale(1, t4.labels.length, a3 - 1, 0, e3.xaxis.stepSize), t4.seriesX = t4.labels.slice());
          i2 && (t4.labels = t4.xAxisScale.result.slice());
        }
        return t4.isBarHorizontal && t4.labels.length && (t4.xTickAmount = t4.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), { minX: t4.minX, maxX: t4.maxX };
      } }, { key: "setZRange", value: function() {
        var t4 = this.w.globals;
        if (t4.isDataXYZ) {
          for (var e3 = 0; e3 < t4.series.length; e3++) if (void 0 !== t4.seriesZ[e3]) for (var i2 = 0; i2 < t4.seriesZ[e3].length; i2++) null !== t4.seriesZ[e3][i2] && v.isNumber(t4.seriesZ[e3][i2]) && (t4.maxZ = Math.max(t4.maxZ, t4.seriesZ[e3][i2]), t4.minZ = Math.min(t4.minZ, t4.seriesZ[e3][i2]));
        }
      } }, { key: "_handleSingleDataPoint", value: function() {
        var t4 = this.w.globals, e3 = this.w.config;
        if (t4.minX === t4.maxX) {
          var i2 = new C2(this.ctx);
          if ("datetime" === e3.xaxis.type) {
            var a3 = i2.getDate(t4.minX);
            e3.xaxis.labels.datetimeUTC ? a3.setUTCDate(a3.getUTCDate() - 2) : a3.setDate(a3.getDate() - 2), t4.minX = new Date(a3).getTime();
            var s2 = i2.getDate(t4.maxX);
            e3.xaxis.labels.datetimeUTC ? s2.setUTCDate(s2.getUTCDate() + 2) : s2.setDate(s2.getDate() + 2), t4.maxX = new Date(s2).getTime();
          } else ("numeric" === e3.xaxis.type || "category" === e3.xaxis.type && !t4.noLabelsProvided) && (t4.minX = t4.minX - 2, t4.initialMinX = t4.minX, t4.maxX = t4.maxX + 2, t4.initialMaxX = t4.maxX);
        }
      } }, { key: "_getMinXDiff", value: function() {
        var t4 = this.w.globals;
        t4.isXNumeric && t4.seriesX.forEach(function(e3, i2) {
          1 === e3.length && e3.push(t4.seriesX[t4.maxValsInArrayIndex][t4.seriesX[t4.maxValsInArrayIndex].length - 1]);
          var a3 = e3.slice();
          a3.sort(function(t5, e4) {
            return t5 - e4;
          }), a3.forEach(function(e4, i3) {
            if (i3 > 0) {
              var s2 = e4 - a3[i3 - 1];
              s2 > 0 && (t4.minXDiff = Math.min(s2, t4.minXDiff));
            }
          }), 1 !== t4.dataPoints && t4.minXDiff !== Number.MAX_VALUE || (t4.minXDiff = 0.5);
        });
      } }, { key: "_setStackedMinMax", value: function() {
        var t4 = this, e3 = this.w.globals;
        if (e3.series.length) {
          var i2 = e3.seriesGroups;
          i2.length || (i2 = [this.w.globals.seriesNames.map(function(t5) {
            return t5;
          })]);
          var a3 = {}, s2 = {};
          i2.forEach(function(i3) {
            a3[i3] = [], s2[i3] = [], t4.w.config.series.map(function(t5, a4) {
              return i3.indexOf(e3.seriesNames[a4]) > -1 ? a4 : null;
            }).filter(function(t5) {
              return null !== t5;
            }).forEach(function(r3) {
              for (var o3 = 0; o3 < e3.series[e3.maxValsInArrayIndex].length; o3++) {
                var n2, l2, h2, c3;
                void 0 === a3[i3][o3] && (a3[i3][o3] = 0, s2[i3][o3] = 0), (t4.w.config.chart.stacked && !e3.comboCharts || t4.w.config.chart.stacked && e3.comboCharts && (!t4.w.config.chart.stackOnlyBar || "bar" === (null === (n2 = t4.w.config.series) || void 0 === n2 || null === (l2 = n2[r3]) || void 0 === l2 ? void 0 : l2.type) || "column" === (null === (h2 = t4.w.config.series) || void 0 === h2 || null === (c3 = h2[r3]) || void 0 === c3 ? void 0 : c3.type))) && null !== e3.series[r3][o3] && v.isNumber(e3.series[r3][o3]) && (e3.series[r3][o3] > 0 ? a3[i3][o3] += parseFloat(e3.series[r3][o3]) + 1e-4 : s2[i3][o3] += parseFloat(e3.series[r3][o3]));
              }
            });
          }), Object.entries(a3).forEach(function(t5) {
            var i3 = u(t5, 1)[0];
            a3[i3].forEach(function(t6, r3) {
              e3.maxY = Math.max(e3.maxY, a3[i3][r3]), e3.minY = Math.min(e3.minY, s2[i3][r3]);
            });
          });
        }
      } }]), t3;
    }();
    var $ = function() {
      function t3(e3, a3) {
        i(this, t3), this.ctx = e3, this.elgrid = a3, this.w = e3.w;
        var s2 = this.w;
        this.xaxisFontSize = s2.config.xaxis.labels.style.fontSize, this.axisFontFamily = s2.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s2.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = "bar" === s2.config.chart.type && s2.config.plotOptions.bar.horizontal, this.xAxisoffX = 0, "bottom" === s2.config.xaxis.position && (this.xAxisoffX = s2.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new P2(e3);
      }
      return s(t3, [{ key: "drawYaxis", value: function(t4) {
        var e3 = this, i2 = this.w, a3 = new w(this.ctx), s2 = i2.config.yaxis[t4].labels.style, r3 = s2.fontSize, o3 = s2.fontFamily, n2 = s2.fontWeight, l2 = a3.group({ class: "apexcharts-yaxis", rel: t4, transform: "translate(" + i2.globals.translateYAxisX[t4] + ", 0)" });
        if (this.axesUtils.isYAxisHidden(t4)) return l2;
        var h2 = a3.group({ class: "apexcharts-yaxis-texts-g" });
        l2.add(h2);
        var c3 = i2.globals.yAxisScale[t4].result.length - 1, d2 = i2.globals.gridHeight / c3, g2 = i2.globals.yLabelFormatters[t4], u2 = i2.globals.yAxisScale[t4].result.slice();
        u2 = this.axesUtils.checkForReversedLabels(t4, u2);
        var p2 = "";
        if (i2.config.yaxis[t4].labels.show) {
          var f2 = i2.globals.translateY + i2.config.yaxis[t4].labels.offsetY;
          i2.globals.isBarHorizontal ? f2 = 0 : "heatmap" === i2.config.chart.type && (f2 -= d2 / 2), f2 += parseInt(i2.config.yaxis[t4].labels.style.fontSize, 10) / 3;
          for (var x2 = function(l3) {
            var x3 = u2[l3];
            x3 = g2(x3, l3, i2);
            var b3 = i2.config.yaxis[t4].labels.padding;
            i2.config.yaxis[t4].opposite && 0 !== i2.config.yaxis.length && (b3 *= -1);
            var m3 = "end";
            i2.config.yaxis[t4].opposite && (m3 = "start"), "left" === i2.config.yaxis[t4].labels.align ? m3 = "start" : "center" === i2.config.yaxis[t4].labels.align ? m3 = "middle" : "right" === i2.config.yaxis[t4].labels.align && (m3 = "end");
            var y4 = e3.axesUtils.getYAxisForeColor(s2.colors, t4), w2 = v.listToArray(i2.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(t4, "'] .apexcharts-yaxis-label tspan"))).map(function(t5) {
              return t5.textContent;
            }), k3 = a3.drawText({ x: b3, y: f2, text: w2.indexOf(x3) >= 0 ? "" : x3, textAnchor: m3, fontSize: r3, fontFamily: o3, fontWeight: n2, maxWidth: i2.config.yaxis[t4].labels.maxWidth, foreColor: Array.isArray(y4) ? y4[l3] : y4, isPlainText: false, cssClass: "apexcharts-yaxis-label " + s2.cssClass });
            l3 === c3 && (p2 = k3), h2.add(k3);
            var A3 = document.createElementNS(i2.globals.SVGNS, "title");
            if (A3.textContent = Array.isArray(x3) ? x3.join(" ") : x3, k3.node.appendChild(A3), 0 !== i2.config.yaxis[t4].labels.rotate) {
              var S3 = a3.rotateAroundCenter(p2.node), C4 = a3.rotateAroundCenter(k3.node);
              k3.node.setAttribute("transform", "rotate(".concat(i2.config.yaxis[t4].labels.rotate, " ").concat(S3.x, " ").concat(C4.y, ")"));
            }
            f2 += d2;
          }, b2 = c3; b2 >= 0; b2--) x2(b2);
        }
        if (void 0 !== i2.config.yaxis[t4].title.text) {
          var m2 = a3.group({ class: "apexcharts-yaxis-title" }), y3 = 0;
          i2.config.yaxis[t4].opposite && (y3 = i2.globals.translateYAxisX[t4]);
          var k2 = a3.drawText({ x: y3, y: i2.globals.gridHeight / 2 + i2.globals.translateY + i2.config.yaxis[t4].title.offsetY, text: i2.config.yaxis[t4].title.text, textAnchor: "end", foreColor: i2.config.yaxis[t4].title.style.color, fontSize: i2.config.yaxis[t4].title.style.fontSize, fontWeight: i2.config.yaxis[t4].title.style.fontWeight, fontFamily: i2.config.yaxis[t4].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text " + i2.config.yaxis[t4].title.style.cssClass });
          m2.add(k2), l2.add(m2);
        }
        var A2 = i2.config.yaxis[t4].axisBorder, S2 = 31 + A2.offsetX;
        if (i2.config.yaxis[t4].opposite && (S2 = -31 - A2.offsetX), A2.show) {
          var C3 = a3.drawLine(S2, i2.globals.translateY + A2.offsetY - 2, S2, i2.globals.gridHeight + i2.globals.translateY + A2.offsetY + 2, A2.color, 0, A2.width);
          l2.add(C3);
        }
        return i2.config.yaxis[t4].axisTicks.show && this.axesUtils.drawYAxisTicks(S2, c3, A2, i2.config.yaxis[t4].axisTicks, t4, d2, l2), l2;
      } }, { key: "drawYaxisInversed", value: function(t4) {
        var e3 = this.w, i2 = new w(this.ctx), a3 = i2.group({ class: "apexcharts-xaxis apexcharts-yaxis-inversed" }), s2 = i2.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(e3.globals.translateXAxisX, ", ").concat(e3.globals.translateXAxisY, ")") });
        a3.add(s2);
        var r3 = e3.globals.yAxisScale[t4].result.length - 1, o3 = e3.globals.gridWidth / r3 + 0.1, n2 = o3 + e3.config.xaxis.labels.offsetX, l2 = e3.globals.xLabelFormatter, h2 = e3.globals.yAxisScale[t4].result.slice(), c3 = e3.globals.timescaleLabels;
        c3.length > 0 && (this.xaxisLabels = c3.slice(), r3 = (h2 = c3.slice()).length), h2 = this.axesUtils.checkForReversedLabels(t4, h2);
        var d2 = c3.length;
        if (e3.config.xaxis.labels.show) for (var g2 = d2 ? 0 : r3; d2 ? g2 < d2 : g2 >= 0; d2 ? g2++ : g2--) {
          var u2 = h2[g2];
          u2 = l2(u2, g2, e3);
          var p2 = e3.globals.gridWidth + e3.globals.padHorizontal - (n2 - o3 + e3.config.xaxis.labels.offsetX);
          if (c3.length) {
            var f2 = this.axesUtils.getLabel(h2, c3, p2, g2, this.drawnLabels, this.xaxisFontSize);
            p2 = f2.x, u2 = f2.text, this.drawnLabels.push(f2.text), 0 === g2 && e3.globals.skipFirstTimelinelabel && (u2 = ""), g2 === h2.length - 1 && e3.globals.skipLastTimelinelabel && (u2 = "");
          }
          var x2 = i2.drawText({ x: p2, y: this.xAxisoffX + e3.config.xaxis.labels.offsetY + 30 - ("top" === e3.config.xaxis.position ? e3.globals.xAxisHeight + e3.config.xaxis.axisTicks.height - 2 : 0), text: u2, textAnchor: "middle", foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t4] : this.xaxisForeColors, fontSize: this.xaxisFontSize, fontFamily: this.xaxisFontFamily, fontWeight: e3.config.xaxis.labels.style.fontWeight, isPlainText: false, cssClass: "apexcharts-xaxis-label " + e3.config.xaxis.labels.style.cssClass });
          s2.add(x2), x2.tspan(u2);
          var b2 = document.createElementNS(e3.globals.SVGNS, "title");
          b2.textContent = u2, x2.node.appendChild(b2), n2 += o3;
        }
        return this.inversedYAxisTitleText(a3), this.inversedYAxisBorder(a3), a3;
      } }, { key: "inversedYAxisBorder", value: function(t4) {
        var e3 = this.w, i2 = new w(this.ctx), a3 = e3.config.xaxis.axisBorder;
        if (a3.show) {
          var s2 = 0;
          "bar" === e3.config.chart.type && e3.globals.isXNumeric && (s2 -= 15);
          var r3 = i2.drawLine(e3.globals.padHorizontal + s2 + a3.offsetX, this.xAxisoffX, e3.globals.gridWidth, this.xAxisoffX, a3.color, 0, a3.height);
          this.elgrid && this.elgrid.elGridBorders && e3.config.grid.show ? this.elgrid.elGridBorders.add(r3) : t4.add(r3);
        }
      } }, { key: "inversedYAxisTitleText", value: function(t4) {
        var e3 = this.w, i2 = new w(this.ctx);
        if (void 0 !== e3.config.xaxis.title.text) {
          var a3 = i2.group({ class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed" }), s2 = i2.drawText({ x: e3.globals.gridWidth / 2 + e3.config.xaxis.title.offsetX, y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e3.config.xaxis.title.style.fontSize) + e3.config.xaxis.title.offsetY + 20, text: e3.config.xaxis.title.text, textAnchor: "middle", fontSize: e3.config.xaxis.title.style.fontSize, fontFamily: e3.config.xaxis.title.style.fontFamily, fontWeight: e3.config.xaxis.title.style.fontWeight, foreColor: e3.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text " + e3.config.xaxis.title.style.cssClass });
          a3.add(s2), t4.add(a3);
        }
      } }, { key: "yAxisTitleRotate", value: function(t4, e3) {
        var i2 = this.w, a3 = new w(this.ctx), s2 = { width: 0, height: 0 }, r3 = { width: 0, height: 0 }, o3 = i2.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(t4, "'] .apexcharts-yaxis-texts-g"));
        null !== o3 && (s2 = o3.getBoundingClientRect());
        var n2 = i2.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t4, "'] .apexcharts-yaxis-title text"));
        if (null !== n2 && (r3 = n2.getBoundingClientRect()), null !== n2) {
          var l2 = this.xPaddingForYAxisTitle(t4, s2, r3, e3);
          n2.setAttribute("x", l2.xPos - (e3 ? 10 : 0));
        }
        if (null !== n2) {
          var h2 = a3.rotateAroundCenter(n2);
          n2.setAttribute("transform", "rotate(".concat(e3 ? -1 * i2.config.yaxis[t4].title.rotate : i2.config.yaxis[t4].title.rotate, " ").concat(h2.x, " ").concat(h2.y, ")"));
        }
      } }, { key: "xPaddingForYAxisTitle", value: function(t4, e3, i2, a3) {
        var s2 = this.w, r3 = 0, o3 = 0, n2 = 10;
        return void 0 === s2.config.yaxis[t4].title.text || t4 < 0 ? { xPos: o3, padd: 0 } : (a3 ? (o3 = e3.width + s2.config.yaxis[t4].title.offsetX + i2.width / 2 + n2 / 2, 0 === (r3 += 1) && (o3 -= n2 / 2)) : (o3 = -1 * e3.width + s2.config.yaxis[t4].title.offsetX + n2 / 2 + i2.width / 2, s2.globals.isBarHorizontal && (n2 = 25, o3 = -1 * e3.width - s2.config.yaxis[t4].title.offsetX - n2)), { xPos: o3, padd: n2 });
      } }, { key: "setYAxisXPosition", value: function(t4, e3) {
        var i2 = this.w, a3 = 0, s2 = 0, r3 = 18, o3 = 1;
        i2.config.yaxis.length > 1 && (this.multipleYs = true), i2.config.yaxis.map(function(n2, l2) {
          var h2 = i2.globals.ignoreYAxisIndexes.indexOf(l2) > -1 || !n2.show || n2.floating || 0 === t4[l2].width, c3 = t4[l2].width + e3[l2].width;
          n2.opposite ? i2.globals.isBarHorizontal ? (s2 = i2.globals.gridWidth + i2.globals.translateX - 1, i2.globals.translateYAxisX[l2] = s2 - n2.labels.offsetX) : (s2 = i2.globals.gridWidth + i2.globals.translateX + o3, h2 || (o3 = o3 + c3 + 20), i2.globals.translateYAxisX[l2] = s2 - n2.labels.offsetX + 20) : (a3 = i2.globals.translateX - r3, h2 || (r3 = r3 + c3 + 20), i2.globals.translateYAxisX[l2] = a3 + n2.labels.offsetX);
        });
      } }, { key: "setYAxisTextAlignments", value: function() {
        var t4 = this.w, e3 = t4.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");
        (e3 = v.listToArray(e3)).forEach(function(e4, i2) {
          var a3 = t4.config.yaxis[i2];
          if (a3 && !a3.floating && void 0 !== a3.labels.align) {
            var s2 = t4.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(i2, "'] .apexcharts-yaxis-texts-g")), r3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(i2, "'] .apexcharts-yaxis-label"));
            r3 = v.listToArray(r3);
            var o3 = s2.getBoundingClientRect();
            "left" === a3.labels.align ? (r3.forEach(function(t5, e5) {
              t5.setAttribute("text-anchor", "start");
            }), a3.opposite || s2.setAttribute("transform", "translate(-".concat(o3.width, ", 0)"))) : "center" === a3.labels.align ? (r3.forEach(function(t5, e5) {
              t5.setAttribute("text-anchor", "middle");
            }), s2.setAttribute("transform", "translate(".concat(o3.width / 2 * (a3.opposite ? 1 : -1), ", 0)"))) : "right" === a3.labels.align && (r3.forEach(function(t5, e5) {
              t5.setAttribute("text-anchor", "end");
            }), a3.opposite && s2.setAttribute("transform", "translate(".concat(o3.width, ", 0)")));
          }
        });
      } }]), t3;
    }();
    var J2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.documentEvent = v.bind(this.documentEvent, this);
      }
      return s(t3, [{ key: "addEventListener", value: function(t4, e3) {
        var i2 = this.w;
        i2.globals.events.hasOwnProperty(t4) ? i2.globals.events[t4].push(e3) : i2.globals.events[t4] = [e3];
      } }, { key: "removeEventListener", value: function(t4, e3) {
        var i2 = this.w;
        if (i2.globals.events.hasOwnProperty(t4)) {
          var a3 = i2.globals.events[t4].indexOf(e3);
          -1 !== a3 && i2.globals.events[t4].splice(a3, 1);
        }
      } }, { key: "fireEvent", value: function(t4, e3) {
        var i2 = this.w;
        if (i2.globals.events.hasOwnProperty(t4)) {
          e3 && e3.length || (e3 = []);
          for (var a3 = i2.globals.events[t4], s2 = a3.length, r3 = 0; r3 < s2; r3++) a3[r3].apply(null, e3);
        }
      } }, { key: "setupEventHandlers", value: function() {
        var t4 = this, e3 = this.w, i2 = this.ctx, a3 = e3.globals.dom.baseEl.querySelector(e3.globals.chartClass);
        this.ctx.eventList.forEach(function(t5) {
          a3.addEventListener(t5, function(t6) {
            var a4 = Object.assign({}, e3, { seriesIndex: e3.globals.axisCharts ? e3.globals.capturedSeriesIndex : 0, dataPointIndex: e3.globals.capturedDataPointIndex });
            "mousemove" === t6.type || "touchmove" === t6.type ? "function" == typeof e3.config.chart.events.mouseMove && e3.config.chart.events.mouseMove(t6, i2, a4) : "mouseleave" === t6.type || "touchleave" === t6.type ? "function" == typeof e3.config.chart.events.mouseLeave && e3.config.chart.events.mouseLeave(t6, i2, a4) : ("mouseup" === t6.type && 1 === t6.which || "touchend" === t6.type) && ("function" == typeof e3.config.chart.events.click && e3.config.chart.events.click(t6, i2, a4), i2.ctx.events.fireEvent("click", [t6, i2, a4]));
          }, { capture: false, passive: true });
        }), this.ctx.eventList.forEach(function(i3) {
          e3.globals.dom.baseEl.addEventListener(i3, t4.documentEvent, { passive: true });
        }), this.ctx.core.setupBrushHandler();
      } }, { key: "documentEvent", value: function(t4) {
        var e3 = this.w, i2 = t4.target.className;
        if ("click" === t4.type) {
          var a3 = e3.globals.dom.baseEl.querySelector(".apexcharts-menu");
          a3 && a3.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== i2 && a3.classList.remove("apexcharts-menu-open");
        }
        e3.globals.clientX = "touchmove" === t4.type ? t4.touches[0].clientX : t4.clientX, e3.globals.clientY = "touchmove" === t4.type ? t4.touches[0].clientY : t4.clientY;
      } }]), t3;
    }();
    var Q2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "setCurrentLocaleValues", value: function(t4) {
        var e3 = this.w.config.chart.locales;
        window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e3 = this.w.config.chart.locales.concat(window.Apex.chart.locales));
        var i2 = e3.filter(function(e4) {
          return e4.name === t4;
        })[0];
        if (!i2) throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
        var a3 = v.extend(T, i2);
        this.w.globals.locale = a3.options;
      } }]), t3;
    }();
    var K2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "drawAxis", value: function(t4, e3) {
        var i2, a3, s2 = this, r3 = this.w.globals, o3 = this.w.config, n2 = new _(this.ctx, e3), l2 = new $(this.ctx, e3);
        r3.axisCharts && "radar" !== t4 && (r3.isBarHorizontal ? (a3 = l2.drawYaxisInversed(0), i2 = n2.drawXaxisInversed(0), r3.dom.elGraphical.add(i2), r3.dom.elGraphical.add(a3)) : (i2 = n2.drawXaxis(), r3.dom.elGraphical.add(i2), o3.yaxis.map(function(t5, e4) {
          if (-1 === r3.ignoreYAxisIndexes.indexOf(e4) && (a3 = l2.drawYaxis(e4), r3.dom.Paper.add(a3), "back" === s2.w.config.grid.position)) {
            var i3 = r3.dom.Paper.children()[1];
            i3.remove(), r3.dom.Paper.add(i3);
          }
        })));
      } }]), t3;
    }();
    var tt2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "drawXCrosshairs", value: function() {
        var t4 = this.w, e3 = new w(this.ctx), i2 = new y2(this.ctx), a3 = t4.config.xaxis.crosshairs.fill.gradient, s2 = t4.config.xaxis.crosshairs.dropShadow, r3 = t4.config.xaxis.crosshairs.fill.type, o3 = a3.colorFrom, n2 = a3.colorTo, l2 = a3.opacityFrom, h2 = a3.opacityTo, c3 = a3.stops, d2 = s2.enabled, g2 = s2.left, u2 = s2.top, p2 = s2.blur, f2 = s2.color, x2 = s2.opacity, b2 = t4.config.xaxis.crosshairs.fill.color;
        if (t4.config.xaxis.crosshairs.show) {
          "gradient" === r3 && (b2 = e3.drawGradient("vertical", o3, n2, l2, h2, null, c3, null));
          var m2 = e3.drawRect();
          1 === t4.config.xaxis.crosshairs.width && (m2 = e3.drawLine());
          var k2 = t4.globals.gridHeight;
          (!v.isNumber(k2) || k2 < 0) && (k2 = 0);
          var A2 = t4.config.xaxis.crosshairs.width;
          (!v.isNumber(A2) || A2 < 0) && (A2 = 0), m2.attr({ class: "apexcharts-xcrosshairs", x: 0, y: 0, y2: k2, width: A2, height: k2, fill: b2, filter: "none", "fill-opacity": t4.config.xaxis.crosshairs.opacity, stroke: t4.config.xaxis.crosshairs.stroke.color, "stroke-width": t4.config.xaxis.crosshairs.stroke.width, "stroke-dasharray": t4.config.xaxis.crosshairs.stroke.dashArray }), d2 && (m2 = i2.dropShadow(m2, { left: g2, top: u2, blur: p2, color: f2, opacity: x2 })), t4.globals.dom.elGraphical.add(m2);
        }
      } }, { key: "drawYCrosshairs", value: function() {
        var t4 = this.w, e3 = new w(this.ctx), i2 = t4.config.yaxis[0].crosshairs, a3 = t4.globals.barPadForNumericAxis;
        if (t4.config.yaxis[0].crosshairs.show) {
          var s2 = e3.drawLine(-a3, 0, t4.globals.gridWidth + a3, 0, i2.stroke.color, i2.stroke.dashArray, i2.stroke.width);
          s2.attr({ class: "apexcharts-ycrosshairs" }), t4.globals.dom.elGraphical.add(s2);
        }
        var r3 = e3.drawLine(-a3, 0, t4.globals.gridWidth + a3, 0, i2.stroke.color, 0, 0);
        r3.attr({ class: "apexcharts-ycrosshairs-hidden" }), t4.globals.dom.elGraphical.add(r3);
      } }]), t3;
    }();
    var et2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "checkResponsiveConfig", value: function(t4) {
        var e3 = this, i2 = this.w, a3 = i2.config;
        if (0 !== a3.responsive.length) {
          var s2 = a3.responsive.slice();
          s2.sort(function(t5, e4) {
            return t5.breakpoint > e4.breakpoint ? 1 : e4.breakpoint > t5.breakpoint ? -1 : 0;
          }).reverse();
          var r3 = new R2({}), o3 = function() {
            var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a4 = s2[0].breakpoint, o4 = window.innerWidth > 0 ? window.innerWidth : screen.width;
            if (o4 > a4) {
              var n3 = v.clone(i2.globals.initialConfig);
              n3.series = v.clone(i2.config.series);
              var l2 = k.extendArrayProps(r3, n3, i2);
              t5 = v.extend(l2, t5), t5 = v.extend(i2.config, t5), e3.overrideResponsiveOptions(t5);
            } else for (var h2 = 0; h2 < s2.length; h2++) o4 < s2[h2].breakpoint && (t5 = k.extendArrayProps(r3, s2[h2].options, i2), t5 = v.extend(i2.config, t5), e3.overrideResponsiveOptions(t5));
          };
          if (t4) {
            var n2 = k.extendArrayProps(r3, t4, i2);
            n2 = v.extend(i2.config, n2), o3(n2 = v.extend(n2, t4));
          } else o3({});
        }
      } }, { key: "overrideResponsiveOptions", value: function(t4) {
        var e3 = new R2(t4).init({ responsiveOverride: true });
        this.w.config = e3;
      } }]), t3;
    }();
    var it2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.colors = [], this.w = e3.w;
        var a3 = this.w;
        this.isColorFn = false, this.isHeatmapDistributed = "treemap" === a3.config.chart.type && a3.config.plotOptions.treemap.distributed || "heatmap" === a3.config.chart.type && a3.config.plotOptions.heatmap.distributed, this.isBarDistributed = a3.config.plotOptions.bar.distributed && ("bar" === a3.config.chart.type || "rangeBar" === a3.config.chart.type);
      }
      return s(t3, [{ key: "init", value: function() {
        this.setDefaultColors();
      } }, { key: "setDefaultColors", value: function() {
        var t4, e3 = this, i2 = this.w, a3 = new v();
        if (i2.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(i2.config.theme.mode)), void 0 === i2.config.colors || 0 === (null === (t4 = i2.config.colors) || void 0 === t4 ? void 0 : t4.length) ? i2.globals.colors = this.predefined() : (i2.globals.colors = i2.config.colors, Array.isArray(i2.config.colors) && i2.config.colors.length > 0 && "function" == typeof i2.config.colors[0] && (i2.globals.colors = i2.config.series.map(function(t5, a4) {
          var s3 = i2.config.colors[a4];
          return s3 || (s3 = i2.config.colors[0]), "function" == typeof s3 ? (e3.isColorFn = true, s3({ value: i2.globals.axisCharts ? i2.globals.series[a4][0] ? i2.globals.series[a4][0] : 0 : i2.globals.series[a4], seriesIndex: a4, dataPointIndex: a4, w: i2 })) : s3;
        }))), i2.globals.seriesColors.map(function(t5, e4) {
          t5 && (i2.globals.colors[e4] = t5);
        }), i2.config.theme.monochrome.enabled) {
          var s2 = [], r3 = i2.globals.series.length;
          (this.isBarDistributed || this.isHeatmapDistributed) && (r3 = i2.globals.series[0].length * i2.globals.series.length);
          for (var o3 = i2.config.theme.monochrome.color, n2 = 1 / (r3 / i2.config.theme.monochrome.shadeIntensity), l2 = i2.config.theme.monochrome.shadeTo, h2 = 0, c3 = 0; c3 < r3; c3++) {
            var d2 = void 0;
            "dark" === l2 ? (d2 = a3.shadeColor(-1 * h2, o3), h2 += n2) : (d2 = a3.shadeColor(h2, o3), h2 += n2), s2.push(d2);
          }
          i2.globals.colors = s2.slice();
        }
        var g2 = i2.globals.colors.slice();
        this.pushExtraColors(i2.globals.colors);
        ["fill", "stroke"].forEach(function(t5) {
          void 0 === i2.config[t5].colors ? i2.globals[t5].colors = e3.isColorFn ? i2.config.colors : g2 : i2.globals[t5].colors = i2.config[t5].colors.slice(), e3.pushExtraColors(i2.globals[t5].colors);
        }), void 0 === i2.config.dataLabels.style.colors ? i2.globals.dataLabels.style.colors = g2 : i2.globals.dataLabels.style.colors = i2.config.dataLabels.style.colors.slice(), this.pushExtraColors(i2.globals.dataLabels.style.colors, 50), void 0 === i2.config.plotOptions.radar.polygons.fill.colors ? i2.globals.radarPolygons.fill.colors = ["dark" === i2.config.theme.mode ? "#424242" : "none"] : i2.globals.radarPolygons.fill.colors = i2.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(i2.globals.radarPolygons.fill.colors, 20), void 0 === i2.config.markers.colors ? i2.globals.markers.colors = g2 : i2.globals.markers.colors = i2.config.markers.colors.slice(), this.pushExtraColors(i2.globals.markers.colors);
      } }, { key: "pushExtraColors", value: function(t4, e3) {
        var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = this.w, s2 = e3 || a3.globals.series.length;
        if (null === i2 && (i2 = this.isBarDistributed || this.isHeatmapDistributed || "heatmap" === a3.config.chart.type && a3.config.plotOptions.heatmap.colorScale.inverse), i2 && a3.globals.series.length && (s2 = a3.globals.series[a3.globals.maxValsInArrayIndex].length * a3.globals.series.length), t4.length < s2) for (var r3 = s2 - t4.length, o3 = 0; o3 < r3; o3++) t4.push(t4[o3]);
      } }, { key: "updateThemeOptions", value: function(t4) {
        t4.chart = t4.chart || {}, t4.tooltip = t4.tooltip || {};
        var e3 = t4.theme.mode, i2 = "dark" === e3 ? "palette4" : "light" === e3 ? "palette1" : t4.theme.palette || "palette1", a3 = "dark" === e3 ? "#f6f7f8" : "light" === e3 ? "#373d3f" : t4.chart.foreColor || "#373d3f";
        return t4.tooltip.theme = e3 || "light", t4.chart.foreColor = a3, t4.theme.palette = i2, t4;
      } }, { key: "predefined", value: function() {
        switch (this.w.config.theme.palette) {
          case "palette1":
          default:
            this.colors = ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"];
            break;
          case "palette2":
            this.colors = ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"];
            break;
          case "palette3":
            this.colors = ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"];
            break;
          case "palette4":
            this.colors = ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"];
            break;
          case "palette5":
            this.colors = ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"];
            break;
          case "palette6":
            this.colors = ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"];
            break;
          case "palette7":
            this.colors = ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"];
            break;
          case "palette8":
            this.colors = ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"];
            break;
          case "palette9":
            this.colors = ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"];
            break;
          case "palette10":
            this.colors = ["#A300D6", "#7D02EB", "#5653FE", "#2983FF", "#00B1F2"];
        }
        return this.colors;
      } }]), t3;
    }();
    var at2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "draw", value: function() {
        this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
      } }, { key: "drawTitleSubtitle", value: function(t4) {
        var e3 = this.w, i2 = "title" === t4 ? e3.config.title : e3.config.subtitle, a3 = e3.globals.svgWidth / 2, s2 = i2.offsetY, r3 = "middle";
        if ("left" === i2.align ? (a3 = 10, r3 = "start") : "right" === i2.align && (a3 = e3.globals.svgWidth - 10, r3 = "end"), a3 += i2.offsetX, s2 = s2 + parseInt(i2.style.fontSize, 10) + i2.margin / 2, void 0 !== i2.text) {
          var o3 = new w(this.ctx).drawText({ x: a3, y: s2, text: i2.text, textAnchor: r3, fontSize: i2.style.fontSize, fontFamily: i2.style.fontFamily, fontWeight: i2.style.fontWeight, foreColor: i2.style.color, opacity: 1 });
          o3.node.setAttribute("class", "apexcharts-".concat(t4, "-text")), e3.globals.dom.Paper.add(o3);
        }
      } }]), t3;
    }();
    var st2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.dCtx = e3;
      }
      return s(t3, [{ key: "getTitleSubtitleCoords", value: function(t4) {
        var e3 = this.w, i2 = 0, a3 = 0, s2 = "title" === t4 ? e3.config.title.floating : e3.config.subtitle.floating, r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-".concat(t4, "-text"));
        if (null !== r3 && !s2) {
          var o3 = r3.getBoundingClientRect();
          i2 = o3.width, a3 = e3.globals.axisCharts ? o3.height + 5 : o3.height;
        }
        return { width: i2, height: a3 };
      } }, { key: "getLegendsRect", value: function() {
        var t4 = this.w, e3 = t4.globals.dom.elLegendWrap;
        t4.config.legend.height || "top" !== t4.config.legend.position && "bottom" !== t4.config.legend.position || (e3.style.maxHeight = t4.globals.svgHeight / 2 + "px");
        var i2 = Object.assign({}, v.getBoundingClientRect(e3));
        return null !== e3 && !t4.config.legend.floating && t4.config.legend.show ? this.dCtx.lgRect = { x: i2.x, y: i2.y, height: i2.height, width: 0 === i2.height ? 0 : i2.width } : this.dCtx.lgRect = { x: 0, y: 0, height: 0, width: 0 }, "left" !== t4.config.legend.position && "right" !== t4.config.legend.position || 1.5 * this.dCtx.lgRect.width > t4.globals.svgWidth && (this.dCtx.lgRect.width = t4.globals.svgWidth / 1.5), this.dCtx.lgRect;
      } }, { key: "getDatalabelsRect", value: function() {
        var t4 = this, e3 = this.w, i2 = [];
        e3.config.series.forEach(function(s3, r4) {
          s3.data.forEach(function(s4, o4) {
            var n2;
            n2 = e3.globals.series[r4][o4], a3 = e3.config.dataLabels.formatter(n2, { ctx: t4.dCtx.ctx, seriesIndex: r4, dataPointIndex: o4, w: e3 }), i2.push(a3);
          });
        });
        var a3 = v.getLargestStringFromArr(i2), s2 = new w(this.dCtx.ctx), r3 = e3.config.dataLabels.style, o3 = s2.getTextRects(a3, parseInt(r3.fontSize), r3.fontFamily);
        return { width: 1.05 * o3.width, height: o3.height };
      } }, { key: "getLargestStringFromMultiArr", value: function(t4, e3) {
        var i2 = t4;
        if (this.w.globals.isMultiLineX) {
          var a3 = e3.map(function(t5, e4) {
            return Array.isArray(t5) ? t5.length : 1;
          }), s2 = Math.max.apply(Math, p(a3));
          i2 = e3[a3.indexOf(s2)];
        }
        return i2;
      } }]), t3;
    }();
    var rt2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.dCtx = e3;
      }
      return s(t3, [{ key: "getxAxisLabelsCoords", value: function() {
        var t4, e3 = this.w, i2 = e3.globals.labels.slice();
        if (e3.config.xaxis.convertedCatToNumeric && 0 === i2.length && (i2 = e3.globals.categoryLabels), e3.globals.timescaleLabels.length > 0) {
          var a3 = this.getxAxisTimeScaleLabelsCoords();
          t4 = { width: a3.width, height: a3.height }, e3.globals.rotateXLabels = false;
        } else {
          this.dCtx.lgWidthForSideLegends = "left" !== e3.config.legend.position && "right" !== e3.config.legend.position || e3.config.legend.floating ? 0 : this.dCtx.lgRect.width;
          var s2 = e3.globals.xLabelFormatter, r3 = v.getLargestStringFromArr(i2), o3 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r3, i2);
          e3.globals.isBarHorizontal && (o3 = r3 = e3.globals.yAxisScale[0].result.reduce(function(t5, e4) {
            return t5.length > e4.length ? t5 : e4;
          }, 0));
          var n2 = new L2(this.dCtx.ctx), l2 = r3;
          r3 = n2.xLabelFormat(s2, r3, l2, { i: void 0, dateFormatter: new C2(this.dCtx.ctx).formatDate, w: e3 }), o3 = n2.xLabelFormat(s2, o3, l2, { i: void 0, dateFormatter: new C2(this.dCtx.ctx).formatDate, w: e3 }), (e3.config.xaxis.convertedCatToNumeric && void 0 === r3 || "" === String(r3).trim()) && (o3 = r3 = "1");
          var h2 = new w(this.dCtx.ctx), c3 = h2.getTextRects(r3, e3.config.xaxis.labels.style.fontSize), d2 = c3;
          if (r3 !== o3 && (d2 = h2.getTextRects(o3, e3.config.xaxis.labels.style.fontSize)), (t4 = { width: c3.width >= d2.width ? c3.width : d2.width, height: c3.height >= d2.height ? c3.height : d2.height }).width * i2.length > e3.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e3.config.xaxis.labels.rotate || e3.config.xaxis.labels.rotateAlways) {
            if (!e3.globals.isBarHorizontal) {
              e3.globals.rotateXLabels = true;
              var g2 = function(t5) {
                return h2.getTextRects(t5, e3.config.xaxis.labels.style.fontSize, e3.config.xaxis.labels.style.fontFamily, "rotate(".concat(e3.config.xaxis.labels.rotate, " 0 0)"), false);
              };
              c3 = g2(r3), r3 !== o3 && (d2 = g2(o3)), t4.height = (c3.height > d2.height ? c3.height : d2.height) / 1.5, t4.width = c3.width > d2.width ? c3.width : d2.width;
            }
          } else e3.globals.rotateXLabels = false;
        }
        return e3.config.xaxis.labels.show || (t4 = { width: 0, height: 0 }), { width: t4.width, height: t4.height };
      } }, { key: "getxAxisGroupLabelsCoords", value: function() {
        var t4, e3 = this.w;
        if (!e3.globals.hasXaxisGroups) return { width: 0, height: 0 };
        var i2, a3 = (null === (t4 = e3.config.xaxis.group.style) || void 0 === t4 ? void 0 : t4.fontSize) || e3.config.xaxis.labels.style.fontSize, s2 = e3.globals.groups.map(function(t5) {
          return t5.title;
        }), r3 = v.getLargestStringFromArr(s2), o3 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r3, s2), n2 = new w(this.dCtx.ctx), l2 = n2.getTextRects(r3, a3), h2 = l2;
        return r3 !== o3 && (h2 = n2.getTextRects(o3, a3)), i2 = { width: l2.width >= h2.width ? l2.width : h2.width, height: l2.height >= h2.height ? l2.height : h2.height }, e3.config.xaxis.labels.show || (i2 = { width: 0, height: 0 }), { width: i2.width, height: i2.height };
      } }, { key: "getxAxisTitleCoords", value: function() {
        var t4 = this.w, e3 = 0, i2 = 0;
        if (void 0 !== t4.config.xaxis.title.text) {
          var a3 = new w(this.dCtx.ctx).getTextRects(t4.config.xaxis.title.text, t4.config.xaxis.title.style.fontSize);
          e3 = a3.width, i2 = a3.height;
        }
        return { width: e3, height: i2 };
      } }, { key: "getxAxisTimeScaleLabelsCoords", value: function() {
        var t4, e3 = this.w;
        this.dCtx.timescaleLabels = e3.globals.timescaleLabels.slice();
        var i2 = this.dCtx.timescaleLabels.map(function(t5) {
          return t5.value;
        }), a3 = i2.reduce(function(t5, e4) {
          return void 0 === t5 ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t5.length > e4.length ? t5 : e4;
        }, 0);
        return 1.05 * (t4 = new w(this.dCtx.ctx).getTextRects(a3, e3.config.xaxis.labels.style.fontSize)).width * i2.length > e3.globals.gridWidth && 0 !== e3.config.xaxis.labels.rotate && (e3.globals.overlappingXLabels = true), t4;
      } }, { key: "additionalPaddingXLabels", value: function(t4) {
        var e3 = this, i2 = this.w, a3 = i2.globals, s2 = i2.config, r3 = s2.xaxis.type, o3 = t4.width;
        a3.skipLastTimelinelabel = false, a3.skipFirstTimelinelabel = false;
        var n2 = i2.config.yaxis[0].opposite && i2.globals.isBarHorizontal, l2 = function(t5, n3) {
          s2.yaxis.length > 1 && function(t6) {
            return -1 !== a3.collapsedSeriesIndices.indexOf(t6);
          }(n3) || function(t6) {
            if (e3.dCtx.timescaleLabels && e3.dCtx.timescaleLabels.length) {
              var n4 = e3.dCtx.timescaleLabels[0], l3 = e3.dCtx.timescaleLabels[e3.dCtx.timescaleLabels.length - 1].position + o3 / 1.75 - e3.dCtx.yAxisWidthRight, h2 = n4.position - o3 / 1.75 + e3.dCtx.yAxisWidthLeft, c3 = "right" === i2.config.legend.position && e3.dCtx.lgRect.width > 0 ? e3.dCtx.lgRect.width : 0;
              l3 > a3.svgWidth - a3.translateX - c3 && (a3.skipLastTimelinelabel = true), h2 < -(t6.show && !t6.floating || "bar" !== s2.chart.type && "candlestick" !== s2.chart.type && "rangeBar" !== s2.chart.type && "boxPlot" !== s2.chart.type ? 10 : o3 / 1.75) && (a3.skipFirstTimelinelabel = true);
            } else "datetime" === r3 ? e3.dCtx.gridPad.right < o3 && !a3.rotateXLabels && (a3.skipLastTimelinelabel = true) : "datetime" !== r3 && e3.dCtx.gridPad.right < o3 / 2 - e3.dCtx.yAxisWidthRight && !a3.rotateXLabels && !i2.config.xaxis.labels.trim && (e3.dCtx.xPadRight = o3 / 2 + 1);
          }(t5);
        };
        s2.yaxis.forEach(function(t5, i3) {
          n2 ? (e3.dCtx.gridPad.left < o3 && (e3.dCtx.xPadLeft = o3 / 2 + 1), e3.dCtx.xPadRight = o3 / 2 + 1) : l2(t5, i3);
        });
      } }]), t3;
    }();
    var ot2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.dCtx = e3;
      }
      return s(t3, [{ key: "getyAxisLabelsCoords", value: function() {
        var t4 = this, e3 = this.w, i2 = [], a3 = 10, s2 = new P2(this.dCtx.ctx);
        return e3.config.yaxis.map(function(r3, o3) {
          var n2 = { seriesIndex: o3, dataPointIndex: -1, w: e3 }, l2 = e3.globals.yAxisScale[o3], h2 = 0;
          if (!s2.isYAxisHidden(o3) && r3.labels.show && void 0 !== r3.labels.minWidth && (h2 = r3.labels.minWidth), !s2.isYAxisHidden(o3) && r3.labels.show && l2.result.length) {
            var c3 = e3.globals.yLabelFormatters[o3], d2 = l2.niceMin === Number.MIN_VALUE ? 0 : l2.niceMin, g2 = l2.result.reduce(function(t5, e4) {
              var i3, a4;
              return (null === (i3 = String(c3(t5, n2))) || void 0 === i3 ? void 0 : i3.length) > (null === (a4 = String(c3(e4, n2))) || void 0 === a4 ? void 0 : a4.length) ? t5 : e4;
            }, d2), u2 = g2 = c3(g2, n2);
            if (void 0 !== g2 && 0 !== g2.length || (g2 = l2.niceMax), e3.globals.isBarHorizontal) {
              a3 = 0;
              var p2 = e3.globals.labels.slice();
              g2 = v.getLargestStringFromArr(p2), g2 = c3(g2, { seriesIndex: o3, dataPointIndex: -1, w: e3 }), u2 = t4.dCtx.dimHelpers.getLargestStringFromMultiArr(g2, p2);
            }
            var f2 = new w(t4.dCtx.ctx), x2 = "rotate(".concat(r3.labels.rotate, " 0 0)"), b2 = f2.getTextRects(g2, r3.labels.style.fontSize, r3.labels.style.fontFamily, x2, false), m2 = b2;
            g2 !== u2 && (m2 = f2.getTextRects(u2, r3.labels.style.fontSize, r3.labels.style.fontFamily, x2, false)), i2.push({ width: (h2 > m2.width || h2 > b2.width ? h2 : m2.width > b2.width ? m2.width : b2.width) + a3, height: m2.height > b2.height ? m2.height : b2.height });
          } else i2.push({ width: 0, height: 0 });
        }), i2;
      } }, { key: "getyAxisTitleCoords", value: function() {
        var t4 = this, e3 = this.w, i2 = [];
        return e3.config.yaxis.map(function(e4, a3) {
          if (e4.show && void 0 !== e4.title.text) {
            var s2 = new w(t4.dCtx.ctx), r3 = "rotate(".concat(e4.title.rotate, " 0 0)"), o3 = s2.getTextRects(e4.title.text, e4.title.style.fontSize, e4.title.style.fontFamily, r3, false);
            i2.push({ width: o3.width, height: o3.height });
          } else i2.push({ width: 0, height: 0 });
        }), i2;
      } }, { key: "getTotalYAxisWidth", value: function() {
        var t4 = this.w, e3 = 0, i2 = 0, a3 = 0, s2 = t4.globals.yAxisScale.length > 1 ? 10 : 0, r3 = new P2(this.dCtx.ctx), o3 = function(o4, n2) {
          var l2 = t4.config.yaxis[n2].floating, h2 = 0;
          o4.width > 0 && !l2 ? (h2 = o4.width + s2, function(e4) {
            return t4.globals.ignoreYAxisIndexes.indexOf(e4) > -1;
          }(n2) && (h2 = h2 - o4.width - s2)) : h2 = l2 || r3.isYAxisHidden(n2) ? 0 : 5, t4.config.yaxis[n2].opposite ? a3 += h2 : i2 += h2, e3 += h2;
        };
        return t4.globals.yLabelsCoords.map(function(t5, e4) {
          o3(t5, e4);
        }), t4.globals.yTitleCoords.map(function(t5, e4) {
          o3(t5, e4);
        }), t4.globals.isBarHorizontal && !t4.config.yaxis[0].floating && (e3 = t4.globals.yLabelsCoords[0].width + t4.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i2, this.dCtx.yAxisWidthRight = a3, e3;
      } }]), t3;
    }();
    var nt2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.dCtx = e3;
      }
      return s(t3, [{ key: "gridPadForColumnsInNumericAxis", value: function(t4) {
        var e3 = this.w, i2 = e3.config, a3 = e3.globals;
        if (a3.noData || a3.collapsedSeries.length + a3.ancillaryCollapsedSeries.length === i2.series.length) return 0;
        var s2 = function(t5) {
          return "bar" === t5 || "rangeBar" === t5 || "candlestick" === t5 || "boxPlot" === t5;
        }, r3 = i2.chart.type, o3 = 0, n2 = s2(r3) ? i2.series.length : 1;
        a3.comboBarCount > 0 && (n2 = a3.comboBarCount), a3.collapsedSeries.forEach(function(t5) {
          s2(t5.type) && (n2 -= 1);
        }), i2.chart.stacked && (n2 = 1);
        var l2 = s2(r3) || a3.comboBarCount > 0, h2 = Math.abs(a3.initialMaxX - a3.initialMinX);
        if (l2 && a3.isXNumeric && !a3.isBarHorizontal && n2 > 0 && 0 !== h2) {
          var c3, d2;
          h2 <= 3 && (h2 = a3.dataPoints), c3 = h2 / t4, a3.minXDiff && a3.minXDiff / c3 > 0 && (d2 = a3.minXDiff / c3), d2 > t4 / 2 && (d2 /= 2), (o3 = d2 * parseInt(i2.plotOptions.bar.columnWidth, 10) / 100) < 1 && (o3 = 1), a3.barPadForNumericAxis = o3;
        }
        return o3;
      } }, { key: "gridPadFortitleSubtitle", value: function() {
        var t4 = this, e3 = this.w, i2 = e3.globals, a3 = this.dCtx.isSparkline || !e3.globals.axisCharts ? 0 : 10;
        ["title", "subtitle"].forEach(function(i3) {
          void 0 !== e3.config[i3].text ? a3 += e3.config[i3].margin : a3 += t4.dCtx.isSparkline || !e3.globals.axisCharts ? 0 : 5;
        }), !e3.config.legend.show || "bottom" !== e3.config.legend.position || e3.config.legend.floating || e3.globals.axisCharts || (a3 += 10);
        var s2 = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"), r3 = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
        i2.gridHeight = i2.gridHeight - s2.height - r3.height - a3, i2.translateY = i2.translateY + s2.height + r3.height + a3;
      } }, { key: "setGridXPosForDualYAxis", value: function(t4, e3) {
        var i2 = this.w, a3 = new P2(this.dCtx.ctx);
        i2.config.yaxis.map(function(s2, r3) {
          -1 !== i2.globals.ignoreYAxisIndexes.indexOf(r3) || s2.floating || a3.isYAxisHidden(r3) || (s2.opposite && (i2.globals.translateX = i2.globals.translateX - (e3[r3].width + t4[r3].width) - parseInt(i2.config.yaxis[r3].labels.style.fontSize, 10) / 1.2 - 12), i2.globals.translateX < 2 && (i2.globals.translateX = 2));
        });
      } }]), t3;
    }();
    var lt2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new st2(this), this.dimYAxis = new ot2(this), this.dimXAxis = new rt2(this), this.dimGrid = new nt2(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;
      }
      return s(t3, [{ key: "plotCoords", value: function() {
        var t4 = this, e3 = this.w, i2 = e3.globals;
        this.lgRect = this.dimHelpers.getLegendsRect(), this.datalabelsCoords = { width: 0, height: 0 };
        var a3 = Array.isArray(e3.config.stroke.width) ? Math.max.apply(Math, p(e3.config.stroke.width)) : e3.config.stroke.width;
        this.isSparkline && ((e3.config.markers.discrete.length > 0 || e3.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function(e4) {
          var i3 = u(e4, 2), a4 = i3[0], s3 = i3[1];
          t4.gridPad[a4] = Math.max(s3, t4.w.globals.markers.largestSize / 1.5);
        }), this.gridPad.top = Math.max(a3 / 2, this.gridPad.top), this.gridPad.bottom = Math.max(a3 / 2, this.gridPad.bottom)), i2.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i2.gridHeight = i2.gridHeight - this.gridPad.top - this.gridPad.bottom, i2.gridWidth = i2.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
        var s2 = this.dimGrid.gridPadForColumnsInNumericAxis(i2.gridWidth);
        i2.gridWidth = i2.gridWidth - 2 * s2, i2.translateX = i2.translateX + this.gridPad.left + this.xPadLeft + (s2 > 0 ? s2 : 0), i2.translateY = i2.translateY + this.gridPad.top;
      } }, { key: "setDimensionsForAxisCharts", value: function() {
        var t4 = this, e3 = this.w, i2 = e3.globals, a3 = this.dimYAxis.getyAxisLabelsCoords(), s2 = this.dimYAxis.getyAxisTitleCoords();
        i2.isSlopeChart && (this.datalabelsCoords = this.dimHelpers.getDatalabelsRect()), e3.globals.yLabelsCoords = [], e3.globals.yTitleCoords = [], e3.config.yaxis.map(function(t5, i3) {
          e3.globals.yLabelsCoords.push({ width: a3[i3].width, index: i3 }), e3.globals.yTitleCoords.push({ width: s2[i3].width, index: i3 });
        }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
        var r3 = this.dimXAxis.getxAxisLabelsCoords(), o3 = this.dimXAxis.getxAxisGroupLabelsCoords(), n2 = this.dimXAxis.getxAxisTitleCoords();
        this.conditionalChecksForAxisCoords(r3, n2, o3), i2.translateXAxisY = e3.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i2.translateXAxisX = e3.globals.rotateXLabels && e3.globals.isXNumeric && e3.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e3.globals.isBarHorizontal && (i2.rotateXLabels = false, i2.translateXAxisY = parseInt(e3.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i2.translateXAxisY = i2.translateXAxisY + e3.config.xaxis.labels.offsetY, i2.translateXAxisX = i2.translateXAxisX + e3.config.xaxis.labels.offsetX;
        var l2 = this.yAxisWidth, h2 = this.xAxisHeight;
        i2.xAxisLabelsHeight = this.xAxisHeight - n2.height, i2.xAxisGroupLabelsHeight = i2.xAxisLabelsHeight - r3.height, i2.xAxisLabelsWidth = this.xAxisWidth, i2.xAxisHeight = this.xAxisHeight;
        var c3 = 10;
        ("radar" === e3.config.chart.type || this.isSparkline) && (l2 = 0, h2 = i2.goldenPadding), this.isSparkline && (this.lgRect = { height: 0, width: 0 }), (this.isSparkline || "treemap" === e3.config.chart.type) && (l2 = 0, h2 = 0, c3 = 0), this.isSparkline || "treemap" === e3.config.chart.type || this.dimXAxis.additionalPaddingXLabels(r3);
        var d2 = function() {
          i2.translateX = l2 + t4.datalabelsCoords.width, i2.gridHeight = i2.svgHeight - t4.lgRect.height - h2 - (t4.isSparkline || "treemap" === e3.config.chart.type ? 0 : e3.globals.rotateXLabels ? 10 : 15), i2.gridWidth = i2.svgWidth - l2 - 2 * t4.datalabelsCoords.width;
        };
        switch ("top" === e3.config.xaxis.position && (c3 = i2.xAxisHeight - e3.config.xaxis.axisTicks.height - 5), e3.config.legend.position) {
          case "bottom":
            i2.translateY = c3, d2();
            break;
          case "top":
            i2.translateY = this.lgRect.height + c3, d2();
            break;
          case "left":
            i2.translateY = c3, i2.translateX = this.lgRect.width + l2 + this.datalabelsCoords.width, i2.gridHeight = i2.svgHeight - h2 - 12, i2.gridWidth = i2.svgWidth - this.lgRect.width - l2 - 2 * this.datalabelsCoords.width;
            break;
          case "right":
            i2.translateY = c3, i2.translateX = l2 + this.datalabelsCoords.width, i2.gridHeight = i2.svgHeight - h2 - 12, i2.gridWidth = i2.svgWidth - this.lgRect.width - l2 - 2 * this.datalabelsCoords.width - 5;
            break;
          default:
            throw new Error("Legend position not supported");
        }
        this.dimGrid.setGridXPosForDualYAxis(s2, a3), new $(this.ctx).setYAxisXPosition(a3, s2);
      } }, { key: "setDimensionsForNonAxisCharts", value: function() {
        var t4 = this.w, e3 = t4.globals, i2 = t4.config, a3 = 0;
        t4.config.legend.show && !t4.config.legend.floating && (a3 = 20);
        var s2 = "pie" === i2.chart.type || "polarArea" === i2.chart.type || "donut" === i2.chart.type ? "pie" : "radialBar", r3 = i2.plotOptions[s2].offsetY, o3 = i2.plotOptions[s2].offsetX;
        if (!i2.legend.show || i2.legend.floating) {
          e3.gridHeight = e3.svgHeight - i2.grid.padding.top - i2.grid.padding.bottom;
          var n2 = e3.dom.elWrap.getBoundingClientRect().width;
          return e3.gridWidth = Math.min(n2, e3.gridHeight) - i2.grid.padding.left - i2.grid.padding.right, e3.translateY = r3, void (e3.translateX = o3 + (e3.svgWidth - e3.gridWidth) / 2);
        }
        switch (i2.legend.position) {
          case "bottom":
            e3.gridHeight = e3.svgHeight - this.lgRect.height - e3.goldenPadding, e3.gridWidth = e3.svgWidth, e3.translateY = r3 - 10, e3.translateX = o3 + (e3.svgWidth - e3.gridWidth) / 2;
            break;
          case "top":
            e3.gridHeight = e3.svgHeight - this.lgRect.height - e3.goldenPadding, e3.gridWidth = e3.svgWidth, e3.translateY = this.lgRect.height + r3 + 10, e3.translateX = o3 + (e3.svgWidth - e3.gridWidth) / 2;
            break;
          case "left":
            e3.gridWidth = e3.svgWidth - this.lgRect.width - a3, e3.gridHeight = "auto" !== i2.chart.height ? e3.svgHeight : e3.gridWidth, e3.translateY = r3, e3.translateX = o3 + this.lgRect.width + a3;
            break;
          case "right":
            e3.gridWidth = e3.svgWidth - this.lgRect.width - a3 - 5, e3.gridHeight = "auto" !== i2.chart.height ? e3.svgHeight : e3.gridWidth, e3.translateY = r3, e3.translateX = o3 + 10;
            break;
          default:
            throw new Error("Legend position not supported");
        }
      } }, { key: "conditionalChecksForAxisCoords", value: function(t4, e3, i2) {
        var a3 = this.w, s2 = a3.globals.hasXaxisGroups ? 2 : 1, r3 = i2.height + t4.height + e3.height, o3 = a3.globals.isMultiLineX ? 1.2 : a3.globals.LINE_HEIGHT_RATIO, n2 = a3.globals.rotateXLabels ? 22 : 10, l2 = a3.globals.rotateXLabels && "bottom" === a3.config.legend.position ? 10 : 0;
        this.xAxisHeight = r3 * o3 + s2 * n2 + l2, this.xAxisWidth = t4.width, this.xAxisHeight - e3.height > a3.config.xaxis.labels.maxHeight && (this.xAxisHeight = a3.config.xaxis.labels.maxHeight), a3.config.xaxis.labels.minHeight && this.xAxisHeight < a3.config.xaxis.labels.minHeight && (this.xAxisHeight = a3.config.xaxis.labels.minHeight), a3.config.xaxis.floating && (this.xAxisHeight = 0);
        var h2 = 0, c3 = 0;
        a3.config.yaxis.forEach(function(t5) {
          h2 += t5.labels.minWidth, c3 += t5.labels.maxWidth;
        }), this.yAxisWidth < h2 && (this.yAxisWidth = h2), this.yAxisWidth > c3 && (this.yAxisWidth = c3);
      } }]), t3;
    }();
    var ht2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.lgCtx = e3;
      }
      return s(t3, [{ key: "getLegendStyles", value: function() {
        var t4, e3, i2, a3 = document.createElement("style");
        a3.setAttribute("type", "text/css");
        var s2 = (null === (t4 = this.lgCtx.ctx) || void 0 === t4 || null === (e3 = t4.opts) || void 0 === e3 || null === (i2 = e3.chart) || void 0 === i2 ? void 0 : i2.nonce) || this.w.config.chart.nonce;
        s2 && a3.setAttribute("nonce", s2);
        var r3 = document.createTextNode("\n      .apexcharts-legend {\n        display: flex;\n        overflow: auto;\n        padding: 0 10px;\n      }\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\n        flex-wrap: wrap\n      }\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\n        flex-direction: column;\n        bottom: 0;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\n        justify-content: flex-start;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\n        justify-content: center;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\n        justify-content: flex-end;\n      }\n      .apexcharts-legend-series {\n        cursor: pointer;\n        line-height: normal;\n        display: flex;\n        align-items: center;\n      }\n      .apexcharts-legend-text {\n        position: relative;\n        font-size: 14px;\n      }\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\n        pointer-events: none;\n      }\n      .apexcharts-legend-marker {\n        position: relative;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        margin-right: 1px;\n      }\n\n      .apexcharts-legend-series.apexcharts-no-click {\n        cursor: auto;\n      }\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\n        display: none !important;\n      }\n      .apexcharts-inactive-legend {\n        opacity: 0.45;\n      }");
        return a3.appendChild(r3), a3;
      } }, { key: "getLegendDimensions", value: function() {
        var t4 = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend"), e3 = t4.offsetWidth;
        return { clwh: t4.offsetHeight, clww: e3 };
      } }, { key: "appendToForeignObject", value: function() {
        this.w.globals.dom.elLegendForeign.appendChild(this.getLegendStyles());
      } }, { key: "toggleDataSeries", value: function(t4, e3) {
        var i2 = this, a3 = this.w;
        if (a3.globals.axisCharts || "radialBar" === a3.config.chart.type) {
          a3.globals.resized = true;
          var s2 = null, r3 = null;
          if (a3.globals.risingSeries = [], a3.globals.axisCharts ? (s2 = a3.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t4, "']")), r3 = parseInt(s2.getAttribute("data:realIndex"), 10)) : (s2 = a3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t4 + 1, "']")), r3 = parseInt(s2.getAttribute("rel"), 10) - 1), e3) [{ cs: a3.globals.collapsedSeries, csi: a3.globals.collapsedSeriesIndices }, { cs: a3.globals.ancillaryCollapsedSeries, csi: a3.globals.ancillaryCollapsedSeriesIndices }].forEach(function(t5) {
            i2.riseCollapsedSeries(t5.cs, t5.csi, r3);
          });
          else this.hideSeries({ seriesEl: s2, realIndex: r3 });
        } else {
          var o3 = a3.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t4 + 1, "'] path")), n2 = a3.config.chart.type;
          if ("pie" === n2 || "polarArea" === n2 || "donut" === n2) {
            var l2 = a3.config.plotOptions.pie.donut.labels;
            new w(this.lgCtx.ctx).pathMouseDown(o3.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o3.members[0].node, l2);
          }
          o3.fire("click");
        }
      } }, { key: "getSeriesAfterCollapsing", value: function(t4) {
        var e3 = t4.realIndex, i2 = this.w, a3 = i2.globals, s2 = v.clone(i2.config.series);
        if (a3.axisCharts) {
          var r3 = i2.config.yaxis[a3.seriesYAxisReverseMap[e3]], o3 = { index: e3, data: s2[e3].data.slice(), type: s2[e3].type || i2.config.chart.type };
          if (r3 && r3.show && r3.showAlways) a3.ancillaryCollapsedSeriesIndices.indexOf(e3) < 0 && (a3.ancillaryCollapsedSeries.push(o3), a3.ancillaryCollapsedSeriesIndices.push(e3));
          else if (a3.collapsedSeriesIndices.indexOf(e3) < 0) {
            a3.collapsedSeries.push(o3), a3.collapsedSeriesIndices.push(e3);
            var n2 = a3.risingSeries.indexOf(e3);
            a3.risingSeries.splice(n2, 1);
          }
        } else a3.collapsedSeries.push({ index: e3, data: s2[e3] }), a3.collapsedSeriesIndices.push(e3);
        return a3.allSeriesCollapsed = a3.collapsedSeries.length + a3.ancillaryCollapsedSeries.length === i2.config.series.length, this._getSeriesBasedOnCollapsedState(s2);
      } }, { key: "hideSeries", value: function(t4) {
        for (var e3 = t4.seriesEl, i2 = t4.realIndex, a3 = this.w, s2 = this.getSeriesAfterCollapsing({ realIndex: i2 }), r3 = e3.childNodes, o3 = 0; o3 < r3.length; o3++) r3[o3].classList.contains("apexcharts-series-markers-wrap") && (r3[o3].classList.contains("apexcharts-hide") ? r3[o3].classList.remove("apexcharts-hide") : r3[o3].classList.add("apexcharts-hide"));
        this.lgCtx.ctx.updateHelpers._updateSeries(s2, a3.config.chart.animations.dynamicAnimation.enabled);
      } }, { key: "riseCollapsedSeries", value: function(t4, e3, i2) {
        var a3 = this.w, s2 = v.clone(a3.config.series);
        if (t4.length > 0) {
          for (var r3 = 0; r3 < t4.length; r3++) t4[r3].index === i2 && (a3.globals.axisCharts ? s2[i2].data = t4[r3].data.slice() : s2[i2] = t4[r3].data, s2[i2].hidden = false, t4.splice(r3, 1), e3.splice(r3, 1), a3.globals.risingSeries.push(i2));
          s2 = this._getSeriesBasedOnCollapsedState(s2), this.lgCtx.ctx.updateHelpers._updateSeries(s2, a3.config.chart.animations.dynamicAnimation.enabled);
        }
      } }, { key: "_getSeriesBasedOnCollapsedState", value: function(t4) {
        var e3 = this.w, i2 = 0;
        return e3.globals.axisCharts ? t4.forEach(function(a3, s2) {
          e3.globals.collapsedSeriesIndices.indexOf(s2) < 0 && e3.globals.ancillaryCollapsedSeriesIndices.indexOf(s2) < 0 || (t4[s2].data = [], i2++);
        }) : t4.forEach(function(a3, s2) {
          !e3.globals.collapsedSeriesIndices.indexOf(s2) < 0 && (t4[s2] = 0, i2++);
        }), e3.globals.allSeriesCollapsed = i2 === t4.length, t4;
      } }]), t3;
    }();
    var ct2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new ht2(this);
      }
      return s(t3, [{ key: "init", value: function() {
        var t4 = this.w, e3 = t4.globals, i2 = t4.config;
        if ((i2.legend.showForSingleSeries && 1 === e3.series.length || this.isBarsDistributed || e3.series.length > 1 || !e3.axisCharts) && i2.legend.show) {
          for (; e3.dom.elLegendWrap.firstChild; ) e3.dom.elLegendWrap.removeChild(e3.dom.elLegendWrap.firstChild);
          this.drawLegends(), this.legendHelpers.appendToForeignObject(), "bottom" === i2.legend.position || "top" === i2.legend.position ? this.legendAlignHorizontal() : "right" !== i2.legend.position && "left" !== i2.legend.position || this.legendAlignVertical();
        }
      } }, { key: "createLegendMarker", value: function(t4) {
        var e3 = t4.i, i2 = t4.fillcolor, a3 = this.w, s2 = document.createElement("span");
        s2.classList.add("apexcharts-legend-marker");
        var r3 = a3.config.legend.markers.shape || a3.config.markers.shape, o3 = r3;
        Array.isArray(r3) && (o3 = r3[e3]);
        var n2 = Array.isArray(a3.config.legend.markers.size) ? parseFloat(a3.config.legend.markers.size[e3]) : parseFloat(a3.config.legend.markers.size), l2 = Array.isArray(a3.config.legend.markers.offsetX) ? parseFloat(a3.config.legend.markers.offsetX[e3]) : parseFloat(a3.config.legend.markers.offsetX), h2 = Array.isArray(a3.config.legend.markers.offsetY) ? parseFloat(a3.config.legend.markers.offsetY[e3]) : parseFloat(a3.config.legend.markers.offsetY), c3 = Array.isArray(a3.config.legend.markers.strokeWidth) ? parseFloat(a3.config.legend.markers.strokeWidth[e3]) : parseFloat(a3.config.legend.markers.strokeWidth), g2 = s2.style;
        if (g2.height = 2 * (n2 + c3) + "px", g2.width = 2 * (n2 + c3) + "px", g2.left = l2 + "px", g2.top = h2 + "px", a3.config.legend.markers.customHTML) g2.background = "transparent", g2.color = i2[e3], Array.isArray(a3.config.legend.markers.customHTML) ? a3.config.legend.markers.customHTML[e3] && (s2.innerHTML = a3.config.legend.markers.customHTML[e3]()) : s2.innerHTML = a3.config.legend.markers.customHTML();
        else {
          var u2 = new N(this.ctx).getMarkerConfig({ cssClass: "apexcharts-legend-marker apexcharts-marker apexcharts-marker-".concat(o3), seriesIndex: e3, strokeWidth: c3, size: n2 }), p2 = SVG(s2).size("100%", "100%"), f2 = new w(this.ctx).drawMarker(0, 0, d(d({}, u2), {}, { pointFillColor: Array.isArray(i2) ? i2[e3] : u2.pointFillColor, shape: o3 }));
          SVG.select(".apexcharts-legend-marker.apexcharts-marker").members.forEach(function(t5) {
            t5.node.classList.contains("apexcharts-marker-triangle") ? t5.node.style.transform = "translate(50%, 45%)" : t5.node.style.transform = "translate(50%, 50%)";
          }), p2.add(f2);
        }
        return s2;
      } }, { key: "drawLegends", value: function() {
        var t4 = this, e3 = this.w, i2 = e3.config.legend.fontFamily, a3 = e3.globals.seriesNames, s2 = e3.config.legend.markers.fillColors ? e3.config.legend.markers.fillColors.slice() : e3.globals.colors.slice();
        if ("heatmap" === e3.config.chart.type) {
          var r3 = e3.config.plotOptions.heatmap.colorScale.ranges;
          a3 = r3.map(function(t5) {
            return t5.name ? t5.name : t5.from + " - " + t5.to;
          }), s2 = r3.map(function(t5) {
            return t5.color;
          });
        } else this.isBarsDistributed && (a3 = e3.globals.labels.slice());
        e3.config.legend.customLegendItems.length && (a3 = e3.config.legend.customLegendItems);
        for (var o3 = e3.globals.legendFormatter, n2 = e3.config.legend.inverseOrder, l2 = n2 ? a3.length - 1 : 0; n2 ? l2 >= 0 : l2 <= a3.length - 1; n2 ? l2-- : l2++) {
          var h2, c3 = o3(a3[l2], { seriesIndex: l2, w: e3 }), d2 = false, g2 = false;
          if (e3.globals.collapsedSeries.length > 0) for (var u2 = 0; u2 < e3.globals.collapsedSeries.length; u2++) e3.globals.collapsedSeries[u2].index === l2 && (d2 = true);
          if (e3.globals.ancillaryCollapsedSeriesIndices.length > 0) for (var p2 = 0; p2 < e3.globals.ancillaryCollapsedSeriesIndices.length; p2++) e3.globals.ancillaryCollapsedSeriesIndices[p2] === l2 && (g2 = true);
          var f2 = this.createLegendMarker({ i: l2, fillcolor: s2 });
          w.setAttrs(f2, { rel: l2 + 1, "data:collapsed": d2 || g2 }), (d2 || g2) && f2.classList.add("apexcharts-inactive-legend");
          var x2 = document.createElement("div"), b2 = document.createElement("span");
          b2.classList.add("apexcharts-legend-text"), b2.innerHTML = Array.isArray(c3) ? c3.join(" ") : c3;
          var m2 = e3.config.legend.labels.useSeriesColors ? e3.globals.colors[l2] : Array.isArray(e3.config.legend.labels.colors) ? null === (h2 = e3.config.legend.labels.colors) || void 0 === h2 ? void 0 : h2[l2] : e3.config.legend.labels.colors;
          m2 || (m2 = e3.config.chart.foreColor), b2.style.color = m2, b2.style.fontSize = parseFloat(e3.config.legend.fontSize) + "px", b2.style.fontWeight = e3.config.legend.fontWeight, b2.style.fontFamily = i2 || e3.config.chart.fontFamily, w.setAttrs(b2, { rel: l2 + 1, i: l2, "data:default-text": encodeURIComponent(c3), "data:collapsed": d2 || g2 }), x2.appendChild(f2), x2.appendChild(b2);
          var y3 = new k(this.ctx);
          if (!e3.config.legend.showForZeroSeries) 0 === y3.getSeriesTotalByIndex(l2) && y3.seriesHaveSameValues(l2) && !y3.isSeriesNull(l2) && -1 === e3.globals.collapsedSeriesIndices.indexOf(l2) && -1 === e3.globals.ancillaryCollapsedSeriesIndices.indexOf(l2) && x2.classList.add("apexcharts-hidden-zero-series");
          e3.config.legend.showForNullSeries || y3.isSeriesNull(l2) && -1 === e3.globals.collapsedSeriesIndices.indexOf(l2) && -1 === e3.globals.ancillaryCollapsedSeriesIndices.indexOf(l2) && x2.classList.add("apexcharts-hidden-null-series"), e3.globals.dom.elLegendWrap.appendChild(x2), e3.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(e3.config.legend.horizontalAlign)), e3.globals.dom.elLegendWrap.classList.add("apx-legend-position-" + e3.config.legend.position), x2.classList.add("apexcharts-legend-series"), x2.style.margin = "".concat(e3.config.legend.itemMargin.vertical, "px ").concat(e3.config.legend.itemMargin.horizontal, "px"), e3.globals.dom.elLegendWrap.style.width = e3.config.legend.width ? e3.config.legend.width + "px" : "", e3.globals.dom.elLegendWrap.style.height = e3.config.legend.height ? e3.config.legend.height + "px" : "", w.setAttrs(x2, { rel: l2 + 1, seriesName: v.escapeString(a3[l2]), "data:collapsed": d2 || g2 }), (d2 || g2) && x2.classList.add("apexcharts-inactive-legend"), e3.config.legend.onItemClick.toggleDataSeries || x2.classList.add("apexcharts-no-click");
        }
        e3.globals.dom.elWrap.addEventListener("click", t4.onLegendClick, true), e3.config.legend.onItemHover.highlightDataSeries && 0 === e3.config.legend.customLegendItems.length && (e3.globals.dom.elWrap.addEventListener("mousemove", t4.onLegendHovered, true), e3.globals.dom.elWrap.addEventListener("mouseout", t4.onLegendHovered, true));
      } }, { key: "setLegendWrapXY", value: function(t4, e3) {
        var i2 = this.w, a3 = i2.globals.dom.elLegendWrap, s2 = a3.getBoundingClientRect(), r3 = 0, o3 = 0;
        if ("bottom" === i2.config.legend.position) o3 += i2.globals.svgHeight - s2.height / 2;
        else if ("top" === i2.config.legend.position) {
          var n2 = new lt2(this.ctx), l2 = n2.dimHelpers.getTitleSubtitleCoords("title").height, h2 = n2.dimHelpers.getTitleSubtitleCoords("subtitle").height;
          o3 = o3 + (l2 > 0 ? l2 - 10 : 0) + (h2 > 0 ? h2 - 10 : 0);
        }
        a3.style.position = "absolute", r3 = r3 + t4 + i2.config.legend.offsetX, o3 = o3 + e3 + i2.config.legend.offsetY, a3.style.left = r3 + "px", a3.style.top = o3 + "px", "bottom" === i2.config.legend.position ? (a3.style.top = "auto", a3.style.bottom = 5 - i2.config.legend.offsetY + "px") : "right" === i2.config.legend.position && (a3.style.left = "auto", a3.style.right = 25 + i2.config.legend.offsetX + "px");
        ["width", "height"].forEach(function(t5) {
          a3.style[t5] && (a3.style[t5] = parseInt(i2.config.legend[t5], 10) + "px");
        });
      } }, { key: "legendAlignHorizontal", value: function() {
        var t4 = this.w;
        t4.globals.dom.elLegendWrap.style.right = 0;
        var e3 = this.legendHelpers.getLegendDimensions(), i2 = new lt2(this.ctx), a3 = i2.dimHelpers.getTitleSubtitleCoords("title"), s2 = i2.dimHelpers.getTitleSubtitleCoords("subtitle"), r3 = 0;
        "bottom" === t4.config.legend.position ? r3 = -e3.clwh / 1.8 : "top" === t4.config.legend.position && (r3 = a3.height + s2.height + t4.config.title.margin + t4.config.subtitle.margin - 10), this.setLegendWrapXY(20, r3);
      } }, { key: "legendAlignVertical", value: function() {
        var t4 = this.w, e3 = this.legendHelpers.getLegendDimensions(), i2 = 0;
        "left" === t4.config.legend.position && (i2 = 20), "right" === t4.config.legend.position && (i2 = t4.globals.svgWidth - e3.clww - 10), this.setLegendWrapXY(i2, 20);
      } }, { key: "onLegendHovered", value: function(t4) {
        var e3 = this.w, i2 = t4.target.classList.contains("apexcharts-legend-series") || t4.target.classList.contains("apexcharts-legend-text") || t4.target.classList.contains("apexcharts-legend-marker");
        if ("heatmap" === e3.config.chart.type || this.isBarsDistributed) {
          if (i2) {
            var a3 = parseInt(t4.target.getAttribute("rel"), 10) - 1;
            this.ctx.events.fireEvent("legendHover", [this.ctx, a3, this.w]), new G2(this.ctx).highlightRangeInSeries(t4, t4.target);
          }
        } else !t4.target.classList.contains("apexcharts-inactive-legend") && i2 && new G2(this.ctx).toggleSeriesOnHover(t4, t4.target);
      } }, { key: "onLegendClick", value: function(t4) {
        var e3 = this.w;
        if (!e3.config.legend.customLegendItems.length && (t4.target.classList.contains("apexcharts-legend-series") || t4.target.classList.contains("apexcharts-legend-text") || t4.target.classList.contains("apexcharts-legend-marker"))) {
          var i2 = parseInt(t4.target.getAttribute("rel"), 10) - 1, a3 = "true" === t4.target.getAttribute("data:collapsed"), s2 = this.w.config.chart.events.legendClick;
          "function" == typeof s2 && s2(this.ctx, i2, this.w), this.ctx.events.fireEvent("legendClick", [this.ctx, i2, this.w]);
          var r3 = this.w.config.legend.markers.onClick;
          "function" == typeof r3 && t4.target.classList.contains("apexcharts-legend-marker") && (r3(this.ctx, i2, this.w), this.ctx.events.fireEvent("legendMarkerClick", [this.ctx, i2, this.w])), "treemap" !== e3.config.chart.type && "heatmap" !== e3.config.chart.type && !this.isBarsDistributed && e3.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i2, a3);
        }
      } }]), t3;
    }();
    var dt2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
        var a3 = this.w;
        this.ev = this.w.config.chart.events, this.selectedClass = "apexcharts-selected", this.localeValues = this.w.globals.locale.toolbar, this.minX = a3.globals.minX, this.maxX = a3.globals.maxX;
      }
      return s(t3, [{ key: "createToolbar", value: function() {
        var t4 = this, e3 = this.w, i2 = function() {
          return document.createElement("div");
        }, a3 = i2();
        if (a3.setAttribute("class", "apexcharts-toolbar"), a3.style.top = e3.config.chart.toolbar.offsetY + "px", a3.style.right = 3 - e3.config.chart.toolbar.offsetX + "px", e3.globals.dom.elWrap.appendChild(a3), this.elZoom = i2(), this.elZoomIn = i2(), this.elZoomOut = i2(), this.elPan = i2(), this.elSelection = i2(), this.elZoomReset = i2(), this.elMenuIcon = i2(), this.elMenu = i2(), this.elCustomIcons = [], this.t = e3.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for (var s2 = 0; s2 < this.t.customIcons.length; s2++) this.elCustomIcons.push(i2());
        var r3 = [], o3 = function(i3, a4, s3) {
          var o4 = i3.toLowerCase();
          t4.t[o4] && e3.config.chart.zoom.enabled && r3.push({ el: a4, icon: "string" == typeof t4.t[o4] ? t4.t[o4] : s3, title: t4.localeValues[i3], class: "apexcharts-".concat(o4, "-icon") });
        };
        o3("zoomIn", this.elZoomIn, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'), o3("zoomOut", this.elZoomOut, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n');
        var n2 = function(i3) {
          t4.t[i3] && e3.config.chart[i3].enabled && r3.push({ el: "zoom" === i3 ? t4.elZoom : t4.elSelection, icon: "string" == typeof t4.t[i3] ? t4.t[i3] : "zoom" === i3 ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>' : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>', title: t4.localeValues["zoom" === i3 ? "selectionZoom" : "selection"], class: e3.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-".concat(i3, "-icon") });
        };
        n2("zoom"), n2("selection"), this.t.pan && e3.config.chart.zoom.enabled && r3.push({ el: this.elPan, icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>', title: this.localeValues.pan, class: e3.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon" }), o3("reset", this.elZoomReset, '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'), this.t.download && r3.push({ el: this.elMenuIcon, icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>', title: this.localeValues.menu, class: "apexcharts-menu-icon" });
        for (var l2 = 0; l2 < this.elCustomIcons.length; l2++) r3.push({ el: this.elCustomIcons[l2], icon: this.t.customIcons[l2].icon, title: this.t.customIcons[l2].title, index: this.t.customIcons[l2].index, class: "apexcharts-toolbar-custom-icon " + this.t.customIcons[l2].class });
        r3.forEach(function(t5, e4) {
          t5.index && v.moveIndexInArray(r3, e4, t5.index);
        });
        for (var h2 = 0; h2 < r3.length; h2++) w.setAttrs(r3[h2].el, { class: r3[h2].class, title: r3[h2].title }), r3[h2].el.innerHTML = r3[h2].icon, a3.appendChild(r3[h2].el);
        this._createHamburgerMenu(a3), e3.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e3.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e3.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();
      } }, { key: "_createHamburgerMenu", value: function(t4) {
        this.elMenuItems = [], t4.appendChild(this.elMenu), w.setAttrs(this.elMenu, { class: "apexcharts-menu" });
        for (var e3 = [{ name: "exportSVG", title: this.localeValues.exportToSVG }, { name: "exportPNG", title: this.localeValues.exportToPNG }, { name: "exportCSV", title: this.localeValues.exportToCSV }], i2 = 0; i2 < e3.length; i2++) this.elMenuItems.push(document.createElement("div")), this.elMenuItems[i2].innerHTML = e3[i2].title, w.setAttrs(this.elMenuItems[i2], { class: "apexcharts-menu-item ".concat(e3[i2].name), title: e3[i2].title }), this.elMenu.appendChild(this.elMenuItems[i2]);
      } }, { key: "addToolbarEventListeners", value: function() {
        var t4 = this;
        this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleZoomSelection.bind(this, "selection")), this.elZoom.addEventListener("click", this.toggleZoomSelection.bind(this, "zoom")), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function(e4) {
          e4.classList.contains("exportSVG") ? e4.addEventListener("click", t4.handleDownload.bind(t4, "svg")) : e4.classList.contains("exportPNG") ? e4.addEventListener("click", t4.handleDownload.bind(t4, "png")) : e4.classList.contains("exportCSV") && e4.addEventListener("click", t4.handleDownload.bind(t4, "csv"));
        });
        for (var e3 = 0; e3 < this.t.customIcons.length; e3++) this.elCustomIcons[e3].addEventListener("click", this.t.customIcons[e3].click.bind(this, this.ctx, this.ctx.w));
      } }, { key: "toggleZoomSelection", value: function(t4) {
        this.ctx.getSyncedCharts().forEach(function(e3) {
          e3.ctx.toolbar.toggleOtherControls();
          var i2 = "selection" === t4 ? e3.ctx.toolbar.elSelection : e3.ctx.toolbar.elZoom, a3 = "selection" === t4 ? "selectionEnabled" : "zoomEnabled";
          e3.w.globals[a3] = !e3.w.globals[a3], i2.classList.contains(e3.ctx.toolbar.selectedClass) ? i2.classList.remove(e3.ctx.toolbar.selectedClass) : i2.classList.add(e3.ctx.toolbar.selectedClass);
        });
      } }, { key: "getToolbarIconsReference", value: function() {
        var t4 = this.w;
        this.elZoom || (this.elZoom = t4.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t4.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t4.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
      } }, { key: "enableZoomPanFromToolbar", value: function(t4) {
        this.toggleOtherControls(), "pan" === t4 ? this.w.globals.panEnabled = true : this.w.globals.zoomEnabled = true;
        var e3 = "pan" === t4 ? this.elPan : this.elZoom, i2 = "pan" === t4 ? this.elZoom : this.elPan;
        e3 && e3.classList.add(this.selectedClass), i2 && i2.classList.remove(this.selectedClass);
      } }, { key: "togglePanning", value: function() {
        this.ctx.getSyncedCharts().forEach(function(t4) {
          t4.ctx.toolbar.toggleOtherControls(), t4.w.globals.panEnabled = !t4.w.globals.panEnabled, t4.ctx.toolbar.elPan.classList.contains(t4.ctx.toolbar.selectedClass) ? t4.ctx.toolbar.elPan.classList.remove(t4.ctx.toolbar.selectedClass) : t4.ctx.toolbar.elPan.classList.add(t4.ctx.toolbar.selectedClass);
        });
      } }, { key: "toggleOtherControls", value: function() {
        var t4 = this, e3 = this.w;
        e3.globals.panEnabled = false, e3.globals.zoomEnabled = false, e3.globals.selectionEnabled = false, this.getToolbarIconsReference(), [this.elPan, this.elSelection, this.elZoom].forEach(function(e4) {
          e4 && e4.classList.remove(t4.selectedClass);
        });
      } }, { key: "handleZoomIn", value: function() {
        var t4 = this.w;
        t4.globals.isRangeBar && (this.minX = t4.globals.minY, this.maxX = t4.globals.maxY);
        var e3 = (this.minX + this.maxX) / 2, i2 = (this.minX + e3) / 2, a3 = (this.maxX + e3) / 2, s2 = this._getNewMinXMaxX(i2, a3);
        t4.globals.disableZoomIn || this.zoomUpdateOptions(s2.minX, s2.maxX);
      } }, { key: "handleZoomOut", value: function() {
        var t4 = this.w;
        if (t4.globals.isRangeBar && (this.minX = t4.globals.minY, this.maxX = t4.globals.maxY), !("datetime" === t4.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {
          var e3 = (this.minX + this.maxX) / 2, i2 = this.minX - (e3 - this.minX), a3 = this.maxX - (e3 - this.maxX), s2 = this._getNewMinXMaxX(i2, a3);
          t4.globals.disableZoomOut || this.zoomUpdateOptions(s2.minX, s2.maxX);
        }
      } }, { key: "_getNewMinXMaxX", value: function(t4, e3) {
        var i2 = this.w.config.xaxis.convertedCatToNumeric;
        return { minX: i2 ? Math.floor(t4) : t4, maxX: i2 ? Math.floor(e3) : e3 };
      } }, { key: "zoomUpdateOptions", value: function(t4, e3) {
        var i2 = this.w;
        if (void 0 !== t4 || void 0 !== e3) {
          if (!(i2.config.xaxis.convertedCatToNumeric && (t4 < 1 && (t4 = 1, e3 = i2.globals.dataPoints), e3 - t4 < 2))) {
            var a3 = { min: t4, max: e3 }, s2 = this.getBeforeZoomRange(a3);
            s2 && (a3 = s2.xaxis);
            var r3 = { xaxis: a3 }, o3 = v.clone(i2.globals.initialConfig.yaxis);
            i2.config.chart.group || (r3.yaxis = o3), this.w.globals.zoomed = true, this.ctx.updateHelpers._updateOptions(r3, false, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a3, o3);
          }
        } else this.handleZoomReset();
      } }, { key: "zoomCallback", value: function(t4, e3) {
        "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, { xaxis: t4, yaxis: e3 });
      } }, { key: "getBeforeZoomRange", value: function(t4, e3) {
        var i2 = null;
        return "function" == typeof this.ev.beforeZoom && (i2 = this.ev.beforeZoom(this, { xaxis: t4, yaxis: e3 })), i2;
      } }, { key: "toggleMenu", value: function() {
        var t4 = this;
        window.setTimeout(function() {
          t4.elMenu.classList.contains("apexcharts-menu-open") ? t4.elMenu.classList.remove("apexcharts-menu-open") : t4.elMenu.classList.add("apexcharts-menu-open");
        }, 0);
      } }, { key: "handleDownload", value: function(t4) {
        var e3 = this.w, i2 = new j(this.ctx);
        switch (t4) {
          case "svg":
            i2.exportToSVG(this.ctx);
            break;
          case "png":
            i2.exportToPng(this.ctx);
            break;
          case "csv":
            i2.exportToCSV({ series: e3.config.series, columnDelimiter: e3.config.chart.toolbar.export.csv.columnDelimiter });
        }
      } }, { key: "handleZoomReset", value: function(t4) {
        this.ctx.getSyncedCharts().forEach(function(t5) {
          var e3 = t5.w;
          if (e3.globals.lastXAxis.min = e3.globals.initialConfig.xaxis.min, e3.globals.lastXAxis.max = e3.globals.initialConfig.xaxis.max, t5.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof e3.config.chart.events.beforeResetZoom) {
            var i2 = e3.config.chart.events.beforeResetZoom(t5, e3);
            i2 && t5.updateHelpers.revertDefaultAxisMinMax(i2);
          }
          "function" == typeof e3.config.chart.events.zoomed && t5.ctx.toolbar.zoomCallback({ min: e3.config.xaxis.min, max: e3.config.xaxis.max }), e3.globals.zoomed = false;
          var a3 = t5.ctx.series.emptyCollapsedSeries(v.clone(e3.globals.initialSeries));
          t5.updateHelpers._updateSeries(a3, e3.config.chart.animations.dynamicAnimation.enabled);
        });
      } }, { key: "destroy", value: function() {
        this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;
      } }]), t3;
    }();
    var gt2 = function(t3) {
      l(a3, dt2);
      var e3 = r2(a3);
      function a3(t4) {
        var s2;
        return i(this, a3), (s2 = e3.call(this, t4)).ctx = t4, s2.w = t4.w, s2.dragged = false, s2.graphics = new w(s2.ctx), s2.eventList = ["mousedown", "mouseleave", "mousemove", "touchstart", "touchmove", "mouseup", "touchend", "wheel"], s2.clientX = 0, s2.clientY = 0, s2.startX = 0, s2.endX = 0, s2.dragX = 0, s2.startY = 0, s2.endY = 0, s2.dragY = 0, s2.moveDirection = "none", s2.debounceTimer = null, s2.debounceDelay = 100, s2.wheelDelay = 400, s2;
      }
      return s(a3, [{ key: "init", value: function(t4) {
        var e4 = this, i2 = t4.xyRatios, a4 = this.w, s2 = this;
        this.xyRatios = i2, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a4.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), a4.globals.dom.elGraphical.add(this.zoomRect), a4.globals.dom.elGraphical.add(this.selectionRect), "x" === a4.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, minY: 0, maxX: a4.globals.gridWidth, maxY: a4.globals.gridHeight }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : "y" === a4.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, maxX: a4.globals.gridWidth }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = a4.globals.dom.baseEl.querySelector("".concat(a4.globals.chartClass, " .apexcharts-svg")), this.hoverArea.classList.add("apexcharts-zoomable"), this.eventList.forEach(function(t5) {
          e4.hoverArea.addEventListener(t5, s2.svgMouseEvents.bind(s2, i2), { capture: false, passive: true });
        }), a4.config.chart.zoom.allowMouseWheelZoom && this.hoverArea.addEventListener("wheel", s2.mouseWheelEvent.bind(s2), { capture: false, passive: false });
      } }, { key: "destroy", value: function() {
        this.slDraggableRect && (this.slDraggableRect.draggable(false), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;
      } }, { key: "svgMouseEvents", value: function(t4, e4) {
        var i2 = this.w, a4 = this, s2 = this.ctx.toolbar, r3 = i2.globals.zoomEnabled ? i2.config.chart.zoom.type : i2.config.chart.selection.type, o3 = i2.config.chart.toolbar.autoSelected;
        if (e4.shiftKey ? (this.shiftWasPressed = true, s2.enableZoomPanFromToolbar("pan" === o3 ? "zoom" : "pan")) : this.shiftWasPressed && (s2.enableZoomPanFromToolbar(o3), this.shiftWasPressed = false), e4.target) {
          var n2, l2 = e4.target.classList;
          if (e4.target.parentNode && null !== e4.target.parentNode && (n2 = e4.target.parentNode.classList), !(l2.contains("apexcharts-selection-rect") || l2.contains("apexcharts-legend-marker") || l2.contains("apexcharts-legend-text") || n2 && n2.contains("apexcharts-toolbar"))) {
            if (a4.clientX = "touchmove" === e4.type || "touchstart" === e4.type ? e4.touches[0].clientX : "touchend" === e4.type ? e4.changedTouches[0].clientX : e4.clientX, a4.clientY = "touchmove" === e4.type || "touchstart" === e4.type ? e4.touches[0].clientY : "touchend" === e4.type ? e4.changedTouches[0].clientY : e4.clientY, "mousedown" === e4.type && 1 === e4.which) {
              var h2 = a4.gridRect.getBoundingClientRect();
              a4.startX = a4.clientX - h2.left, a4.startY = a4.clientY - h2.top, a4.dragged = false, a4.w.globals.mousedown = true;
            }
            if (("mousemove" === e4.type && 1 === e4.which || "touchmove" === e4.type) && (a4.dragged = true, i2.globals.panEnabled ? (i2.globals.selection = null, a4.w.globals.mousedown && a4.panDragging({ context: a4, zoomtype: r3, xyRatios: t4 })) : (a4.w.globals.mousedown && i2.globals.zoomEnabled || a4.w.globals.mousedown && i2.globals.selectionEnabled) && (a4.selection = a4.selectionDrawing({ context: a4, zoomtype: r3 }))), "mouseup" === e4.type || "touchend" === e4.type || "mouseleave" === e4.type) {
              var c3, d2 = null === (c3 = a4.gridRect) || void 0 === c3 ? void 0 : c3.getBoundingClientRect();
              d2 && a4.w.globals.mousedown && (a4.endX = a4.clientX - d2.left, a4.endY = a4.clientY - d2.top, a4.dragX = Math.abs(a4.endX - a4.startX), a4.dragY = Math.abs(a4.endY - a4.startY), (i2.globals.zoomEnabled || i2.globals.selectionEnabled) && a4.selectionDrawn({ context: a4, zoomtype: r3 }), i2.globals.panEnabled && i2.config.xaxis.convertedCatToNumeric && a4.delayedPanScrolled()), i2.globals.zoomEnabled && a4.hideSelectionRect(this.selectionRect), a4.dragged = false, a4.w.globals.mousedown = false;
            }
            this.makeSelectionRectDraggable();
          }
        }
      } }, { key: "mouseWheelEvent", value: function(t4) {
        var e4 = this, i2 = this.w;
        t4.preventDefault();
        var a4 = Date.now();
        a4 - i2.globals.lastWheelExecution > this.wheelDelay && (this.executeMouseWheelZoom(t4), i2.globals.lastWheelExecution = a4), this.debounceTimer && clearTimeout(this.debounceTimer), this.debounceTimer = setTimeout(function() {
          a4 - i2.globals.lastWheelExecution > e4.wheelDelay && (e4.executeMouseWheelZoom(t4), i2.globals.lastWheelExecution = a4);
        }, this.debounceDelay);
      } }, { key: "executeMouseWheelZoom", value: function(t4) {
        var e4, i2 = this.w;
        this.minX = i2.globals.isRangeBar ? i2.globals.minY : i2.globals.minX, this.maxX = i2.globals.isRangeBar ? i2.globals.maxY : i2.globals.maxX;
        var a4 = null === (e4 = this.gridRect) || void 0 === e4 ? void 0 : e4.getBoundingClientRect();
        if (a4) {
          var s2, r3, o3, n2 = (t4.clientX - a4.left) / a4.width, l2 = this.minX, h2 = this.maxX, c3 = h2 - l2;
          if (t4.deltaY < 0) {
            var d2 = l2 + n2 * c3;
            r3 = d2 - (s2 = 0.5 * c3) / 2, o3 = d2 + s2 / 2;
          } else r3 = l2 - (s2 = 1.5 * c3) / 2, o3 = h2 + s2 / 2;
          r3 = Math.max(r3, i2.globals.initialMinX), o3 = Math.min(o3, i2.globals.initialMaxX);
          var g2 = 0.01 * (i2.globals.initialMaxX - i2.globals.initialMinX);
          if (o3 - r3 < g2) {
            var u2 = (r3 + o3) / 2;
            r3 = u2 - g2 / 2, o3 = u2 + g2 / 2;
          }
          var p2 = this._getNewMinXMaxX(r3, o3);
          isNaN(p2.minX) || isNaN(p2.maxX) || this.zoomUpdateOptions(p2.minX, p2.maxX);
        }
      } }, { key: "makeSelectionRectDraggable", value: function() {
        var t4 = this.w;
        if (this.selectionRect) {
          var e4 = this.selectionRect.node.getBoundingClientRect();
          e4.width > 0 && e4.height > 0 && this.slDraggableRect.selectize({ points: "l, r", pointSize: 8, pointType: "rect" }).resize({ constraint: { minX: 0, minY: 0, maxX: t4.globals.gridWidth, maxY: t4.globals.gridHeight } }).on("resizing", this.selectionDragging.bind(this, "resizing"));
        }
      } }, { key: "preselectedSelection", value: function() {
        var t4 = this.w, e4 = this.xyRatios;
        if (!t4.globals.zoomEnabled) {
          if (void 0 !== t4.globals.selection && null !== t4.globals.selection) this.drawSelectionRect(t4.globals.selection);
          else if (void 0 !== t4.config.chart.selection.xaxis.min && void 0 !== t4.config.chart.selection.xaxis.max) {
            var i2 = (t4.config.chart.selection.xaxis.min - t4.globals.minX) / e4.xRatio, a4 = t4.globals.gridWidth - (t4.globals.maxX - t4.config.chart.selection.xaxis.max) / e4.xRatio - i2;
            t4.globals.isRangeBar && (i2 = (t4.config.chart.selection.xaxis.min - t4.globals.yAxisScale[0].niceMin) / e4.invertedYRatio, a4 = (t4.config.chart.selection.xaxis.max - t4.config.chart.selection.xaxis.min) / e4.invertedYRatio);
            var s2 = { x: i2, y: 0, width: a4, height: t4.globals.gridHeight, translateX: 0, translateY: 0, selectionEnabled: true };
            this.drawSelectionRect(s2), this.makeSelectionRectDraggable(), "function" == typeof t4.config.chart.events.selection && t4.config.chart.events.selection(this.ctx, { xaxis: { min: t4.config.chart.selection.xaxis.min, max: t4.config.chart.selection.xaxis.max }, yaxis: {} });
          }
        }
      } }, { key: "drawSelectionRect", value: function(t4) {
        var e4 = t4.x, i2 = t4.y, a4 = t4.width, s2 = t4.height, r3 = t4.translateX, o3 = void 0 === r3 ? 0 : r3, n2 = t4.translateY, l2 = void 0 === n2 ? 0 : n2, h2 = this.w, c3 = this.zoomRect, d2 = this.selectionRect;
        if (this.dragged || null !== h2.globals.selection) {
          var g2 = { transform: "translate(" + o3 + ", " + l2 + ")" };
          h2.globals.zoomEnabled && this.dragged && (a4 < 0 && (a4 = 1), c3.attr({ x: e4, y: i2, width: a4, height: s2, fill: h2.config.chart.zoom.zoomedArea.fill.color, "fill-opacity": h2.config.chart.zoom.zoomedArea.fill.opacity, stroke: h2.config.chart.zoom.zoomedArea.stroke.color, "stroke-width": h2.config.chart.zoom.zoomedArea.stroke.width, "stroke-opacity": h2.config.chart.zoom.zoomedArea.stroke.opacity }), w.setAttrs(c3.node, g2)), h2.globals.selectionEnabled && (d2.attr({ x: e4, y: i2, width: a4 > 0 ? a4 : 0, height: s2 > 0 ? s2 : 0, fill: h2.config.chart.selection.fill.color, "fill-opacity": h2.config.chart.selection.fill.opacity, stroke: h2.config.chart.selection.stroke.color, "stroke-width": h2.config.chart.selection.stroke.width, "stroke-dasharray": h2.config.chart.selection.stroke.dashArray, "stroke-opacity": h2.config.chart.selection.stroke.opacity }), w.setAttrs(d2.node, g2));
        }
      } }, { key: "hideSelectionRect", value: function(t4) {
        t4 && t4.attr({ x: 0, y: 0, width: 0, height: 0 });
      } }, { key: "selectionDrawing", value: function(t4) {
        var e4 = t4.context, i2 = t4.zoomtype, a4 = this.w, s2 = e4, r3 = this.gridRect.getBoundingClientRect(), o3 = s2.startX - 1, n2 = s2.startY, l2 = false, h2 = false, c3 = s2.clientX - r3.left - o3, d2 = s2.clientY - r3.top - n2, g2 = {};
        return Math.abs(c3 + o3) > a4.globals.gridWidth ? c3 = a4.globals.gridWidth - o3 : s2.clientX - r3.left < 0 && (c3 = o3), o3 > s2.clientX - r3.left && (l2 = true, c3 = Math.abs(c3)), n2 > s2.clientY - r3.top && (h2 = true, d2 = Math.abs(d2)), g2 = "x" === i2 ? { x: l2 ? o3 - c3 : o3, y: 0, width: c3, height: a4.globals.gridHeight } : "y" === i2 ? { x: 0, y: h2 ? n2 - d2 : n2, width: a4.globals.gridWidth, height: d2 } : { x: l2 ? o3 - c3 : o3, y: h2 ? n2 - d2 : n2, width: c3, height: d2 }, s2.drawSelectionRect(g2), s2.selectionDragging("resizing"), g2;
      } }, { key: "selectionDragging", value: function(t4, e4) {
        var i2 = this, a4 = this.w, s2 = this.xyRatios, r3 = this.selectionRect, o3 = 0;
        "resizing" === t4 && (o3 = 30);
        var n2 = function(t5) {
          return parseFloat(r3.node.getAttribute(t5));
        }, l2 = { x: n2("x"), y: n2("y"), width: n2("width"), height: n2("height") };
        a4.globals.selection = l2, "function" == typeof a4.config.chart.events.selection && a4.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function() {
          var t5, e5, o4, n3, l3 = i2.gridRect.getBoundingClientRect(), h2 = r3.node.getBoundingClientRect();
          a4.globals.isRangeBar ? (t5 = a4.globals.yAxisScale[0].niceMin + (h2.left - l3.left) * s2.invertedYRatio, e5 = a4.globals.yAxisScale[0].niceMin + (h2.right - l3.left) * s2.invertedYRatio, o4 = 0, n3 = 1) : (t5 = a4.globals.xAxisScale.niceMin + (h2.left - l3.left) * s2.xRatio, e5 = a4.globals.xAxisScale.niceMin + (h2.right - l3.left) * s2.xRatio, o4 = a4.globals.yAxisScale[0].niceMin + (l3.bottom - h2.bottom) * s2.yRatio[0], n3 = a4.globals.yAxisScale[0].niceMax - (h2.top - l3.top) * s2.yRatio[0]);
          var c3 = { xaxis: { min: t5, max: e5 }, yaxis: { min: o4, max: n3 } };
          a4.config.chart.events.selection(i2.ctx, c3), a4.config.chart.brush.enabled && void 0 !== a4.config.chart.events.brushScrolled && a4.config.chart.events.brushScrolled(i2.ctx, c3);
        }, o3));
      } }, { key: "selectionDrawn", value: function(t4) {
        var e4 = t4.context, i2 = t4.zoomtype, a4 = this.w, s2 = e4, r3 = this.xyRatios, o3 = this.ctx.toolbar;
        if (s2.startX > s2.endX) {
          var n2 = s2.startX;
          s2.startX = s2.endX, s2.endX = n2;
        }
        if (s2.startY > s2.endY) {
          var l2 = s2.startY;
          s2.startY = s2.endY, s2.endY = l2;
        }
        var h2 = void 0, c3 = void 0;
        a4.globals.isRangeBar ? (h2 = a4.globals.yAxisScale[0].niceMin + s2.startX * r3.invertedYRatio, c3 = a4.globals.yAxisScale[0].niceMin + s2.endX * r3.invertedYRatio) : (h2 = a4.globals.xAxisScale.niceMin + s2.startX * r3.xRatio, c3 = a4.globals.xAxisScale.niceMin + s2.endX * r3.xRatio);
        var d2 = [], g2 = [];
        if (a4.config.yaxis.forEach(function(t5, e5) {
          var i3 = a4.globals.seriesYAxisMap[e5][0];
          d2.push(a4.globals.yAxisScale[e5].niceMax - r3.yRatio[i3] * s2.startY), g2.push(a4.globals.yAxisScale[e5].niceMax - r3.yRatio[i3] * s2.endY);
        }), s2.dragged && (s2.dragX > 10 || s2.dragY > 10) && h2 !== c3) {
          if (a4.globals.zoomEnabled) {
            var u2 = v.clone(a4.globals.initialConfig.yaxis), p2 = v.clone(a4.globals.initialConfig.xaxis);
            if (a4.globals.zoomed = true, a4.config.xaxis.convertedCatToNumeric && (h2 = Math.floor(h2), c3 = Math.floor(c3), h2 < 1 && (h2 = 1, c3 = a4.globals.dataPoints), c3 - h2 < 2 && (c3 = h2 + 1)), "xy" !== i2 && "x" !== i2 || (p2 = { min: h2, max: c3 }), "xy" !== i2 && "y" !== i2 || u2.forEach(function(t5, e5) {
              u2[e5].min = g2[e5], u2[e5].max = d2[e5];
            }), o3) {
              var f2 = o3.getBeforeZoomRange(p2, u2);
              f2 && (p2 = f2.xaxis ? f2.xaxis : p2, u2 = f2.yaxis ? f2.yaxis : u2);
            }
            var x2 = { xaxis: p2 };
            a4.config.chart.group || (x2.yaxis = u2), s2.ctx.updateHelpers._updateOptions(x2, false, s2.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof a4.config.chart.events.zoomed && o3.zoomCallback(p2, u2);
          } else if (a4.globals.selectionEnabled) {
            var b2, m2 = null;
            b2 = { min: h2, max: c3 }, "xy" !== i2 && "y" !== i2 || (m2 = v.clone(a4.config.yaxis)).forEach(function(t5, e5) {
              m2[e5].min = g2[e5], m2[e5].max = d2[e5];
            }), a4.globals.selection = s2.selection, "function" == typeof a4.config.chart.events.selection && a4.config.chart.events.selection(s2.ctx, { xaxis: b2, yaxis: m2 });
          }
        }
      } }, { key: "panDragging", value: function(t4) {
        var e4 = t4.context, i2 = this.w, a4 = e4;
        if (void 0 !== i2.globals.lastClientPosition.x) {
          var s2 = i2.globals.lastClientPosition.x - a4.clientX, r3 = i2.globals.lastClientPosition.y - a4.clientY;
          Math.abs(s2) > Math.abs(r3) && s2 > 0 ? this.moveDirection = "left" : Math.abs(s2) > Math.abs(r3) && s2 < 0 ? this.moveDirection = "right" : Math.abs(r3) > Math.abs(s2) && r3 > 0 ? this.moveDirection = "up" : Math.abs(r3) > Math.abs(s2) && r3 < 0 && (this.moveDirection = "down");
        }
        i2.globals.lastClientPosition = { x: a4.clientX, y: a4.clientY };
        var o3 = i2.globals.isRangeBar ? i2.globals.minY : i2.globals.minX, n2 = i2.globals.isRangeBar ? i2.globals.maxY : i2.globals.maxX;
        i2.config.xaxis.convertedCatToNumeric || a4.panScrolled(o3, n2);
      } }, { key: "delayedPanScrolled", value: function() {
        var t4 = this.w, e4 = t4.globals.minX, i2 = t4.globals.maxX, a4 = (t4.globals.maxX - t4.globals.minX) / 2;
        "left" === this.moveDirection ? (e4 = t4.globals.minX + a4, i2 = t4.globals.maxX + a4) : "right" === this.moveDirection && (e4 = t4.globals.minX - a4, i2 = t4.globals.maxX - a4), e4 = Math.floor(e4), i2 = Math.floor(i2), this.updateScrolledChart({ xaxis: { min: e4, max: i2 } }, e4, i2);
      } }, { key: "panScrolled", value: function(t4, e4) {
        var i2 = this.w, a4 = this.xyRatios, s2 = v.clone(i2.globals.initialConfig.yaxis), r3 = a4.xRatio, o3 = i2.globals.minX, n2 = i2.globals.maxX;
        i2.globals.isRangeBar && (r3 = a4.invertedYRatio, o3 = i2.globals.minY, n2 = i2.globals.maxY), "left" === this.moveDirection ? (t4 = o3 + i2.globals.gridWidth / 15 * r3, e4 = n2 + i2.globals.gridWidth / 15 * r3) : "right" === this.moveDirection && (t4 = o3 - i2.globals.gridWidth / 15 * r3, e4 = n2 - i2.globals.gridWidth / 15 * r3), i2.globals.isRangeBar || (t4 < i2.globals.initialMinX || e4 > i2.globals.initialMaxX) && (t4 = o3, e4 = n2);
        var l2 = { xaxis: { min: t4, max: e4 } };
        i2.config.chart.group || (l2.yaxis = s2), this.updateScrolledChart(l2, t4, e4);
      } }, { key: "updateScrolledChart", value: function(t4, e4, i2) {
        var a4 = this.w;
        this.ctx.updateHelpers._updateOptions(t4, false, false), "function" == typeof a4.config.chart.events.scrolled && a4.config.chart.events.scrolled(this.ctx, { xaxis: { min: e4, max: i2 } });
      } }]), a3;
    }();
    var ut2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.ttCtx = e3, this.ctx = e3.ctx;
      }
      return s(t3, [{ key: "getNearestValues", value: function(t4) {
        var e3 = t4.hoverArea, i2 = t4.elGrid, a3 = t4.clientX, s2 = t4.clientY, r3 = this.w, o3 = i2.getBoundingClientRect(), n2 = o3.width, l2 = o3.height, h2 = n2 / (r3.globals.dataPoints - 1), c3 = l2 / r3.globals.dataPoints, d2 = this.hasBars();
        !r3.globals.comboCharts && !d2 || r3.config.xaxis.convertedCatToNumeric || (h2 = n2 / r3.globals.dataPoints);
        var g2 = a3 - o3.left - r3.globals.barPadForNumericAxis, u2 = s2 - o3.top;
        g2 < 0 || u2 < 0 || g2 > n2 || u2 > l2 ? (e3.classList.remove("hovering-zoom"), e3.classList.remove("hovering-pan")) : r3.globals.zoomEnabled ? (e3.classList.remove("hovering-pan"), e3.classList.add("hovering-zoom")) : r3.globals.panEnabled && (e3.classList.remove("hovering-zoom"), e3.classList.add("hovering-pan"));
        var p2 = Math.round(g2 / h2), f2 = Math.floor(u2 / c3);
        d2 && !r3.config.xaxis.convertedCatToNumeric && (p2 = Math.ceil(g2 / h2), p2 -= 1);
        var x2 = null, b2 = null, m2 = r3.globals.seriesXvalues.map(function(t5) {
          return t5.filter(function(t6) {
            return v.isNumber(t6);
          });
        }), y3 = r3.globals.seriesYvalues.map(function(t5) {
          return t5.filter(function(t6) {
            return v.isNumber(t6);
          });
        });
        if (r3.globals.isXNumeric) {
          var w2 = this.ttCtx.getElGrid().getBoundingClientRect(), k2 = g2 * (w2.width / n2), A2 = u2 * (w2.height / l2);
          x2 = (b2 = this.closestInMultiArray(k2, A2, m2, y3)).index, p2 = b2.j, null !== x2 && (m2 = r3.globals.seriesXvalues[x2], p2 = (b2 = this.closestInArray(k2, m2)).index);
        }
        return r3.globals.capturedSeriesIndex = null === x2 ? -1 : x2, (!p2 || p2 < 1) && (p2 = 0), r3.globals.isBarHorizontal ? r3.globals.capturedDataPointIndex = f2 : r3.globals.capturedDataPointIndex = p2, { capturedSeries: x2, j: r3.globals.isBarHorizontal ? f2 : p2, hoverX: g2, hoverY: u2 };
      } }, { key: "closestInMultiArray", value: function(t4, e3, i2, a3) {
        var s2 = this.w, r3 = 0, o3 = null, n2 = -1;
        s2.globals.series.length > 1 ? r3 = this.getFirstActiveXArray(i2) : o3 = 0;
        var l2 = i2[r3][0], h2 = Math.abs(t4 - l2);
        if (i2.forEach(function(e4) {
          e4.forEach(function(e5, i3) {
            var a4 = Math.abs(t4 - e5);
            a4 <= h2 && (h2 = a4, n2 = i3);
          });
        }), -1 !== n2) {
          var c3 = a3[r3][n2], d2 = Math.abs(e3 - c3);
          o3 = r3, a3.forEach(function(t5, i3) {
            var a4 = Math.abs(e3 - t5[n2]);
            a4 <= d2 && (d2 = a4, o3 = i3);
          });
        }
        return { index: o3, j: n2 };
      } }, { key: "getFirstActiveXArray", value: function(t4) {
        for (var e3 = this.w, i2 = 0, a3 = t4.map(function(t5, e4) {
          return t5.length > 0 ? e4 : -1;
        }), s2 = 0; s2 < a3.length; s2++) if (-1 !== a3[s2] && -1 === e3.globals.collapsedSeriesIndices.indexOf(s2) && -1 === e3.globals.ancillaryCollapsedSeriesIndices.indexOf(s2)) {
          i2 = a3[s2];
          break;
        }
        return i2;
      } }, { key: "closestInArray", value: function(t4, e3) {
        for (var i2 = e3[0], a3 = null, s2 = Math.abs(t4 - i2), r3 = 0; r3 < e3.length; r3++) {
          var o3 = Math.abs(t4 - e3[r3]);
          o3 < s2 && (s2 = o3, a3 = r3);
        }
        return { index: a3 };
      } }, { key: "isXoverlap", value: function(t4) {
        var e3 = [], i2 = this.w.globals.seriesX.filter(function(t5) {
          return void 0 !== t5[0];
        });
        if (i2.length > 0) for (var a3 = 0; a3 < i2.length - 1; a3++) void 0 !== i2[a3][t4] && void 0 !== i2[a3 + 1][t4] && i2[a3][t4] !== i2[a3 + 1][t4] && e3.push("unEqual");
        return 0 === e3.length;
      } }, { key: "isInitialSeriesSameLen", value: function() {
        for (var t4 = true, e3 = this.w.globals.initialSeries, i2 = 0; i2 < e3.length - 1; i2++) if (e3[i2].data.length !== e3[i2 + 1].data.length) {
          t4 = false;
          break;
        }
        return t4;
      } }, { key: "getBarsHeight", value: function(t4) {
        return p(t4).reduce(function(t5, e3) {
          return t5 + e3.getBBox().height;
        }, 0);
      } }, { key: "getElMarkers", value: function(t4) {
        return "number" == typeof t4 ? this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:realIndex='".concat(t4, "'] .apexcharts-series-markers-wrap > *")) : this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap > *");
      } }, { key: "getAllMarkers", value: function() {
        var t4 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");
        (t4 = p(t4)).sort(function(t5, e4) {
          var i2 = Number(t5.getAttribute("data:realIndex")), a3 = Number(e4.getAttribute("data:realIndex"));
          return a3 < i2 ? 1 : a3 > i2 ? -1 : 0;
        });
        var e3 = [];
        return t4.forEach(function(t5) {
          e3.push(t5.querySelector(".apexcharts-marker"));
        }), e3;
      } }, { key: "hasMarkers", value: function(t4) {
        return this.getElMarkers(t4).length > 0;
      } }, { key: "getPathFromPoint", value: function(t4, e3) {
        var i2 = Number(t4.getAttribute("cx")), a3 = Number(t4.getAttribute("cy")), s2 = t4.getAttribute("shape");
        return new w(this.ctx).getMarkerPath(i2, a3, s2, e3);
      } }, { key: "getElBars", value: function() {
        return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series");
      } }, { key: "hasBars", value: function() {
        return this.getElBars().length > 0;
      } }, { key: "getHoverMarkerSize", value: function(t4) {
        var e3 = this.w, i2 = e3.config.markers.hover.size;
        return void 0 === i2 && (i2 = e3.globals.markers.size[t4] + e3.config.markers.hover.sizeOffset), i2;
      } }, { key: "toggleAllTooltipSeriesGroups", value: function(t4) {
        var e3 = this.w, i2 = this.ttCtx;
        0 === i2.allTooltipSeriesGroups.length && (i2.allTooltipSeriesGroups = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));
        for (var a3 = i2.allTooltipSeriesGroups, s2 = 0; s2 < a3.length; s2++) "enable" === t4 ? (a3[s2].classList.add("apexcharts-active"), a3[s2].style.display = e3.config.tooltip.items.display) : (a3[s2].classList.remove("apexcharts-active"), a3[s2].style.display = "none");
      } }]), t3;
    }();
    var pt2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.ctx = e3.ctx, this.ttCtx = e3, this.tooltipUtil = new ut2(e3);
      }
      return s(t3, [{ key: "drawSeriesTexts", value: function(t4) {
        var e3 = t4.shared, i2 = void 0 === e3 || e3, a3 = t4.ttItems, s2 = t4.i, r3 = void 0 === s2 ? 0 : s2, o3 = t4.j, n2 = void 0 === o3 ? null : o3, l2 = t4.y1, h2 = t4.y2, c3 = t4.e, d2 = this.w;
        void 0 !== d2.config.tooltip.custom ? this.handleCustomTooltip({ i: r3, j: n2, y1: l2, y2: h2, w: d2 }) : this.toggleActiveInactiveSeries(i2, r3);
        var g2 = this.getValuesToPrint({ i: r3, j: n2 });
        this.printLabels({ i: r3, j: n2, values: g2, ttItems: a3, shared: i2, e: c3 });
        var u2 = this.ttCtx.getElTooltip();
        this.ttCtx.tooltipRect.ttWidth = u2.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = u2.getBoundingClientRect().height;
      } }, { key: "printLabels", value: function(t4) {
        var e3, i2 = this, a3 = t4.i, s2 = t4.j, r3 = t4.values, o3 = t4.ttItems, n2 = t4.shared, l2 = t4.e, h2 = this.w, c3 = [], g2 = function(t5) {
          return h2.globals.seriesGoals[t5] && h2.globals.seriesGoals[t5][s2] && Array.isArray(h2.globals.seriesGoals[t5][s2]);
        }, u2 = r3.xVal, p2 = r3.zVal, f2 = r3.xAxisTTVal, x2 = "", b2 = h2.globals.colors[a3];
        null !== s2 && h2.config.plotOptions.bar.distributed && (b2 = h2.globals.colors[s2]);
        for (var v2 = function(t5, r4) {
          var v3 = i2.getFormatters(a3);
          x2 = i2.getSeriesName({ fn: v3.yLbTitleFormatter, index: a3, seriesIndex: a3, j: s2 }), "treemap" === h2.config.chart.type && (x2 = v3.yLbTitleFormatter(String(h2.config.series[a3].data[s2].x), { series: h2.globals.series, seriesIndex: a3, dataPointIndex: s2, w: h2 }));
          var m3 = h2.config.tooltip.inverseOrder ? r4 : t5;
          if (h2.globals.axisCharts) {
            var y4 = function(t6) {
              var e4, i3, a4, r5;
              return h2.globals.isRangeData ? v3.yLbFormatter(null === (e4 = h2.globals.seriesRangeStart) || void 0 === e4 || null === (i3 = e4[t6]) || void 0 === i3 ? void 0 : i3[s2], { series: h2.globals.seriesRangeStart, seriesIndex: t6, dataPointIndex: s2, w: h2 }) + " - " + v3.yLbFormatter(null === (a4 = h2.globals.seriesRangeEnd) || void 0 === a4 || null === (r5 = a4[t6]) || void 0 === r5 ? void 0 : r5[s2], { series: h2.globals.seriesRangeEnd, seriesIndex: t6, dataPointIndex: s2, w: h2 }) : v3.yLbFormatter(h2.globals.series[t6][s2], { series: h2.globals.series, seriesIndex: t6, dataPointIndex: s2, w: h2 });
            };
            if (n2) v3 = i2.getFormatters(m3), x2 = i2.getSeriesName({ fn: v3.yLbTitleFormatter, index: m3, seriesIndex: a3, j: s2 }), b2 = h2.globals.colors[m3], e3 = y4(m3), g2(m3) && (c3 = h2.globals.seriesGoals[m3][s2].map(function(t6) {
              return { attrs: t6, val: v3.yLbFormatter(t6.value, { seriesIndex: m3, dataPointIndex: s2, w: h2 }) };
            }));
            else {
              var w2, k2 = null == l2 || null === (w2 = l2.target) || void 0 === w2 ? void 0 : w2.getAttribute("fill");
              k2 && (b2 = -1 !== k2.indexOf("url") ? document.querySelector(k2.substr(4).slice(0, -1)).childNodes[0].getAttribute("stroke") : k2), e3 = y4(a3), g2(a3) && Array.isArray(h2.globals.seriesGoals[a3][s2]) && (c3 = h2.globals.seriesGoals[a3][s2].map(function(t6) {
                return { attrs: t6, val: v3.yLbFormatter(t6.value, { seriesIndex: a3, dataPointIndex: s2, w: h2 }) };
              }));
            }
          }
          null === s2 && (e3 = v3.yLbFormatter(h2.globals.series[a3], d(d({}, h2), {}, { seriesIndex: a3, dataPointIndex: a3 }))), i2.DOMHandling({ i: a3, t: m3, j: s2, ttItems: o3, values: { val: e3, goalVals: c3, xVal: u2, xAxisTTVal: f2, zVal: p2 }, seriesName: x2, shared: n2, pColor: b2 });
        }, m2 = 0, y3 = h2.globals.series.length - 1; m2 < h2.globals.series.length; m2++, y3--) v2(m2, y3);
      } }, { key: "getFormatters", value: function(t4) {
        var e3, i2 = this.w, a3 = i2.globals.yLabelFormatters[t4];
        return void 0 !== i2.globals.ttVal ? Array.isArray(i2.globals.ttVal) ? (a3 = i2.globals.ttVal[t4] && i2.globals.ttVal[t4].formatter, e3 = i2.globals.ttVal[t4] && i2.globals.ttVal[t4].title && i2.globals.ttVal[t4].title.formatter) : (a3 = i2.globals.ttVal.formatter, "function" == typeof i2.globals.ttVal.title.formatter && (e3 = i2.globals.ttVal.title.formatter)) : e3 = i2.config.tooltip.y.title.formatter, "function" != typeof a3 && (a3 = i2.globals.yLabelFormatters[0] ? i2.globals.yLabelFormatters[0] : function(t5) {
          return t5;
        }), "function" != typeof e3 && (e3 = function(t5) {
          return t5;
        }), { yLbFormatter: a3, yLbTitleFormatter: e3 };
      } }, { key: "getSeriesName", value: function(t4) {
        var e3 = t4.fn, i2 = t4.index, a3 = t4.seriesIndex, s2 = t4.j, r3 = this.w;
        return e3(String(r3.globals.seriesNames[i2]), { series: r3.globals.series, seriesIndex: a3, dataPointIndex: s2, w: r3 });
      } }, { key: "DOMHandling", value: function(t4) {
        t4.i;
        var e3 = t4.t, i2 = t4.j, a3 = t4.ttItems, s2 = t4.values, r3 = t4.seriesName, o3 = t4.shared, n2 = t4.pColor, l2 = this.w, h2 = this.ttCtx, c3 = s2.val, d2 = s2.goalVals, g2 = s2.xVal, u2 = s2.xAxisTTVal, p2 = s2.zVal, f2 = null;
        f2 = a3[e3].children, l2.config.tooltip.fillSeriesColor && (a3[e3].style.backgroundColor = n2, f2[0].style.display = "none"), h2.showTooltipTitle && (null === h2.tooltipTitle && (h2.tooltipTitle = l2.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), h2.tooltipTitle.innerHTML = g2), h2.isXAxisTooltipEnabled && (h2.xaxisTooltipText.innerHTML = "" !== u2 ? u2 : g2);
        var x2 = a3[e3].querySelector(".apexcharts-tooltip-text-y-label");
        x2 && (x2.innerHTML = r3 || "");
        var b2 = a3[e3].querySelector(".apexcharts-tooltip-text-y-value");
        b2 && (b2.innerHTML = void 0 !== c3 ? c3 : ""), f2[0] && f2[0].classList.contains("apexcharts-tooltip-marker") && (l2.config.tooltip.marker.fillColors && Array.isArray(l2.config.tooltip.marker.fillColors) && (n2 = l2.config.tooltip.marker.fillColors[e3]), f2[0].style.backgroundColor = n2), l2.config.tooltip.marker.show || (f2[0].style.display = "none");
        var v2 = a3[e3].querySelector(".apexcharts-tooltip-text-goals-label"), m2 = a3[e3].querySelector(".apexcharts-tooltip-text-goals-value");
        if (d2.length && l2.globals.seriesGoals[e3]) {
          var y3 = function() {
            var t5 = "<div >", e4 = "<div>";
            d2.forEach(function(i3, a4) {
              t5 += ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(i3.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(i3.attrs.name, "</div>"), e4 += "<div>".concat(i3.val, "</div>");
            }), v2.innerHTML = t5 + "</div>", m2.innerHTML = e4 + "</div>";
          };
          o3 ? l2.globals.seriesGoals[e3][i2] && Array.isArray(l2.globals.seriesGoals[e3][i2]) ? y3() : (v2.innerHTML = "", m2.innerHTML = "") : y3();
        } else v2.innerHTML = "", m2.innerHTML = "";
        null !== p2 && (a3[e3].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = l2.config.tooltip.z.title, a3[e3].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== p2 ? p2 : "");
        if (o3 && f2[0]) {
          if (l2.config.tooltip.hideEmptySeries) {
            var w2 = a3[e3].querySelector(".apexcharts-tooltip-marker"), k2 = a3[e3].querySelector(".apexcharts-tooltip-text");
            0 == parseFloat(c3) ? (w2.style.display = "none", k2.style.display = "none") : (w2.style.display = "block", k2.style.display = "block");
          }
          null == c3 || l2.globals.ancillaryCollapsedSeriesIndices.indexOf(e3) > -1 || l2.globals.collapsedSeriesIndices.indexOf(e3) > -1 || Array.isArray(h2.tConfig.enabledOnSeries) && -1 === h2.tConfig.enabledOnSeries.indexOf(e3) ? f2[0].parentNode.style.display = "none" : f2[0].parentNode.style.display = l2.config.tooltip.items.display;
        } else Array.isArray(h2.tConfig.enabledOnSeries) && -1 === h2.tConfig.enabledOnSeries.indexOf(e3) && (f2[0].parentNode.style.display = "none");
      } }, { key: "toggleActiveInactiveSeries", value: function(t4, e3) {
        var i2 = this.w;
        if (t4) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
        else {
          this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
          var a3 = i2.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group-".concat(e3));
          a3 && (a3.classList.add("apexcharts-active"), a3.style.display = i2.config.tooltip.items.display);
        }
      } }, { key: "getValuesToPrint", value: function(t4) {
        var e3 = t4.i, i2 = t4.j, a3 = this.w, s2 = this.ctx.series.filteredSeriesX(), r3 = "", o3 = "", n2 = null, l2 = null, h2 = { series: a3.globals.series, seriesIndex: e3, dataPointIndex: i2, w: a3 }, c3 = a3.globals.ttZFormatter;
        null === i2 ? l2 = a3.globals.series[e3] : a3.globals.isXNumeric && "treemap" !== a3.config.chart.type ? (r3 = s2[e3][i2], 0 === s2[e3].length && (r3 = s2[this.tooltipUtil.getFirstActiveXArray(s2)][i2])) : r3 = void 0 !== a3.globals.labels[i2] ? a3.globals.labels[i2] : "";
        var d2 = r3;
        a3.globals.isXNumeric && "datetime" === a3.config.xaxis.type ? r3 = new L2(this.ctx).xLabelFormat(a3.globals.ttKeyFormatter, d2, d2, { i: void 0, dateFormatter: new C2(this.ctx).formatDate, w: this.w }) : r3 = a3.globals.isBarHorizontal ? a3.globals.yLabelFormatters[0](d2, h2) : a3.globals.xLabelFormatter(d2, h2);
        return void 0 !== a3.config.tooltip.x.formatter && (r3 = a3.globals.ttKeyFormatter(d2, h2)), a3.globals.seriesZ.length > 0 && a3.globals.seriesZ[e3].length > 0 && (n2 = c3(a3.globals.seriesZ[e3][i2], a3)), o3 = "function" == typeof a3.config.xaxis.tooltip.formatter ? a3.globals.xaxisTooltipFormatter(d2, h2) : r3, { val: Array.isArray(l2) ? l2.join(" ") : l2, xVal: Array.isArray(r3) ? r3.join(" ") : r3, xAxisTTVal: Array.isArray(o3) ? o3.join(" ") : o3, zVal: n2 };
      } }, { key: "handleCustomTooltip", value: function(t4) {
        var e3 = t4.i, i2 = t4.j, a3 = t4.y1, s2 = t4.y2, r3 = t4.w, o3 = this.ttCtx.getElTooltip(), n2 = r3.config.tooltip.custom;
        Array.isArray(n2) && n2[e3] && (n2 = n2[e3]), o3.innerHTML = n2({ ctx: this.ctx, series: r3.globals.series, seriesIndex: e3, dataPointIndex: i2, y1: a3, y2: s2, w: r3 });
      } }]), t3;
    }();
    var ft2 = function() {
      function t3(e3) {
        i(this, t3), this.ttCtx = e3, this.ctx = e3.ctx, this.w = e3.w;
      }
      return s(t3, [{ key: "moveXCrosshairs", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i2 = this.ttCtx, a3 = this.w, s2 = i2.getElXCrosshairs(), r3 = t4 - i2.xcrosshairsWidth / 2, o3 = a3.globals.labels.slice().length;
        if (null !== e3 && (r3 = a3.globals.gridWidth / o3 * e3), null === s2 || a3.globals.isBarHorizontal || (s2.setAttribute("x", r3), s2.setAttribute("x1", r3), s2.setAttribute("x2", r3), s2.setAttribute("y2", a3.globals.gridHeight), s2.classList.add("apexcharts-active")), r3 < 0 && (r3 = 0), r3 > a3.globals.gridWidth && (r3 = a3.globals.gridWidth), i2.isXAxisTooltipEnabled) {
          var n2 = r3;
          "tickWidth" !== a3.config.xaxis.crosshairs.width && "barWidth" !== a3.config.xaxis.crosshairs.width || (n2 = r3 + i2.xcrosshairsWidth / 2), this.moveXAxisTooltip(n2);
        }
      } }, { key: "moveYCrosshairs", value: function(t4) {
        var e3 = this.ttCtx;
        null !== e3.ycrosshairs && w.setAttrs(e3.ycrosshairs, { y1: t4, y2: t4 }), null !== e3.ycrosshairsHidden && w.setAttrs(e3.ycrosshairsHidden, { y1: t4, y2: t4 });
      } }, { key: "moveXAxisTooltip", value: function(t4) {
        var e3 = this.w, i2 = this.ttCtx;
        if (null !== i2.xaxisTooltip && 0 !== i2.xcrosshairsWidth) {
          i2.xaxisTooltip.classList.add("apexcharts-active");
          var a3 = i2.xaxisOffY + e3.config.xaxis.tooltip.offsetY + e3.globals.translateY + 1 + e3.config.xaxis.offsetY;
          if (t4 -= i2.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t4)) {
            t4 += e3.globals.translateX;
            var s2;
            s2 = new w(this.ctx).getTextRects(i2.xaxisTooltipText.innerHTML), i2.xaxisTooltipText.style.minWidth = s2.width + "px", i2.xaxisTooltip.style.left = t4 + "px", i2.xaxisTooltip.style.top = a3 + "px";
          }
        }
      } }, { key: "moveYAxisTooltip", value: function(t4) {
        var e3 = this.w, i2 = this.ttCtx;
        null === i2.yaxisTTEls && (i2.yaxisTTEls = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
        var a3 = parseInt(i2.ycrosshairsHidden.getAttribute("y1"), 10), s2 = e3.globals.translateY + a3, r3 = i2.yaxisTTEls[t4].getBoundingClientRect().height, o3 = e3.globals.translateYAxisX[t4] - 2;
        e3.config.yaxis[t4].opposite && (o3 -= 26), s2 -= r3 / 2, -1 === e3.globals.ignoreYAxisIndexes.indexOf(t4) ? (i2.yaxisTTEls[t4].classList.add("apexcharts-active"), i2.yaxisTTEls[t4].style.top = s2 + "px", i2.yaxisTTEls[t4].style.left = o3 + e3.config.yaxis[t4].tooltip.offsetX + "px") : i2.yaxisTTEls[t4].classList.remove("apexcharts-active");
      } }, { key: "moveTooltip", value: function(t4, e3) {
        var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = this.w, s2 = this.ttCtx, r3 = s2.getElTooltip(), o3 = s2.tooltipRect, n2 = null !== i2 ? parseFloat(i2) : 1, l2 = parseFloat(t4) + n2 + 5, h2 = parseFloat(e3) + n2 / 2;
        if (l2 > a3.globals.gridWidth / 2 && (l2 = l2 - o3.ttWidth - n2 - 10), l2 > a3.globals.gridWidth - o3.ttWidth - 10 && (l2 = a3.globals.gridWidth - o3.ttWidth), l2 < -20 && (l2 = -20), a3.config.tooltip.followCursor) {
          var c3 = s2.getElGrid().getBoundingClientRect();
          (l2 = s2.e.clientX - c3.left) > a3.globals.gridWidth / 2 && (l2 -= s2.tooltipRect.ttWidth), (h2 = s2.e.clientY + a3.globals.translateY - c3.top) > a3.globals.gridHeight / 2 && (h2 -= s2.tooltipRect.ttHeight);
        } else a3.globals.isBarHorizontal || o3.ttHeight / 2 + h2 > a3.globals.gridHeight && (h2 = a3.globals.gridHeight - o3.ttHeight + a3.globals.translateY);
        isNaN(l2) || (l2 += a3.globals.translateX, r3.style.left = l2 + "px", r3.style.top = h2 + "px");
      } }, { key: "moveMarkers", value: function(t4, e3) {
        var i2 = this.w, a3 = this.ttCtx;
        if (i2.globals.markers.size[t4] > 0) for (var s2 = i2.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t4, "'] .apexcharts-marker")), r3 = 0; r3 < s2.length; r3++) parseInt(s2[r3].getAttribute("rel"), 10) === e3 && (a3.marker.resetPointsSize(), a3.marker.enlargeCurrentPoint(e3, s2[r3]));
        else a3.marker.resetPointsSize(), this.moveDynamicPointOnHover(e3, t4);
      } }, { key: "moveDynamicPointOnHover", value: function(t4, e3) {
        var i2, a3, s2, r3, o3 = this.w, n2 = this.ttCtx, l2 = new w(this.ctx), h2 = o3.globals.pointsArray, c3 = n2.tooltipUtil.getHoverMarkerSize(e3), d2 = o3.config.series[e3].type;
        if (!d2 || "column" !== d2 && "candlestick" !== d2 && "boxPlot" !== d2) {
          s2 = null === (i2 = h2[e3][t4]) || void 0 === i2 ? void 0 : i2[0], r3 = (null === (a3 = h2[e3][t4]) || void 0 === a3 ? void 0 : a3[1]) || 0;
          var g2 = o3.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e3, "'] .apexcharts-series-markers path"));
          if (g2 && r3 < o3.globals.gridHeight && r3 > 0) {
            var u2 = g2.getAttribute("shape"), p2 = l2.getMarkerPath(s2, r3, u2, 1.5 * c3);
            g2.setAttribute("d", p2);
          }
          this.moveXCrosshairs(s2), n2.fixedTooltip || this.moveTooltip(s2, r3, c3);
        }
      } }, { key: "moveDynamicPointsOnHover", value: function(t4) {
        var e3, i2 = this.ttCtx, a3 = i2.w, s2 = 0, r3 = 0, o3 = a3.globals.pointsArray, n2 = new G2(this.ctx), l2 = new w(this.ctx);
        e3 = n2.getActiveConfigSeriesIndex("asc", ["line", "area", "scatter", "bubble"]);
        var h2 = i2.tooltipUtil.getHoverMarkerSize(e3);
        o3[e3] && (s2 = o3[e3][t4][0], r3 = o3[e3][t4][1]);
        var c3 = i2.tooltipUtil.getAllMarkers();
        if (null !== c3) for (var d2 = 0; d2 < a3.globals.series.length; d2++) {
          var g2 = o3[d2];
          if (a3.globals.comboCharts && void 0 === g2 && c3.splice(d2, 0, null), g2 && g2.length) {
            var u2 = o3[d2][t4][1], p2 = void 0;
            c3[d2].setAttribute("cx", s2);
            var f2 = c3[d2].getAttribute("shape");
            if ("rangeArea" === a3.config.chart.type && !a3.globals.comboCharts) {
              var x2 = t4 + a3.globals.series[d2].length;
              p2 = o3[d2][x2][1], u2 -= Math.abs(u2 - p2) / 2;
            }
            if (null !== u2 && !isNaN(u2) && u2 < a3.globals.gridHeight + h2 && u2 + h2 > 0) {
              var b2 = l2.getMarkerPath(s2, u2, f2, h2);
              c3[d2].setAttribute("d", b2);
            } else c3[d2].setAttribute("d", "");
          }
        }
        this.moveXCrosshairs(s2), i2.fixedTooltip || this.moveTooltip(s2, r3 || a3.globals.gridHeight, h2);
      } }, { key: "moveStickyTooltipOverBars", value: function(t4, e3) {
        var i2 = this.w, a3 = this.ttCtx, s2 = i2.globals.columnSeries ? i2.globals.columnSeries.length : i2.globals.series.length, r3 = s2 >= 2 && s2 % 2 == 0 ? Math.floor(s2 / 2) : Math.floor(s2 / 2) + 1;
        i2.globals.isBarHorizontal && (r3 = new G2(this.ctx).getActiveConfigSeriesIndex("desc") + 1);
        var o3 = i2.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(r3, "'] path[j='").concat(t4, "'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(r3, "'] path[j='").concat(t4, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(r3, "'] path[j='").concat(t4, "'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(r3, "'] path[j='").concat(t4, "']"));
        o3 || "number" != typeof e3 || (o3 = i2.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[data\\:realIndex='".concat(e3, "'] path[j='").concat(t4, "'],\n        .apexcharts-candlestick-series .apexcharts-series[data\\:realIndex='").concat(e3, "'] path[j='").concat(t4, "'],\n        .apexcharts-boxPlot-series .apexcharts-series[data\\:realIndex='").concat(e3, "'] path[j='").concat(t4, "'],\n        .apexcharts-rangebar-series .apexcharts-series[data\\:realIndex='").concat(e3, "'] path[j='").concat(t4, "']")));
        var n2 = o3 ? parseFloat(o3.getAttribute("cx")) : 0, l2 = o3 ? parseFloat(o3.getAttribute("cy")) : 0, h2 = o3 ? parseFloat(o3.getAttribute("barWidth")) : 0, c3 = a3.getElGrid().getBoundingClientRect(), d2 = o3 && (o3.classList.contains("apexcharts-candlestick-area") || o3.classList.contains("apexcharts-boxPlot-area"));
        i2.globals.isXNumeric ? (o3 && !d2 && (n2 -= s2 % 2 != 0 ? h2 / 2 : 0), o3 && d2 && i2.globals.comboCharts && (n2 -= h2 / 2)) : i2.globals.isBarHorizontal || (n2 = a3.xAxisTicksPositions[t4 - 1] + a3.dataPointsDividedWidth / 2, isNaN(n2) && (n2 = a3.xAxisTicksPositions[t4] - a3.dataPointsDividedWidth / 2)), i2.globals.isBarHorizontal ? l2 -= a3.tooltipRect.ttHeight : i2.config.tooltip.followCursor ? l2 = a3.e.clientY - c3.top - a3.tooltipRect.ttHeight / 2 : l2 + a3.tooltipRect.ttHeight + 15 > i2.globals.gridHeight && (l2 = i2.globals.gridHeight), i2.globals.isBarHorizontal || this.moveXCrosshairs(n2), a3.fixedTooltip || this.moveTooltip(n2, l2 || i2.globals.gridHeight);
      } }]), t3;
    }();
    var xt2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.ttCtx = e3, this.ctx = e3.ctx, this.tooltipPosition = new ft2(e3);
      }
      return s(t3, [{ key: "drawDynamicPoints", value: function() {
        var t4 = this.w, e3 = new w(this.ctx), i2 = new N(this.ctx), a3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
        a3 = p(a3), t4.config.chart.stacked && a3.sort(function(t5, e4) {
          return parseFloat(t5.getAttribute("data:realIndex")) - parseFloat(e4.getAttribute("data:realIndex"));
        });
        for (var s2 = 0; s2 < a3.length; s2++) {
          var r3 = a3[s2].querySelector(".apexcharts-series-markers-wrap");
          if (null !== r3) {
            var o3 = void 0, n2 = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
            "line" !== t4.config.chart.type && "area" !== t4.config.chart.type || t4.globals.comboCharts || t4.config.tooltip.intersect || (n2 += " no-pointer-events");
            var l2 = i2.getMarkerConfig({ cssClass: n2, seriesIndex: Number(r3.getAttribute("data:realIndex")) });
            (o3 = e3.drawMarker(0, 0, l2)).node.setAttribute("default-marker-size", 0);
            var h2 = document.createElementNS(t4.globals.SVGNS, "g");
            h2.classList.add("apexcharts-series-markers"), h2.appendChild(o3.node), r3.appendChild(h2);
          }
        }
      } }, { key: "enlargeCurrentPoint", value: function(t4, e3) {
        var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s2 = this.w;
        "bubble" !== s2.config.chart.type && this.newPointSize(t4, e3);
        var r3 = e3.getAttribute("cx"), o3 = e3.getAttribute("cy");
        if (null !== i2 && null !== a3 && (r3 = i2, o3 = a3), this.tooltipPosition.moveXCrosshairs(r3), !this.fixedTooltip) {
          if ("radar" === s2.config.chart.type) {
            var n2 = this.ttCtx.getElGrid().getBoundingClientRect();
            r3 = this.ttCtx.e.clientX - n2.left;
          }
          this.tooltipPosition.moveTooltip(r3, o3, s2.config.markers.hover.size);
        }
      } }, { key: "enlargePoints", value: function(t4) {
        for (var e3 = this.w, i2 = this, a3 = this.ttCtx, s2 = t4, r3 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), o3 = e3.config.markers.hover.size, n2 = 0; n2 < r3.length; n2++) {
          var l2 = r3[n2].getAttribute("rel"), h2 = r3[n2].getAttribute("index");
          if (void 0 === o3 && (o3 = e3.globals.markers.size[h2] + e3.config.markers.hover.sizeOffset), s2 === parseInt(l2, 10)) {
            i2.newPointSize(s2, r3[n2]);
            var c3 = r3[n2].getAttribute("cx"), d2 = r3[n2].getAttribute("cy");
            i2.tooltipPosition.moveXCrosshairs(c3), a3.fixedTooltip || i2.tooltipPosition.moveTooltip(c3, d2, o3);
          } else i2.oldPointSize(r3[n2]);
        }
      } }, { key: "newPointSize", value: function(t4, e3) {
        var i2 = this.w, a3 = i2.config.markers.hover.size, s2 = 0 === t4 ? e3.parentNode.firstChild : e3.parentNode.lastChild;
        if ("0" !== s2.getAttribute("default-marker-size")) {
          var r3 = parseInt(s2.getAttribute("index"), 10);
          void 0 === a3 && (a3 = i2.globals.markers.size[r3] + i2.config.markers.hover.sizeOffset), a3 < 0 && (a3 = 0);
          var o3 = this.ttCtx.tooltipUtil.getPathFromPoint(e3, a3);
          e3.setAttribute("d", o3);
        }
      } }, { key: "oldPointSize", value: function(t4) {
        var e3 = parseFloat(t4.getAttribute("default-marker-size")), i2 = this.ttCtx.tooltipUtil.getPathFromPoint(t4, e3);
        t4.setAttribute("d", i2);
      } }, { key: "resetPointsSize", value: function() {
        for (var t4 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e3 = 0; e3 < t4.length; e3++) {
          var i2 = parseFloat(t4[e3].getAttribute("default-marker-size"));
          if (v.isNumber(i2) && i2 >= 0) {
            var a3 = this.ttCtx.tooltipUtil.getPathFromPoint(t4[e3], i2);
            t4[e3].setAttribute("d", a3);
          } else t4[e3].setAttribute("d", "M0,0");
        }
      } }]), t3;
    }();
    var bt3 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w;
        var a3 = this.w;
        this.ttCtx = e3, this.isVerticalGroupedRangeBar = !a3.globals.isBarHorizontal && "rangeBar" === a3.config.chart.type && a3.config.plotOptions.bar.rangeBarGroupRows;
      }
      return s(t3, [{ key: "getAttr", value: function(t4, e3) {
        return parseFloat(t4.target.getAttribute(e3));
      } }, { key: "handleHeatTreeTooltip", value: function(t4) {
        var e3 = t4.e, i2 = t4.opt, a3 = t4.x, s2 = t4.y, r3 = t4.type, o3 = this.ttCtx, n2 = this.w;
        if (e3.target.classList.contains("apexcharts-".concat(r3, "-rect"))) {
          var l2 = this.getAttr(e3, "i"), h2 = this.getAttr(e3, "j"), c3 = this.getAttr(e3, "cx"), d2 = this.getAttr(e3, "cy"), g2 = this.getAttr(e3, "width"), u2 = this.getAttr(e3, "height");
          if (o3.tooltipLabels.drawSeriesTexts({ ttItems: i2.ttItems, i: l2, j: h2, shared: false, e: e3 }), n2.globals.capturedSeriesIndex = l2, n2.globals.capturedDataPointIndex = h2, a3 = c3 + o3.tooltipRect.ttWidth / 2 + g2, s2 = d2 + o3.tooltipRect.ttHeight / 2 - u2 / 2, o3.tooltipPosition.moveXCrosshairs(c3 + g2 / 2), a3 > n2.globals.gridWidth / 2 && (a3 = c3 - o3.tooltipRect.ttWidth / 2 + g2), o3.w.config.tooltip.followCursor) {
            var p2 = n2.globals.dom.elWrap.getBoundingClientRect();
            a3 = n2.globals.clientX - p2.left - (a3 > n2.globals.gridWidth / 2 ? o3.tooltipRect.ttWidth : 0), s2 = n2.globals.clientY - p2.top - (s2 > n2.globals.gridHeight / 2 ? o3.tooltipRect.ttHeight : 0);
          }
        }
        return { x: a3, y: s2 };
      } }, { key: "handleMarkerTooltip", value: function(t4) {
        var e3, i2, a3 = t4.e, s2 = t4.opt, r3 = t4.x, o3 = t4.y, n2 = this.w, l2 = this.ttCtx;
        if (a3.target.classList.contains("apexcharts-marker")) {
          var h2 = parseInt(s2.paths.getAttribute("cx"), 10), c3 = parseInt(s2.paths.getAttribute("cy"), 10), d2 = parseFloat(s2.paths.getAttribute("val"));
          if (i2 = parseInt(s2.paths.getAttribute("rel"), 10), e3 = parseInt(s2.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1, l2.intersect) {
            var g2 = v.findAncestor(s2.paths, "apexcharts-series");
            g2 && (e3 = parseInt(g2.getAttribute("data:realIndex"), 10));
          }
          if (l2.tooltipLabels.drawSeriesTexts({ ttItems: s2.ttItems, i: e3, j: i2, shared: !l2.showOnIntersect && n2.config.tooltip.shared, e: a3 }), "mouseup" === a3.type && l2.markerClick(a3, e3, i2), n2.globals.capturedSeriesIndex = e3, n2.globals.capturedDataPointIndex = i2, r3 = h2, o3 = c3 + n2.globals.translateY - 1.4 * l2.tooltipRect.ttHeight, l2.w.config.tooltip.followCursor) {
            var u2 = l2.getElGrid().getBoundingClientRect();
            o3 = l2.e.clientY + n2.globals.translateY - u2.top;
          }
          d2 < 0 && (o3 = c3), l2.marker.enlargeCurrentPoint(i2, s2.paths, r3, o3);
        }
        return { x: r3, y: o3 };
      } }, { key: "handleBarTooltip", value: function(t4) {
        var e3, i2, a3 = t4.e, s2 = t4.opt, r3 = this.w, o3 = this.ttCtx, n2 = o3.getElTooltip(), l2 = 0, h2 = 0, c3 = 0, d2 = this.getBarTooltipXY({ e: a3, opt: s2 });
        e3 = d2.i;
        var g2 = d2.j;
        r3.globals.capturedSeriesIndex = e3, r3.globals.capturedDataPointIndex = g2, r3.globals.isBarHorizontal && o3.tooltipUtil.hasBars() || !r3.config.tooltip.shared ? (h2 = d2.x, c3 = d2.y, i2 = Array.isArray(r3.config.stroke.width) ? r3.config.stroke.width[e3] : r3.config.stroke.width, l2 = h2) : r3.globals.comboCharts || r3.config.tooltip.shared || (l2 /= 2), isNaN(c3) && (c3 = r3.globals.svgHeight - o3.tooltipRect.ttHeight);
        var u2 = parseInt(s2.paths.parentNode.getAttribute("data:realIndex"), 10);
        if (r3.globals.isMultipleYAxis ? r3.config.yaxis[u2] && r3.config.yaxis[u2].reversed : r3.config.yaxis[0].reversed, h2 + o3.tooltipRect.ttWidth > r3.globals.gridWidth ? h2 -= o3.tooltipRect.ttWidth : h2 < 0 && (h2 = 0), o3.w.config.tooltip.followCursor) {
          var p2 = o3.getElGrid().getBoundingClientRect();
          c3 = o3.e.clientY - p2.top;
        }
        null === o3.tooltip && (o3.tooltip = r3.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), r3.config.tooltip.shared || (r3.globals.comboBarCount > 0 ? o3.tooltipPosition.moveXCrosshairs(l2 + i2 / 2) : o3.tooltipPosition.moveXCrosshairs(l2)), !o3.fixedTooltip && (!r3.config.tooltip.shared || r3.globals.isBarHorizontal && o3.tooltipUtil.hasBars()) && (c3 = c3 + r3.globals.translateY - o3.tooltipRect.ttHeight / 2, n2.style.left = h2 + r3.globals.translateX + "px", n2.style.top = c3 + "px");
      } }, { key: "getBarTooltipXY", value: function(t4) {
        var e3 = this, i2 = t4.e, a3 = t4.opt, s2 = this.w, r3 = null, o3 = this.ttCtx, n2 = 0, l2 = 0, h2 = 0, c3 = 0, d2 = 0, g2 = i2.target.classList;
        if (g2.contains("apexcharts-bar-area") || g2.contains("apexcharts-candlestick-area") || g2.contains("apexcharts-boxPlot-area") || g2.contains("apexcharts-rangebar-area")) {
          var u2 = i2.target, p2 = u2.getBoundingClientRect(), f2 = a3.elGrid.getBoundingClientRect(), x2 = p2.height;
          d2 = p2.height;
          var b2 = p2.width, v2 = parseInt(u2.getAttribute("cx"), 10), m2 = parseInt(u2.getAttribute("cy"), 10);
          c3 = parseFloat(u2.getAttribute("barWidth"));
          var y3 = "touchmove" === i2.type ? i2.touches[0].clientX : i2.clientX;
          r3 = parseInt(u2.getAttribute("j"), 10), n2 = parseInt(u2.parentNode.getAttribute("rel"), 10) - 1;
          var w2 = u2.getAttribute("data-range-y1"), k2 = u2.getAttribute("data-range-y2");
          s2.globals.comboCharts && (n2 = parseInt(u2.parentNode.getAttribute("data:realIndex"), 10));
          var A2 = function(t5) {
            return s2.globals.isXNumeric ? v2 - b2 / 2 : e3.isVerticalGroupedRangeBar ? v2 + b2 / 2 : v2 - o3.dataPointsDividedWidth + b2 / 2;
          }, S2 = function() {
            return m2 - o3.dataPointsDividedHeight + x2 / 2 - o3.tooltipRect.ttHeight / 2;
          };
          o3.tooltipLabels.drawSeriesTexts({ ttItems: a3.ttItems, i: n2, j: r3, y1: w2 ? parseInt(w2, 10) : null, y2: k2 ? parseInt(k2, 10) : null, shared: !o3.showOnIntersect && s2.config.tooltip.shared, e: i2 }), s2.config.tooltip.followCursor ? s2.globals.isBarHorizontal ? (l2 = y3 - f2.left + 15, h2 = S2()) : (l2 = A2(), h2 = i2.clientY - f2.top - o3.tooltipRect.ttHeight / 2 - 15) : s2.globals.isBarHorizontal ? ((l2 = v2) < o3.xyRatios.baseLineInvertedY && (l2 = v2 - o3.tooltipRect.ttWidth), h2 = S2()) : (l2 = A2(), h2 = m2);
        }
        return { x: l2, y: h2, barHeight: d2, barWidth: c3, i: n2, j: r3 };
      } }]), t3;
    }();
    var vt2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.ttCtx = e3;
      }
      return s(t3, [{ key: "drawXaxisTooltip", value: function() {
        var t4 = this.w, e3 = this.ttCtx, i2 = "bottom" === t4.config.xaxis.position;
        e3.xaxisOffY = i2 ? t4.globals.gridHeight + 1 : -t4.globals.xAxisHeight - t4.config.xaxis.axisTicks.height + 3;
        var a3 = i2 ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top", s2 = t4.globals.dom.elWrap;
        e3.isXAxisTooltipEnabled && (null === t4.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e3.xaxisTooltip = document.createElement("div"), e3.xaxisTooltip.setAttribute("class", a3 + " apexcharts-theme-" + t4.config.tooltip.theme), s2.appendChild(e3.xaxisTooltip), e3.xaxisTooltipText = document.createElement("div"), e3.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e3.xaxisTooltipText.style.fontFamily = t4.config.xaxis.tooltip.style.fontFamily || t4.config.chart.fontFamily, e3.xaxisTooltipText.style.fontSize = t4.config.xaxis.tooltip.style.fontSize, e3.xaxisTooltip.appendChild(e3.xaxisTooltipText)));
      } }, { key: "drawYaxisTooltip", value: function() {
        for (var t4 = this.w, e3 = this.ttCtx, i2 = 0; i2 < t4.config.yaxis.length; i2++) {
          var a3 = t4.config.yaxis[i2].opposite || t4.config.yaxis[i2].crosshairs.opposite;
          e3.yaxisOffX = a3 ? t4.globals.gridWidth + 1 : 1;
          var s2 = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i2, a3 ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left"), r3 = t4.globals.dom.elWrap;
          null === t4.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i2)) && (e3.yaxisTooltip = document.createElement("div"), e3.yaxisTooltip.setAttribute("class", s2 + " apexcharts-theme-" + t4.config.tooltip.theme), r3.appendChild(e3.yaxisTooltip), 0 === i2 && (e3.yaxisTooltipText = []), e3.yaxisTooltipText[i2] = document.createElement("div"), e3.yaxisTooltipText[i2].classList.add("apexcharts-yaxistooltip-text"), e3.yaxisTooltip.appendChild(e3.yaxisTooltipText[i2]));
        }
      } }, { key: "setXCrosshairWidth", value: function() {
        var t4 = this.w, e3 = this.ttCtx, i2 = e3.getElXCrosshairs();
        if (e3.xcrosshairsWidth = parseInt(t4.config.xaxis.crosshairs.width, 10), t4.globals.comboCharts) {
          var a3 = t4.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
          if (null !== a3 && "barWidth" === t4.config.xaxis.crosshairs.width) {
            var s2 = parseFloat(a3.getAttribute("barWidth"));
            e3.xcrosshairsWidth = s2;
          } else if ("tickWidth" === t4.config.xaxis.crosshairs.width) {
            var r3 = t4.globals.labels.length;
            e3.xcrosshairsWidth = t4.globals.gridWidth / r3;
          }
        } else if ("tickWidth" === t4.config.xaxis.crosshairs.width) {
          var o3 = t4.globals.labels.length;
          e3.xcrosshairsWidth = t4.globals.gridWidth / o3;
        } else if ("barWidth" === t4.config.xaxis.crosshairs.width) {
          var n2 = t4.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
          if (null !== n2) {
            var l2 = parseFloat(n2.getAttribute("barWidth"));
            e3.xcrosshairsWidth = l2;
          } else e3.xcrosshairsWidth = 1;
        }
        t4.globals.isBarHorizontal && (e3.xcrosshairsWidth = 0), null !== i2 && e3.xcrosshairsWidth > 0 && i2.setAttribute("width", e3.xcrosshairsWidth);
      } }, { key: "handleYCrosshair", value: function() {
        var t4 = this.w, e3 = this.ttCtx;
        e3.ycrosshairs = t4.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e3.ycrosshairsHidden = t4.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden");
      } }, { key: "drawYaxisTooltipText", value: function(t4, e3, i2) {
        var a3 = this.ttCtx, s2 = this.w, r3 = s2.globals, o3 = r3.seriesYAxisMap[t4];
        if (a3.yaxisTooltips[t4] && o3.length > 0) {
          var n2 = r3.yLabelFormatters[t4], l2 = a3.getElGrid().getBoundingClientRect(), h2 = o3[0], c3 = 0;
          i2.yRatio.length > 1 && (c3 = h2);
          var d2 = (e3 - l2.top) * i2.yRatio[c3], g2 = r3.maxYArr[h2] - r3.minYArr[h2], u2 = r3.minYArr[h2] + (g2 - d2);
          s2.config.yaxis[t4].reversed && (u2 = r3.maxYArr[h2] - (g2 - d2)), a3.tooltipPosition.moveYCrosshairs(e3 - l2.top), a3.yaxisTooltipText[t4].innerHTML = n2(u2), a3.tooltipPosition.moveYAxisTooltip(t4);
        }
      } }]), t3;
    }();
    var mt2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
        var a3 = this.w;
        this.tConfig = a3.config.tooltip, this.tooltipUtil = new ut2(this), this.tooltipLabels = new pt2(this), this.tooltipPosition = new ft2(this), this.marker = new xt2(this), this.intersect = new bt3(this), this.axesTooltip = new vt2(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !a3.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();
      }
      return s(t3, [{ key: "getElTooltip", value: function(t4) {
        return t4 || (t4 = this), t4.w.globals.dom.baseEl ? t4.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip") : null;
      } }, { key: "getElXCrosshairs", value: function() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
      } }, { key: "getElGrid", value: function() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
      } }, { key: "drawTooltip", value: function(t4) {
        var e3 = this.w;
        this.xyRatios = t4, this.isXAxisTooltipEnabled = e3.config.xaxis.tooltip.enabled && e3.globals.axisCharts, this.yaxisTooltips = e3.config.yaxis.map(function(t5, i3) {
          return !!(t5.show && t5.tooltip.enabled && e3.globals.axisCharts);
        }), this.allTooltipSeriesGroups = [], e3.globals.axisCharts || (this.showTooltipTitle = false);
        var i2 = document.createElement("div");
        if (i2.classList.add("apexcharts-tooltip"), e3.config.tooltip.cssClass && i2.classList.add(e3.config.tooltip.cssClass), i2.classList.add("apexcharts-theme-".concat(this.tConfig.theme)), e3.globals.dom.elWrap.appendChild(i2), e3.globals.axisCharts) {
          this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
          var a3 = new _(this.ctx);
          this.xAxisTicksPositions = a3.getXAxisTicksPositions();
        }
        if (!e3.globals.comboCharts && !this.tConfig.intersect && "rangeBar" !== e3.config.chart.type || this.tConfig.shared || (this.showOnIntersect = true), 0 !== e3.config.markers.size && 0 !== e3.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e3.globals.collapsedSeries.length !== e3.globals.series.length) {
          this.dataPointsDividedHeight = e3.globals.gridHeight / e3.globals.dataPoints, this.dataPointsDividedWidth = e3.globals.gridWidth / e3.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e3.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i2.appendChild(this.tooltipTitle));
          var s2 = e3.globals.series.length;
          (e3.globals.xyCharts || e3.globals.comboCharts) && this.tConfig.shared && (s2 = this.showOnIntersect ? 1 : e3.globals.series.length), this.legendLabels = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"), this.ttItems = this.createTTElements(s2), this.addSVGEvents();
        }
      } }, { key: "createTTElements", value: function(t4) {
        for (var e3 = this, i2 = this.w, a3 = [], s2 = this.getElTooltip(), r3 = function(r4) {
          var o4 = document.createElement("div");
          o4.classList.add("apexcharts-tooltip-series-group", "apexcharts-tooltip-series-group-".concat(r4)), o4.style.order = i2.config.tooltip.inverseOrder ? t4 - r4 : r4 + 1;
          var n2 = document.createElement("span");
          n2.classList.add("apexcharts-tooltip-marker"), n2.style.backgroundColor = i2.globals.colors[r4], o4.appendChild(n2);
          var l2 = document.createElement("div");
          l2.classList.add("apexcharts-tooltip-text"), l2.style.fontFamily = e3.tConfig.style.fontFamily || i2.config.chart.fontFamily, l2.style.fontSize = e3.tConfig.style.fontSize, ["y", "goals", "z"].forEach(function(t5) {
            var e4 = document.createElement("div");
            e4.classList.add("apexcharts-tooltip-".concat(t5, "-group"));
            var i3 = document.createElement("span");
            i3.classList.add("apexcharts-tooltip-text-".concat(t5, "-label")), e4.appendChild(i3);
            var a4 = document.createElement("span");
            a4.classList.add("apexcharts-tooltip-text-".concat(t5, "-value")), e4.appendChild(a4), l2.appendChild(e4);
          }), o4.appendChild(l2), s2.appendChild(o4), a3.push(o4);
        }, o3 = 0; o3 < t4; o3++) r3(o3);
        return a3;
      } }, { key: "addSVGEvents", value: function() {
        var t4 = this.w, e3 = t4.config.chart.type, i2 = this.getElTooltip(), a3 = !("bar" !== e3 && "candlestick" !== e3 && "boxPlot" !== e3 && "rangeBar" !== e3), s2 = "area" === e3 || "line" === e3 || "scatter" === e3 || "bubble" === e3 || "radar" === e3, r3 = t4.globals.dom.Paper.node, o3 = this.getElGrid();
        o3 && (this.seriesBound = o3.getBoundingClientRect());
        var n2, l2 = [], h2 = [], c3 = { hoverArea: r3, elGrid: o3, tooltipEl: i2, tooltipY: l2, tooltipX: h2, ttItems: this.ttItems };
        if (t4.globals.axisCharts && (s2 ? n2 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : a3 ? n2 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" !== e3 && "treemap" !== e3 || (n2 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")), n2 && n2.length)) for (var d2 = 0; d2 < n2.length; d2++) l2.push(n2[d2].getAttribute("cy")), h2.push(n2[d2].getAttribute("cx"));
        if (t4.globals.xyCharts && !this.showOnIntersect || t4.globals.comboCharts && !this.showOnIntersect || a3 && this.tooltipUtil.hasBars() && this.tConfig.shared) this.addPathsEventListeners([r3], c3);
        else if (a3 && !t4.globals.comboCharts || s2 && this.showOnIntersect) this.addDatapointEventsListeners(c3);
        else if (!t4.globals.axisCharts || "heatmap" === e3 || "treemap" === e3) {
          var g2 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
          this.addPathsEventListeners(g2, c3);
        }
        if (this.showOnIntersect) {
          var u2 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");
          u2.length > 0 && this.addPathsEventListeners(u2, c3), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c3);
        }
      } }, { key: "drawFixedTooltipRect", value: function() {
        var t4 = this.w, e3 = this.getElTooltip(), i2 = e3.getBoundingClientRect(), a3 = i2.width + 10, s2 = i2.height + 10, r3 = this.tConfig.fixed.offsetX, o3 = this.tConfig.fixed.offsetY, n2 = this.tConfig.fixed.position.toLowerCase();
        return n2.indexOf("right") > -1 && (r3 = r3 + t4.globals.svgWidth - a3 + 10), n2.indexOf("bottom") > -1 && (o3 = o3 + t4.globals.svgHeight - s2 - 10), e3.style.left = r3 + "px", e3.style.top = o3 + "px", { x: r3, y: o3, ttWidth: a3, ttHeight: s2 };
      } }, { key: "addDatapointEventsListeners", value: function(t4) {
        var e3 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");
        this.addPathsEventListeners(e3, t4);
      } }, { key: "addPathsEventListeners", value: function(t4, e3) {
        for (var i2 = this, a3 = function(a4) {
          var s3 = { paths: t4[a4], tooltipEl: e3.tooltipEl, tooltipY: e3.tooltipY, tooltipX: e3.tooltipX, elGrid: e3.elGrid, hoverArea: e3.hoverArea, ttItems: e3.ttItems };
          ["mousemove", "mouseup", "touchmove", "mouseout", "touchend"].map(function(e4) {
            return t4[a4].addEventListener(e4, i2.onSeriesHover.bind(i2, s3), { capture: false, passive: true });
          });
        }, s2 = 0; s2 < t4.length; s2++) a3(s2);
      } }, { key: "onSeriesHover", value: function(t4, e3) {
        var i2 = this, a3 = Date.now() - this.lastHoverTime;
        a3 >= 100 ? this.seriesHover(t4, e3) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function() {
          i2.seriesHover(t4, e3);
        }, 100 - a3));
      } }, { key: "seriesHover", value: function(t4, e3) {
        var i2 = this;
        this.lastHoverTime = Date.now();
        var a3 = [], s2 = this.w;
        s2.config.chart.group && (a3 = this.ctx.getGroupedCharts()), s2.globals.axisCharts && (s2.globals.minX === -1 / 0 && s2.globals.maxX === 1 / 0 || 0 === s2.globals.dataPoints) || (a3.length ? a3.forEach(function(a4) {
          var s3 = i2.getElTooltip(a4), r3 = { paths: t4.paths, tooltipEl: s3, tooltipY: t4.tooltipY, tooltipX: t4.tooltipX, elGrid: t4.elGrid, hoverArea: t4.hoverArea, ttItems: a4.w.globals.tooltip.ttItems };
          a4.w.globals.minX === i2.w.globals.minX && a4.w.globals.maxX === i2.w.globals.maxX && a4.w.globals.tooltip.seriesHoverByContext({ chartCtx: a4, ttCtx: a4.w.globals.tooltip, opt: r3, e: e3 });
        }) : this.seriesHoverByContext({ chartCtx: this.ctx, ttCtx: this.w.globals.tooltip, opt: t4, e: e3 }));
      } }, { key: "seriesHoverByContext", value: function(t4) {
        var e3 = t4.chartCtx, i2 = t4.ttCtx, a3 = t4.opt, s2 = t4.e, r3 = e3.w, o3 = this.getElTooltip(e3);
        if (o3) {
          if (i2.tooltipRect = { x: 0, y: 0, ttWidth: o3.getBoundingClientRect().width, ttHeight: o3.getBoundingClientRect().height }, i2.e = s2, i2.tooltipUtil.hasBars() && !r3.globals.comboCharts && !i2.isBarShared) {
            if (this.tConfig.onDatasetHover.highlightDataSeries) new G2(e3).toggleSeriesOnHover(s2, s2.target.parentNode);
          }
          i2.fixedTooltip && i2.drawFixedTooltipRect(), r3.globals.axisCharts ? i2.axisChartsTooltips({ e: s2, opt: a3, tooltipRect: i2.tooltipRect }) : i2.nonAxisChartsTooltips({ e: s2, opt: a3, tooltipRect: i2.tooltipRect });
        }
      } }, { key: "axisChartsTooltips", value: function(t4) {
        var e3, i2, a3 = t4.e, s2 = t4.opt, r3 = this.w, o3 = s2.elGrid.getBoundingClientRect(), n2 = "touchmove" === a3.type ? a3.touches[0].clientX : a3.clientX, l2 = "touchmove" === a3.type ? a3.touches[0].clientY : a3.clientY;
        if (this.clientY = l2, this.clientX = n2, r3.globals.capturedSeriesIndex = -1, r3.globals.capturedDataPointIndex = -1, l2 < o3.top || l2 > o3.top + o3.height) this.handleMouseOut(s2);
        else {
          if (Array.isArray(this.tConfig.enabledOnSeries) && !r3.config.tooltip.shared) {
            var h2 = parseInt(s2.paths.getAttribute("index"), 10);
            if (this.tConfig.enabledOnSeries.indexOf(h2) < 0) return void this.handleMouseOut(s2);
          }
          var c3 = this.getElTooltip(), d2 = this.getElXCrosshairs(), g2 = [];
          r3.config.chart.group && (g2 = this.ctx.getSyncedCharts());
          var u2 = r3.globals.xyCharts || "bar" === r3.config.chart.type && !r3.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r3.globals.comboCharts && this.tooltipUtil.hasBars();
          if ("mousemove" === a3.type || "touchmove" === a3.type || "mouseup" === a3.type) {
            if (r3.globals.collapsedSeries.length + r3.globals.ancillaryCollapsedSeries.length === r3.globals.series.length) return;
            null !== d2 && d2.classList.add("apexcharts-active");
            var p2 = this.yaxisTooltips.filter(function(t5) {
              return true === t5;
            });
            if (null !== this.ycrosshairs && p2.length && this.ycrosshairs.classList.add("apexcharts-active"), u2 && !this.showOnIntersect || g2.length > 1) this.handleStickyTooltip(a3, n2, l2, s2);
            else if ("heatmap" === r3.config.chart.type || "treemap" === r3.config.chart.type) {
              var f2 = this.intersect.handleHeatTreeTooltip({ e: a3, opt: s2, x: e3, y: i2, type: r3.config.chart.type });
              e3 = f2.x, i2 = f2.y, c3.style.left = e3 + "px", c3.style.top = i2 + "px";
            } else this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({ e: a3, opt: s2 }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({ e: a3, opt: s2, x: e3, y: i2 });
            if (this.yaxisTooltips.length) for (var x2 = 0; x2 < r3.config.yaxis.length; x2++) this.axesTooltip.drawYaxisTooltipText(x2, l2, this.xyRatios);
            r3.globals.dom.baseEl.classList.add("apexcharts-tooltip-active"), s2.tooltipEl.classList.add("apexcharts-active");
          } else "mouseout" !== a3.type && "touchend" !== a3.type || this.handleMouseOut(s2);
        }
      } }, { key: "nonAxisChartsTooltips", value: function(t4) {
        var e3 = t4.e, i2 = t4.opt, a3 = t4.tooltipRect, s2 = this.w, r3 = i2.paths.getAttribute("rel"), o3 = this.getElTooltip(), n2 = s2.globals.dom.elWrap.getBoundingClientRect();
        if ("mousemove" === e3.type || "touchmove" === e3.type) {
          s2.globals.dom.baseEl.classList.add("apexcharts-tooltip-active"), o3.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({ ttItems: i2.ttItems, i: parseInt(r3, 10) - 1, shared: false });
          var l2 = s2.globals.clientX - n2.left - a3.ttWidth / 2, h2 = s2.globals.clientY - n2.top - a3.ttHeight - 10;
          if (o3.style.left = l2 + "px", o3.style.top = h2 + "px", s2.config.legend.tooltipHoverFormatter) {
            var c3 = r3 - 1, d2 = (0, s2.config.legend.tooltipHoverFormatter)(this.legendLabels[c3].getAttribute("data:default-text"), { seriesIndex: c3, dataPointIndex: c3, w: s2 });
            this.legendLabels[c3].innerHTML = d2;
          }
        } else "mouseout" !== e3.type && "touchend" !== e3.type || (o3.classList.remove("apexcharts-active"), s2.globals.dom.baseEl.classList.remove("apexcharts-tooltip-active"), s2.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t5) {
          var e4 = t5.getAttribute("data:default-text");
          t5.innerHTML = decodeURIComponent(e4);
        }));
      } }, { key: "handleStickyTooltip", value: function(t4, e3, i2, a3) {
        var s2 = this.w, r3 = this.tooltipUtil.getNearestValues({ context: this, hoverArea: a3.hoverArea, elGrid: a3.elGrid, clientX: e3, clientY: i2 }), o3 = r3.j, n2 = r3.capturedSeries;
        s2.globals.collapsedSeriesIndices.includes(n2) && (n2 = null);
        var l2 = a3.elGrid.getBoundingClientRect();
        if (r3.hoverX < 0 || r3.hoverX > l2.width) this.handleMouseOut(a3);
        else if (null !== n2) this.handleStickyCapturedSeries(t4, n2, a3, o3);
        else if (this.tooltipUtil.isXoverlap(o3) || s2.globals.isBarHorizontal) {
          var h2 = s2.globals.series.findIndex(function(t5, e4) {
            return !s2.globals.collapsedSeriesIndices.includes(e4);
          });
          this.create(t4, this, h2, o3, a3.ttItems);
        }
      } }, { key: "handleStickyCapturedSeries", value: function(t4, e3, i2, a3) {
        var s2 = this.w;
        if (!this.tConfig.shared && null === s2.globals.series[e3][a3]) return void this.handleMouseOut(i2);
        if (void 0 !== s2.globals.series[e3][a3]) this.tConfig.shared && this.tooltipUtil.isXoverlap(a3) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t4, this, e3, a3, i2.ttItems) : this.create(t4, this, e3, a3, i2.ttItems, false);
        else if (this.tooltipUtil.isXoverlap(a3)) {
          var r3 = s2.globals.series.findIndex(function(t5, e4) {
            return !s2.globals.collapsedSeriesIndices.includes(e4);
          });
          this.create(t4, this, r3, a3, i2.ttItems);
        }
      } }, { key: "deactivateHoverFilter", value: function() {
        for (var t4 = this.w, e3 = new w(this.ctx), i2 = t4.globals.dom.Paper.select(".apexcharts-bar-area"), a3 = 0; a3 < i2.length; a3++) e3.pathMouseLeave(i2[a3]);
      } }, { key: "handleMouseOut", value: function(t4) {
        var e3 = this.w, i2 = this.getElXCrosshairs();
        if (e3.globals.dom.baseEl.classList.remove("apexcharts-tooltip-active"), t4.tooltipEl.classList.remove("apexcharts-active"), this.deactivateHoverFilter(), "bubble" !== e3.config.chart.type && this.marker.resetPointsSize(), null !== i2 && i2.classList.remove("apexcharts-active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove("apexcharts-active"), this.yaxisTooltips.length) {
          null === this.yaxisTTEls && (this.yaxisTTEls = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
          for (var a3 = 0; a3 < this.yaxisTTEls.length; a3++) this.yaxisTTEls[a3].classList.remove("apexcharts-active");
        }
        e3.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t5) {
          var e4 = t5.getAttribute("data:default-text");
          t5.innerHTML = decodeURIComponent(e4);
        });
      } }, { key: "markerClick", value: function(t4, e3, i2) {
        var a3 = this.w;
        "function" == typeof a3.config.chart.events.markerClick && a3.config.chart.events.markerClick(t4, this.ctx, { seriesIndex: e3, dataPointIndex: i2, w: a3 }), this.ctx.events.fireEvent("markerClick", [t4, this.ctx, { seriesIndex: e3, dataPointIndex: i2, w: a3 }]);
      } }, { key: "create", value: function(t4, e3, i2, a3, s2) {
        var r3, o3, n2, l2, h2, c3, g2, u2, p2, f2, x2, b2, v2, m2, y3, k2, A2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, S2 = this.w, C3 = e3;
        "mouseup" === t4.type && this.markerClick(t4, i2, a3), null === A2 && (A2 = this.tConfig.shared);
        var L3 = this.tooltipUtil.hasMarkers(i2), P3 = this.tooltipUtil.getElBars();
        if (S2.config.legend.tooltipHoverFormatter) {
          var M2 = S2.config.legend.tooltipHoverFormatter, I3 = Array.from(this.legendLabels);
          I3.forEach(function(t5) {
            var e4 = t5.getAttribute("data:default-text");
            t5.innerHTML = decodeURIComponent(e4);
          });
          for (var T2 = 0; T2 < I3.length; T2++) {
            var z2 = I3[T2], X3 = parseInt(z2.getAttribute("i"), 10), E2 = decodeURIComponent(z2.getAttribute("data:default-text")), Y2 = M2(E2, { seriesIndex: A2 ? X3 : i2, dataPointIndex: a3, w: S2 });
            if (A2) z2.innerHTML = S2.globals.collapsedSeriesIndices.indexOf(X3) < 0 ? Y2 : E2;
            else if (z2.innerHTML = X3 === i2 ? Y2 : E2, i2 === X3) break;
          }
        }
        var F3 = d(d({ ttItems: s2, i: i2, j: a3 }, void 0 !== (null === (r3 = S2.globals.seriesRange) || void 0 === r3 || null === (o3 = r3[i2]) || void 0 === o3 || null === (n2 = o3[a3]) || void 0 === n2 || null === (l2 = n2.y[0]) || void 0 === l2 ? void 0 : l2.y1) && { y1: null === (h2 = S2.globals.seriesRange) || void 0 === h2 || null === (c3 = h2[i2]) || void 0 === c3 || null === (g2 = c3[a3]) || void 0 === g2 || null === (u2 = g2.y[0]) || void 0 === u2 ? void 0 : u2.y1 }), void 0 !== (null === (p2 = S2.globals.seriesRange) || void 0 === p2 || null === (f2 = p2[i2]) || void 0 === f2 || null === (x2 = f2[a3]) || void 0 === x2 || null === (b2 = x2.y[0]) || void 0 === b2 ? void 0 : b2.y2) && { y2: null === (v2 = S2.globals.seriesRange) || void 0 === v2 || null === (m2 = v2[i2]) || void 0 === m2 || null === (y3 = m2[a3]) || void 0 === y3 || null === (k2 = y3.y[0]) || void 0 === k2 ? void 0 : k2.y2 });
        if (A2) {
          if (C3.tooltipLabels.drawSeriesTexts(d(d({}, F3), {}, { shared: !this.showOnIntersect && this.tConfig.shared })), L3) S2.globals.markers.largestSize > 0 ? C3.marker.enlargePoints(a3) : C3.tooltipPosition.moveDynamicPointsOnHover(a3);
          else if (this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(P3), this.barSeriesHeight > 0)) {
            var R3 = new w(this.ctx), D2 = S2.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(a3, "']"));
            this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(a3, i2);
            for (var H2 = 0; H2 < D2.length; H2++) R3.pathMouseEnter(D2[H2]);
          }
        } else C3.tooltipLabels.drawSeriesTexts(d({ shared: false }, F3)), this.tooltipUtil.hasBars() && C3.tooltipPosition.moveStickyTooltipOverBars(a3, i2), L3 && C3.tooltipPosition.moveMarkers(i2, a3);
      } }]), t3;
    }();
    var yt2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.barCtx = e3, this.totalFormatter = this.w.config.plotOptions.bar.dataLabels.total.formatter, this.totalFormatter || (this.totalFormatter = this.w.config.dataLabels.formatter);
      }
      return s(t3, [{ key: "handleBarDataLabels", value: function(t4) {
        var e3, i2, a3 = t4.x, s2 = t4.y, r3 = t4.y1, o3 = t4.y2, n2 = t4.i, l2 = t4.j, h2 = t4.realIndex, c3 = t4.columnGroupIndex, g2 = t4.series, u2 = t4.barHeight, p2 = t4.barWidth, f2 = t4.barXPosition, x2 = t4.barYPosition, b2 = t4.visibleSeries, v2 = t4.renderedPath, m2 = this.w, y3 = new w(this.barCtx.ctx), k2 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[h2] : this.barCtx.strokeWidth;
        m2.globals.isXNumeric && !m2.globals.isBarHorizontal ? (e3 = a3 + parseFloat(p2 * (b2 + 1)), i2 = s2 + parseFloat(u2 * (b2 + 1)) - k2) : (e3 = a3 + parseFloat(p2 * b2), i2 = s2 + parseFloat(u2 * b2));
        var A2, S2 = null, C3 = a3, L3 = s2, P3 = {}, M2 = m2.config.dataLabels, I3 = this.barCtx.barOptions.dataLabels, T2 = this.barCtx.barOptions.dataLabels.total;
        void 0 !== x2 && this.barCtx.isRangeBar && (i2 = x2, L3 = x2), void 0 !== f2 && this.barCtx.isVerticalGroupedRangeBar && (e3 = f2, C3 = f2);
        var z2 = M2.offsetX, X3 = M2.offsetY, E2 = { width: 0, height: 0 };
        if (m2.config.dataLabels.enabled) {
          var Y2 = m2.globals.series[n2][l2];
          E2 = y3.getTextRects(m2.config.dataLabels.formatter ? m2.config.dataLabels.formatter(Y2, d(d({}, m2), {}, { seriesIndex: n2, dataPointIndex: l2, w: m2 })) : m2.globals.yLabelFormatters[0](Y2), parseFloat(M2.style.fontSize));
        }
        var F3 = { x: a3, y: s2, i: n2, j: l2, realIndex: h2, columnGroupIndex: c3, renderedPath: v2, bcx: e3, bcy: i2, barHeight: u2, barWidth: p2, textRects: E2, strokeWidth: k2, dataLabelsX: C3, dataLabelsY: L3, dataLabelsConfig: M2, barDataLabelsConfig: I3, barTotalDataLabelsConfig: T2, offX: z2, offY: X3 };
        return P3 = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(F3) : this.calculateColumnsDataLabelsPosition(F3), v2.attr({ cy: P3.bcy, cx: P3.bcx, j: l2, val: m2.globals.series[n2][l2], barHeight: u2, barWidth: p2 }), A2 = this.drawCalculatedDataLabels({ x: P3.dataLabelsX, y: P3.dataLabelsY, val: this.barCtx.isRangeBar ? [r3, o3] : "100%" === m2.config.chart.stackType ? g2[h2][l2] : m2.globals.series[h2][l2], i: h2, j: l2, barWidth: p2, barHeight: u2, textRects: E2, dataLabelsConfig: M2 }), m2.config.chart.stacked && T2.enabled && (S2 = this.drawTotalDataLabels({ x: P3.totalDataLabelsX, y: P3.totalDataLabelsY, barWidth: p2, barHeight: u2, realIndex: h2, textAnchor: P3.totalDataLabelsAnchor, val: this.getStackedTotalDataLabel({ realIndex: h2, j: l2 }), dataLabelsConfig: M2, barTotalDataLabelsConfig: T2 })), { dataLabels: A2, totalDataLabels: S2 };
      } }, { key: "getStackedTotalDataLabel", value: function(t4) {
        var e3 = t4.realIndex, i2 = t4.j, a3 = this.w, s2 = this.barCtx.stackedSeriesTotals[i2];
        return this.totalFormatter && (s2 = this.totalFormatter(s2, d(d({}, a3), {}, { seriesIndex: e3, dataPointIndex: i2, w: a3 }))), s2;
      } }, { key: "calculateColumnsDataLabelsPosition", value: function(t4) {
        var e3 = this.w, i2 = t4.i, a3 = t4.j, s2 = t4.realIndex;
        t4.columnGroupIndex;
        var r3, o3, n2 = t4.y, l2 = t4.bcx, h2 = t4.barWidth, c3 = t4.barHeight, d2 = t4.textRects, g2 = t4.dataLabelsX, u2 = t4.dataLabelsY, p2 = t4.dataLabelsConfig, f2 = t4.barDataLabelsConfig, x2 = t4.barTotalDataLabelsConfig, b2 = t4.strokeWidth, v2 = t4.offX, m2 = t4.offY, y3 = l2;
        c3 = Math.abs(c3);
        var k2 = "vertical" === e3.config.plotOptions.bar.dataLabels.orientation, A2 = this.barCtx.barHelpers.getZeroValueEncounters({ i: i2, j: a3 }).zeroEncounters;
        l2 -= b2 / 2;
        var S2 = e3.globals.gridWidth / e3.globals.dataPoints;
        if (this.barCtx.isVerticalGroupedRangeBar ? g2 += h2 / 2 : (g2 = e3.globals.isXNumeric ? l2 - h2 / 2 + v2 : l2 - S2 + h2 / 2 + v2, A2 > 0 && e3.config.plotOptions.bar.hideZeroBarsWhenGrouped && (g2 -= h2 * A2)), k2) {
          g2 = g2 + d2.height / 2 - b2 / 2 - 2;
        }
        var C3 = e3.globals.series[i2][a3] < 0, L3 = n2;
        switch (this.barCtx.isReversed && (L3 = n2 + (C3 ? c3 : -c3)), f2.position) {
          case "center":
            u2 = k2 ? C3 ? L3 - c3 / 2 + m2 : L3 + c3 / 2 - m2 : C3 ? L3 - c3 / 2 + d2.height / 2 + m2 : L3 + c3 / 2 + d2.height / 2 - m2;
            break;
          case "bottom":
            u2 = k2 ? C3 ? L3 - c3 + m2 : L3 + c3 - m2 : C3 ? L3 - c3 + d2.height + b2 + m2 : L3 + c3 - d2.height / 2 + b2 - m2;
            break;
          case "top":
            u2 = k2 ? C3 ? L3 + m2 : L3 - m2 : C3 ? L3 - d2.height / 2 - m2 : L3 + d2.height + m2;
        }
        if (this.barCtx.lastActiveBarSerieIndex === s2 && x2.enabled) {
          var P3 = new w(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: s2, j: a3 }), p2.fontSize);
          r3 = C3 ? L3 - P3.height / 2 - m2 - x2.offsetY + 18 : L3 + P3.height + m2 + x2.offsetY - 18;
          var M2 = S2;
          o3 = y3 + (e3.globals.isXNumeric ? -h2 * e3.globals.barGroups.length / 2 : e3.globals.barGroups.length * h2 / 2 - (e3.globals.barGroups.length - 1) * h2 - M2) + x2.offsetX;
        }
        return e3.config.chart.stacked || (u2 < 0 ? u2 = 0 + b2 : u2 + d2.height / 3 > e3.globals.gridHeight && (u2 = e3.globals.gridHeight - b2)), { bcx: l2, bcy: n2, dataLabelsX: g2, dataLabelsY: u2, totalDataLabelsX: o3, totalDataLabelsY: r3, totalDataLabelsAnchor: "middle" };
      } }, { key: "calculateBarsDataLabelsPosition", value: function(t4) {
        var e3 = this.w, i2 = t4.x, a3 = t4.i, s2 = t4.j, r3 = t4.realIndex, o3 = t4.bcy, n2 = t4.barHeight, l2 = t4.barWidth, h2 = t4.textRects, c3 = t4.dataLabelsX, d2 = t4.strokeWidth, g2 = t4.dataLabelsConfig, u2 = t4.barDataLabelsConfig, p2 = t4.barTotalDataLabelsConfig, f2 = t4.offX, x2 = t4.offY, b2 = e3.globals.gridHeight / e3.globals.dataPoints;
        l2 = Math.abs(l2);
        var v2, m2, y3 = o3 - (this.barCtx.isRangeBar ? 0 : b2) + n2 / 2 + h2.height / 2 + x2 - 3, k2 = "start", A2 = e3.globals.series[a3][s2] < 0, S2 = i2;
        switch (this.barCtx.isReversed && (S2 = i2 + (A2 ? -l2 : l2), k2 = A2 ? "start" : "end"), u2.position) {
          case "center":
            c3 = A2 ? S2 + l2 / 2 - f2 : Math.max(h2.width / 2, S2 - l2 / 2) + f2;
            break;
          case "bottom":
            c3 = A2 ? S2 + l2 - d2 - f2 : S2 - l2 + d2 + f2;
            break;
          case "top":
            c3 = A2 ? S2 - d2 - f2 : S2 - d2 + f2;
        }
        if (this.barCtx.lastActiveBarSerieIndex === r3 && p2.enabled) {
          var C3 = new w(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: r3, j: s2 }), g2.fontSize);
          A2 ? (v2 = S2 - d2 - f2 - p2.offsetX, k2 = "end") : v2 = S2 + f2 + p2.offsetX + (this.barCtx.isReversed ? -(l2 + d2) : d2), m2 = y3 - h2.height / 2 + C3.height / 2 + p2.offsetY + d2;
        }
        return e3.config.chart.stacked || ("start" === g2.textAnchor ? c3 - h2.width < 0 ? c3 = A2 ? h2.width + d2 : d2 : c3 + h2.width > e3.globals.gridWidth && (c3 = A2 ? e3.globals.gridWidth - d2 : e3.globals.gridWidth - h2.width - d2) : "middle" === g2.textAnchor ? c3 - h2.width / 2 < 0 ? c3 = h2.width / 2 + d2 : c3 + h2.width / 2 > e3.globals.gridWidth && (c3 = e3.globals.gridWidth - h2.width / 2 - d2) : "end" === g2.textAnchor && (c3 < 1 ? c3 = h2.width + d2 : c3 + 1 > e3.globals.gridWidth && (c3 = e3.globals.gridWidth - h2.width - d2))), { bcx: i2, bcy: o3, dataLabelsX: c3, dataLabelsY: y3, totalDataLabelsX: v2, totalDataLabelsY: m2, totalDataLabelsAnchor: k2 };
      } }, { key: "drawCalculatedDataLabels", value: function(t4) {
        var e3 = t4.x, i2 = t4.y, a3 = t4.val, s2 = t4.i, r3 = t4.j, o3 = t4.textRects, n2 = t4.barHeight, l2 = t4.barWidth, h2 = t4.dataLabelsConfig, c3 = this.w, g2 = "rotate(0)";
        "vertical" === c3.config.plotOptions.bar.dataLabels.orientation && (g2 = "rotate(-90, ".concat(e3, ", ").concat(i2, ")"));
        var u2 = new B2(this.barCtx.ctx), p2 = new w(this.barCtx.ctx), f2 = h2.formatter, x2 = null, b2 = c3.globals.collapsedSeriesIndices.indexOf(s2) > -1;
        if (h2.enabled && !b2) {
          x2 = p2.group({ class: "apexcharts-data-labels", transform: g2 });
          var v2 = "";
          void 0 !== a3 && (v2 = f2(a3, d(d({}, c3), {}, { seriesIndex: s2, dataPointIndex: r3, w: c3 }))), !a3 && c3.config.plotOptions.bar.hideZeroBarsWhenGrouped && (v2 = "");
          var m2 = c3.globals.series[s2][r3] < 0, y3 = c3.config.plotOptions.bar.dataLabels.position;
          if ("vertical" === c3.config.plotOptions.bar.dataLabels.orientation && ("top" === y3 && (h2.textAnchor = m2 ? "end" : "start"), "center" === y3 && (h2.textAnchor = "middle"), "bottom" === y3 && (h2.textAnchor = m2 ? "end" : "start")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) l2 < p2.getTextRects(v2, parseFloat(h2.style.fontSize)).width && (v2 = "");
          c3.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? o3.width / 1.6 > Math.abs(l2) && (v2 = "") : o3.height / 1.6 > Math.abs(n2) && (v2 = ""));
          var k2 = d({}, h2);
          this.barCtx.isHorizontal && a3 < 0 && ("start" === h2.textAnchor ? k2.textAnchor = "end" : "end" === h2.textAnchor && (k2.textAnchor = "start")), u2.plotDataLabelsText({ x: e3, y: i2, text: v2, i: s2, j: r3, parent: x2, dataLabelsConfig: k2, alwaysDrawDataLabel: true, offsetCorrection: true });
        }
        return x2;
      } }, { key: "drawTotalDataLabels", value: function(t4) {
        var e3 = t4.x, i2 = t4.y, a3 = t4.val, s2 = t4.realIndex, r3 = t4.textAnchor, o3 = t4.barTotalDataLabelsConfig;
        this.w;
        var n2, l2 = new w(this.barCtx.ctx);
        return o3.enabled && void 0 !== e3 && void 0 !== i2 && this.barCtx.lastActiveBarSerieIndex === s2 && (n2 = l2.drawText({ x: e3, y: i2, foreColor: o3.style.color, text: a3, textAnchor: r3, fontFamily: o3.style.fontFamily, fontSize: o3.style.fontSize, fontWeight: o3.style.fontWeight })), n2;
      } }]), t3;
    }();
    var wt2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.barCtx = e3;
      }
      return s(t3, [{ key: "initVariables", value: function(t4) {
        var e3 = this.w;
        this.barCtx.series = t4, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;
        for (var i2 = 0; i2 < t4.length; i2++) if (t4[i2].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t4[i2].length), e3.globals.isXNumeric) for (var a3 = 0; a3 < t4[i2].length; a3++) e3.globals.seriesX[i2][a3] > e3.globals.minX && e3.globals.seriesX[i2][a3] < e3.globals.maxX && this.barCtx.visibleItems++;
        else this.barCtx.visibleItems = e3.globals.dataPoints;
        0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], e3.globals.comboCharts || this.checkZeroSeries({ series: t4 });
      } }, { key: "initialPositions", value: function() {
        var t4, e3, i2, a3, s2, r3, o3, n2, l2 = this.w, h2 = l2.globals.dataPoints;
        this.barCtx.isRangeBar && (h2 = l2.globals.labels.length);
        var c3 = this.barCtx.seriesLen;
        if (l2.config.plotOptions.bar.rangeBarGroupRows && (c3 = 1), this.barCtx.isHorizontal) s2 = (i2 = l2.globals.gridHeight / h2) / c3, l2.globals.isXNumeric && (s2 = (i2 = l2.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s2 = s2 * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, -1 === String(this.barCtx.barOptions.barHeight).indexOf("%") && (s2 = parseInt(this.barCtx.barOptions.barHeight, 10)), n2 = this.barCtx.baseLineInvertedY + l2.globals.padHorizontal + (this.barCtx.isReversed ? l2.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), this.barCtx.isFunnel && (n2 = l2.globals.gridWidth / 2), e3 = (i2 - s2 * this.barCtx.seriesLen) / 2;
        else {
          if (a3 = l2.globals.gridWidth / this.barCtx.visibleItems, l2.config.xaxis.convertedCatToNumeric && (a3 = l2.globals.gridWidth / l2.globals.dataPoints), r3 = a3 / c3 * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l2.globals.isXNumeric) {
            var d2 = this.barCtx.xRatio;
            l2.globals.minXDiff && 0.5 !== l2.globals.minXDiff && l2.globals.minXDiff / d2 > 0 && (a3 = l2.globals.minXDiff / d2), (r3 = a3 / c3 * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r3 = 1);
          }
          -1 === String(this.barCtx.barOptions.columnWidth).indexOf("%") && (r3 = parseInt(this.barCtx.barOptions.columnWidth, 10)), o3 = l2.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.translationsIndex] - (this.barCtx.isReversed ? l2.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.translationsIndex] : 0), t4 = l2.globals.padHorizontal + (a3 - r3 * this.barCtx.seriesLen) / 2;
        }
        return l2.globals.barHeight = s2, l2.globals.barWidth = r3, { x: t4, y: e3, yDivision: i2, xDivision: a3, barHeight: s2, barWidth: r3, zeroH: o3, zeroW: n2 };
      } }, { key: "initializeStackedPrevVars", value: function(t4) {
        t4.w.globals.seriesGroups.forEach(function(e3) {
          t4[e3] || (t4[e3] = {}), t4[e3].prevY = [], t4[e3].prevX = [], t4[e3].prevYF = [], t4[e3].prevXF = [], t4[e3].prevYVal = [], t4[e3].prevXVal = [];
        });
      } }, { key: "initializeStackedXYVars", value: function(t4) {
        t4.w.globals.seriesGroups.forEach(function(e3) {
          t4[e3] || (t4[e3] = {}), t4[e3].xArrj = [], t4[e3].xArrjF = [], t4[e3].xArrjVal = [], t4[e3].yArrj = [], t4[e3].yArrjF = [], t4[e3].yArrjVal = [];
        });
      } }, { key: "getPathFillColor", value: function(t4, e3, i2, a3) {
        var s2, r3, o3, n2, l2, h2 = this.w, c3 = this.barCtx.ctx.fill, d2 = null, g2 = this.barCtx.barOptions.distributed ? i2 : e3;
        this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function(a4) {
          t4[e3][i2] >= a4.from && t4[e3][i2] <= a4.to && (d2 = a4.color);
        });
        return null !== (s2 = h2.config.series[e3].data[i2]) && void 0 !== s2 && s2.fillColor && (d2 = h2.config.series[e3].data[i2].fillColor), c3.fillPath({ seriesNumber: this.barCtx.barOptions.distributed ? g2 : a3, dataPointIndex: i2, color: d2, value: t4[e3][i2], fillConfig: null === (r3 = h2.config.series[e3].data[i2]) || void 0 === r3 ? void 0 : r3.fill, fillType: null !== (o3 = h2.config.series[e3].data[i2]) && void 0 !== o3 && null !== (n2 = o3.fill) && void 0 !== n2 && n2.type ? null === (l2 = h2.config.series[e3].data[i2]) || void 0 === l2 ? void 0 : l2.fill.type : Array.isArray(h2.config.fill.type) ? h2.config.fill.type[a3] : h2.config.fill.type });
      } }, { key: "getStrokeWidth", value: function(t4, e3, i2) {
        var a3 = 0, s2 = this.w;
        return void 0 === this.barCtx.series[t4][e3] || null === this.barCtx.series[t4][e3] ? this.barCtx.isNullValue = true : this.barCtx.isNullValue = false, s2.config.stroke.show && (this.barCtx.isNullValue || (a3 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i2] : this.barCtx.strokeWidth)), a3;
      } }, { key: "shouldApplyRadius", value: function(t4) {
        var e3 = this.w, i2 = false;
        return e3.config.plotOptions.bar.borderRadius > 0 && (e3.config.chart.stacked && "last" === e3.config.plotOptions.bar.borderRadiusWhenStacked ? this.barCtx.lastActiveBarSerieIndex === t4 && (i2 = true) : i2 = true), i2;
      } }, { key: "barBackground", value: function(t4) {
        var e3 = t4.j, i2 = t4.i, a3 = t4.x1, s2 = t4.x2, r3 = t4.y1, o3 = t4.y2, n2 = t4.elSeries, l2 = this.w, h2 = new w(this.barCtx.ctx), c3 = new G2(this.barCtx.ctx).getActiveConfigSeriesIndex();
        if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c3 === i2) {
          e3 >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e3 %= this.barCtx.barOptions.colors.backgroundBarColors.length);
          var d2 = this.barCtx.barOptions.colors.backgroundBarColors[e3], g2 = h2.drawRect(void 0 !== a3 ? a3 : 0, void 0 !== r3 ? r3 : 0, void 0 !== s2 ? s2 : l2.globals.gridWidth, void 0 !== o3 ? o3 : l2.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d2, this.barCtx.barOptions.colors.backgroundBarOpacity);
          n2.add(g2), g2.node.classList.add("apexcharts-backgroundBar");
        }
      } }, { key: "getColumnPaths", value: function(t4) {
        var e3, i2 = t4.barWidth, a3 = t4.barXPosition, s2 = t4.y1, r3 = t4.y2, o3 = t4.strokeWidth, n2 = t4.seriesGroup, l2 = t4.realIndex, h2 = t4.i, c3 = t4.j, d2 = t4.w, g2 = new w(this.barCtx.ctx);
        (o3 = Array.isArray(o3) ? o3[l2] : o3) || (o3 = 0);
        var u2 = i2, p2 = a3;
        null !== (e3 = d2.config.series[l2].data[c3]) && void 0 !== e3 && e3.columnWidthOffset && (p2 = a3 - d2.config.series[l2].data[c3].columnWidthOffset / 2, u2 = i2 + d2.config.series[l2].data[c3].columnWidthOffset);
        var f2 = o3 / 2, x2 = p2 + f2, b2 = p2 + u2 - f2;
        s2 += 1e-3 - f2, r3 += 1e-3 + f2;
        var v2 = g2.move(x2, s2), m2 = g2.move(x2, s2), y3 = g2.line(b2, s2);
        if (d2.globals.previousPaths.length > 0 && (m2 = this.barCtx.getPreviousPath(l2, c3, false)), v2 = v2 + g2.line(x2, r3) + g2.line(b2, r3) + g2.line(b2, s2) + ("around" === d2.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), m2 = m2 + g2.line(x2, s2) + y3 + y3 + y3 + y3 + y3 + g2.line(x2, s2) + ("around" === d2.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), this.shouldApplyRadius(l2) && (v2 = g2.roundPathCorners(v2, d2.config.plotOptions.bar.borderRadius)), d2.config.chart.stacked) {
          var k2 = this.barCtx;
          (k2 = this.barCtx[n2]).yArrj.push(r3 - f2), k2.yArrjF.push(Math.abs(s2 - r3 + o3)), k2.yArrjVal.push(this.barCtx.series[h2][c3]);
        }
        return { pathTo: v2, pathFrom: m2 };
      } }, { key: "getBarpaths", value: function(t4) {
        var e3, i2 = t4.barYPosition, a3 = t4.barHeight, s2 = t4.x1, r3 = t4.x2, o3 = t4.strokeWidth, n2 = t4.seriesGroup, l2 = t4.realIndex, h2 = t4.i, c3 = t4.j, d2 = t4.w, g2 = new w(this.barCtx.ctx);
        (o3 = Array.isArray(o3) ? o3[l2] : o3) || (o3 = 0);
        var u2 = i2, p2 = a3;
        null !== (e3 = d2.config.series[l2].data[c3]) && void 0 !== e3 && e3.barHeightOffset && (u2 = i2 - d2.config.series[l2].data[c3].barHeightOffset / 2, p2 = a3 + d2.config.series[l2].data[c3].barHeightOffset);
        var f2 = o3 / 2, x2 = u2 + f2, b2 = u2 + p2 - f2;
        s2 += 1e-3 - f2, r3 += 1e-3 + f2;
        var v2 = g2.move(s2, x2), m2 = g2.move(s2, x2);
        d2.globals.previousPaths.length > 0 && (m2 = this.barCtx.getPreviousPath(l2, c3, false));
        var y3 = g2.line(s2, b2);
        if (v2 = v2 + g2.line(r3, x2) + g2.line(r3, b2) + y3 + ("around" === d2.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), m2 = m2 + g2.line(s2, x2) + y3 + y3 + y3 + y3 + y3 + g2.line(s2, x2) + ("around" === d2.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), this.shouldApplyRadius(l2) && (v2 = g2.roundPathCorners(v2, d2.config.plotOptions.bar.borderRadius)), d2.config.chart.stacked) {
          var k2 = this.barCtx;
          (k2 = this.barCtx[n2]).xArrj.push(r3 + f2), k2.xArrjF.push(Math.abs(s2 - r3)), k2.xArrjVal.push(this.barCtx.series[h2][c3]);
        }
        return { pathTo: v2, pathFrom: m2 };
      } }, { key: "checkZeroSeries", value: function(t4) {
        for (var e3 = t4.series, i2 = this.w, a3 = 0; a3 < e3.length; a3++) {
          for (var s2 = 0, r3 = 0; r3 < e3[i2.globals.maxValsInArrayIndex].length; r3++) s2 += e3[a3][r3];
          0 === s2 && this.barCtx.zeroSerieses.push(a3);
        }
      } }, { key: "getXForValue", value: function(t4, e3) {
        var i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2] ? e3 : null;
        return null != t4 && (i2 = e3 + t4 / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t4 / this.barCtx.invertedYRatio : 0)), i2;
      } }, { key: "getYForValue", value: function(t4, e3, i2) {
        var a3 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3] ? e3 : null;
        return null != t4 && (a3 = e3 - t4 / this.barCtx.yRatio[i2] + 2 * (this.barCtx.isReversed ? t4 / this.barCtx.yRatio[i2] : 0)), a3;
      } }, { key: "getGoalValues", value: function(t4, e3, i2, a3, s2, r3) {
        var n2 = this, l2 = this.w, h2 = [], c3 = function(a4, s3) {
          var l3;
          h2.push((o2(l3 = {}, t4, "x" === t4 ? n2.getXForValue(a4, e3, false) : n2.getYForValue(a4, i2, r3, false)), o2(l3, "attrs", s3), l3));
        };
        if (l2.globals.seriesGoals[a3] && l2.globals.seriesGoals[a3][s2] && Array.isArray(l2.globals.seriesGoals[a3][s2]) && l2.globals.seriesGoals[a3][s2].forEach(function(t5) {
          c3(t5.value, t5);
        }), this.barCtx.barOptions.isDumbbell && l2.globals.seriesRange.length) {
          var g2 = this.barCtx.barOptions.dumbbellColors ? this.barCtx.barOptions.dumbbellColors : l2.globals.colors, u2 = { strokeHeight: "x" === t4 ? 0 : l2.globals.markers.size[a3], strokeWidth: "x" === t4 ? l2.globals.markers.size[a3] : 0, strokeDashArray: 0, strokeLineCap: "round", strokeColor: Array.isArray(g2[a3]) ? g2[a3][0] : g2[a3] };
          c3(l2.globals.seriesRangeStart[a3][s2], u2), c3(l2.globals.seriesRangeEnd[a3][s2], d(d({}, u2), {}, { strokeColor: Array.isArray(g2[a3]) ? g2[a3][1] : g2[a3] }));
        }
        return h2;
      } }, { key: "drawGoalLine", value: function(t4) {
        var e3 = t4.barXPosition, i2 = t4.barYPosition, a3 = t4.goalX, s2 = t4.goalY, r3 = t4.barWidth, o3 = t4.barHeight, n2 = new w(this.barCtx.ctx), l2 = n2.group({ className: "apexcharts-bar-goals-groups" });
        l2.node.classList.add("apexcharts-element-hidden"), this.barCtx.w.globals.delayedElements.push({ el: l2.node }), l2.attr("clip-path", "url(#gridRectMarkerMask".concat(this.barCtx.w.globals.cuid, ")"));
        var h2 = null;
        return this.barCtx.isHorizontal ? Array.isArray(a3) && a3.forEach(function(t5) {
          if (t5.x >= -1 && t5.x <= n2.w.globals.gridWidth + 1) {
            var e4 = void 0 !== t5.attrs.strokeHeight ? t5.attrs.strokeHeight : o3 / 2, a4 = i2 + e4 + o3 / 2;
            h2 = n2.drawLine(t5.x, a4 - 2 * e4, t5.x, a4, t5.attrs.strokeColor ? t5.attrs.strokeColor : void 0, t5.attrs.strokeDashArray, t5.attrs.strokeWidth ? t5.attrs.strokeWidth : 2, t5.attrs.strokeLineCap), l2.add(h2);
          }
        }) : Array.isArray(s2) && s2.forEach(function(t5) {
          if (t5.y >= -1 && t5.y <= n2.w.globals.gridHeight + 1) {
            var i3 = void 0 !== t5.attrs.strokeWidth ? t5.attrs.strokeWidth : r3 / 2, a4 = e3 + i3 + r3 / 2;
            h2 = n2.drawLine(a4 - 2 * i3, t5.y, a4, t5.y, t5.attrs.strokeColor ? t5.attrs.strokeColor : void 0, t5.attrs.strokeDashArray, t5.attrs.strokeHeight ? t5.attrs.strokeHeight : 2, t5.attrs.strokeLineCap), l2.add(h2);
          }
        }), l2;
      } }, { key: "drawBarShadow", value: function(t4) {
        var e3 = t4.prevPaths, i2 = t4.currPaths, a3 = t4.color, s2 = this.w, r3 = e3.x, o3 = e3.x1, n2 = e3.barYPosition, l2 = i2.x, h2 = i2.x1, c3 = i2.barYPosition, d2 = n2 + i2.barHeight, g2 = new w(this.barCtx.ctx), u2 = new v(), p2 = g2.move(o3, d2) + g2.line(r3, d2) + g2.line(l2, c3) + g2.line(h2, c3) + g2.line(o3, d2) + ("around" === s2.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z");
        return g2.drawPath({ d: p2, fill: u2.shadeColor(0.5, v.rgb2hex(a3)), stroke: "none", strokeWidth: 0, fillOpacity: 1, classes: "apexcharts-bar-shadows" });
      } }, { key: "getZeroValueEncounters", value: function(t4) {
        var e3, i2 = t4.i, a3 = t4.j, s2 = this.w, r3 = 0, o3 = 0;
        return (s2.config.plotOptions.bar.horizontal ? s2.globals.series.map(function(t5, e4) {
          return e4;
        }) : (null === (e3 = s2.globals.columnSeries) || void 0 === e3 ? void 0 : e3.i.map(function(t5) {
          return t5;
        })) || []).forEach(function(t5) {
          var e4 = s2.globals.seriesPercent[t5][a3];
          e4 && r3++, t5 < i2 && 0 === e4 && o3++;
        }), { nonZeroColumns: r3, zeroEncounters: o3 };
      } }, { key: "getGroupIndex", value: function(t4) {
        var e3 = this.w, i2 = e3.globals.seriesGroups.findIndex(function(i3) {
          return i3.indexOf(e3.globals.seriesNames[t4]) > -1;
        }), a3 = this.barCtx.columnGroupIndices, s2 = a3.indexOf(i2);
        return s2 < 0 && (a3.push(i2), s2 = a3.length - 1), { groupIndex: i2, columnGroupIndex: s2 };
      } }]), t3;
    }();
    var kt2 = function() {
      function t3(e3, a3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
        var s2 = this.w;
        this.barOptions = s2.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s2.config.stroke.width, this.isNullValue = false, this.isRangeBar = s2.globals.seriesRange.length && this.isHorizontal, this.isVerticalGroupedRangeBar = !s2.globals.isBarHorizontal && s2.globals.seriesRange.length && s2.config.plotOptions.bar.rangeBarGroupRows, this.isFunnel = this.barOptions.isFunnel, this.xyRatios = a3, null !== this.xyRatios && (this.xRatio = a3.xRatio, this.yRatio = a3.yRatio, this.invertedXRatio = a3.invertedXRatio, this.invertedYRatio = a3.invertedYRatio, this.baseLineY = a3.baseLineY, this.baseLineInvertedY = a3.baseLineInvertedY), this.yaxisIndex = 0, this.translationsIndex = 0, this.seriesLen = 0, this.pathArr = [];
        var r3 = new G2(this.ctx);
        this.lastActiveBarSerieIndex = r3.getActiveConfigSeriesIndex("desc", ["bar", "column"]), this.columnGroupIndices = [];
        var o3 = r3.getBarSeriesIndices(), n2 = new k(this.ctx);
        this.stackedSeriesTotals = n2.getStackedSeriesTotals(this.w.config.series.map(function(t4, e4) {
          return -1 === o3.indexOf(e4) ? e4 : -1;
        }).filter(function(t4) {
          return -1 !== t4;
        })), this.barHelpers = new wt2(this);
      }
      return s(t3, [{ key: "draw", value: function(t4, e3) {
        var i2 = this.w, a3 = new w(this.ctx), s2 = new k(this.ctx, i2);
        t4 = s2.getLogSeries(t4), this.series = t4, this.yRatio = s2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t4);
        var r3 = a3.group({ class: "apexcharts-bar-series apexcharts-plot-series" });
        i2.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering - ApexCharts");
        for (var o3 = 0, n2 = 0; o3 < t4.length; o3++, n2++) {
          var l2, h2, c3, g2, u2 = void 0, p2 = void 0, f2 = [], x2 = [], b2 = i2.globals.comboCharts ? e3[o3] : o3, m2 = this.barHelpers.getGroupIndex(b2).columnGroupIndex, y3 = a3.group({ class: "apexcharts-series", rel: o3 + 1, seriesName: v.escapeString(i2.globals.seriesNames[b2]), "data:realIndex": b2 });
          this.ctx.series.addCollapsedClassToSeries(y3, b2), t4[o3].length > 0 && (this.visibleI = this.visibleI + 1);
          var A2 = 0, S2 = 0;
          this.yRatio.length > 1 && (this.yaxisIndex = i2.globals.seriesYAxisReverseMap[b2], this.translationsIndex = b2);
          var C3 = this.translationsIndex;
          this.isReversed = i2.config.yaxis[this.yaxisIndex] && i2.config.yaxis[this.yaxisIndex].reversed;
          var L3 = this.barHelpers.initialPositions();
          p2 = L3.y, A2 = L3.barHeight, h2 = L3.yDivision, g2 = L3.zeroW, u2 = L3.x, S2 = L3.barWidth, l2 = L3.xDivision, c3 = L3.zeroH, this.horizontal || x2.push(u2 + S2 / 2);
          var P3 = a3.group({ class: "apexcharts-datalabels", "data:realIndex": b2 });
          i2.globals.delayedElements.push({ el: P3.node }), P3.node.classList.add("apexcharts-element-hidden");
          var M2 = a3.group({ class: "apexcharts-bar-goals-markers" }), I3 = a3.group({ class: "apexcharts-bar-shadows" });
          i2.globals.delayedElements.push({ el: I3.node }), I3.node.classList.add("apexcharts-element-hidden");
          for (var T2 = 0; T2 < t4[o3].length; T2++) {
            var z2 = this.barHelpers.getStrokeWidth(o3, T2, b2), X3 = null, E2 = { indexes: { i: o3, j: T2, realIndex: b2, translationsIndex: C3, bc: n2 }, x: u2, y: p2, strokeWidth: z2, elSeries: y3 };
            this.isHorizontal ? (X3 = this.drawBarPaths(d(d({}, E2), {}, { barHeight: A2, zeroW: g2, yDivision: h2 })), S2 = this.series[o3][T2] / this.invertedYRatio) : (X3 = this.drawColumnPaths(d(d({}, E2), {}, { xDivision: l2, barWidth: S2, zeroH: c3 })), A2 = this.series[o3][T2] / this.yRatio[C3]);
            var Y2 = this.barHelpers.getPathFillColor(t4, o3, T2, b2);
            if (this.isFunnel && this.barOptions.isFunnel3d && this.pathArr.length && T2 > 0) {
              var F3 = this.barHelpers.drawBarShadow({ color: "string" == typeof Y2 && -1 === (null == Y2 ? void 0 : Y2.indexOf("url")) ? Y2 : v.hexToRgba(i2.globals.colors[o3]), prevPaths: this.pathArr[this.pathArr.length - 1], currPaths: X3 });
              F3 && I3.add(F3);
            }
            this.pathArr.push(X3);
            var R3 = this.barHelpers.drawGoalLine({ barXPosition: X3.barXPosition, barYPosition: X3.barYPosition, goalX: X3.goalX, goalY: X3.goalY, barHeight: A2, barWidth: S2 });
            R3 && M2.add(R3), p2 = X3.y, u2 = X3.x, T2 > 0 && x2.push(u2 + S2 / 2), f2.push(p2), this.renderSeries({ realIndex: b2, pathFill: Y2, j: T2, i: o3, columnGroupIndex: m2, pathFrom: X3.pathFrom, pathTo: X3.pathTo, strokeWidth: z2, elSeries: y3, x: u2, y: p2, series: t4, barHeight: Math.abs(X3.barHeight ? X3.barHeight : A2), barWidth: Math.abs(X3.barWidth ? X3.barWidth : S2), elDataLabelsWrap: P3, elGoalsMarkers: M2, elBarShadows: I3, visibleSeries: this.visibleI, type: "bar" });
          }
          i2.globals.seriesXvalues[b2] = x2, i2.globals.seriesYvalues[b2] = f2, r3.add(y3);
        }
        return r3;
      } }, { key: "renderSeries", value: function(t4) {
        var e3 = t4.realIndex, i2 = t4.pathFill, a3 = t4.lineFill, s2 = t4.j, r3 = t4.i, o3 = t4.columnGroupIndex, n2 = t4.pathFrom, l2 = t4.pathTo, h2 = t4.strokeWidth, c3 = t4.elSeries, d2 = t4.x, g2 = t4.y, u2 = t4.y1, p2 = t4.y2, f2 = t4.series, x2 = t4.barHeight, b2 = t4.barWidth, v2 = t4.barXPosition, m2 = t4.barYPosition, k2 = t4.elDataLabelsWrap, A2 = t4.elGoalsMarkers, S2 = t4.elBarShadows, C3 = t4.visibleSeries, L3 = t4.type, P3 = this.w, M2 = new w(this.ctx);
        if (!a3) {
          var I3 = "function" == typeof P3.globals.stroke.colors[e3] ? function(t5) {
            var e4, i3 = P3.config.stroke.colors;
            return Array.isArray(i3) && i3.length > 0 && ((e4 = i3[t5]) || (e4 = ""), "function" == typeof e4) ? e4({ value: P3.globals.series[t5][s2], dataPointIndex: s2, w: P3 }) : e4;
          }(e3) : P3.globals.stroke.colors[e3];
          a3 = this.barOptions.distributed ? P3.globals.stroke.colors[s2] : I3;
        }
        P3.config.series[r3].data[s2] && P3.config.series[r3].data[s2].strokeColor && (a3 = P3.config.series[r3].data[s2].strokeColor), this.isNullValue && (i2 = "none");
        var T2 = s2 / P3.config.chart.animations.animateGradually.delay * (P3.config.chart.animations.speed / P3.globals.dataPoints) / 2.4, z2 = M2.renderPaths({ i: r3, j: s2, realIndex: e3, pathFrom: n2, pathTo: l2, stroke: a3, strokeWidth: h2, strokeLineCap: P3.config.stroke.lineCap, fill: i2, animationDelay: T2, initialSpeed: P3.config.chart.animations.speed, dataChangeSpeed: P3.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(L3, "-area") });
        z2.attr("clip-path", "url(#gridRectMask".concat(P3.globals.cuid, ")"));
        var X3 = P3.config.forecastDataPoints;
        X3.count > 0 && s2 >= P3.globals.dataPoints - X3.count && (z2.node.setAttribute("stroke-dasharray", X3.dashArray), z2.node.setAttribute("stroke-width", X3.strokeWidth), z2.node.setAttribute("fill-opacity", X3.fillOpacity)), void 0 !== u2 && void 0 !== p2 && (z2.attr("data-range-y1", u2), z2.attr("data-range-y2", p2)), new y2(this.ctx).setSelectionFilter(z2, e3, s2), c3.add(z2);
        var E2 = new yt2(this).handleBarDataLabels({ x: d2, y: g2, y1: u2, y2: p2, i: r3, j: s2, series: f2, realIndex: e3, columnGroupIndex: o3, barHeight: x2, barWidth: b2, barXPosition: v2, barYPosition: m2, renderedPath: z2, visibleSeries: C3 });
        return null !== E2.dataLabels && k2.add(E2.dataLabels), E2.totalDataLabels && k2.add(E2.totalDataLabels), c3.add(k2), A2 && c3.add(A2), S2 && c3.add(S2), c3;
      } }, { key: "drawBarPaths", value: function(t4) {
        var e3, i2 = t4.indexes, a3 = t4.barHeight, s2 = t4.strokeWidth, r3 = t4.zeroW, o3 = t4.x, n2 = t4.y, l2 = t4.yDivision, h2 = t4.elSeries, c3 = this.w, d2 = i2.i, g2 = i2.j;
        if (c3.globals.isXNumeric) e3 = (n2 = (c3.globals.seriesX[d2][g2] - c3.globals.minX) / this.invertedXRatio - a3) + a3 * this.visibleI;
        else if (c3.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
          var u2 = 0, p2 = 0;
          c3.globals.seriesPercent.forEach(function(t5, e4) {
            t5[g2] && u2++, e4 < d2 && 0 === t5[g2] && p2++;
          }), u2 > 0 && (a3 = this.seriesLen * a3 / u2), e3 = n2 + a3 * this.visibleI, e3 -= a3 * p2;
        } else e3 = n2 + a3 * this.visibleI;
        this.isFunnel && (r3 -= (this.barHelpers.getXForValue(this.series[d2][g2], r3) - r3) / 2), o3 = this.barHelpers.getXForValue(this.series[d2][g2], r3);
        var f2 = this.barHelpers.getBarpaths({ barYPosition: e3, barHeight: a3, x1: r3, x2: o3, strokeWidth: s2, series: this.series, realIndex: i2.realIndex, i: d2, j: g2, w: c3 });
        return c3.globals.isXNumeric || (n2 += l2), this.barHelpers.barBackground({ j: g2, i: d2, y1: e3 - a3 * this.visibleI, y2: a3 * this.seriesLen, elSeries: h2 }), { pathTo: f2.pathTo, pathFrom: f2.pathFrom, x1: r3, x: o3, y: n2, goalX: this.barHelpers.getGoalValues("x", r3, null, d2, g2), barYPosition: e3, barHeight: a3 };
      } }, { key: "drawColumnPaths", value: function(t4) {
        var e3, i2 = t4.indexes, a3 = t4.x, s2 = t4.y, r3 = t4.xDivision, o3 = t4.barWidth, n2 = t4.zeroH, l2 = t4.strokeWidth, h2 = t4.elSeries, c3 = this.w, d2 = i2.realIndex, g2 = i2.translationsIndex, u2 = i2.i, p2 = i2.j, f2 = i2.bc;
        if (c3.globals.isXNumeric) {
          var x2 = this.getBarXForNumericXAxis({ x: a3, j: p2, realIndex: d2, barWidth: o3 });
          a3 = x2.x, e3 = x2.barXPosition;
        } else if (c3.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
          var b2 = this.barHelpers.getZeroValueEncounters({ i: u2, j: p2 }), v2 = b2.nonZeroColumns, m2 = b2.zeroEncounters;
          v2 > 0 && (o3 = this.seriesLen * o3 / v2), e3 = a3 + o3 * this.visibleI, e3 -= o3 * m2;
        } else e3 = a3 + o3 * this.visibleI;
        s2 = this.barHelpers.getYForValue(this.series[u2][p2], n2, g2);
        var y3 = this.barHelpers.getColumnPaths({ barXPosition: e3, barWidth: o3, y1: n2, y2: s2, strokeWidth: l2, series: this.series, realIndex: d2, i: u2, j: p2, w: c3 });
        return c3.globals.isXNumeric || (a3 += r3), this.barHelpers.barBackground({ bc: f2, j: p2, i: u2, x1: e3 - l2 / 2 - o3 * this.visibleI, x2: o3 * this.seriesLen + l2 / 2, elSeries: h2 }), { pathTo: y3.pathTo, pathFrom: y3.pathFrom, x: a3, y: s2, goalY: this.barHelpers.getGoalValues("y", null, n2, u2, p2, g2), barXPosition: e3, barWidth: o3 };
      } }, { key: "getBarXForNumericXAxis", value: function(t4) {
        var e3 = t4.x, i2 = t4.barWidth, a3 = t4.realIndex, s2 = t4.j, r3 = this.w, o3 = a3;
        return r3.globals.seriesX[a3].length || (o3 = r3.globals.maxValsInArrayIndex), r3.globals.seriesX[o3][s2] && (e3 = (r3.globals.seriesX[o3][s2] - r3.globals.minX) / this.xRatio - i2 * this.seriesLen / 2), { barXPosition: e3 + i2 * this.visibleI, x: e3 };
      } }, { key: "getPreviousPath", value: function(t4, e3) {
        for (var i2, a3 = this.w, s2 = 0; s2 < a3.globals.previousPaths.length; s2++) {
          var r3 = a3.globals.previousPaths[s2];
          r3.paths && r3.paths.length > 0 && parseInt(r3.realIndex, 10) === parseInt(t4, 10) && void 0 !== a3.globals.previousPaths[s2].paths[e3] && (i2 = a3.globals.previousPaths[s2].paths[e3].d);
        }
        return i2;
      } }]), t3;
    }();
    var At2 = function(t3) {
      l(a3, kt2);
      var e3 = r2(a3);
      function a3() {
        return i(this, a3), e3.apply(this, arguments);
      }
      return s(a3, [{ key: "draw", value: function(t4, e4) {
        var i2 = this, a4 = this.w;
        this.graphics = new w(this.ctx), this.bar = new kt2(this.ctx, this.xyRatios);
        var s2 = new k(this.ctx, a4);
        t4 = s2.getLogSeries(t4), this.yRatio = s2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t4), "100%" === a4.config.chart.stackType && (t4 = a4.globals.comboCharts ? e4.map(function(t5) {
          return a4.globals.seriesPercent[t5];
        }) : a4.globals.seriesPercent.slice()), this.series = t4, this.barHelpers.initializeStackedPrevVars(this);
        for (var r3 = this.graphics.group({ class: "apexcharts-bar-series apexcharts-plot-series" }), o3 = 0, n2 = 0, l2 = function(s3, l3) {
          var h3 = void 0, c4 = void 0, g2 = void 0, u2 = void 0, p2 = a4.globals.comboCharts ? e4[s3] : s3, f2 = i2.barHelpers.getGroupIndex(p2), x2 = f2.groupIndex, b2 = f2.columnGroupIndex;
          i2.groupCtx = i2[a4.globals.seriesGroups[x2]];
          var m2 = [], y3 = [], w2 = 0;
          i2.yRatio.length > 1 && (i2.yaxisIndex = a4.globals.seriesYAxisReverseMap[p2][0], w2 = p2), i2.isReversed = a4.config.yaxis[i2.yaxisIndex] && a4.config.yaxis[i2.yaxisIndex].reversed;
          var k2 = i2.graphics.group({ class: "apexcharts-series", seriesName: v.escapeString(a4.globals.seriesNames[p2]), rel: s3 + 1, "data:realIndex": p2 });
          i2.ctx.series.addCollapsedClassToSeries(k2, p2);
          var A2 = i2.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": p2 }), S2 = i2.graphics.group({ class: "apexcharts-bar-goals-markers" }), C3 = 0, L3 = 0, P3 = i2.initialPositions(o3, n2, h3, c4, g2, u2, w2);
          n2 = P3.y, C3 = P3.barHeight, c4 = P3.yDivision, u2 = P3.zeroW, o3 = P3.x, L3 = P3.barWidth, h3 = P3.xDivision, g2 = P3.zeroH, a4.globals.barHeight = C3, a4.globals.barWidth = L3, i2.barHelpers.initializeStackedXYVars(i2), 1 === i2.groupCtx.prevY.length && i2.groupCtx.prevY[0].every(function(t5) {
            return isNaN(t5);
          }) && (i2.groupCtx.prevY[0] = i2.groupCtx.prevY[0].map(function() {
            return g2;
          }), i2.groupCtx.prevYF[0] = i2.groupCtx.prevYF[0].map(function() {
            return 0;
          }));
          for (var M2 = 0; M2 < a4.globals.dataPoints; M2++) {
            var I3 = i2.barHelpers.getStrokeWidth(s3, M2, p2), T2 = { indexes: { i: s3, j: M2, realIndex: p2, translationsIndex: w2, bc: l3 }, strokeWidth: I3, x: o3, y: n2, elSeries: k2, columnGroupIndex: b2, seriesGroup: a4.globals.seriesGroups[x2] }, z2 = null;
            i2.isHorizontal ? (z2 = i2.drawStackedBarPaths(d(d({}, T2), {}, { zeroW: u2, barHeight: C3, yDivision: c4 })), L3 = i2.series[s3][M2] / i2.invertedYRatio) : (z2 = i2.drawStackedColumnPaths(d(d({}, T2), {}, { xDivision: h3, barWidth: L3, zeroH: g2 })), C3 = i2.series[s3][M2] / i2.yRatio[w2]);
            var X3 = i2.barHelpers.drawGoalLine({ barXPosition: z2.barXPosition, barYPosition: z2.barYPosition, goalX: z2.goalX, goalY: z2.goalY, barHeight: C3, barWidth: L3 });
            X3 && S2.add(X3), n2 = z2.y, o3 = z2.x, m2.push(o3), y3.push(n2);
            var E2 = i2.barHelpers.getPathFillColor(t4, s3, M2, p2);
            k2 = i2.renderSeries({ realIndex: p2, pathFill: E2, j: M2, i: s3, columnGroupIndex: b2, pathFrom: z2.pathFrom, pathTo: z2.pathTo, strokeWidth: I3, elSeries: k2, x: o3, y: n2, series: t4, barHeight: C3, barWidth: L3, elDataLabelsWrap: A2, elGoalsMarkers: S2, type: "bar", visibleSeries: b2 });
          }
          a4.globals.seriesXvalues[p2] = m2, a4.globals.seriesYvalues[p2] = y3, i2.groupCtx.prevY.push(i2.groupCtx.yArrj), i2.groupCtx.prevYF.push(i2.groupCtx.yArrjF), i2.groupCtx.prevYVal.push(i2.groupCtx.yArrjVal), i2.groupCtx.prevX.push(i2.groupCtx.xArrj), i2.groupCtx.prevXF.push(i2.groupCtx.xArrjF), i2.groupCtx.prevXVal.push(i2.groupCtx.xArrjVal), r3.add(k2);
        }, h2 = 0, c3 = 0; h2 < t4.length; h2++, c3++) l2(h2, c3);
        return r3;
      } }, { key: "initialPositions", value: function(t4, e4, i2, a4, s2, r3, o3) {
        var n2, l2, h2 = this.w;
        if (this.isHorizontal) {
          a4 = h2.globals.gridHeight / h2.globals.dataPoints;
          var c3 = h2.config.plotOptions.bar.barHeight;
          n2 = -1 === String(c3).indexOf("%") ? parseInt(c3, 10) : a4 * parseInt(c3, 10) / 100, r3 = h2.globals.padHorizontal + (this.isReversed ? h2.globals.gridWidth - this.baseLineInvertedY : this.baseLineInvertedY), e4 = (a4 - n2) / 2;
        } else {
          l2 = i2 = h2.globals.gridWidth / h2.globals.dataPoints;
          var d2 = h2.config.plotOptions.bar.columnWidth;
          h2.globals.isXNumeric && h2.globals.dataPoints > 1 ? l2 = (i2 = h2.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : -1 === String(d2).indexOf("%") ? l2 = parseInt(d2, 10) : l2 *= parseInt(d2, 10) / 100, s2 = this.isReversed ? this.baseLineY[o3] : h2.globals.gridHeight - this.baseLineY[o3], t4 = h2.globals.padHorizontal + (i2 - l2) / 2;
        }
        var g2 = h2.globals.barGroups.length || 1;
        return { x: t4, y: e4, yDivision: a4, xDivision: i2, barHeight: n2 / g2, barWidth: l2 / g2, zeroH: s2, zeroW: r3 };
      } }, { key: "drawStackedBarPaths", value: function(t4) {
        for (var e4, i2 = t4.indexes, a4 = t4.barHeight, s2 = t4.strokeWidth, r3 = t4.zeroW, o3 = t4.x, n2 = t4.y, l2 = t4.columnGroupIndex, h2 = t4.seriesGroup, c3 = t4.yDivision, d2 = t4.elSeries, g2 = this.w, u2 = n2 + l2 * a4, p2 = i2.i, f2 = i2.j, x2 = i2.realIndex, b2 = i2.translationsIndex, v2 = 0, m2 = 0; m2 < this.groupCtx.prevXF.length; m2++) v2 += this.groupCtx.prevXF[m2][f2];
        var y3;
        if ((y3 = h2.indexOf(g2.config.series[x2].name)) > 0) {
          var w2 = r3;
          this.groupCtx.prevXVal[y3 - 1][f2] < 0 ? w2 = this.series[p2][f2] >= 0 ? this.groupCtx.prevX[y3 - 1][f2] + v2 - 2 * (this.isReversed ? v2 : 0) : this.groupCtx.prevX[y3 - 1][f2] : this.groupCtx.prevXVal[y3 - 1][f2] >= 0 && (w2 = this.series[p2][f2] >= 0 ? this.groupCtx.prevX[y3 - 1][f2] : this.groupCtx.prevX[y3 - 1][f2] - v2 + 2 * (this.isReversed ? v2 : 0)), e4 = w2;
        } else e4 = r3;
        o3 = null === this.series[p2][f2] ? e4 : e4 + this.series[p2][f2] / this.invertedYRatio - 2 * (this.isReversed ? this.series[p2][f2] / this.invertedYRatio : 0);
        var k2 = this.barHelpers.getBarpaths({ barYPosition: u2, barHeight: a4, x1: e4, x2: o3, strokeWidth: s2, series: this.series, realIndex: i2.realIndex, seriesGroup: h2, i: p2, j: f2, w: g2 });
        return this.barHelpers.barBackground({ j: f2, i: p2, y1: u2, y2: a4, elSeries: d2 }), n2 += c3, { pathTo: k2.pathTo, pathFrom: k2.pathFrom, goalX: this.barHelpers.getGoalValues("x", r3, null, p2, f2, b2), barXPosition: e4, barYPosition: u2, x: o3, y: n2 };
      } }, { key: "drawStackedColumnPaths", value: function(t4) {
        var e4 = t4.indexes, i2 = t4.x, a4 = t4.y, s2 = t4.xDivision, r3 = t4.barWidth, o3 = t4.zeroH, n2 = t4.columnGroupIndex, l2 = t4.seriesGroup, h2 = t4.elSeries, c3 = this.w, d2 = e4.i, g2 = e4.j, u2 = e4.bc, p2 = e4.realIndex, f2 = e4.translationsIndex;
        if (c3.globals.isXNumeric) {
          var x2 = c3.globals.seriesX[p2][g2];
          x2 || (x2 = 0), i2 = (x2 - c3.globals.minX) / this.xRatio - r3 / 2 * c3.globals.barGroups.length;
        }
        for (var b2, v2 = i2 + n2 * r3, m2 = 0, y3 = 0; y3 < this.groupCtx.prevYF.length; y3++) m2 += isNaN(this.groupCtx.prevYF[y3][g2]) ? 0 : this.groupCtx.prevYF[y3][g2];
        var w2 = d2;
        if (l2 && (w2 = l2.indexOf(c3.globals.seriesNames[p2])), w2 > 0 && !c3.globals.isXNumeric || w2 > 0 && c3.globals.isXNumeric && c3.globals.seriesX[p2 - 1][g2] === c3.globals.seriesX[p2][g2]) {
          var k2, A2, S2, C3 = Math.min(this.yRatio.length + 1, p2 + 1);
          if (void 0 !== this.groupCtx.prevY[w2 - 1] && this.groupCtx.prevY[w2 - 1].length) for (var L3 = 1; L3 < C3; L3++) {
            var P3;
            if (!isNaN(null === (P3 = this.groupCtx.prevY[w2 - L3]) || void 0 === P3 ? void 0 : P3[g2])) {
              S2 = this.groupCtx.prevY[w2 - L3][g2];
              break;
            }
          }
          for (var M2 = 1; M2 < C3; M2++) {
            var I3, T2;
            if ((null === (I3 = this.groupCtx.prevYVal[w2 - M2]) || void 0 === I3 ? void 0 : I3[g2]) < 0) {
              A2 = this.series[d2][g2] >= 0 ? S2 - m2 + 2 * (this.isReversed ? m2 : 0) : S2;
              break;
            }
            if ((null === (T2 = this.groupCtx.prevYVal[w2 - M2]) || void 0 === T2 ? void 0 : T2[g2]) >= 0) {
              A2 = this.series[d2][g2] >= 0 ? S2 : S2 + m2 - 2 * (this.isReversed ? m2 : 0);
              break;
            }
          }
          void 0 === A2 && (A2 = c3.globals.gridHeight), b2 = null !== (k2 = this.groupCtx.prevYF[0]) && void 0 !== k2 && k2.every(function(t5) {
            return 0 === t5;
          }) && this.groupCtx.prevYF.slice(1, w2).every(function(t5) {
            return t5.every(function(t6) {
              return isNaN(t6);
            });
          }) ? o3 : A2;
        } else b2 = o3;
        a4 = this.series[d2][g2] ? b2 - this.series[d2][g2] / this.yRatio[f2] + 2 * (this.isReversed ? this.series[d2][g2] / this.yRatio[f2] : 0) : b2;
        var z2 = this.barHelpers.getColumnPaths({ barXPosition: v2, barWidth: r3, y1: b2, y2: a4, yRatio: this.yRatio[f2], strokeWidth: this.strokeWidth, series: this.series, seriesGroup: l2, realIndex: e4.realIndex, i: d2, j: g2, w: c3 });
        return this.barHelpers.barBackground({ bc: u2, j: g2, i: d2, x1: v2, x2: r3, elSeries: h2 }), { pathTo: z2.pathTo, pathFrom: z2.pathFrom, goalY: this.barHelpers.getGoalValues("y", null, o3, d2, g2), barXPosition: v2, x: c3.globals.isXNumeric ? i2 : i2 + s2, y: a4 };
      } }]), a3;
    }();
    var St = function(t3) {
      l(a3, kt2);
      var e3 = r2(a3);
      function a3() {
        return i(this, a3), e3.apply(this, arguments);
      }
      return s(a3, [{ key: "draw", value: function(t4, e4, i2) {
        var a4 = this, s2 = this.w, r3 = new w(this.ctx), o3 = s2.globals.comboCharts ? e4 : s2.config.chart.type, n2 = new O2(this.ctx);
        this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = s2.config.plotOptions.bar.horizontal;
        var l2 = new k(this.ctx, s2);
        t4 = l2.getLogSeries(t4), this.series = t4, this.yRatio = l2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t4);
        for (var h2 = r3.group({ class: "apexcharts-".concat(o3, "-series apexcharts-plot-series") }), c3 = function(e5) {
          a4.isBoxPlot = "boxPlot" === s2.config.chart.type || "boxPlot" === s2.config.series[e5].type;
          var o4, l3, c4, g3, u2 = void 0, p2 = void 0, f2 = [], x2 = [], b2 = s2.globals.comboCharts ? i2[e5] : e5, m2 = a4.barHelpers.getGroupIndex(b2).columnGroupIndex, y3 = r3.group({ class: "apexcharts-series", seriesName: v.escapeString(s2.globals.seriesNames[b2]), rel: e5 + 1, "data:realIndex": b2 });
          a4.ctx.series.addCollapsedClassToSeries(y3, b2), t4[e5].length > 0 && (a4.visibleI = a4.visibleI + 1);
          var w2, k2, A2 = 0;
          a4.yRatio.length > 1 && (a4.yaxisIndex = s2.globals.seriesYAxisReverseMap[b2][0], A2 = b2);
          var S2 = a4.barHelpers.initialPositions();
          p2 = S2.y, w2 = S2.barHeight, l3 = S2.yDivision, g3 = S2.zeroW, u2 = S2.x, k2 = S2.barWidth, o4 = S2.xDivision, c4 = S2.zeroH, x2.push(u2 + k2 / 2);
          for (var C3 = r3.group({ class: "apexcharts-datalabels", "data:realIndex": b2 }), L3 = function(i3) {
            var r4 = a4.barHelpers.getStrokeWidth(e5, i3, b2), h3 = null, v2 = { indexes: { i: e5, j: i3, realIndex: b2, translationsIndex: A2 }, x: u2, y: p2, strokeWidth: r4, elSeries: y3 };
            h3 = a4.isHorizontal ? a4.drawHorizontalBoxPaths(d(d({}, v2), {}, { yDivision: l3, barHeight: w2, zeroW: g3 })) : a4.drawVerticalBoxPaths(d(d({}, v2), {}, { xDivision: o4, barWidth: k2, zeroH: c4 })), p2 = h3.y, u2 = h3.x, i3 > 0 && x2.push(u2 + k2 / 2), f2.push(p2), h3.pathTo.forEach(function(o5, l4) {
              var c5 = !a4.isBoxPlot && a4.candlestickOptions.wick.useFillColor ? h3.color[l4] : s2.globals.stroke.colors[e5], d2 = n2.fillPath({ seriesNumber: b2, dataPointIndex: i3, color: h3.color[l4], value: t4[e5][i3] });
              a4.renderSeries({ realIndex: b2, pathFill: d2, lineFill: c5, j: i3, i: e5, pathFrom: h3.pathFrom, pathTo: o5, strokeWidth: r4, elSeries: y3, x: u2, y: p2, series: t4, columnGroupIndex: m2, barHeight: w2, barWidth: k2, elDataLabelsWrap: C3, visibleSeries: a4.visibleI, type: s2.config.chart.type });
            });
          }, P3 = 0; P3 < s2.globals.dataPoints; P3++) L3(P3);
          s2.globals.seriesXvalues[b2] = x2, s2.globals.seriesYvalues[b2] = f2, h2.add(y3);
        }, g2 = 0; g2 < t4.length; g2++) c3(g2);
        return h2;
      } }, { key: "drawVerticalBoxPaths", value: function(t4) {
        var e4 = t4.indexes, i2 = t4.x;
        t4.y;
        var a4 = t4.xDivision, s2 = t4.barWidth, r3 = t4.zeroH, o3 = t4.strokeWidth, n2 = this.w, l2 = new w(this.ctx), h2 = e4.i, c3 = e4.j, d2 = true, g2 = n2.config.plotOptions.candlestick.colors.upward, u2 = n2.config.plotOptions.candlestick.colors.downward, p2 = "";
        this.isBoxPlot && (p2 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
        var f2 = this.yRatio[e4.translationsIndex], x2 = e4.realIndex, b2 = this.getOHLCValue(x2, c3), v2 = r3, m2 = r3;
        b2.o > b2.c && (d2 = false);
        var y3 = Math.min(b2.o, b2.c), k2 = Math.max(b2.o, b2.c), A2 = b2.m;
        n2.globals.isXNumeric && (i2 = (n2.globals.seriesX[x2][c3] - n2.globals.minX) / this.xRatio - s2 / 2);
        var S2 = i2 + s2 * this.visibleI;
        void 0 === this.series[h2][c3] || null === this.series[h2][c3] ? (y3 = r3, k2 = r3) : (y3 = r3 - y3 / f2, k2 = r3 - k2 / f2, v2 = r3 - b2.h / f2, m2 = r3 - b2.l / f2, A2 = r3 - b2.m / f2);
        var C3 = l2.move(S2, r3), L3 = l2.move(S2 + s2 / 2, y3);
        return n2.globals.previousPaths.length > 0 && (L3 = this.getPreviousPath(x2, c3, true)), C3 = this.isBoxPlot ? [l2.move(S2, y3) + l2.line(S2 + s2 / 2, y3) + l2.line(S2 + s2 / 2, v2) + l2.line(S2 + s2 / 4, v2) + l2.line(S2 + s2 - s2 / 4, v2) + l2.line(S2 + s2 / 2, v2) + l2.line(S2 + s2 / 2, y3) + l2.line(S2 + s2, y3) + l2.line(S2 + s2, A2) + l2.line(S2, A2) + l2.line(S2, y3 + o3 / 2), l2.move(S2, A2) + l2.line(S2 + s2, A2) + l2.line(S2 + s2, k2) + l2.line(S2 + s2 / 2, k2) + l2.line(S2 + s2 / 2, m2) + l2.line(S2 + s2 - s2 / 4, m2) + l2.line(S2 + s2 / 4, m2) + l2.line(S2 + s2 / 2, m2) + l2.line(S2 + s2 / 2, k2) + l2.line(S2, k2) + l2.line(S2, A2) + "z"] : [l2.move(S2, k2) + l2.line(S2 + s2 / 2, k2) + l2.line(S2 + s2 / 2, v2) + l2.line(S2 + s2 / 2, k2) + l2.line(S2 + s2, k2) + l2.line(S2 + s2, y3) + l2.line(S2 + s2 / 2, y3) + l2.line(S2 + s2 / 2, m2) + l2.line(S2 + s2 / 2, y3) + l2.line(S2, y3) + l2.line(S2, k2 - o3 / 2)], L3 += l2.move(S2, y3), n2.globals.isXNumeric || (i2 += a4), { pathTo: C3, pathFrom: L3, x: i2, y: k2, barXPosition: S2, color: this.isBoxPlot ? p2 : d2 ? [g2] : [u2] };
      } }, { key: "drawHorizontalBoxPaths", value: function(t4) {
        var e4 = t4.indexes;
        t4.x;
        var i2 = t4.y, a4 = t4.yDivision, s2 = t4.barHeight, r3 = t4.zeroW, o3 = t4.strokeWidth, n2 = this.w, l2 = new w(this.ctx), h2 = e4.i, c3 = e4.j, d2 = this.boxOptions.colors.lower;
        this.isBoxPlot && (d2 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
        var g2 = this.invertedYRatio, u2 = e4.realIndex, p2 = this.getOHLCValue(u2, c3), f2 = r3, x2 = r3, b2 = Math.min(p2.o, p2.c), v2 = Math.max(p2.o, p2.c), m2 = p2.m;
        n2.globals.isXNumeric && (i2 = (n2.globals.seriesX[u2][c3] - n2.globals.minX) / this.invertedXRatio - s2 / 2);
        var y3 = i2 + s2 * this.visibleI;
        void 0 === this.series[h2][c3] || null === this.series[h2][c3] ? (b2 = r3, v2 = r3) : (b2 = r3 + b2 / g2, v2 = r3 + v2 / g2, f2 = r3 + p2.h / g2, x2 = r3 + p2.l / g2, m2 = r3 + p2.m / g2);
        var k2 = l2.move(r3, y3), A2 = l2.move(b2, y3 + s2 / 2);
        return n2.globals.previousPaths.length > 0 && (A2 = this.getPreviousPath(u2, c3, true)), k2 = [l2.move(b2, y3) + l2.line(b2, y3 + s2 / 2) + l2.line(f2, y3 + s2 / 2) + l2.line(f2, y3 + s2 / 2 - s2 / 4) + l2.line(f2, y3 + s2 / 2 + s2 / 4) + l2.line(f2, y3 + s2 / 2) + l2.line(b2, y3 + s2 / 2) + l2.line(b2, y3 + s2) + l2.line(m2, y3 + s2) + l2.line(m2, y3) + l2.line(b2 + o3 / 2, y3), l2.move(m2, y3) + l2.line(m2, y3 + s2) + l2.line(v2, y3 + s2) + l2.line(v2, y3 + s2 / 2) + l2.line(x2, y3 + s2 / 2) + l2.line(x2, y3 + s2 - s2 / 4) + l2.line(x2, y3 + s2 / 4) + l2.line(x2, y3 + s2 / 2) + l2.line(v2, y3 + s2 / 2) + l2.line(v2, y3) + l2.line(m2, y3) + "z"], A2 += l2.move(b2, y3), n2.globals.isXNumeric || (i2 += a4), { pathTo: k2, pathFrom: A2, x: v2, y: i2, barYPosition: y3, color: d2 };
      } }, { key: "getOHLCValue", value: function(t4, e4) {
        var i2 = this.w;
        return { o: this.isBoxPlot ? i2.globals.seriesCandleH[t4][e4] : i2.globals.seriesCandleO[t4][e4], h: this.isBoxPlot ? i2.globals.seriesCandleO[t4][e4] : i2.globals.seriesCandleH[t4][e4], m: i2.globals.seriesCandleM[t4][e4], l: this.isBoxPlot ? i2.globals.seriesCandleC[t4][e4] : i2.globals.seriesCandleL[t4][e4], c: this.isBoxPlot ? i2.globals.seriesCandleL[t4][e4] : i2.globals.seriesCandleC[t4][e4] };
      } }]), a3;
    }();
    var Ct3 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "checkColorRange", value: function() {
        var t4 = this.w, e3 = false, i2 = t4.config.plotOptions[t4.config.chart.type];
        return i2.colorScale.ranges.length > 0 && i2.colorScale.ranges.map(function(t5, i3) {
          t5.from <= 0 && (e3 = true);
        }), e3;
      } }, { key: "getShadeColor", value: function(t4, e3, i2, a3) {
        var s2 = this.w, r3 = 1, o3 = s2.config.plotOptions[t4].shadeIntensity, n2 = this.determineColor(t4, e3, i2);
        s2.globals.hasNegs || a3 ? r3 = s2.config.plotOptions[t4].reverseNegativeShade ? n2.percent < 0 ? n2.percent / 100 * (1.25 * o3) : (1 - n2.percent / 100) * (1.25 * o3) : n2.percent <= 0 ? 1 - (1 + n2.percent / 100) * o3 : (1 - n2.percent / 100) * o3 : (r3 = 1 - n2.percent / 100, "treemap" === t4 && (r3 = (1 - n2.percent / 100) * (1.25 * o3)));
        var l2 = n2.color, h2 = new v();
        if (s2.config.plotOptions[t4].enableShades) if ("dark" === this.w.config.theme.mode) {
          var c3 = h2.shadeColor(-1 * r3, n2.color);
          l2 = v.hexToRgba(v.isColorHex(c3) ? c3 : v.rgb2hex(c3), s2.config.fill.opacity);
        } else {
          var d2 = h2.shadeColor(r3, n2.color);
          l2 = v.hexToRgba(v.isColorHex(d2) ? d2 : v.rgb2hex(d2), s2.config.fill.opacity);
        }
        return { color: l2, colorProps: n2 };
      } }, { key: "determineColor", value: function(t4, e3, i2) {
        var a3 = this.w, s2 = a3.globals.series[e3][i2], r3 = a3.config.plotOptions[t4], o3 = r3.colorScale.inverse ? i2 : e3;
        r3.distributed && "treemap" === a3.config.chart.type && (o3 = i2);
        var n2 = a3.globals.colors[o3], l2 = null, h2 = Math.min.apply(Math, p(a3.globals.series[e3])), c3 = Math.max.apply(Math, p(a3.globals.series[e3]));
        r3.distributed || "heatmap" !== t4 || (h2 = a3.globals.minY, c3 = a3.globals.maxY), void 0 !== r3.colorScale.min && (h2 = r3.colorScale.min < a3.globals.minY ? r3.colorScale.min : a3.globals.minY, c3 = r3.colorScale.max > a3.globals.maxY ? r3.colorScale.max : a3.globals.maxY);
        var d2 = Math.abs(c3) + Math.abs(h2), g2 = 100 * s2 / (0 === d2 ? d2 - 1e-6 : d2);
        r3.colorScale.ranges.length > 0 && r3.colorScale.ranges.map(function(t5, e4) {
          if (s2 >= t5.from && s2 <= t5.to) {
            n2 = t5.color, l2 = t5.foreColor ? t5.foreColor : null, h2 = t5.from, c3 = t5.to;
            var i3 = Math.abs(c3) + Math.abs(h2);
            g2 = 100 * s2 / (0 === i3 ? i3 - 1e-6 : i3);
          }
        });
        return { color: n2, foreColor: l2, percent: g2 };
      } }, { key: "calculateDataLabels", value: function(t4) {
        var e3 = t4.text, i2 = t4.x, a3 = t4.y, s2 = t4.i, r3 = t4.j, o3 = t4.colorProps, n2 = t4.fontSize, l2 = this.w.config.dataLabels, h2 = new w(this.ctx), c3 = new B2(this.ctx), d2 = null;
        if (l2.enabled) {
          d2 = h2.group({ class: "apexcharts-data-labels" });
          var g2 = l2.offsetX, u2 = l2.offsetY, p2 = i2 + g2, f2 = a3 + parseFloat(l2.style.fontSize) / 3 + u2;
          c3.plotDataLabelsText({ x: p2, y: f2, text: e3, i: s2, j: r3, color: o3.foreColor, parent: d2, fontSize: n2, dataLabelsConfig: l2 });
        }
        return d2;
      } }, { key: "addListeners", value: function(t4) {
        var e3 = new w(this.ctx);
        t4.node.addEventListener("mouseenter", e3.pathMouseEnter.bind(this, t4)), t4.node.addEventListener("mouseleave", e3.pathMouseLeave.bind(this, t4)), t4.node.addEventListener("mousedown", e3.pathMouseDown.bind(this, t4));
      } }]), t3;
    }();
    var Lt2 = function() {
      function t3(e3, a3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.xRatio = a3.xRatio, this.yRatio = a3.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new Ct3(e3), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;
      }
      return s(t3, [{ key: "draw", value: function(t4) {
        var e3 = this.w, i2 = new w(this.ctx), a3 = i2.group({ class: "apexcharts-heatmap" });
        a3.attr("clip-path", "url(#gridRectMask".concat(e3.globals.cuid, ")"));
        var s2 = e3.globals.gridWidth / e3.globals.dataPoints, r3 = e3.globals.gridHeight / e3.globals.series.length, o3 = 0, n2 = false;
        this.negRange = this.helpers.checkColorRange();
        var l2 = t4.slice();
        e3.config.yaxis[0].reversed && (n2 = true, l2.reverse());
        for (var h2 = n2 ? 0 : l2.length - 1; n2 ? h2 < l2.length : h2 >= 0; n2 ? h2++ : h2--) {
          var c3 = i2.group({ class: "apexcharts-series apexcharts-heatmap-series", seriesName: v.escapeString(e3.globals.seriesNames[h2]), rel: h2 + 1, "data:realIndex": h2 });
          if (this.ctx.series.addCollapsedClassToSeries(c3, h2), e3.config.chart.dropShadow.enabled) {
            var d2 = e3.config.chart.dropShadow;
            new y2(this.ctx).dropShadow(c3, d2, h2);
          }
          for (var g2 = 0, u2 = e3.config.plotOptions.heatmap.shadeIntensity, p2 = 0; p2 < l2[h2].length; p2++) {
            var f2 = this.helpers.getShadeColor(e3.config.chart.type, h2, p2, this.negRange), x2 = f2.color, b2 = f2.colorProps;
            if ("image" === e3.config.fill.type) x2 = new O2(this.ctx).fillPath({ seriesNumber: h2, dataPointIndex: p2, opacity: e3.globals.hasNegs ? b2.percent < 0 ? 1 - (1 + b2.percent / 100) : u2 + b2.percent / 100 : b2.percent / 100, patternID: v.randomId(), width: e3.config.fill.image.width ? e3.config.fill.image.width : s2, height: e3.config.fill.image.height ? e3.config.fill.image.height : r3 });
            var m2 = this.rectRadius, k2 = i2.drawRect(g2, o3, s2, r3, m2);
            if (k2.attr({ cx: g2, cy: o3 }), k2.node.classList.add("apexcharts-heatmap-rect"), c3.add(k2), k2.attr({ fill: x2, i: h2, index: h2, j: p2, val: t4[h2][p2], "stroke-width": this.strokeWidth, stroke: e3.config.plotOptions.heatmap.useFillColorAsStroke ? x2 : e3.globals.stroke.colors[0], color: x2 }), this.helpers.addListeners(k2), e3.config.chart.animations.enabled && !e3.globals.dataChanged) {
              var A2 = 1;
              e3.globals.resized || (A2 = e3.config.chart.animations.speed), this.animateHeatMap(k2, g2, o3, s2, r3, A2);
            }
            if (e3.globals.dataChanged) {
              var S2 = 1;
              if (this.dynamicAnim.enabled && e3.globals.shouldAnimate) {
                S2 = this.dynamicAnim.speed;
                var C3 = e3.globals.previousPaths[h2] && e3.globals.previousPaths[h2][p2] && e3.globals.previousPaths[h2][p2].color;
                C3 || (C3 = "rgba(255, 255, 255, 0)"), this.animateHeatColor(k2, v.isColorHex(C3) ? C3 : v.rgb2hex(C3), v.isColorHex(x2) ? x2 : v.rgb2hex(x2), S2);
              }
            }
            var L3 = (0, e3.config.dataLabels.formatter)(e3.globals.series[h2][p2], { value: e3.globals.series[h2][p2], seriesIndex: h2, dataPointIndex: p2, w: e3 }), P3 = this.helpers.calculateDataLabels({ text: L3, x: g2 + s2 / 2, y: o3 + r3 / 2, i: h2, j: p2, colorProps: b2, series: l2 });
            null !== P3 && c3.add(P3), g2 += s2;
          }
          o3 += r3, a3.add(c3);
        }
        var M2 = e3.globals.yAxisScale[0].result.slice();
        return e3.config.yaxis[0].reversed ? M2.unshift("") : M2.push(""), e3.globals.yAxisScale[0].result = M2, a3;
      } }, { key: "animateHeatMap", value: function(t4, e3, i2, a3, s2, r3) {
        var o3 = new m(this.ctx);
        o3.animateRect(t4, { x: e3 + a3 / 2, y: i2 + s2 / 2, width: 0, height: 0 }, { x: e3, y: i2, width: a3, height: s2 }, r3, function() {
          o3.animationCompleted(t4);
        });
      } }, { key: "animateHeatColor", value: function(t4, e3, i2, a3) {
        t4.attr({ fill: e3 }).animate(a3).attr({ fill: i2 });
      } }]), t3;
    }();
    var Pt2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "drawYAxisTexts", value: function(t4, e3, i2, a3) {
        var s2 = this.w, r3 = s2.config.yaxis[0], o3 = s2.globals.yLabelFormatters[0];
        return new w(this.ctx).drawText({ x: t4 + r3.labels.offsetX, y: e3 + r3.labels.offsetY, text: o3(a3, i2), textAnchor: "middle", fontSize: r3.labels.style.fontSize, fontFamily: r3.labels.style.fontFamily, foreColor: Array.isArray(r3.labels.style.colors) ? r3.labels.style.colors[i2] : r3.labels.style.colors });
      } }]), t3;
    }();
    var Mt2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
        var a3 = this.w;
        this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== a3.globals.stroke.colors ? a3.globals.stroke.colors : a3.globals.colors, this.defaultSize = Math.min(a3.globals.gridWidth, a3.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = a3.globals.gridWidth / 2, "radialBar" === a3.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(a3.config.plotOptions.pie.endAngle - a3.config.plotOptions.pie.startAngle), this.initialAngle = a3.config.plotOptions.pie.startAngle % this.fullAngle, a3.globals.radialSize = this.defaultSize / 2.05 - a3.config.stroke.width - (a3.config.chart.sparkline.enabled ? 0 : a3.config.chart.dropShadow.blur), this.donutSize = a3.globals.radialSize * parseInt(a3.config.plotOptions.pie.donut.size, 10) / 100;
        var s2 = a3.config.plotOptions.pie.customScale, r3 = a3.globals.gridWidth / 2, o3 = a3.globals.gridHeight / 2;
        this.translateX = r3 - r3 * s2, this.translateY = o3 - o3 * s2, this.dataLabelsGroup = new w(this.ctx).group({ class: "apexcharts-datalabels-group", transform: "translate(".concat(this.translateX, ", ").concat(this.translateY, ") scale(").concat(s2, ")") }), this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];
      }
      return s(t3, [{ key: "draw", value: function(t4) {
        var e3 = this, i2 = this.w, a3 = new w(this.ctx), s2 = a3.group({ class: "apexcharts-pie" });
        if (i2.globals.noData) return s2;
        for (var r3 = 0, o3 = 0; o3 < t4.length; o3++) r3 += v.negToZero(t4[o3]);
        var n2 = [], l2 = a3.group();
        0 === r3 && (r3 = 1e-5), t4.forEach(function(t5) {
          e3.maxY = Math.max(e3.maxY, t5);
        }), i2.config.yaxis[0].max && (this.maxY = i2.config.yaxis[0].max), "back" === i2.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(s2);
        for (var h2 = 0; h2 < t4.length; h2++) {
          var c3 = this.fullAngle * v.negToZero(t4[h2]) / r3;
          n2.push(c3), "polarArea" === this.chartType ? (n2[h2] = this.fullAngle / t4.length, this.sliceSizes.push(i2.globals.radialSize * t4[h2] / this.maxY)) : this.sliceSizes.push(i2.globals.radialSize);
        }
        if (i2.globals.dataChanged) {
          for (var d2, g2 = 0, u2 = 0; u2 < i2.globals.previousPaths.length; u2++) g2 += v.negToZero(i2.globals.previousPaths[u2]);
          for (var p2 = 0; p2 < i2.globals.previousPaths.length; p2++) d2 = this.fullAngle * v.negToZero(i2.globals.previousPaths[p2]) / g2, this.prevSectorAngleArr.push(d2);
        }
        if (this.donutSize < 0 && (this.donutSize = 0), "donut" === this.chartType) {
          var f2 = a3.drawCircle(this.donutSize);
          f2.attr({ cx: this.centerX, cy: this.centerY, fill: i2.config.plotOptions.pie.donut.background ? i2.config.plotOptions.pie.donut.background : "transparent" }), l2.add(f2);
        }
        var x2 = this.drawArcs(n2, t4);
        if (this.sliceLabels.forEach(function(t5) {
          x2.add(t5);
        }), l2.attr({ transform: "translate(".concat(this.translateX, ", ").concat(this.translateY, ") scale(").concat(i2.config.plotOptions.pie.customScale, ")") }), l2.add(x2), s2.add(l2), this.donutDataLabels.show) {
          var b2 = this.renderInnerDataLabels(this.dataLabelsGroup, this.donutDataLabels, { hollowSize: this.donutSize, centerX: this.centerX, centerY: this.centerY, opacity: this.donutDataLabels.show });
          s2.add(b2);
        }
        return "front" === i2.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(s2), s2;
      } }, { key: "drawArcs", value: function(t4, e3) {
        var i2 = this.w, a3 = new y2(this.ctx), s2 = new w(this.ctx), r3 = new O2(this.ctx), o3 = s2.group({ class: "apexcharts-slices" }), n2 = this.initialAngle, l2 = this.initialAngle, h2 = this.initialAngle, c3 = this.initialAngle;
        this.strokeWidth = i2.config.stroke.show ? i2.config.stroke.width : 0;
        for (var d2 = 0; d2 < t4.length; d2++) {
          var g2 = s2.group({ class: "apexcharts-series apexcharts-pie-series", seriesName: v.escapeString(i2.globals.seriesNames[d2]), rel: d2 + 1, "data:realIndex": d2 });
          o3.add(g2), l2 = c3, h2 = (n2 = h2) + t4[d2], c3 = l2 + this.prevSectorAngleArr[d2];
          var u2 = h2 < n2 ? this.fullAngle + h2 - n2 : h2 - n2, p2 = r3.fillPath({ seriesNumber: d2, size: this.sliceSizes[d2], value: e3[d2] }), f2 = this.getChangedPath(l2, c3), x2 = s2.drawPath({ d: f2, stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d2] : this.lineColorArr, strokeWidth: 0, fill: p2, fillOpacity: i2.config.fill.opacity, classes: "apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(d2) });
          if (x2.attr({ index: 0, j: d2 }), a3.setSelectionFilter(x2, 0, d2), i2.config.chart.dropShadow.enabled) {
            var b2 = i2.config.chart.dropShadow;
            a3.dropShadow(x2, b2, d2);
          }
          this.addListeners(x2, this.donutDataLabels), w.setAttrs(x2.node, { "data:angle": u2, "data:startAngle": n2, "data:strokeWidth": this.strokeWidth, "data:value": e3[d2] });
          var m2 = { x: 0, y: 0 };
          "pie" === this.chartType || "polarArea" === this.chartType ? m2 = v.polarToCartesian(this.centerX, this.centerY, i2.globals.radialSize / 1.25 + i2.config.plotOptions.pie.dataLabels.offset, (n2 + u2 / 2) % this.fullAngle) : "donut" === this.chartType && (m2 = v.polarToCartesian(this.centerX, this.centerY, (i2.globals.radialSize + this.donutSize) / 2 + i2.config.plotOptions.pie.dataLabels.offset, (n2 + u2 / 2) % this.fullAngle)), g2.add(x2);
          var k2 = 0;
          if (!this.initialAnim || i2.globals.resized || i2.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (k2 = u2 / this.fullAngle * i2.config.chart.animations.speed) && (k2 = 1), this.animDur = k2 + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i2.globals.dataChanged ? this.animatePaths(x2, { size: this.sliceSizes[d2], endAngle: h2, startAngle: n2, prevStartAngle: l2, prevEndAngle: c3, animateStartingPos: true, i: d2, animBeginArr: this.animBeginArr, shouldSetPrevPaths: true, dur: i2.config.chart.animations.dynamicAnimation.speed }) : this.animatePaths(x2, { size: this.sliceSizes[d2], endAngle: h2, startAngle: n2, i: d2, totalItems: t4.length - 1, animBeginArr: this.animBeginArr, dur: k2 }), i2.config.plotOptions.pie.expandOnClick && "polarArea" !== this.chartType && x2.node.addEventListener("mouseup", this.pieClicked.bind(this, d2)), void 0 !== i2.globals.selectedDataPoints[0] && i2.globals.selectedDataPoints[0].indexOf(d2) > -1 && this.pieClicked(d2), i2.config.dataLabels.enabled) {
            var A2 = m2.x, S2 = m2.y, C3 = 100 * u2 / this.fullAngle + "%";
            if (0 !== u2 && i2.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t4[d2]) {
              var L3 = i2.config.dataLabels.formatter;
              void 0 !== L3 && (C3 = L3(i2.globals.seriesPercent[d2][0], { seriesIndex: d2, w: i2 }));
              var P3 = i2.globals.dataLabels.style.colors[d2], M2 = s2.group({ class: "apexcharts-datalabels" }), I3 = s2.drawText({ x: A2, y: S2, text: C3, textAnchor: "middle", fontSize: i2.config.dataLabels.style.fontSize, fontFamily: i2.config.dataLabels.style.fontFamily, fontWeight: i2.config.dataLabels.style.fontWeight, foreColor: P3 });
              if (M2.add(I3), i2.config.dataLabels.dropShadow.enabled) {
                var T2 = i2.config.dataLabels.dropShadow;
                a3.dropShadow(I3, T2);
              }
              I3.node.classList.add("apexcharts-pie-label"), i2.config.chart.animations.animate && false === i2.globals.resized && (I3.node.classList.add("apexcharts-pie-label-delay"), I3.node.style.animationDelay = i2.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(M2);
            }
          }
        }
        return o3;
      } }, { key: "addListeners", value: function(t4, e3) {
        var i2 = new w(this.ctx);
        t4.node.addEventListener("mouseenter", i2.pathMouseEnter.bind(this, t4)), t4.node.addEventListener("mouseleave", i2.pathMouseLeave.bind(this, t4)), t4.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t4.node, e3)), t4.node.addEventListener("mousedown", i2.pathMouseDown.bind(this, t4)), this.donutDataLabels.total.showAlways || (t4.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t4.node, e3)), t4.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t4.node, e3)));
      } }, { key: "animatePaths", value: function(t4, e3) {
        var i2 = this.w, a3 = e3.endAngle < e3.startAngle ? this.fullAngle + e3.endAngle - e3.startAngle : e3.endAngle - e3.startAngle, s2 = a3, r3 = e3.startAngle, o3 = e3.startAngle;
        void 0 !== e3.prevStartAngle && void 0 !== e3.prevEndAngle && (r3 = e3.prevEndAngle, s2 = e3.prevEndAngle < e3.prevStartAngle ? this.fullAngle + e3.prevEndAngle - e3.prevStartAngle : e3.prevEndAngle - e3.prevStartAngle), e3.i === i2.config.series.length - 1 && (a3 + o3 > this.fullAngle ? e3.endAngle = e3.endAngle - (a3 + o3) : a3 + o3 < this.fullAngle && (e3.endAngle = e3.endAngle + (this.fullAngle - (a3 + o3)))), a3 === this.fullAngle && (a3 = this.fullAngle - 0.01), this.animateArc(t4, r3, o3, a3, s2, e3);
      } }, { key: "animateArc", value: function(t4, e3, i2, a3, s2, r3) {
        var o3, n2 = this, l2 = this.w, h2 = new m(this.ctx), c3 = r3.size;
        (isNaN(e3) || isNaN(s2)) && (e3 = i2, s2 = a3, r3.dur = 0);
        var d2 = a3, g2 = i2, u2 = e3 < i2 ? this.fullAngle + e3 - i2 : e3 - i2;
        l2.globals.dataChanged && r3.shouldSetPrevPaths && r3.prevEndAngle && (o3 = n2.getPiePath({ me: n2, startAngle: r3.prevStartAngle, angle: r3.prevEndAngle < r3.prevStartAngle ? this.fullAngle + r3.prevEndAngle - r3.prevStartAngle : r3.prevEndAngle - r3.prevStartAngle, size: c3 }), t4.attr({ d: o3 })), 0 !== r3.dur ? t4.animate(r3.dur, l2.globals.easing, r3.animBeginArr[r3.i]).afterAll(function() {
          "pie" !== n2.chartType && "donut" !== n2.chartType && "polarArea" !== n2.chartType || this.animate(l2.config.chart.animations.dynamicAnimation.speed).attr({ "stroke-width": n2.strokeWidth }), r3.i === l2.config.series.length - 1 && h2.animationCompleted(t4);
        }).during(function(l3) {
          d2 = u2 + (a3 - u2) * l3, r3.animateStartingPos && (d2 = s2 + (a3 - s2) * l3, g2 = e3 - s2 + (i2 - (e3 - s2)) * l3), o3 = n2.getPiePath({ me: n2, startAngle: g2, angle: d2, size: c3 }), t4.node.setAttribute("data:pathOrig", o3), t4.attr({ d: o3 });
        }) : (o3 = n2.getPiePath({ me: n2, startAngle: g2, angle: a3, size: c3 }), r3.isTrack || (l2.globals.animationEnded = true), t4.node.setAttribute("data:pathOrig", o3), t4.attr({ d: o3, "stroke-width": n2.strokeWidth }));
      } }, { key: "pieClicked", value: function(t4) {
        var e3, i2 = this.w, a3 = this, s2 = a3.sliceSizes[t4] + (i2.config.plotOptions.pie.expandOnClick ? 4 : 0), r3 = i2.globals.dom.Paper.select(".apexcharts-".concat(a3.chartType.toLowerCase(), "-slice-").concat(t4)).members[0];
        if ("true" !== r3.attr("data:pieClicked")) {
          var o3 = i2.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");
          Array.prototype.forEach.call(o3, function(t5) {
            t5.setAttribute("data:pieClicked", "false");
            var e4 = t5.getAttribute("data:pathOrig");
            e4 && t5.setAttribute("d", e4);
          }), i2.globals.capturedDataPointIndex = t4, r3.attr("data:pieClicked", "true");
          var n2 = parseInt(r3.attr("data:startAngle"), 10), l2 = parseInt(r3.attr("data:angle"), 10);
          e3 = a3.getPiePath({ me: a3, startAngle: n2, angle: l2, size: s2 }), 360 !== l2 && r3.plot(e3);
        } else {
          r3.attr({ "data:pieClicked": "false" }), this.revertDataLabelsInner(r3.node, this.donutDataLabels);
          var h2 = r3.attr("data:pathOrig");
          r3.attr({ d: h2 });
        }
      } }, { key: "getChangedPath", value: function(t4, e3) {
        var i2 = "";
        return this.dynamicAnim && this.w.globals.dataChanged && (i2 = this.getPiePath({ me: this, startAngle: t4, angle: e3 - t4, size: this.size })), i2;
      } }, { key: "getPiePath", value: function(t4) {
        var e3, i2 = t4.me, a3 = t4.startAngle, s2 = t4.angle, r3 = t4.size, o3 = new w(this.ctx), n2 = a3, l2 = Math.PI * (n2 - 90) / 180, h2 = s2 + a3;
        Math.ceil(h2) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (h2 = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - 0.01), Math.ceil(h2) > this.fullAngle && (h2 -= this.fullAngle);
        var c3 = Math.PI * (h2 - 90) / 180, d2 = i2.centerX + r3 * Math.cos(l2), g2 = i2.centerY + r3 * Math.sin(l2), u2 = i2.centerX + r3 * Math.cos(c3), p2 = i2.centerY + r3 * Math.sin(c3), f2 = v.polarToCartesian(i2.centerX, i2.centerY, i2.donutSize, h2), x2 = v.polarToCartesian(i2.centerX, i2.centerY, i2.donutSize, n2), b2 = s2 > 180 ? 1 : 0, m2 = ["M", d2, g2, "A", r3, r3, 0, b2, 1, u2, p2];
        return e3 = "donut" === i2.chartType ? [].concat(m2, ["L", f2.x, f2.y, "A", i2.donutSize, i2.donutSize, 0, b2, 0, x2.x, x2.y, "L", d2, g2, "z"]).join(" ") : "pie" === i2.chartType || "polarArea" === i2.chartType ? [].concat(m2, ["L", i2.centerX, i2.centerY, "L", d2, g2]).join(" ") : [].concat(m2).join(" "), o3.roundPathCorners(e3, 2 * this.strokeWidth);
      } }, { key: "drawPolarElements", value: function(t4) {
        var e3 = this.w, i2 = new q(this.ctx), a3 = new w(this.ctx), s2 = new Pt2(this.ctx), r3 = a3.group(), o3 = a3.group(), n2 = i2.niceScale(0, Math.ceil(this.maxY), 0), l2 = n2.result.reverse(), h2 = n2.result.length;
        this.maxY = n2.niceMax;
        for (var c3 = e3.globals.radialSize, d2 = c3 / (h2 - 1), g2 = 0; g2 < h2 - 1; g2++) {
          var u2 = a3.drawCircle(c3);
          if (u2.attr({ cx: this.centerX, cy: this.centerY, fill: "none", "stroke-width": e3.config.plotOptions.polarArea.rings.strokeWidth, stroke: e3.config.plotOptions.polarArea.rings.strokeColor }), e3.config.yaxis[0].show) {
            var p2 = s2.drawYAxisTexts(this.centerX, this.centerY - c3 + parseInt(e3.config.yaxis[0].labels.style.fontSize, 10) / 2, g2, l2[g2]);
            o3.add(p2);
          }
          r3.add(u2), c3 -= d2;
        }
        this.drawSpokes(t4), t4.add(r3), t4.add(o3);
      } }, { key: "renderInnerDataLabels", value: function(t4, e3, i2) {
        var a3 = this.w, s2 = new w(this.ctx), r3 = e3.total.show;
        t4.node.innerHTML = "", t4.node.style.opacity = i2.opacity;
        var o3, n2, l2 = i2.centerX, h2 = i2.centerY;
        o3 = void 0 === e3.name.color ? a3.globals.colors[0] : e3.name.color;
        var c3 = e3.name.fontSize, d2 = e3.name.fontFamily, g2 = e3.name.fontWeight;
        n2 = void 0 === e3.value.color ? a3.config.chart.foreColor : e3.value.color;
        var u2 = e3.value.formatter, p2 = "", f2 = "";
        if (r3 ? (o3 = e3.total.color, c3 = e3.total.fontSize, d2 = e3.total.fontFamily, g2 = e3.total.fontWeight, f2 = e3.total.label, p2 = e3.total.formatter(a3)) : 1 === a3.globals.series.length && (p2 = u2(a3.globals.series[0], a3), f2 = a3.globals.seriesNames[0]), f2 && (f2 = e3.name.formatter(f2, e3.total.show, a3)), e3.name.show) {
          var x2 = s2.drawText({ x: l2, y: h2 + parseFloat(e3.name.offsetY), text: f2, textAnchor: "middle", foreColor: o3, fontSize: c3, fontWeight: g2, fontFamily: d2 });
          x2.node.classList.add("apexcharts-datalabel-label"), t4.add(x2);
        }
        if (e3.value.show) {
          var b2 = e3.name.show ? parseFloat(e3.value.offsetY) + 16 : e3.value.offsetY, v2 = s2.drawText({ x: l2, y: h2 + b2, text: p2, textAnchor: "middle", foreColor: n2, fontWeight: e3.value.fontWeight, fontSize: e3.value.fontSize, fontFamily: e3.value.fontFamily });
          v2.node.classList.add("apexcharts-datalabel-value"), t4.add(v2);
        }
        return t4;
      } }, { key: "printInnerLabels", value: function(t4, e3, i2, a3) {
        var s2, r3 = this.w;
        a3 ? s2 = void 0 === t4.name.color ? r3.globals.colors[parseInt(a3.parentNode.getAttribute("rel"), 10) - 1] : t4.name.color : r3.globals.series.length > 1 && t4.total.show && (s2 = t4.total.color);
        var o3 = r3.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"), n2 = r3.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
        i2 = (0, t4.value.formatter)(i2, r3), a3 || "function" != typeof t4.total.formatter || (i2 = t4.total.formatter(r3));
        var l2 = e3 === t4.total.label;
        e3 = t4.name.formatter(e3, l2, r3), null !== o3 && (o3.textContent = e3), null !== n2 && (n2.textContent = i2), null !== o3 && (o3.style.fill = s2);
      } }, { key: "printDataLabelsInner", value: function(t4, e3) {
        var i2 = this.w, a3 = t4.getAttribute("data:value"), s2 = i2.globals.seriesNames[parseInt(t4.parentNode.getAttribute("rel"), 10) - 1];
        i2.globals.series.length > 1 && this.printInnerLabels(e3, s2, a3, t4);
        var r3 = i2.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
        null !== r3 && (r3.style.opacity = 1);
      } }, { key: "drawSpokes", value: function(t4) {
        var e3 = this, i2 = this.w, a3 = new w(this.ctx), s2 = i2.config.plotOptions.polarArea.spokes;
        if (0 !== s2.strokeWidth) {
          for (var r3 = [], o3 = 360 / i2.globals.series.length, n2 = 0; n2 < i2.globals.series.length; n2++) r3.push(v.polarToCartesian(this.centerX, this.centerY, i2.globals.radialSize, i2.config.plotOptions.pie.startAngle + o3 * n2));
          r3.forEach(function(i3, r4) {
            var o4 = a3.drawLine(i3.x, i3.y, e3.centerX, e3.centerY, Array.isArray(s2.connectorColors) ? s2.connectorColors[r4] : s2.connectorColors);
            t4.add(o4);
          });
        }
      } }, { key: "revertDataLabelsInner", value: function() {
        var t4 = this.w;
        if (this.donutDataLabels.show) {
          var e3 = t4.globals.dom.Paper.select(".apexcharts-datalabels-group").members[0], i2 = this.renderInnerDataLabels(e3, this.donutDataLabels, { hollowSize: this.donutSize, centerX: this.centerX, centerY: this.centerY, opacity: this.donutDataLabels.show });
          t4.globals.dom.Paper.select(".apexcharts-radialbar, .apexcharts-pie").members[0].add(i2);
        }
      } }]), t3;
    }();
    var It2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
        var a3 = this.w;
        this.graphics = new w(this.ctx), this.lineColorArr = void 0 !== a3.globals.stroke.colors ? a3.globals.stroke.colors : a3.globals.colors, this.defaultSize = a3.globals.svgHeight < a3.globals.svgWidth ? a3.globals.gridHeight + 1.5 * a3.globals.goldenPadding : a3.globals.gridWidth, this.isLog = a3.config.yaxis[0].logarithmic, this.logBase = a3.config.yaxis[0].logBase, this.coreUtils = new k(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, a3.globals.maxY, 0) : a3.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, this.w.globals.minY, 0) : a3.globals.minY, this.polygons = a3.config.plotOptions.radar.polygons, this.strokeWidth = a3.config.stroke.show ? a3.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - a3.config.chart.dropShadow.blur, a3.config.xaxis.labels.show && (this.size = this.size - a3.globals.xAxisLabelsWidth / 1.75), void 0 !== a3.config.plotOptions.radar.size && (this.size = a3.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];
      }
      return s(t3, [{ key: "draw", value: function(t4) {
        var e3 = this, i2 = this.w, a3 = new O2(this.ctx), s2 = [], r3 = new B2(this.ctx);
        t4.length && (this.dataPointsLen = t4[i2.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;
        var o3 = i2.globals.gridWidth / 2, n2 = i2.globals.gridHeight / 2, l2 = o3 + i2.config.plotOptions.radar.offsetX, h2 = n2 + i2.config.plotOptions.radar.offsetY, c3 = this.graphics.group({ class: "apexcharts-radar-series apexcharts-plot-series", transform: "translate(".concat(l2 || 0, ", ").concat(h2 || 0, ")") }), g2 = [], u2 = null, p2 = null;
        if (this.yaxisLabels = this.graphics.group({ class: "apexcharts-yaxis" }), t4.forEach(function(t5, o4) {
          var n3 = t5.length === i2.globals.dataPoints, l3 = e3.graphics.group().attr({ class: "apexcharts-series", "data:longestSeries": n3, seriesName: v.escapeString(i2.globals.seriesNames[o4]), rel: o4 + 1, "data:realIndex": o4 });
          e3.dataRadiusOfPercent[o4] = [], e3.dataRadius[o4] = [], e3.angleArr[o4] = [], t5.forEach(function(t6, i3) {
            var a4 = Math.abs(e3.maxValue - e3.minValue);
            t6 -= e3.minValue, e3.isLog && (t6 = e3.coreUtils.getLogVal(e3.logBase, t6, 0)), e3.dataRadiusOfPercent[o4][i3] = t6 / a4, e3.dataRadius[o4][i3] = e3.dataRadiusOfPercent[o4][i3] * e3.size, e3.angleArr[o4][i3] = i3 * e3.disAngle;
          }), g2 = e3.getDataPointsPos(e3.dataRadius[o4], e3.angleArr[o4]);
          var h3 = e3.createPaths(g2, { x: 0, y: 0 });
          u2 = e3.graphics.group({ class: "apexcharts-series-markers-wrap apexcharts-element-hidden" }), p2 = e3.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": o4 }), i2.globals.delayedElements.push({ el: u2.node, index: o4 });
          var c4 = { i: o4, realIndex: o4, animationDelay: o4, initialSpeed: i2.config.chart.animations.speed, dataChangeSpeed: i2.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-radar", shouldClipToGrid: false, bindEventsOnPaths: false, stroke: i2.globals.stroke.colors[o4], strokeLineCap: i2.config.stroke.lineCap }, f3 = null;
          i2.globals.previousPaths.length > 0 && (f3 = e3.getPreviousPath(o4));
          for (var x2 = 0; x2 < h3.linePathsTo.length; x2++) {
            var b2 = e3.graphics.renderPaths(d(d({}, c4), {}, { pathFrom: null === f3 ? h3.linePathsFrom[x2] : f3, pathTo: h3.linePathsTo[x2], strokeWidth: Array.isArray(e3.strokeWidth) ? e3.strokeWidth[o4] : e3.strokeWidth, fill: "none", drawShadow: false }));
            l3.add(b2);
            var m2 = a3.fillPath({ seriesNumber: o4 }), w2 = e3.graphics.renderPaths(d(d({}, c4), {}, { pathFrom: null === f3 ? h3.areaPathsFrom[x2] : f3, pathTo: h3.areaPathsTo[x2], strokeWidth: 0, fill: m2, drawShadow: false }));
            if (i2.config.chart.dropShadow.enabled) {
              var k2 = new y2(e3.ctx), A2 = i2.config.chart.dropShadow;
              k2.dropShadow(w2, Object.assign({}, A2, { noUserSpaceOnUse: true }), o4);
            }
            l3.add(w2);
          }
          t5.forEach(function(t6, a4) {
            var s3 = new N(e3.ctx).getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: o4, dataPointIndex: a4 }), n4 = e3.graphics.drawMarker(g2[a4].x, g2[a4].y, s3);
            n4.attr("rel", a4), n4.attr("j", a4), n4.attr("index", o4), n4.node.setAttribute("default-marker-size", s3.pSize);
            var h4 = e3.graphics.group({ class: "apexcharts-series-markers" });
            h4 && h4.add(n4), u2.add(h4), l3.add(u2);
            var c5 = i2.config.dataLabels;
            if (c5.enabled) {
              var f4 = c5.formatter(i2.globals.series[o4][a4], { seriesIndex: o4, dataPointIndex: a4, w: i2 });
              r3.plotDataLabelsText({ x: g2[a4].x, y: g2[a4].y, text: f4, textAnchor: "middle", i: o4, j: o4, parent: p2, offsetCorrection: false, dataLabelsConfig: d({}, c5) });
            }
            l3.add(p2);
          }), s2.push(l3);
        }), this.drawPolygons({ parent: c3 }), i2.config.xaxis.labels.show) {
          var f2 = this.drawXAxisTexts();
          c3.add(f2);
        }
        return s2.forEach(function(t5) {
          c3.add(t5);
        }), c3.add(this.yaxisLabels), c3;
      } }, { key: "drawPolygons", value: function(t4) {
        for (var e3 = this, i2 = this.w, a3 = t4.parent, s2 = new Pt2(this.ctx), r3 = i2.globals.yAxisScale[0].result.reverse(), o3 = r3.length, n2 = [], l2 = this.size / (o3 - 1), h2 = 0; h2 < o3; h2++) n2[h2] = l2 * h2;
        n2.reverse();
        var c3 = [], d2 = [];
        n2.forEach(function(t5, i3) {
          var a4 = v.getPolygonPos(t5, e3.dataPointsLen), s3 = "";
          a4.forEach(function(t6, a5) {
            if (0 === i3) {
              var r4 = e3.graphics.drawLine(t6.x, t6.y, 0, 0, Array.isArray(e3.polygons.connectorColors) ? e3.polygons.connectorColors[a5] : e3.polygons.connectorColors);
              d2.push(r4);
            }
            0 === a5 && e3.yaxisLabelsTextsPos.push({ x: t6.x, y: t6.y }), s3 += t6.x + "," + t6.y + " ";
          }), c3.push(s3);
        }), c3.forEach(function(t5, s3) {
          var r4 = e3.polygons.strokeColors, o4 = e3.polygons.strokeWidth, n3 = e3.graphics.drawPolygon(t5, Array.isArray(r4) ? r4[s3] : r4, Array.isArray(o4) ? o4[s3] : o4, i2.globals.radarPolygons.fill.colors[s3]);
          a3.add(n3);
        }), d2.forEach(function(t5) {
          a3.add(t5);
        }), i2.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function(t5, i3) {
          var a4 = s2.drawYAxisTexts(t5.x, t5.y, i3, r3[i3]);
          e3.yaxisLabels.add(a4);
        });
      } }, { key: "drawXAxisTexts", value: function() {
        var t4 = this, e3 = this.w, i2 = e3.config.xaxis.labels, a3 = this.graphics.group({ class: "apexcharts-xaxis" }), s2 = v.getPolygonPos(this.size, this.dataPointsLen);
        return e3.globals.labels.forEach(function(r3, o3) {
          var n2 = e3.config.xaxis.labels.formatter, l2 = new B2(t4.ctx);
          if (s2[o3]) {
            var h2 = t4.getTextPos(s2[o3], t4.size), c3 = n2(r3, { seriesIndex: -1, dataPointIndex: o3, w: e3 });
            l2.plotDataLabelsText({ x: h2.newX, y: h2.newY, text: c3, textAnchor: h2.textAnchor, i: o3, j: o3, parent: a3, className: "apexcharts-xaxis-label", color: Array.isArray(i2.style.colors) && i2.style.colors[o3] ? i2.style.colors[o3] : "#a8a8a8", dataLabelsConfig: d({ textAnchor: h2.textAnchor, dropShadow: { enabled: false } }, i2), offsetCorrection: false }).on("click", function(i3) {
              if ("function" == typeof e3.config.chart.events.xAxisLabelClick) {
                var a4 = Object.assign({}, e3, { labelIndex: o3 });
                e3.config.chart.events.xAxisLabelClick(i3, t4.ctx, a4);
              }
            });
          }
        }), a3;
      } }, { key: "createPaths", value: function(t4, e3) {
        var i2 = this, a3 = [], s2 = [], r3 = [], o3 = [];
        if (t4.length) {
          s2 = [this.graphics.move(e3.x, e3.y)], o3 = [this.graphics.move(e3.x, e3.y)];
          var n2 = this.graphics.move(t4[0].x, t4[0].y), l2 = this.graphics.move(t4[0].x, t4[0].y);
          t4.forEach(function(e4, a4) {
            n2 += i2.graphics.line(e4.x, e4.y), l2 += i2.graphics.line(e4.x, e4.y), a4 === t4.length - 1 && (n2 += "Z", l2 += "Z");
          }), a3.push(n2), r3.push(l2);
        }
        return { linePathsFrom: s2, linePathsTo: a3, areaPathsFrom: o3, areaPathsTo: r3 };
      } }, { key: "getTextPos", value: function(t4, e3) {
        var i2 = "middle", a3 = t4.x, s2 = t4.y;
        return Math.abs(t4.x) >= 10 ? t4.x > 0 ? (i2 = "start", a3 += 10) : t4.x < 0 && (i2 = "end", a3 -= 10) : i2 = "middle", Math.abs(t4.y) >= e3 - 10 && (t4.y < 0 ? s2 -= 10 : t4.y > 0 && (s2 += 10)), { textAnchor: i2, newX: a3, newY: s2 };
      } }, { key: "getPreviousPath", value: function(t4) {
        for (var e3 = this.w, i2 = null, a3 = 0; a3 < e3.globals.previousPaths.length; a3++) {
          var s2 = e3.globals.previousPaths[a3];
          s2.paths.length > 0 && parseInt(s2.realIndex, 10) === parseInt(t4, 10) && void 0 !== e3.globals.previousPaths[a3].paths[0] && (i2 = e3.globals.previousPaths[a3].paths[0].d);
        }
        return i2;
      } }, { key: "getDataPointsPos", value: function(t4, e3) {
        var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
        t4 = t4 || [], e3 = e3 || [];
        for (var a3 = [], s2 = 0; s2 < i2; s2++) {
          var r3 = {};
          r3.x = t4[s2] * Math.sin(e3[s2]), r3.y = -t4[s2] * Math.cos(e3[s2]), a3.push(r3);
        }
        return a3;
      } }]), t3;
    }();
    var Tt2 = function(t3) {
      l(o3, Mt2);
      var a3 = r2(o3);
      function o3(t4) {
        var s2;
        i(this, o3), (s2 = a3.call(this, t4)).ctx = t4, s2.w = t4.w, s2.animBeginArr = [0], s2.animDur = 0;
        var r3 = s2.w;
        return s2.startAngle = r3.config.plotOptions.radialBar.startAngle, s2.endAngle = r3.config.plotOptions.radialBar.endAngle, s2.totalAngle = Math.abs(r3.config.plotOptions.radialBar.endAngle - r3.config.plotOptions.radialBar.startAngle), s2.trackStartAngle = r3.config.plotOptions.radialBar.track.startAngle, s2.trackEndAngle = r3.config.plotOptions.radialBar.track.endAngle, s2.barLabels = s2.w.config.plotOptions.radialBar.barLabels, s2.donutDataLabels = s2.w.config.plotOptions.radialBar.dataLabels, s2.radialDataLabels = s2.donutDataLabels, s2.trackStartAngle || (s2.trackStartAngle = s2.startAngle), s2.trackEndAngle || (s2.trackEndAngle = s2.endAngle), 360 === s2.endAngle && (s2.endAngle = 359.99), s2.margin = parseInt(r3.config.plotOptions.radialBar.track.margin, 10), s2.onBarLabelClick = s2.onBarLabelClick.bind(e2(s2)), s2;
      }
      return s(o3, [{ key: "draw", value: function(t4) {
        var e3 = this.w, i2 = new w(this.ctx), a4 = i2.group({ class: "apexcharts-radialbar" });
        if (e3.globals.noData) return a4;
        var s2 = i2.group(), r3 = this.defaultSize / 2, o4 = e3.globals.gridWidth / 2, n2 = this.defaultSize / 2.05;
        e3.config.chart.sparkline.enabled || (n2 = n2 - e3.config.stroke.width - e3.config.chart.dropShadow.blur);
        var l2 = e3.globals.fill.colors;
        if (e3.config.plotOptions.radialBar.track.show) {
          var h2 = this.drawTracks({ size: n2, centerX: o4, centerY: r3, colorArr: l2, series: t4 });
          s2.add(h2);
        }
        var c3 = this.drawArcs({ size: n2, centerX: o4, centerY: r3, colorArr: l2, series: t4 }), d2 = 360;
        e3.config.plotOptions.radialBar.startAngle < 0 && (d2 = this.totalAngle);
        var g2 = (360 - d2) / 360;
        if (e3.globals.radialSize = n2 - n2 * g2, this.radialDataLabels.value.show) {
          var u2 = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
          e3.globals.radialSize += u2 * g2;
        }
        return s2.add(c3.g), "front" === e3.config.plotOptions.radialBar.hollow.position && (c3.g.add(c3.elHollow), c3.dataLabels && c3.g.add(c3.dataLabels)), a4.add(s2), a4;
      } }, { key: "drawTracks", value: function(t4) {
        var e3 = this.w, i2 = new w(this.ctx), a4 = i2.group({ class: "apexcharts-tracks" }), s2 = new y2(this.ctx), r3 = new O2(this.ctx), o4 = this.getStrokeWidth(t4);
        t4.size = t4.size - o4 / 2;
        for (var n2 = 0; n2 < t4.series.length; n2++) {
          var l2 = i2.group({ class: "apexcharts-radialbar-track apexcharts-track" });
          a4.add(l2), l2.attr({ rel: n2 + 1 }), t4.size = t4.size - o4 - this.margin;
          var h2 = e3.config.plotOptions.radialBar.track, c3 = r3.fillPath({ seriesNumber: 0, size: t4.size, fillColors: Array.isArray(h2.background) ? h2.background[n2] : h2.background, solid: true }), d2 = this.trackStartAngle, g2 = this.trackEndAngle;
          Math.abs(g2) + Math.abs(d2) >= 360 && (g2 = 360 - Math.abs(this.startAngle) - 0.1);
          var u2 = i2.drawPath({ d: "", stroke: c3, strokeWidth: o4 * parseInt(h2.strokeWidth, 10) / 100, fill: "none", strokeOpacity: h2.opacity, classes: "apexcharts-radialbar-area" });
          if (h2.dropShadow.enabled) {
            var p2 = h2.dropShadow;
            s2.dropShadow(u2, p2);
          }
          l2.add(u2), u2.attr("id", "apexcharts-radialbarTrack-" + n2), this.animatePaths(u2, { centerX: t4.centerX, centerY: t4.centerY, endAngle: g2, startAngle: d2, size: t4.size, i: n2, totalItems: 2, animBeginArr: 0, dur: 0, isTrack: true, easing: e3.globals.easing });
        }
        return a4;
      } }, { key: "drawArcs", value: function(t4) {
        var e3 = this.w, i2 = new w(this.ctx), a4 = new O2(this.ctx), s2 = new y2(this.ctx), r3 = i2.group(), o4 = this.getStrokeWidth(t4);
        t4.size = t4.size - o4 / 2;
        var n2 = e3.config.plotOptions.radialBar.hollow.background, l2 = t4.size - o4 * t4.series.length - this.margin * t4.series.length - o4 * parseInt(e3.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2, h2 = l2 - e3.config.plotOptions.radialBar.hollow.margin;
        void 0 !== e3.config.plotOptions.radialBar.hollow.image && (n2 = this.drawHollowImage(t4, r3, l2, n2));
        var c3 = this.drawHollow({ size: h2, centerX: t4.centerX, centerY: t4.centerY, fill: n2 || "transparent" });
        if (e3.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
          var d2 = e3.config.plotOptions.radialBar.hollow.dropShadow;
          s2.dropShadow(c3, d2);
        }
        var g2 = 1;
        !this.radialDataLabels.total.show && e3.globals.series.length > 1 && (g2 = 0);
        var u2 = null;
        if (this.radialDataLabels.show) {
          var p2 = e3.globals.dom.Paper.select(".apexcharts-datalabels-group").members[0];
          u2 = this.renderInnerDataLabels(p2, this.radialDataLabels, { hollowSize: l2, centerX: t4.centerX, centerY: t4.centerY, opacity: g2 });
        }
        "back" === e3.config.plotOptions.radialBar.hollow.position && (r3.add(c3), u2 && r3.add(u2));
        var f2 = false;
        e3.config.plotOptions.radialBar.inverseOrder && (f2 = true);
        for (var x2 = f2 ? t4.series.length - 1 : 0; f2 ? x2 >= 0 : x2 < t4.series.length; f2 ? x2-- : x2++) {
          var b2 = i2.group({ class: "apexcharts-series apexcharts-radial-series", seriesName: v.escapeString(e3.globals.seriesNames[x2]) });
          r3.add(b2), b2.attr({ rel: x2 + 1, "data:realIndex": x2 }), this.ctx.series.addCollapsedClassToSeries(b2, x2), t4.size = t4.size - o4 - this.margin;
          var m2 = a4.fillPath({ seriesNumber: x2, size: t4.size, value: t4.series[x2] }), k2 = this.startAngle, A2 = void 0, S2 = v.negToZero(t4.series[x2] > 100 ? 100 : t4.series[x2]) / 100, C3 = Math.round(this.totalAngle * S2) + this.startAngle, L3 = void 0;
          e3.globals.dataChanged && (A2 = this.startAngle, L3 = Math.round(this.totalAngle * v.negToZero(e3.globals.previousPaths[x2]) / 100) + A2), Math.abs(C3) + Math.abs(k2) >= 360 && (C3 -= 0.01), Math.abs(L3) + Math.abs(A2) >= 360 && (L3 -= 0.01);
          var P3 = C3 - k2, M2 = Array.isArray(e3.config.stroke.dashArray) ? e3.config.stroke.dashArray[x2] : e3.config.stroke.dashArray, I3 = i2.drawPath({ d: "", stroke: m2, strokeWidth: o4, fill: "none", fillOpacity: e3.config.fill.opacity, classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + x2, strokeDashArray: M2 });
          if (w.setAttrs(I3.node, { "data:angle": P3, "data:value": t4.series[x2] }), e3.config.chart.dropShadow.enabled) {
            var T2 = e3.config.chart.dropShadow;
            s2.dropShadow(I3, T2, x2);
          }
          if (s2.setSelectionFilter(I3, 0, x2), this.addListeners(I3, this.radialDataLabels), b2.add(I3), I3.attr({ index: 0, j: x2 }), this.barLabels.enabled) {
            var z2 = v.polarToCartesian(t4.centerX, t4.centerY, t4.size, k2), X3 = this.barLabels.formatter(e3.globals.seriesNames[x2], { seriesIndex: x2, w: e3 }), E2 = ["apexcharts-radialbar-label"];
            this.barLabels.onClick || E2.push("apexcharts-no-click");
            var Y2 = this.barLabels.useSeriesColors ? e3.globals.colors[x2] : e3.config.chart.foreColor;
            Y2 || (Y2 = e3.config.chart.foreColor);
            var F3 = z2.x + this.barLabels.offsetX, R3 = z2.y + this.barLabels.offsetY, D2 = i2.drawText({ x: F3, y: R3, text: X3, textAnchor: "end", dominantBaseline: "middle", fontFamily: this.barLabels.fontFamily, fontWeight: this.barLabels.fontWeight, fontSize: this.barLabels.fontSize, foreColor: Y2, cssClass: E2.join(" ") });
            D2.on("click", this.onBarLabelClick), D2.attr({ rel: x2 + 1 }), 0 !== k2 && D2.attr({ "transform-origin": "".concat(F3, " ").concat(R3), transform: "rotate(".concat(k2, " 0 0)") }), b2.add(D2);
          }
          var H2 = 0;
          !this.initialAnim || e3.globals.resized || e3.globals.dataChanged || (H2 = e3.config.chart.animations.speed), e3.globals.dataChanged && (H2 = e3.config.chart.animations.dynamicAnimation.speed), this.animDur = H2 / (1.2 * t4.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(I3, { centerX: t4.centerX, centerY: t4.centerY, endAngle: C3, startAngle: k2, prevEndAngle: L3, prevStartAngle: A2, size: t4.size, i: x2, totalItems: 2, animBeginArr: this.animBeginArr, dur: H2, shouldSetPrevPaths: true, easing: e3.globals.easing });
        }
        return { g: r3, elHollow: c3, dataLabels: u2 };
      } }, { key: "drawHollow", value: function(t4) {
        var e3 = new w(this.ctx).drawCircle(2 * t4.size);
        return e3.attr({ class: "apexcharts-radialbar-hollow", cx: t4.centerX, cy: t4.centerY, r: t4.size, fill: t4.fill }), e3;
      } }, { key: "drawHollowImage", value: function(t4, e3, i2, a4) {
        var s2 = this.w, r3 = new O2(this.ctx), o4 = v.randomId(), n2 = s2.config.plotOptions.radialBar.hollow.image;
        if (s2.config.plotOptions.radialBar.hollow.imageClipped) r3.clippedImgArea({ width: i2, height: i2, image: n2, patternID: "pattern".concat(s2.globals.cuid).concat(o4) }), a4 = "url(#pattern".concat(s2.globals.cuid).concat(o4, ")");
        else {
          var l2 = s2.config.plotOptions.radialBar.hollow.imageWidth, h2 = s2.config.plotOptions.radialBar.hollow.imageHeight;
          if (void 0 === l2 && void 0 === h2) {
            var c3 = s2.globals.dom.Paper.image(n2).loaded(function(e4) {
              this.move(t4.centerX - e4.width / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetX, t4.centerY - e4.height / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetY);
            });
            e3.add(c3);
          } else {
            var d2 = s2.globals.dom.Paper.image(n2).loaded(function(e4) {
              this.move(t4.centerX - l2 / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetX, t4.centerY - h2 / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l2, h2);
            });
            e3.add(d2);
          }
        }
        return a4;
      } }, { key: "getStrokeWidth", value: function(t4) {
        var e3 = this.w;
        return t4.size * (100 - parseInt(e3.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t4.series.length + 1) - this.margin;
      } }, { key: "onBarLabelClick", value: function(t4) {
        var e3 = parseInt(t4.target.getAttribute("rel"), 10) - 1, i2 = this.barLabels.onClick, a4 = this.w;
        i2 && i2(a4.globals.seriesNames[e3], { w: a4, seriesIndex: e3 });
      } }]), o3;
    }();
    var zt2 = function(t3) {
      l(a3, kt2);
      var e3 = r2(a3);
      function a3() {
        return i(this, a3), e3.apply(this, arguments);
      }
      return s(a3, [{ key: "draw", value: function(t4, e4) {
        var i2 = this.w, a4 = new w(this.ctx);
        this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t4, this.seriesRangeStart = i2.globals.seriesRangeStart, this.seriesRangeEnd = i2.globals.seriesRangeEnd, this.barHelpers.initVariables(t4);
        for (var s2 = a4.group({ class: "apexcharts-rangebar-series apexcharts-plot-series" }), r3 = 0; r3 < t4.length; r3++) {
          var o3, n2, l2, h2, c3 = void 0, g2 = void 0, u2 = i2.globals.comboCharts ? e4[r3] : r3, p2 = this.barHelpers.getGroupIndex(u2).columnGroupIndex, f2 = a4.group({ class: "apexcharts-series", seriesName: v.escapeString(i2.globals.seriesNames[u2]), rel: r3 + 1, "data:realIndex": u2 });
          this.ctx.series.addCollapsedClassToSeries(f2, u2), t4[r3].length > 0 && (this.visibleI = this.visibleI + 1);
          var x2 = 0, b2 = 0, m2 = 0;
          this.yRatio.length > 1 && (this.yaxisIndex = i2.globals.seriesYAxisReverseMap[u2][0], m2 = u2);
          var y3 = this.barHelpers.initialPositions();
          g2 = y3.y, h2 = y3.zeroW, c3 = y3.x, b2 = y3.barWidth, x2 = y3.barHeight, o3 = y3.xDivision, n2 = y3.yDivision, l2 = y3.zeroH;
          for (var k2 = a4.group({ class: "apexcharts-datalabels", "data:realIndex": u2 }), A2 = a4.group({ class: "apexcharts-rangebar-goals-markers" }), S2 = 0; S2 < i2.globals.dataPoints; S2++) {
            var C3 = this.barHelpers.getStrokeWidth(r3, S2, u2), L3 = this.seriesRangeStart[r3][S2], P3 = this.seriesRangeEnd[r3][S2], M2 = null, I3 = null, T2 = null, z2 = { x: c3, y: g2, strokeWidth: C3, elSeries: f2 }, X3 = this.seriesLen;
            if (i2.config.plotOptions.bar.rangeBarGroupRows && (X3 = 1), void 0 === i2.config.series[r3].data[S2]) break;
            if (this.isHorizontal) {
              T2 = g2 + x2 * this.visibleI;
              var E2 = (n2 - x2 * X3) / 2;
              if (i2.config.series[r3].data[S2].x) {
                var Y2 = this.detectOverlappingBars({ i: r3, j: S2, barYPosition: T2, srty: E2, barHeight: x2, yDivision: n2, initPositions: y3 });
                x2 = Y2.barHeight, T2 = Y2.barYPosition;
              }
              b2 = (M2 = this.drawRangeBarPaths(d({ indexes: { i: r3, j: S2, realIndex: u2 }, barHeight: x2, barYPosition: T2, zeroW: h2, yDivision: n2, y1: L3, y2: P3 }, z2))).barWidth;
            } else {
              i2.globals.isXNumeric && (c3 = (i2.globals.seriesX[r3][S2] - i2.globals.minX) / this.xRatio - b2 / 2), I3 = c3 + b2 * this.visibleI;
              var F3 = (o3 - b2 * X3) / 2;
              if (i2.config.series[r3].data[S2].x) {
                var R3 = this.detectOverlappingBars({ i: r3, j: S2, barXPosition: I3, srtx: F3, barWidth: b2, xDivision: o3, initPositions: y3 });
                b2 = R3.barWidth, I3 = R3.barXPosition;
              }
              x2 = (M2 = this.drawRangeColumnPaths(d({ indexes: { i: r3, j: S2, realIndex: u2, translationsIndex: m2 }, barWidth: b2, barXPosition: I3, zeroH: l2, xDivision: o3 }, z2))).barHeight;
            }
            var D2 = this.barHelpers.drawGoalLine({ barXPosition: M2.barXPosition, barYPosition: T2, goalX: M2.goalX, goalY: M2.goalY, barHeight: x2, barWidth: b2 });
            D2 && A2.add(D2), g2 = M2.y, c3 = M2.x;
            var H2 = this.barHelpers.getPathFillColor(t4, r3, S2, u2), O3 = i2.globals.stroke.colors[u2];
            this.renderSeries({ realIndex: u2, pathFill: H2, lineFill: O3, j: S2, i: r3, x: c3, y: g2, y1: L3, y2: P3, pathFrom: M2.pathFrom, pathTo: M2.pathTo, strokeWidth: C3, elSeries: f2, series: t4, barHeight: x2, barWidth: b2, barXPosition: I3, barYPosition: T2, columnGroupIndex: p2, elDataLabelsWrap: k2, elGoalsMarkers: A2, visibleSeries: this.visibleI, type: "rangebar" });
          }
          s2.add(f2);
        }
        return s2;
      } }, { key: "detectOverlappingBars", value: function(t4) {
        var e4 = t4.i, i2 = t4.j, a4 = t4.barYPosition, s2 = t4.barXPosition, r3 = t4.srty, o3 = t4.srtx, n2 = t4.barHeight, l2 = t4.barWidth, h2 = t4.yDivision, c3 = t4.xDivision, d2 = t4.initPositions, g2 = this.w, u2 = [], p2 = g2.config.series[e4].data[i2].rangeName, f2 = g2.config.series[e4].data[i2].x, x2 = Array.isArray(f2) ? f2.join(" ") : f2, b2 = g2.globals.labels.map(function(t5) {
          return Array.isArray(t5) ? t5.join(" ") : t5;
        }).indexOf(x2), v2 = g2.globals.seriesRange[e4].findIndex(function(t5) {
          return t5.x === x2 && t5.overlaps.length > 0;
        });
        return this.isHorizontal ? (a4 = g2.config.plotOptions.bar.rangeBarGroupRows ? r3 + h2 * b2 : r3 + n2 * this.visibleI + h2 * b2, v2 > -1 && !g2.config.plotOptions.bar.rangeBarOverlap && (u2 = g2.globals.seriesRange[e4][v2].overlaps).indexOf(p2) > -1 && (a4 = (n2 = d2.barHeight / u2.length) * this.visibleI + h2 * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + n2 * (this.visibleI + u2.indexOf(p2)) + h2 * b2)) : (b2 > -1 && !g2.globals.timescaleLabels.length && (s2 = g2.config.plotOptions.bar.rangeBarGroupRows ? o3 + c3 * b2 : o3 + l2 * this.visibleI + c3 * b2), v2 > -1 && !g2.config.plotOptions.bar.rangeBarOverlap && (u2 = g2.globals.seriesRange[e4][v2].overlaps).indexOf(p2) > -1 && (s2 = (l2 = d2.barWidth / u2.length) * this.visibleI + c3 * (100 - parseInt(this.barOptions.barWidth, 10)) / 100 / 2 + l2 * (this.visibleI + u2.indexOf(p2)) + c3 * b2)), { barYPosition: a4, barXPosition: s2, barHeight: n2, barWidth: l2 };
      } }, { key: "drawRangeColumnPaths", value: function(t4) {
        var e4 = t4.indexes, i2 = t4.x, a4 = t4.xDivision, s2 = t4.barWidth, r3 = t4.barXPosition, o3 = t4.zeroH, n2 = this.w, l2 = e4.i, h2 = e4.j, c3 = e4.realIndex, d2 = e4.translationsIndex, g2 = this.yRatio[d2], u2 = this.getRangeValue(c3, h2), p2 = Math.min(u2.start, u2.end), f2 = Math.max(u2.start, u2.end);
        void 0 === this.series[l2][h2] || null === this.series[l2][h2] ? p2 = o3 : (p2 = o3 - p2 / g2, f2 = o3 - f2 / g2);
        var x2 = Math.abs(f2 - p2), b2 = this.barHelpers.getColumnPaths({ barXPosition: r3, barWidth: s2, y1: p2, y2: f2, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, realIndex: c3, i: c3, j: h2, w: n2 });
        if (n2.globals.isXNumeric) {
          var v2 = this.getBarXForNumericXAxis({ x: i2, j: h2, realIndex: c3, barWidth: s2 });
          i2 = v2.x, r3 = v2.barXPosition;
        } else i2 += a4;
        return { pathTo: b2.pathTo, pathFrom: b2.pathFrom, barHeight: x2, x: i2, y: u2.start < 0 && u2.end < 0 ? p2 : f2, goalY: this.barHelpers.getGoalValues("y", null, o3, l2, h2, d2), barXPosition: r3 };
      } }, { key: "preventBarOverflow", value: function(t4) {
        var e4 = this.w;
        return t4 < 0 && (t4 = 0), t4 > e4.globals.gridWidth && (t4 = e4.globals.gridWidth), t4;
      } }, { key: "drawRangeBarPaths", value: function(t4) {
        var e4 = t4.indexes, i2 = t4.y, a4 = t4.y1, s2 = t4.y2, r3 = t4.yDivision, o3 = t4.barHeight, n2 = t4.barYPosition, l2 = t4.zeroW, h2 = this.w, c3 = e4.realIndex, d2 = e4.j, g2 = this.preventBarOverflow(l2 + a4 / this.invertedYRatio), u2 = this.preventBarOverflow(l2 + s2 / this.invertedYRatio), p2 = this.getRangeValue(c3, d2), f2 = Math.abs(u2 - g2), x2 = this.barHelpers.getBarpaths({ barYPosition: n2, barHeight: o3, x1: g2, x2: u2, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, i: c3, realIndex: c3, j: d2, w: h2 });
        return h2.globals.isXNumeric || (i2 += r3), { pathTo: x2.pathTo, pathFrom: x2.pathFrom, barWidth: f2, x: p2.start < 0 && p2.end < 0 ? g2 : u2, goalX: this.barHelpers.getGoalValues("x", l2, null, c3, d2), y: i2 };
      } }, { key: "getRangeValue", value: function(t4, e4) {
        var i2 = this.w;
        return { start: i2.globals.seriesRangeStart[t4][e4], end: i2.globals.seriesRangeEnd[t4][e4] };
      } }]), a3;
    }();
    var Xt2 = function() {
      function t3(e3) {
        i(this, t3), this.w = e3.w, this.lineCtx = e3;
      }
      return s(t3, [{ key: "sameValueSeriesFix", value: function(t4, e3) {
        var i2 = this.w;
        if (("gradient" === i2.config.fill.type || "gradient" === i2.config.fill.type[t4]) && new k(this.lineCtx.ctx, i2).seriesHaveSameValues(t4)) {
          var a3 = e3[t4].slice();
          a3[a3.length - 1] = a3[a3.length - 1] + 1e-6, e3[t4] = a3;
        }
        return e3;
      } }, { key: "calculatePoints", value: function(t4) {
        var e3 = t4.series, i2 = t4.realIndex, a3 = t4.x, s2 = t4.y, r3 = t4.i, o3 = t4.j, n2 = t4.prevY, l2 = this.w, h2 = [], c3 = [];
        if (0 === o3) {
          var d2 = this.lineCtx.categoryAxisCorrection + l2.config.markers.offsetX;
          l2.globals.isXNumeric && (d2 = (l2.globals.seriesX[i2][0] - l2.globals.minX) / this.lineCtx.xRatio + l2.config.markers.offsetX), h2.push(d2), c3.push(v.isNumber(e3[r3][0]) ? n2 + l2.config.markers.offsetY : null), h2.push(a3 + l2.config.markers.offsetX), c3.push(v.isNumber(e3[r3][o3 + 1]) ? s2 + l2.config.markers.offsetY : null);
        } else h2.push(a3 + l2.config.markers.offsetX), c3.push(v.isNumber(e3[r3][o3 + 1]) ? s2 + l2.config.markers.offsetY : null);
        return { x: h2, y: c3 };
      } }, { key: "checkPreviousPaths", value: function(t4) {
        for (var e3 = t4.pathFromLine, i2 = t4.pathFromArea, a3 = t4.realIndex, s2 = this.w, r3 = 0; r3 < s2.globals.previousPaths.length; r3++) {
          var o3 = s2.globals.previousPaths[r3];
          ("line" === o3.type || "area" === o3.type) && o3.paths.length > 0 && parseInt(o3.realIndex, 10) === parseInt(a3, 10) && ("line" === o3.type ? (this.lineCtx.appendPathFrom = false, e3 = s2.globals.previousPaths[r3].paths[0].d) : "area" === o3.type && (this.lineCtx.appendPathFrom = false, i2 = s2.globals.previousPaths[r3].paths[0].d, s2.config.stroke.show && s2.globals.previousPaths[r3].paths[1] && (e3 = s2.globals.previousPaths[r3].paths[1].d)));
        }
        return { pathFromLine: e3, pathFromArea: i2 };
      } }, { key: "determineFirstPrevY", value: function(t4) {
        var e3, i2, a3, s2 = t4.i, r3 = t4.realIndex, o3 = t4.series, n2 = t4.prevY, l2 = t4.lineYPosition, h2 = t4.translationsIndex, c3 = this.w, d2 = c3.config.chart.stacked && !c3.globals.comboCharts || c3.config.chart.stacked && c3.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || "bar" === (null === (e3 = this.w.config.series[r3]) || void 0 === e3 ? void 0 : e3.type) || "column" === (null === (i2 = this.w.config.series[r3]) || void 0 === i2 ? void 0 : i2.type));
        if (void 0 !== (null === (a3 = o3[s2]) || void 0 === a3 ? void 0 : a3[0])) n2 = (l2 = d2 && s2 > 0 ? this.lineCtx.prevSeriesY[s2 - 1][0] : this.lineCtx.zeroY) - o3[s2][0] / this.lineCtx.yRatio[h2] + 2 * (this.lineCtx.isReversed ? o3[s2][0] / this.lineCtx.yRatio[h2] : 0);
        else if (d2 && s2 > 0 && void 0 === o3[s2][0]) {
          for (var g2 = s2 - 1; g2 >= 0; g2--) if (null !== o3[g2][0] && void 0 !== o3[g2][0]) {
            n2 = l2 = this.lineCtx.prevSeriesY[g2][0];
            break;
          }
        }
        return { prevY: n2, lineYPosition: l2 };
      } }]), t3;
    }();
    var Et2 = function(t3) {
      for (var e3, i2, a3, s2, r3 = function(t4) {
        for (var e4 = [], i3 = t4[0], a4 = t4[1], s3 = e4[0] = Rt(i3, a4), r4 = 1, o4 = t4.length - 1; r4 < o4; r4++) i3 = a4, a4 = t4[r4 + 1], e4[r4] = 0.5 * (s3 + (s3 = Rt(i3, a4)));
        return e4[r4] = s3, e4;
      }(t3), o3 = t3.length - 1, n2 = [], l2 = 0; l2 < o3; l2++) a3 = Rt(t3[l2], t3[l2 + 1]), Math.abs(a3) < 1e-6 ? r3[l2] = r3[l2 + 1] = 0 : (s2 = (e3 = r3[l2] / a3) * e3 + (i2 = r3[l2 + 1] / a3) * i2) > 9 && (s2 = 3 * a3 / Math.sqrt(s2), r3[l2] = s2 * e3, r3[l2 + 1] = s2 * i2);
      for (var h2 = 0; h2 <= o3; h2++) s2 = (t3[Math.min(o3, h2 + 1)][0] - t3[Math.max(0, h2 - 1)][0]) / (6 * (1 + r3[h2] * r3[h2])), n2.push([s2 || 0, r3[h2] * s2 || 0]);
      return n2;
    };
    var Yt2 = function(t3) {
      var e3 = Et2(t3), i2 = t3[1], a3 = t3[0], s2 = [], r3 = e3[1], o3 = e3[0];
      s2.push(a3, [a3[0] + o3[0], a3[1] + o3[1], i2[0] - r3[0], i2[1] - r3[1], i2[0], i2[1]]);
      for (var n2 = 2, l2 = e3.length; n2 < l2; n2++) {
        var h2 = t3[n2], c3 = e3[n2];
        s2.push([h2[0] - c3[0], h2[1] - c3[1], h2[0], h2[1]]);
      }
      return s2;
    };
    var Ft2 = function(t3, e3, i2) {
      var a3 = t3.slice(e3, i2);
      if (e3) {
        if (i2 - e3 > 1 && a3[1].length < 6) {
          var s2 = a3[0].length;
          a3[1] = [2 * a3[0][s2 - 2] - a3[0][s2 - 4], 2 * a3[0][s2 - 1] - a3[0][s2 - 3]].concat(a3[1]);
        }
        a3[0] = a3[0].slice(-2);
      }
      return a3;
    };
    function Rt(t3, e3) {
      return (e3[1] - t3[1]) / (e3[0] - t3[0]);
    }
    var Dt3 = function() {
      function t3(e3, a3, s2) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.xyRatios = a3, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || s2, this.scatter = new W(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Xt2(this), this.markers = new N(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;
      }
      return s(t3, [{ key: "draw", value: function(t4, e3, i2, a3) {
        var s2, r3 = this.w, o3 = new w(this.ctx), n2 = r3.globals.comboCharts ? e3 : r3.config.chart.type, l2 = o3.group({ class: "apexcharts-".concat(n2, "-series apexcharts-plot-series") }), h2 = new k(this.ctx, r3);
        this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t4 = h2.getLogSeries(t4), this.yRatio = h2.getLogYRatios(this.yRatio), this.prevSeriesY = [];
        for (var c3 = [], g2 = 0; g2 < t4.length; g2++) {
          t4 = this.lineHelpers.sameValueSeriesFix(g2, t4);
          var u2 = r3.globals.comboCharts ? i2[g2] : g2, p2 = this.yRatio.length > 1 ? u2 : 0;
          this._initSerieVariables(t4, g2, u2);
          var f2 = [], x2 = [], b2 = [], v2 = r3.globals.padHorizontal + this.categoryAxisCorrection;
          this.ctx.series.addCollapsedClassToSeries(this.elSeries, u2), r3.globals.isXNumeric && r3.globals.seriesX.length > 0 && (v2 = (r3.globals.seriesX[u2][0] - r3.globals.minX) / this.xRatio), b2.push(v2);
          var m2, y3 = v2, A2 = void 0, S2 = y3, C3 = this.zeroY, L3 = this.zeroY;
          C3 = this.lineHelpers.determineFirstPrevY({ i: g2, realIndex: u2, series: t4, prevY: C3, lineYPosition: 0, translationsIndex: p2 }).prevY, "monotoneCubic" === r3.config.stroke.curve && null === t4[g2][0] ? f2.push(null) : f2.push(C3), m2 = C3;
          "rangeArea" === n2 && (A2 = L3 = this.lineHelpers.determineFirstPrevY({ i: g2, realIndex: u2, series: a3, prevY: L3, lineYPosition: 0, translationsIndex: p2 }).prevY, x2.push(null !== f2[0] ? L3 : null));
          var P3 = this._calculatePathsFrom({ type: n2, series: t4, i: g2, realIndex: u2, translationsIndex: p2, prevX: S2, prevY: C3, prevY2: L3 }), M2 = [f2[0]], I3 = [x2[0]], T2 = { type: n2, series: t4, realIndex: u2, translationsIndex: p2, i: g2, x: v2, y: 1, pX: y3, pY: m2, pathsFrom: P3, linePaths: [], areaPaths: [], seriesIndex: i2, lineYPosition: 0, xArrj: b2, yArrj: f2, y2Arrj: x2, seriesRangeEnd: a3 }, z2 = this._iterateOverDataPoints(d(d({}, T2), {}, { iterations: "rangeArea" === n2 ? t4[g2].length - 1 : void 0, isRangeStart: true }));
          if ("rangeArea" === n2) {
            for (var X3 = this._calculatePathsFrom({ series: a3, i: g2, realIndex: u2, prevX: S2, prevY: L3 }), E2 = this._iterateOverDataPoints(d(d({}, T2), {}, { series: a3, xArrj: [v2], yArrj: M2, y2Arrj: I3, pY: A2, areaPaths: z2.areaPaths, pathsFrom: X3, iterations: a3[g2].length - 1, isRangeStart: false })), Y2 = z2.linePaths.length / 2, F3 = 0; F3 < Y2; F3++) z2.linePaths[F3] = E2.linePaths[F3 + Y2] + z2.linePaths[F3];
            z2.linePaths.splice(Y2), z2.pathFromLine = E2.pathFromLine + z2.pathFromLine;
          } else z2.pathFromArea += "z";
          this._handlePaths({ type: n2, realIndex: u2, i: g2, paths: z2 }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), c3.push(this.elSeries);
        }
        if (void 0 !== (null === (s2 = r3.config.series[0]) || void 0 === s2 ? void 0 : s2.zIndex) && c3.sort(function(t5, e4) {
          return Number(t5.node.getAttribute("zIndex")) - Number(e4.node.getAttribute("zIndex"));
        }), r3.config.chart.stacked) for (var R3 = c3.length - 1; R3 >= 0; R3--) l2.add(c3[R3]);
        else for (var D2 = 0; D2 < c3.length; D2++) l2.add(c3[D2]);
        return l2;
      } }, { key: "_initSerieVariables", value: function(t4, e3, i2) {
        var a3 = this.w, s2 = new w(this.ctx);
        this.xDivision = a3.globals.gridWidth / (a3.globals.dataPoints - ("on" === a3.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a3.config.stroke.width) ? a3.config.stroke.width[i2] : a3.config.stroke.width;
        var r3 = 0;
        this.yRatio.length > 1 && (this.yaxisIndex = a3.globals.seriesYAxisReverseMap[i2], r3 = i2), this.isReversed = a3.config.yaxis[this.yaxisIndex] && a3.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a3.globals.gridHeight - this.baseLineY[r3] - (this.isReversed ? a3.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[r3] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a3.globals.gridHeight || "end" === a3.config.plotOptions.area.fillTo) && (this.areaBottomY = a3.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s2.group({ class: "apexcharts-series", zIndex: void 0 !== a3.config.series[i2].zIndex ? a3.config.series[i2].zIndex : i2, seriesName: v.escapeString(a3.globals.seriesNames[i2]) }), this.elPointsMain = s2.group({ class: "apexcharts-series-markers-wrap", "data:realIndex": i2 }), this.elDataLabelsWrap = s2.group({ class: "apexcharts-datalabels", "data:realIndex": i2 });
        var o3 = t4[e3].length === a3.globals.dataPoints;
        this.elSeries.attr({ "data:longestSeries": o3, rel: e3 + 1, "data:realIndex": i2 }), this.appendPathFrom = true;
      } }, { key: "_calculatePathsFrom", value: function(t4) {
        var e3, i2, a3, s2, r3 = t4.type, o3 = t4.series, n2 = t4.i, l2 = t4.realIndex, h2 = t4.translationsIndex, c3 = t4.prevX, d2 = t4.prevY, g2 = t4.prevY2, u2 = this.w, p2 = new w(this.ctx);
        if (null === o3[n2][0]) {
          for (var f2 = 0; f2 < o3[n2].length; f2++) if (null !== o3[n2][f2]) {
            c3 = this.xDivision * f2, d2 = this.zeroY - o3[n2][f2] / this.yRatio[h2], e3 = p2.move(c3, d2), i2 = p2.move(c3, this.areaBottomY);
            break;
          }
        } else e3 = p2.move(c3, d2), "rangeArea" === r3 && (e3 = p2.move(c3, g2) + p2.line(c3, d2)), i2 = p2.move(c3, this.areaBottomY) + p2.line(c3, d2);
        if (a3 = p2.move(0, this.zeroY) + p2.line(0, this.zeroY), s2 = p2.move(0, this.zeroY) + p2.line(0, this.zeroY), u2.globals.previousPaths.length > 0) {
          var x2 = this.lineHelpers.checkPreviousPaths({ pathFromLine: a3, pathFromArea: s2, realIndex: l2 });
          a3 = x2.pathFromLine, s2 = x2.pathFromArea;
        }
        return { prevX: c3, prevY: d2, linePath: e3, areaPath: i2, pathFromLine: a3, pathFromArea: s2 };
      } }, { key: "_handlePaths", value: function(t4) {
        var e3 = t4.type, i2 = t4.realIndex, a3 = t4.i, s2 = t4.paths, r3 = this.w, o3 = new w(this.ctx), n2 = new O2(this.ctx);
        this.prevSeriesY.push(s2.yArrj), r3.globals.seriesXvalues[i2] = s2.xArrj, r3.globals.seriesYvalues[i2] = s2.yArrj;
        var l2 = r3.config.forecastDataPoints;
        if (l2.count > 0 && "rangeArea" !== e3) {
          var h2 = r3.globals.seriesXvalues[i2][r3.globals.seriesXvalues[i2].length - l2.count - 1], c3 = o3.drawRect(h2, 0, r3.globals.gridWidth, r3.globals.gridHeight, 0);
          r3.globals.dom.elForecastMask.appendChild(c3.node);
          var g2 = o3.drawRect(0, 0, h2, r3.globals.gridHeight, 0);
          r3.globals.dom.elNonForecastMask.appendChild(g2.node);
        }
        this.pointsChart || r3.globals.delayedElements.push({ el: this.elPointsMain.node, index: i2 });
        var u2 = { i: a3, realIndex: i2, animationDelay: a3, initialSpeed: r3.config.chart.animations.speed, dataChangeSpeed: r3.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(e3) };
        if ("area" === e3) for (var p2 = n2.fillPath({ seriesNumber: i2 }), f2 = 0; f2 < s2.areaPaths.length; f2++) {
          var x2 = o3.renderPaths(d(d({}, u2), {}, { pathFrom: s2.pathFromArea, pathTo: s2.areaPaths[f2], stroke: "none", strokeWidth: 0, strokeLineCap: null, fill: p2 }));
          this.elSeries.add(x2);
        }
        if (r3.config.stroke.show && !this.pointsChart) {
          var b2 = null;
          if ("line" === e3) b2 = n2.fillPath({ seriesNumber: i2, i: a3 });
          else if ("solid" === r3.config.stroke.fill.type) b2 = r3.globals.stroke.colors[i2];
          else {
            var v2 = r3.config.fill;
            r3.config.fill = r3.config.stroke.fill, b2 = n2.fillPath({ seriesNumber: i2, i: a3 }), r3.config.fill = v2;
          }
          for (var m2 = 0; m2 < s2.linePaths.length; m2++) {
            var y3 = b2;
            "rangeArea" === e3 && (y3 = n2.fillPath({ seriesNumber: i2 }));
            var k2 = d(d({}, u2), {}, { pathFrom: s2.pathFromLine, pathTo: s2.linePaths[m2], stroke: b2, strokeWidth: this.strokeWidth, strokeLineCap: r3.config.stroke.lineCap, fill: "rangeArea" === e3 ? y3 : "none" }), A2 = o3.renderPaths(k2);
            if (this.elSeries.add(A2), A2.attr("fill-rule", "evenodd"), l2.count > 0 && "rangeArea" !== e3) {
              var S2 = o3.renderPaths(k2);
              S2.node.setAttribute("stroke-dasharray", l2.dashArray), l2.strokeWidth && S2.node.setAttribute("stroke-width", l2.strokeWidth), this.elSeries.add(S2), S2.attr("clip-path", "url(#forecastMask".concat(r3.globals.cuid, ")")), A2.attr("clip-path", "url(#nonForecastMask".concat(r3.globals.cuid, ")"));
            }
          }
        }
      } }, { key: "_iterateOverDataPoints", value: function(t4) {
        var e3, i2, a3 = this, s2 = t4.type, r3 = t4.series, o3 = t4.iterations, n2 = t4.realIndex, l2 = t4.translationsIndex, h2 = t4.i, c3 = t4.x, d2 = t4.y, g2 = t4.pX, u2 = t4.pY, p2 = t4.pathsFrom, f2 = t4.linePaths, x2 = t4.areaPaths, b2 = t4.seriesIndex, m2 = t4.lineYPosition, y3 = t4.xArrj, k2 = t4.yArrj, A2 = t4.y2Arrj, S2 = t4.isRangeStart, C3 = t4.seriesRangeEnd, L3 = this.w, P3 = new w(this.ctx), M2 = this.yRatio, I3 = p2.prevY, T2 = p2.linePath, z2 = p2.areaPath, X3 = p2.pathFromLine, E2 = p2.pathFromArea, Y2 = v.isNumber(L3.globals.minYArr[n2]) ? L3.globals.minYArr[n2] : L3.globals.minY;
        o3 || (o3 = L3.globals.dataPoints > 1 ? L3.globals.dataPoints - 1 : L3.globals.dataPoints);
        var F3 = function(t5, e4) {
          return e4 - t5 / M2[l2] + 2 * (a3.isReversed ? t5 / M2[l2] : 0);
        }, R3 = d2, D2 = L3.config.chart.stacked && !L3.globals.comboCharts || L3.config.chart.stacked && L3.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || "bar" === (null === (e3 = this.w.config.series[n2]) || void 0 === e3 ? void 0 : e3.type) || "column" === (null === (i2 = this.w.config.series[n2]) || void 0 === i2 ? void 0 : i2.type)), H2 = L3.config.stroke.curve;
        Array.isArray(H2) && (H2 = Array.isArray(b2) ? H2[b2[h2]] : H2[h2]);
        for (var O3, N2 = 0, W2 = 0; W2 < o3; W2++) {
          var B3 = void 0 === r3[h2][W2 + 1] || null === r3[h2][W2 + 1];
          if (L3.globals.isXNumeric) {
            var G3 = L3.globals.seriesX[n2][W2 + 1];
            void 0 === L3.globals.seriesX[n2][W2 + 1] && (G3 = L3.globals.seriesX[n2][o3 - 1]), c3 = (G3 - L3.globals.minX) / this.xRatio;
          } else c3 += this.xDivision;
          if (D2) if (h2 > 0 && L3.globals.collapsedSeries.length < L3.config.series.length - 1) {
            m2 = this.prevSeriesY[function(t5) {
              for (var e4 = t5; e4 > 0; e4--) {
                if (!(L3.globals.collapsedSeriesIndices.indexOf((null == b2 ? void 0 : b2[e4]) || e4) > -1)) return e4;
                e4--;
              }
              return 0;
            }(h2 - 1)][W2 + 1];
          } else m2 = this.zeroY;
          else m2 = this.zeroY;
          B3 ? d2 = F3(Y2, m2) : (d2 = F3(r3[h2][W2 + 1], m2), "rangeArea" === s2 && (R3 = F3(C3[h2][W2 + 1], m2))), y3.push(c3), !B3 || "smooth" !== L3.config.stroke.curve && "monotoneCubic" !== L3.config.stroke.curve ? (k2.push(d2), A2.push(R3)) : (k2.push(null), A2.push(null));
          var V2 = this.lineHelpers.calculatePoints({ series: r3, x: c3, y: d2, realIndex: n2, i: h2, j: W2, prevY: I3 }), j2 = this._createPaths({ type: s2, series: r3, i: h2, realIndex: n2, j: W2, x: c3, y: d2, y2: R3, xArrj: y3, yArrj: k2, y2Arrj: A2, pX: g2, pY: u2, pathState: N2, segmentStartX: O3, linePath: T2, areaPath: z2, linePaths: f2, areaPaths: x2, curve: H2, isRangeStart: S2 });
          x2 = j2.areaPaths, f2 = j2.linePaths, g2 = j2.pX, u2 = j2.pY, N2 = j2.pathState, O3 = j2.segmentStartX, z2 = j2.areaPath, T2 = j2.linePath, !this.appendPathFrom || "monotoneCubic" === H2 && "rangeArea" === s2 || (X3 += P3.line(c3, this.zeroY), E2 += P3.line(c3, this.zeroY)), this.handleNullDataPoints(r3, V2, h2, W2, n2), this._handleMarkersAndLabels({ type: s2, pointsPos: V2, i: h2, j: W2, realIndex: n2, isRangeStart: S2 });
        }
        return { yArrj: k2, xArrj: y3, pathFromArea: E2, areaPaths: x2, pathFromLine: X3, linePaths: f2, linePath: T2, areaPath: z2 };
      } }, { key: "_handleMarkersAndLabels", value: function(t4) {
        var e3 = t4.type, i2 = t4.pointsPos, a3 = t4.isRangeStart, s2 = t4.i, r3 = t4.j, o3 = t4.realIndex, n2 = this.w, l2 = new B2(this.ctx);
        if (this.pointsChart) this.scatter.draw(this.elSeries, r3, { realIndex: o3, pointsPos: i2, zRatio: this.zRatio, elParent: this.elPointsMain });
        else {
          n2.globals.series[s2].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
          var h2 = this.markers.plotChartMarkers(i2, o3, r3 + 1);
          null !== h2 && this.elPointsMain.add(h2);
        }
        var c3 = l2.drawDataLabel({ type: e3, isRangeStart: a3, pos: i2, i: o3, j: r3 + 1 });
        null !== c3 && this.elDataLabelsWrap.add(c3);
      } }, { key: "_createPaths", value: function(t4) {
        var e3 = t4.type, i2 = t4.series, a3 = t4.i;
        t4.realIndex;
        var s2 = t4.j, r3 = t4.x, o3 = t4.y, n2 = t4.xArrj, l2 = t4.yArrj, h2 = t4.y2, c3 = t4.y2Arrj, d2 = t4.pX, g2 = t4.pY, u2 = t4.pathState, p2 = t4.segmentStartX, f2 = t4.linePath, x2 = t4.areaPath, b2 = t4.linePaths, v2 = t4.areaPaths, m2 = t4.curve, y3 = t4.isRangeStart;
        this.w;
        var k2, A2 = new w(this.ctx), S2 = this.areaBottomY, C3 = "rangeArea" === e3, L3 = "rangeArea" === e3 && y3;
        switch (m2) {
          case "monotoneCubic":
            var P3 = y3 ? l2 : c3;
            switch (u2) {
              case 0:
                if (null === P3[s2 + 1]) break;
                u2 = 1;
              case 1:
                if (!(C3 ? n2.length === i2[a3].length : s2 === i2[a3].length - 2)) break;
              case 2:
                var M2 = y3 ? n2 : n2.slice().reverse(), I3 = y3 ? P3 : P3.slice().reverse(), T2 = (k2 = I3, M2.map(function(t5, e4) {
                  return [t5, k2[e4]];
                }).filter(function(t5) {
                  return null !== t5[1];
                })), z2 = T2.length > 1 ? Yt2(T2) : T2, X3 = [];
                C3 && (L3 ? v2 = T2 : X3 = v2.reverse());
                var E2 = 0, Y2 = 0;
                if (function(t5, e4) {
                  for (var i3 = function(t6) {
                    var e5 = [], i4 = 0;
                    return t6.forEach(function(t7) {
                      null !== t7 ? i4++ : i4 > 0 && (e5.push(i4), i4 = 0);
                    }), i4 > 0 && e5.push(i4), e5;
                  }(t5), a4 = [], s3 = 0, r4 = 0; s3 < i3.length; r4 += i3[s3++]) a4[s3] = Ft2(e4, r4, r4 + i3[s3]);
                  return a4;
                }(I3, z2).forEach(function(t5) {
                  E2++;
                  var e4 = function(t6) {
                    for (var e5 = "", i4 = 0; i4 < t6.length; i4++) {
                      var a5 = t6[i4], s3 = a5.length;
                      s3 > 4 ? (e5 += "C".concat(a5[0], ", ").concat(a5[1]), e5 += ", ".concat(a5[2], ", ").concat(a5[3]), e5 += ", ".concat(a5[4], ", ").concat(a5[5])) : s3 > 2 && (e5 += "S".concat(a5[0], ", ").concat(a5[1]), e5 += ", ".concat(a5[2], ", ").concat(a5[3]));
                    }
                    return e5;
                  }(t5), i3 = Y2, a4 = (Y2 += t5.length) - 1;
                  L3 ? f2 = A2.move(T2[i3][0], T2[i3][1]) + e4 : C3 ? f2 = A2.move(X3[i3][0], X3[i3][1]) + A2.line(T2[i3][0], T2[i3][1]) + e4 + A2.line(X3[a4][0], X3[a4][1]) : (f2 = A2.move(T2[i3][0], T2[i3][1]) + e4, x2 = f2 + A2.line(T2[a4][0], S2) + A2.line(T2[i3][0], S2) + "z", v2.push(x2)), b2.push(f2);
                }), C3 && E2 > 1 && !L3) {
                  var F3 = b2.slice(E2).reverse();
                  b2.splice(E2), F3.forEach(function(t5) {
                    return b2.push(t5);
                  });
                }
                u2 = 0;
            }
            break;
          case "smooth":
            var R3 = 0.35 * (r3 - d2);
            if (null === i2[a3][s2]) u2 = 0;
            else switch (u2) {
              case 0:
                if (p2 = d2, f2 = L3 ? A2.move(d2, c3[s2]) + A2.line(d2, g2) : A2.move(d2, g2), x2 = A2.move(d2, g2), u2 = 1, s2 < i2[a3].length - 2) {
                  var D2 = A2.curve(d2 + R3, g2, r3 - R3, o3, r3, o3);
                  f2 += D2, x2 += D2;
                  break;
                }
              case 1:
                if (null === i2[a3][s2 + 1]) f2 += L3 ? A2.line(d2, h2) : A2.move(d2, g2), x2 += A2.line(d2, S2) + A2.line(p2, S2) + "z", b2.push(f2), v2.push(x2), u2 = -1;
                else {
                  var H2 = A2.curve(d2 + R3, g2, r3 - R3, o3, r3, o3);
                  f2 += H2, x2 += H2, s2 >= i2[a3].length - 2 && (L3 && (f2 += A2.curve(r3, o3, r3, o3, r3, h2) + A2.move(r3, h2)), x2 += A2.curve(r3, o3, r3, o3, r3, S2) + A2.line(p2, S2) + "z", b2.push(f2), v2.push(x2), u2 = -1);
                }
            }
            d2 = r3, g2 = o3;
            break;
          default:
            var O3 = function(t5, e4, i3) {
              var a4 = [];
              switch (t5) {
                case "stepline":
                  a4 = A2.line(e4, null, "H") + A2.line(null, i3, "V");
                  break;
                case "linestep":
                  a4 = A2.line(null, i3, "V") + A2.line(e4, null, "H");
                  break;
                case "straight":
                  a4 = A2.line(e4, i3);
              }
              return a4;
            };
            if (null === i2[a3][s2]) u2 = 0;
            else switch (u2) {
              case 0:
                if (p2 = d2, f2 = L3 ? A2.move(d2, c3[s2]) + A2.line(d2, g2) : A2.move(d2, g2), x2 = A2.move(d2, g2), u2 = 1, s2 < i2[a3].length - 2) {
                  var N2 = O3(m2, r3, o3);
                  f2 += N2, x2 += N2;
                  break;
                }
              case 1:
                if (null === i2[a3][s2 + 1]) f2 += L3 ? A2.line(d2, h2) : A2.move(d2, g2), x2 += A2.line(d2, S2) + A2.line(p2, S2) + "z", b2.push(f2), v2.push(x2), u2 = -1;
                else {
                  var W2 = O3(m2, r3, o3);
                  f2 += W2, x2 += W2, s2 >= i2[a3].length - 2 && (L3 && (f2 += A2.line(r3, h2)), x2 += A2.line(r3, S2) + A2.line(p2, S2) + "z", b2.push(f2), v2.push(x2), u2 = -1);
                }
            }
            d2 = r3, g2 = o3;
        }
        return { linePaths: b2, areaPaths: v2, pX: d2, pY: g2, pathState: u2, segmentStartX: p2, linePath: f2, areaPath: x2 };
      } }, { key: "handleNullDataPoints", value: function(t4, e3, i2, a3, s2) {
        var r3 = this.w;
        if (null === t4[i2][a3] && r3.config.markers.showNullDataPoints || 1 === t4[i2].length) {
          var o3 = this.strokeWidth - r3.config.markers.strokeWidth / 2;
          o3 > 0 || (o3 = 0);
          var n2 = this.markers.plotChartMarkers(e3, s2, a3 + 1, o3, true);
          null !== n2 && this.elPointsMain.add(n2);
        }
      } }]), t3;
    }();
    window.TreemapSquared = {}, window.TreemapSquared.generate = /* @__PURE__ */ function() {
      function t3(e4, i3, a4, s3) {
        this.xoffset = e4, this.yoffset = i3, this.height = s3, this.width = a4, this.shortestEdge = function() {
          return Math.min(this.height, this.width);
        }, this.getCoordinates = function(t4) {
          var e5, i4 = [], a5 = this.xoffset, s4 = this.yoffset, o4 = r3(t4) / this.height, n2 = r3(t4) / this.width;
          if (this.width >= this.height) for (e5 = 0; e5 < t4.length; e5++) i4.push([a5, s4, a5 + o4, s4 + t4[e5] / o4]), s4 += t4[e5] / o4;
          else for (e5 = 0; e5 < t4.length; e5++) i4.push([a5, s4, a5 + t4[e5] / n2, s4 + n2]), a5 += t4[e5] / n2;
          return i4;
        }, this.cutArea = function(e5) {
          var i4;
          if (this.width >= this.height) {
            var a5 = e5 / this.height, s4 = this.width - a5;
            i4 = new t3(this.xoffset + a5, this.yoffset, s4, this.height);
          } else {
            var r4 = e5 / this.width, o4 = this.height - r4;
            i4 = new t3(this.xoffset, this.yoffset + r4, this.width, o4);
          }
          return i4;
        };
      }
      function e3(e4, a4, s3, o4, n2) {
        o4 = void 0 === o4 ? 0 : o4, n2 = void 0 === n2 ? 0 : n2;
        var l2 = i2(function(t4, e5) {
          var i3, a5 = [], s4 = e5 / r3(t4);
          for (i3 = 0; i3 < t4.length; i3++) a5[i3] = t4[i3] * s4;
          return a5;
        }(e4, a4 * s3), [], new t3(o4, n2, a4, s3), []);
        return function(t4) {
          var e5, i3, a5 = [];
          for (e5 = 0; e5 < t4.length; e5++) for (i3 = 0; i3 < t4[e5].length; i3++) a5.push(t4[e5][i3]);
          return a5;
        }(l2);
      }
      function i2(t4, e4, s3, o4) {
        var n2, l2, h2;
        if (0 !== t4.length) return n2 = s3.shortestEdge(), function(t5, e5, i3) {
          var s4;
          if (0 === t5.length) return true;
          (s4 = t5.slice()).push(e5);
          var r4 = a3(t5, i3), o5 = a3(s4, i3);
          return r4 >= o5;
        }(e4, l2 = t4[0], n2) ? (e4.push(l2), i2(t4.slice(1), e4, s3, o4)) : (h2 = s3.cutArea(r3(e4), o4), o4.push(s3.getCoordinates(e4)), i2(t4, [], h2, o4)), o4;
        o4.push(s3.getCoordinates(e4));
      }
      function a3(t4, e4) {
        var i3 = Math.min.apply(Math, t4), a4 = Math.max.apply(Math, t4), s3 = r3(t4);
        return Math.max(Math.pow(e4, 2) * a4 / Math.pow(s3, 2), Math.pow(s3, 2) / (Math.pow(e4, 2) * i3));
      }
      function s2(t4) {
        return t4 && t4.constructor === Array;
      }
      function r3(t4) {
        var e4, i3 = 0;
        for (e4 = 0; e4 < t4.length; e4++) i3 += t4[e4];
        return i3;
      }
      function o3(t4) {
        var e4, i3 = 0;
        if (s2(t4[0])) for (e4 = 0; e4 < t4.length; e4++) i3 += o3(t4[e4]);
        else i3 = r3(t4);
        return i3;
      }
      return function t4(i3, a4, r4, n2, l2) {
        n2 = void 0 === n2 ? 0 : n2, l2 = void 0 === l2 ? 0 : l2;
        var h2, c3, d2 = [], g2 = [];
        if (s2(i3[0])) {
          for (c3 = 0; c3 < i3.length; c3++) d2[c3] = o3(i3[c3]);
          for (h2 = e3(d2, a4, r4, n2, l2), c3 = 0; c3 < i3.length; c3++) g2.push(t4(i3[c3], h2[c3][2] - h2[c3][0], h2[c3][3] - h2[c3][1], h2[c3][0], h2[c3][1]));
        } else g2 = e3(i3, a4, r4, n2, l2);
        return g2;
      };
    }();
    var Ht2;
    var Ot2;
    var Nt2 = function() {
      function t3(e3, a3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new Ct3(e3), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];
      }
      return s(t3, [{ key: "draw", value: function(t4) {
        var e3 = this, i2 = this.w, a3 = new w(this.ctx), s2 = new O2(this.ctx), r3 = a3.group({ class: "apexcharts-treemap" });
        if (i2.globals.noData) return r3;
        var o3 = [];
        return t4.forEach(function(t5) {
          var e4 = t5.map(function(t6) {
            return Math.abs(t6);
          });
          o3.push(e4);
        }), this.negRange = this.helpers.checkColorRange(), i2.config.series.forEach(function(t5, i3) {
          t5.data.forEach(function(t6) {
            Array.isArray(e3.labels[i3]) || (e3.labels[i3] = []), e3.labels[i3].push(t6.x);
          });
        }), window.TreemapSquared.generate(o3, i2.globals.gridWidth, i2.globals.gridHeight).forEach(function(o4, n2) {
          var l2 = a3.group({ class: "apexcharts-series apexcharts-treemap-series", seriesName: v.escapeString(i2.globals.seriesNames[n2]), rel: n2 + 1, "data:realIndex": n2 });
          if (i2.config.chart.dropShadow.enabled) {
            var h2 = i2.config.chart.dropShadow;
            new y2(e3.ctx).dropShadow(r3, h2, n2);
          }
          var c3 = a3.group({ class: "apexcharts-data-labels" });
          o4.forEach(function(r4, o5) {
            var h3 = r4[0], c4 = r4[1], d2 = r4[2], g2 = r4[3], u2 = a3.drawRect(h3, c4, d2 - h3, g2 - c4, i2.config.plotOptions.treemap.borderRadius, "#fff", 1, e3.strokeWidth, i2.config.plotOptions.treemap.useFillColorAsStroke ? f2 : i2.globals.stroke.colors[n2]);
            u2.attr({ cx: h3, cy: c4, index: n2, i: n2, j: o5, width: d2 - h3, height: g2 - c4 });
            var p2 = e3.helpers.getShadeColor(i2.config.chart.type, n2, o5, e3.negRange), f2 = p2.color;
            void 0 !== i2.config.series[n2].data[o5] && i2.config.series[n2].data[o5].fillColor && (f2 = i2.config.series[n2].data[o5].fillColor);
            var x2 = s2.fillPath({ color: f2, seriesNumber: n2, dataPointIndex: o5 });
            u2.node.classList.add("apexcharts-treemap-rect"), u2.attr({ fill: x2 }), e3.helpers.addListeners(u2);
            var b2 = { x: h3 + (d2 - h3) / 2, y: c4 + (g2 - c4) / 2, width: 0, height: 0 }, v2 = { x: h3, y: c4, width: d2 - h3, height: g2 - c4 };
            if (i2.config.chart.animations.enabled && !i2.globals.dataChanged) {
              var m2 = 1;
              i2.globals.resized || (m2 = i2.config.chart.animations.speed), e3.animateTreemap(u2, b2, v2, m2);
            }
            if (i2.globals.dataChanged) {
              var y3 = 1;
              e3.dynamicAnim.enabled && i2.globals.shouldAnimate && (y3 = e3.dynamicAnim.speed, i2.globals.previousPaths[n2] && i2.globals.previousPaths[n2][o5] && i2.globals.previousPaths[n2][o5].rect && (b2 = i2.globals.previousPaths[n2][o5].rect), e3.animateTreemap(u2, b2, v2, y3));
            }
            var w2 = e3.getFontSize(r4), k2 = i2.config.dataLabels.formatter(e3.labels[n2][o5], { value: i2.globals.series[n2][o5], seriesIndex: n2, dataPointIndex: o5, w: i2 });
            "truncate" === i2.config.plotOptions.treemap.dataLabels.format && (w2 = parseInt(i2.config.dataLabels.style.fontSize, 10), k2 = e3.truncateLabels(k2, w2, h3, c4, d2, g2));
            var A2 = null;
            i2.globals.series[n2][o5] && (A2 = e3.helpers.calculateDataLabels({ text: k2, x: (h3 + d2) / 2, y: (c4 + g2) / 2 + e3.strokeWidth / 2 + w2 / 3, i: n2, j: o5, colorProps: p2, fontSize: w2, series: t4 })), i2.config.dataLabels.enabled && A2 && e3.rotateToFitLabel(A2, w2, k2, h3, c4, d2, g2), l2.add(u2), null !== A2 && l2.add(A2);
          }), l2.add(c3), r3.add(l2);
        }), r3;
      } }, { key: "getFontSize", value: function(t4) {
        var e3 = this.w;
        var i2, a3, s2, r3, o3 = function t5(e4) {
          var i3, a4 = 0;
          if (Array.isArray(e4[0])) for (i3 = 0; i3 < e4.length; i3++) a4 += t5(e4[i3]);
          else for (i3 = 0; i3 < e4.length; i3++) a4 += e4[i3].length;
          return a4;
        }(this.labels) / function t5(e4) {
          var i3, a4 = 0;
          if (Array.isArray(e4[0])) for (i3 = 0; i3 < e4.length; i3++) a4 += t5(e4[i3]);
          else for (i3 = 0; i3 < e4.length; i3++) a4 += 1;
          return a4;
        }(this.labels);
        return i2 = t4[2] - t4[0], a3 = t4[3] - t4[1], s2 = i2 * a3, r3 = Math.pow(s2, 0.5), Math.min(r3 / o3, parseInt(e3.config.dataLabels.style.fontSize, 10));
      } }, { key: "rotateToFitLabel", value: function(t4, e3, i2, a3, s2, r3, o3) {
        var n2 = new w(this.ctx), l2 = n2.getTextRects(i2, e3);
        if (l2.width + this.w.config.stroke.width + 5 > r3 - a3 && l2.width <= o3 - s2) {
          var h2 = n2.rotateAroundCenter(t4.node);
          t4.node.setAttribute("transform", "rotate(-90 ".concat(h2.x, " ").concat(h2.y, ") translate(").concat(l2.height / 3, ")"));
        }
      } }, { key: "truncateLabels", value: function(t4, e3, i2, a3, s2, r3) {
        var o3 = new w(this.ctx), n2 = o3.getTextRects(t4, e3).width + this.w.config.stroke.width + 5 > s2 - i2 && r3 - a3 > s2 - i2 ? r3 - a3 : s2 - i2, l2 = o3.getTextBasedOnMaxWidth({ text: t4, maxWidth: n2, fontSize: e3 });
        return t4.length !== l2.length && n2 / e3 < 5 ? "" : l2;
      } }, { key: "animateTreemap", value: function(t4, e3, i2, a3) {
        var s2 = new m(this.ctx);
        s2.animateRect(t4, { x: e3.x, y: e3.y, width: e3.width, height: e3.height }, { x: i2.x, y: i2.y, width: i2.width, height: i2.height }, a3, function() {
          s2.animationCompleted(t4);
        });
      } }]), t3;
    }();
    var Wt2 = 86400;
    var Bt2 = 10 / Wt2;
    var Gt2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;
      }
      return s(t3, [{ key: "calculateTimeScaleTicks", value: function(t4, e3) {
        var i2 = this, a3 = this.w;
        if (a3.globals.allSeriesCollapsed) return a3.globals.labels = [], a3.globals.timescaleLabels = [], [];
        var s2 = new C2(this.ctx), r3 = (e3 - t4) / 864e5;
        this.determineInterval(r3), a3.globals.disableZoomIn = false, a3.globals.disableZoomOut = false, r3 < Bt2 ? a3.globals.disableZoomIn = true : r3 > 5e4 && (a3.globals.disableZoomOut = true);
        var o3 = s2.getTimeUnitsfromTimestamp(t4, e3, this.utc), n2 = a3.globals.gridWidth / r3, l2 = n2 / 24, h2 = l2 / 60, c3 = h2 / 60, g2 = Math.floor(24 * r3), u2 = Math.floor(1440 * r3), p2 = Math.floor(r3 * Wt2), f2 = Math.floor(r3), x2 = Math.floor(r3 / 30), b2 = Math.floor(r3 / 365), v2 = { minMillisecond: o3.minMillisecond, minSecond: o3.minSecond, minMinute: o3.minMinute, minHour: o3.minHour, minDate: o3.minDate, minMonth: o3.minMonth, minYear: o3.minYear }, m2 = { firstVal: v2, currentMillisecond: v2.minMillisecond, currentSecond: v2.minSecond, currentMinute: v2.minMinute, currentHour: v2.minHour, currentMonthDate: v2.minDate, currentDate: v2.minDate, currentMonth: v2.minMonth, currentYear: v2.minYear, daysWidthOnXAxis: n2, hoursWidthOnXAxis: l2, minutesWidthOnXAxis: h2, secondsWidthOnXAxis: c3, numberOfSeconds: p2, numberOfMinutes: u2, numberOfHours: g2, numberOfDays: f2, numberOfMonths: x2, numberOfYears: b2 };
        switch (this.tickInterval) {
          case "years":
            this.generateYearScale(m2);
            break;
          case "months":
          case "half_year":
            this.generateMonthScale(m2);
            break;
          case "months_days":
          case "months_fortnight":
          case "days":
          case "week_days":
            this.generateDayScale(m2);
            break;
          case "hours":
            this.generateHourScale(m2);
            break;
          case "minutes_fives":
          case "minutes":
            this.generateMinuteScale(m2);
            break;
          case "seconds_tens":
          case "seconds_fives":
          case "seconds":
            this.generateSecondScale(m2);
        }
        var y3 = this.timeScaleArray.map(function(t5) {
          var e4 = { position: t5.position, unit: t5.unit, year: t5.year, day: t5.day ? t5.day : 1, hour: t5.hour ? t5.hour : 0, month: t5.month + 1 };
          return "month" === t5.unit ? d(d({}, e4), {}, { day: 1, value: t5.value + 1 }) : "day" === t5.unit || "hour" === t5.unit ? d(d({}, e4), {}, { value: t5.value }) : "minute" === t5.unit ? d(d({}, e4), {}, { value: t5.value, minute: t5.value }) : "second" === t5.unit ? d(d({}, e4), {}, { value: t5.value, minute: t5.minute, second: t5.second }) : t5;
        });
        return y3.filter(function(t5) {
          var e4 = 1, s3 = Math.ceil(a3.globals.gridWidth / 120), r4 = t5.value;
          void 0 !== a3.config.xaxis.tickAmount && (s3 = a3.config.xaxis.tickAmount), y3.length > s3 && (e4 = Math.floor(y3.length / s3));
          var o4 = false, n3 = false;
          switch (i2.tickInterval) {
            case "years":
              "year" === t5.unit && (o4 = true);
              break;
            case "half_year":
              e4 = 7, "year" === t5.unit && (o4 = true);
              break;
            case "months":
              e4 = 1, "year" === t5.unit && (o4 = true);
              break;
            case "months_fortnight":
              e4 = 15, "year" !== t5.unit && "month" !== t5.unit || (o4 = true), 30 === r4 && (n3 = true);
              break;
            case "months_days":
              e4 = 10, "month" === t5.unit && (o4 = true), 30 === r4 && (n3 = true);
              break;
            case "week_days":
              e4 = 8, "month" === t5.unit && (o4 = true);
              break;
            case "days":
              e4 = 1, "month" === t5.unit && (o4 = true);
              break;
            case "hours":
              "day" === t5.unit && (o4 = true);
              break;
            case "minutes_fives":
            case "seconds_fives":
              r4 % 5 != 0 && (n3 = true);
              break;
            case "seconds_tens":
              r4 % 10 != 0 && (n3 = true);
          }
          if ("hours" === i2.tickInterval || "minutes_fives" === i2.tickInterval || "seconds_tens" === i2.tickInterval || "seconds_fives" === i2.tickInterval) {
            if (!n3) return true;
          } else if ((r4 % e4 == 0 || o4) && !n3) return true;
        });
      } }, { key: "recalcDimensionsBasedOnFormat", value: function(t4, e3) {
        var i2 = this.w, a3 = this.formatDates(t4), s2 = this.removeOverlappingTS(a3);
        i2.globals.timescaleLabels = s2.slice(), new lt2(this.ctx).plotCoords();
      } }, { key: "determineInterval", value: function(t4) {
        var e3 = 24 * t4, i2 = 60 * e3;
        switch (true) {
          case t4 / 365 > 5:
            this.tickInterval = "years";
            break;
          case t4 > 800:
            this.tickInterval = "half_year";
            break;
          case t4 > 180:
            this.tickInterval = "months";
            break;
          case t4 > 90:
            this.tickInterval = "months_fortnight";
            break;
          case t4 > 60:
            this.tickInterval = "months_days";
            break;
          case t4 > 30:
            this.tickInterval = "week_days";
            break;
          case t4 > 2:
            this.tickInterval = "days";
            break;
          case e3 > 2.4:
            this.tickInterval = "hours";
            break;
          case i2 > 15:
            this.tickInterval = "minutes_fives";
            break;
          case i2 > 5:
            this.tickInterval = "minutes";
            break;
          case i2 > 1:
            this.tickInterval = "seconds_tens";
            break;
          case 60 * i2 > 20:
            this.tickInterval = "seconds_fives";
            break;
          default:
            this.tickInterval = "seconds";
        }
      } }, { key: "generateYearScale", value: function(t4) {
        var e3 = t4.firstVal, i2 = t4.currentMonth, a3 = t4.currentYear, s2 = t4.daysWidthOnXAxis, r3 = t4.numberOfYears, o3 = e3.minYear, n2 = 0, l2 = new C2(this.ctx), h2 = "year";
        if (e3.minDate > 1 || e3.minMonth > 0) {
          var c3 = l2.determineRemainingDaysOfYear(e3.minYear, e3.minMonth, e3.minDate);
          n2 = (l2.determineDaysOfYear(e3.minYear) - c3 + 1) * s2, o3 = e3.minYear + 1, this.timeScaleArray.push({ position: n2, value: o3, unit: h2, year: o3, month: v.monthMod(i2 + 1) });
        } else 1 === e3.minDate && 0 === e3.minMonth && this.timeScaleArray.push({ position: n2, value: o3, unit: h2, year: a3, month: v.monthMod(i2 + 1) });
        for (var d2 = o3, g2 = n2, u2 = 0; u2 < r3; u2++) d2++, g2 = l2.determineDaysOfYear(d2 - 1) * s2 + g2, this.timeScaleArray.push({ position: g2, value: d2, unit: h2, year: d2, month: 1 });
      } }, { key: "generateMonthScale", value: function(t4) {
        var e3 = t4.firstVal, i2 = t4.currentMonthDate, a3 = t4.currentMonth, s2 = t4.currentYear, r3 = t4.daysWidthOnXAxis, o3 = t4.numberOfMonths, n2 = a3, l2 = 0, h2 = new C2(this.ctx), c3 = "month", d2 = 0;
        if (e3.minDate > 1) {
          l2 = (h2.determineDaysOfMonths(a3 + 1, e3.minYear) - i2 + 1) * r3, n2 = v.monthMod(a3 + 1);
          var g2 = s2 + d2, u2 = v.monthMod(n2), p2 = n2;
          0 === n2 && (c3 = "year", p2 = g2, u2 = 1, g2 += d2 += 1), this.timeScaleArray.push({ position: l2, value: p2, unit: c3, year: g2, month: u2 });
        } else this.timeScaleArray.push({ position: l2, value: n2, unit: c3, year: s2, month: v.monthMod(a3) });
        for (var f2 = n2 + 1, x2 = l2, b2 = 0, m2 = 1; b2 < o3; b2++, m2++) {
          0 === (f2 = v.monthMod(f2)) ? (c3 = "year", d2 += 1) : c3 = "month";
          var y3 = this._getYear(s2, f2, d2);
          x2 = h2.determineDaysOfMonths(f2, y3) * r3 + x2;
          var w2 = 0 === f2 ? y3 : f2;
          this.timeScaleArray.push({ position: x2, value: w2, unit: c3, year: y3, month: 0 === f2 ? 1 : f2 }), f2++;
        }
      } }, { key: "generateDayScale", value: function(t4) {
        var e3 = t4.firstVal, i2 = t4.currentMonth, a3 = t4.currentYear, s2 = t4.hoursWidthOnXAxis, r3 = t4.numberOfDays, o3 = new C2(this.ctx), n2 = "day", l2 = e3.minDate + 1, h2 = l2, c3 = function(t5, e4, i3) {
          return t5 > o3.determineDaysOfMonths(e4 + 1, i3) ? (h2 = 1, n2 = "month", g2 = e4 += 1, e4) : e4;
        }, d2 = (24 - e3.minHour) * s2, g2 = l2, u2 = c3(h2, i2, a3);
        0 === e3.minHour && 1 === e3.minDate ? (d2 = 0, g2 = v.monthMod(e3.minMonth), n2 = "month", h2 = e3.minDate) : 1 !== e3.minDate && 0 === e3.minHour && 0 === e3.minMinute && (d2 = 0, l2 = e3.minDate, g2 = l2, u2 = c3(h2 = l2, i2, a3)), this.timeScaleArray.push({ position: d2, value: g2, unit: n2, year: this._getYear(a3, u2, 0), month: v.monthMod(u2), day: h2 });
        for (var p2 = d2, f2 = 0; f2 < r3; f2++) {
          n2 = "day", u2 = c3(h2 += 1, u2, this._getYear(a3, u2, 0));
          var x2 = this._getYear(a3, u2, 0);
          p2 = 24 * s2 + p2;
          var b2 = 1 === h2 ? v.monthMod(u2) : h2;
          this.timeScaleArray.push({ position: p2, value: b2, unit: n2, year: x2, month: v.monthMod(u2), day: b2 });
        }
      } }, { key: "generateHourScale", value: function(t4) {
        var e3 = t4.firstVal, i2 = t4.currentDate, a3 = t4.currentMonth, s2 = t4.currentYear, r3 = t4.minutesWidthOnXAxis, o3 = t4.numberOfHours, n2 = new C2(this.ctx), l2 = "hour", h2 = function(t5, e4) {
          return t5 > n2.determineDaysOfMonths(e4 + 1, s2) && (f2 = 1, e4 += 1), { month: e4, date: f2 };
        }, c3 = function(t5, e4) {
          return t5 > n2.determineDaysOfMonths(e4 + 1, s2) ? e4 += 1 : e4;
        }, d2 = 60 - (e3.minMinute + e3.minSecond / 60), g2 = d2 * r3, u2 = e3.minHour + 1, p2 = u2;
        60 === d2 && (g2 = 0, p2 = u2 = e3.minHour);
        var f2 = i2;
        p2 >= 24 && (p2 = 0, f2 += 1, l2 = "day");
        var x2 = h2(f2, a3).month;
        x2 = c3(f2, x2), this.timeScaleArray.push({ position: g2, value: u2, unit: l2, day: f2, hour: p2, year: s2, month: v.monthMod(x2) }), p2++;
        for (var b2 = g2, m2 = 0; m2 < o3; m2++) {
          if (l2 = "hour", p2 >= 24) p2 = 0, l2 = "day", x2 = h2(f2 += 1, x2).month, x2 = c3(f2, x2);
          var y3 = this._getYear(s2, x2, 0);
          b2 = 60 * r3 + b2;
          var w2 = 0 === p2 ? f2 : p2;
          this.timeScaleArray.push({ position: b2, value: w2, unit: l2, hour: p2, day: f2, year: y3, month: v.monthMod(x2) }), p2++;
        }
      } }, { key: "generateMinuteScale", value: function(t4) {
        for (var e3 = t4.currentMillisecond, i2 = t4.currentSecond, a3 = t4.currentMinute, s2 = t4.currentHour, r3 = t4.currentDate, o3 = t4.currentMonth, n2 = t4.currentYear, l2 = t4.minutesWidthOnXAxis, h2 = t4.secondsWidthOnXAxis, c3 = t4.numberOfMinutes, d2 = a3 + 1, g2 = r3, u2 = o3, p2 = n2, f2 = s2, x2 = (60 - i2 - e3 / 1e3) * h2, b2 = 0; b2 < c3; b2++) d2 >= 60 && (d2 = 0, 24 === (f2 += 1) && (f2 = 0)), this.timeScaleArray.push({ position: x2, value: d2, unit: "minute", hour: f2, minute: d2, day: g2, year: this._getYear(p2, u2, 0), month: v.monthMod(u2) }), x2 += l2, d2++;
      } }, { key: "generateSecondScale", value: function(t4) {
        for (var e3 = t4.currentMillisecond, i2 = t4.currentSecond, a3 = t4.currentMinute, s2 = t4.currentHour, r3 = t4.currentDate, o3 = t4.currentMonth, n2 = t4.currentYear, l2 = t4.secondsWidthOnXAxis, h2 = t4.numberOfSeconds, c3 = i2 + 1, d2 = a3, g2 = r3, u2 = o3, p2 = n2, f2 = s2, x2 = (1e3 - e3) / 1e3 * l2, b2 = 0; b2 < h2; b2++) c3 >= 60 && (c3 = 0, ++d2 >= 60 && (d2 = 0, 24 === ++f2 && (f2 = 0))), this.timeScaleArray.push({ position: x2, value: c3, unit: "second", hour: f2, minute: d2, second: c3, day: g2, year: this._getYear(p2, u2, 0), month: v.monthMod(u2) }), x2 += l2, c3++;
      } }, { key: "createRawDateString", value: function(t4, e3) {
        var i2 = t4.year;
        return 0 === t4.month && (t4.month = 1), i2 += "-" + ("0" + t4.month.toString()).slice(-2), "day" === t4.unit ? i2 += "day" === t4.unit ? "-" + ("0" + e3).slice(-2) : "-01" : i2 += "-" + ("0" + (t4.day ? t4.day : "1")).slice(-2), "hour" === t4.unit ? i2 += "hour" === t4.unit ? "T" + ("0" + e3).slice(-2) : "T00" : i2 += "T" + ("0" + (t4.hour ? t4.hour : "0")).slice(-2), "minute" === t4.unit ? i2 += ":" + ("0" + e3).slice(-2) : i2 += ":" + (t4.minute ? ("0" + t4.minute).slice(-2) : "00"), "second" === t4.unit ? i2 += ":" + ("0" + e3).slice(-2) : i2 += ":00", this.utc && (i2 += ".000Z"), i2;
      } }, { key: "formatDates", value: function(t4) {
        var e3 = this, i2 = this.w;
        return t4.map(function(t5) {
          var a3 = t5.value.toString(), s2 = new C2(e3.ctx), r3 = e3.createRawDateString(t5, a3), o3 = s2.getDate(s2.parseDate(r3));
          if (e3.utc || (o3 = s2.getDate(s2.parseDateWithTimezone(r3))), void 0 === i2.config.xaxis.labels.format) {
            var n2 = "dd MMM", l2 = i2.config.xaxis.labels.datetimeFormatter;
            "year" === t5.unit && (n2 = l2.year), "month" === t5.unit && (n2 = l2.month), "day" === t5.unit && (n2 = l2.day), "hour" === t5.unit && (n2 = l2.hour), "minute" === t5.unit && (n2 = l2.minute), "second" === t5.unit && (n2 = l2.second), a3 = s2.formatDate(o3, n2);
          } else a3 = s2.formatDate(o3, i2.config.xaxis.labels.format);
          return { dateString: r3, position: t5.position, value: a3, unit: t5.unit, year: t5.year, month: t5.month };
        });
      } }, { key: "removeOverlappingTS", value: function(t4) {
        var e3, i2 = this, a3 = new w(this.ctx), s2 = false;
        t4.length > 0 && t4[0].value && t4.every(function(e4) {
          return e4.value.length === t4[0].value.length;
        }) && (s2 = true, e3 = a3.getTextRects(t4[0].value).width);
        var r3 = 0, o3 = t4.map(function(o4, n2) {
          if (n2 > 0 && i2.w.config.xaxis.labels.hideOverlappingLabels) {
            var l2 = s2 ? e3 : a3.getTextRects(t4[r3].value).width, h2 = t4[r3].position;
            return o4.position > h2 + l2 + 10 ? (r3 = n2, o4) : null;
          }
          return o4;
        });
        return o3 = o3.filter(function(t5) {
          return null !== t5;
        });
      } }, { key: "_getYear", value: function(t4, e3, i2) {
        return t4 + Math.floor(e3 / 12) + i2;
      } }]), t3;
    }();
    var Vt2 = function() {
      function t3(e3, a3) {
        i(this, t3), this.ctx = a3, this.w = a3.w, this.el = e3;
      }
      return s(t3, [{ key: "setupElements", value: function() {
        var t4 = this.w.globals, e3 = this.w.config, i2 = e3.chart.type;
        t4.axisCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble", "radar", "heatmap", "treemap"].indexOf(i2) > -1, t4.xyCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble"].indexOf(i2) > -1, t4.isBarHorizontal = ("bar" === e3.chart.type || "rangeBar" === e3.chart.type || "boxPlot" === e3.chart.type) && e3.plotOptions.bar.horizontal, t4.chartClass = ".apexcharts" + t4.chartID, t4.dom.baseEl = this.el, t4.dom.elWrap = document.createElement("div"), w.setAttrs(t4.dom.elWrap, { id: t4.chartClass.substring(1), class: "apexcharts-canvas " + t4.chartClass.substring(1) }), this.el.appendChild(t4.dom.elWrap), t4.dom.Paper = new window.SVG.Doc(t4.dom.elWrap), t4.dom.Paper.attr({ class: "apexcharts-svg", "xmlns:data": "ApexChartsNS", transform: "translate(".concat(e3.chart.offsetX, ", ").concat(e3.chart.offsetY, ")") }), t4.dom.Paper.node.style.background = "dark" !== e3.theme.mode || e3.chart.background ? "light" !== e3.theme.mode || e3.chart.background ? e3.chart.background : "#fff" : "#424242", this.setSVGDimensions(), t4.dom.elLegendForeign = document.createElementNS(t4.SVGNS, "foreignObject"), w.setAttrs(t4.dom.elLegendForeign, { x: 0, y: 0, width: t4.svgWidth, height: t4.svgHeight }), t4.dom.elLegendWrap = document.createElement("div"), t4.dom.elLegendWrap.classList.add("apexcharts-legend"), t4.dom.elLegendWrap.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), t4.dom.elLegendForeign.appendChild(t4.dom.elLegendWrap), t4.dom.Paper.node.appendChild(t4.dom.elLegendForeign), t4.dom.elGraphical = t4.dom.Paper.group().attr({ class: "apexcharts-inner apexcharts-graphical" }), t4.dom.elDefs = t4.dom.Paper.defs(), t4.dom.Paper.add(t4.dom.elGraphical), t4.dom.elGraphical.add(t4.dom.elDefs);
      } }, { key: "plotChartType", value: function(t4, e3) {
        var i2 = this.w, a3 = i2.config, s2 = i2.globals, r3 = { series: [], i: [] }, o3 = { series: [], i: [] }, n2 = { series: [], i: [] }, l2 = { series: [], i: [] }, h2 = { series: [], i: [] }, c3 = { series: [], i: [] }, d2 = { series: [], i: [] }, g2 = { series: [], i: [] }, u2 = { series: [], seriesRangeEnd: [], i: [] }, f2 = void 0 !== a3.chart.type ? a3.chart.type : "line", x2 = null, b2 = 0;
        s2.series.forEach(function(e4, a4) {
          var p2 = t4[a4].type || f2;
          switch (p2) {
            case "column":
            case "bar":
              h2.series.push(e4), h2.i.push(a4), i2.globals.columnSeries = h2;
              break;
            case "area":
              o3.series.push(e4), o3.i.push(a4);
              break;
            case "line":
              r3.series.push(e4), r3.i.push(a4);
              break;
            case "scatter":
              n2.series.push(e4), n2.i.push(a4);
              break;
            case "bubble":
              l2.series.push(e4), l2.i.push(a4);
              break;
            case "candlestick":
              c3.series.push(e4), c3.i.push(a4);
              break;
            case "boxPlot":
              d2.series.push(e4), d2.i.push(a4);
              break;
            case "rangeBar":
              g2.series.push(e4), g2.i.push(a4);
              break;
            case "rangeArea":
              u2.series.push(s2.seriesRangeStart[a4]), u2.seriesRangeEnd.push(s2.seriesRangeEnd[a4]), u2.i.push(a4);
              break;
            case "heatmap":
            case "treemap":
            case "pie":
            case "donut":
            case "polarArea":
            case "radialBar":
            case "radar":
              x2 = p2;
              break;
            default:
              console.warn("You have specified an unrecognized series type (", p2, ").");
          }
          f2 !== p2 && "scatter" !== p2 && b2++;
        }), b2 > 0 && (null !== x2 && console.warn("Chart or series type ", x2, " can not appear with other chart or series types."), h2.series.length > 0 && a3.plotOptions.bar.horizontal && (b2 -= h2.length, h2 = { series: [], i: [] }, i2.globals.columnSeries = { series: [], i: [] }, console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"))), s2.comboCharts || (s2.comboCharts = b2 > 0);
        var v2 = new Dt3(this.ctx, e3), m2 = new St(this.ctx, e3);
        this.ctx.pie = new Mt2(this.ctx);
        var y3 = new Tt2(this.ctx);
        this.ctx.rangeBar = new zt2(this.ctx, e3);
        var w2 = new It2(this.ctx), A2 = [];
        if (s2.comboCharts) {
          var S2, C3, L3 = new k(this.ctx);
          if (o3.series.length > 0) (S2 = A2).push.apply(S2, p(L3.drawSeriesByGroup(o3, s2.areaGroups, "area", v2)));
          if (h2.series.length > 0) if (i2.config.chart.stacked) {
            var P3 = new At2(this.ctx, e3);
            A2.push(P3.draw(h2.series, h2.i));
          } else this.ctx.bar = new kt2(this.ctx, e3), A2.push(this.ctx.bar.draw(h2.series, h2.i));
          if (u2.series.length > 0 && A2.push(v2.draw(u2.series, "rangeArea", u2.i, u2.seriesRangeEnd)), r3.series.length > 0) (C3 = A2).push.apply(C3, p(L3.drawSeriesByGroup(r3, s2.lineGroups, "line", v2)));
          if (c3.series.length > 0 && A2.push(m2.draw(c3.series, "candlestick", c3.i)), d2.series.length > 0 && A2.push(m2.draw(d2.series, "boxPlot", d2.i)), g2.series.length > 0 && A2.push(this.ctx.rangeBar.draw(g2.series, g2.i)), n2.series.length > 0) {
            var M2 = new Dt3(this.ctx, e3, true);
            A2.push(M2.draw(n2.series, "scatter", n2.i));
          }
          if (l2.series.length > 0) {
            var I3 = new Dt3(this.ctx, e3, true);
            A2.push(I3.draw(l2.series, "bubble", l2.i));
          }
        } else switch (a3.chart.type) {
          case "line":
            A2 = v2.draw(s2.series, "line");
            break;
          case "area":
            A2 = v2.draw(s2.series, "area");
            break;
          case "bar":
            if (a3.chart.stacked) A2 = new At2(this.ctx, e3).draw(s2.series);
            else this.ctx.bar = new kt2(this.ctx, e3), A2 = this.ctx.bar.draw(s2.series);
            break;
          case "candlestick":
            A2 = new St(this.ctx, e3).draw(s2.series, "candlestick");
            break;
          case "boxPlot":
            A2 = new St(this.ctx, e3).draw(s2.series, a3.chart.type);
            break;
          case "rangeBar":
            A2 = this.ctx.rangeBar.draw(s2.series);
            break;
          case "rangeArea":
            A2 = v2.draw(s2.seriesRangeStart, "rangeArea", void 0, s2.seriesRangeEnd);
            break;
          case "heatmap":
            A2 = new Lt2(this.ctx, e3).draw(s2.series);
            break;
          case "treemap":
            A2 = new Nt2(this.ctx, e3).draw(s2.series);
            break;
          case "pie":
          case "donut":
          case "polarArea":
            A2 = this.ctx.pie.draw(s2.series);
            break;
          case "radialBar":
            A2 = y3.draw(s2.series);
            break;
          case "radar":
            A2 = w2.draw(s2.series);
            break;
          default:
            A2 = v2.draw(s2.series);
        }
        return A2;
      } }, { key: "setSVGDimensions", value: function() {
        var t4 = this.w.globals, e3 = this.w.config;
        e3.chart.width || (e3.chart.width = "100%"), e3.chart.height || (e3.chart.height = "auto"), t4.svgWidth = e3.chart.width, t4.svgHeight = e3.chart.height;
        var i2 = v.getDimensions(this.el), a3 = e3.chart.width.toString().split(/[0-9]+/g).pop();
        "%" === a3 ? v.isNumber(i2[0]) && (0 === i2[0].width && (i2 = v.getDimensions(this.el.parentNode)), t4.svgWidth = i2[0] * parseInt(e3.chart.width, 10) / 100) : "px" !== a3 && "" !== a3 || (t4.svgWidth = parseInt(e3.chart.width, 10));
        var s2 = String(e3.chart.height).toString().split(/[0-9]+/g).pop();
        if ("auto" !== t4.svgHeight && "" !== t4.svgHeight) if ("%" === s2) {
          var r3 = v.getDimensions(this.el.parentNode);
          t4.svgHeight = r3[1] * parseInt(e3.chart.height, 10) / 100;
        } else t4.svgHeight = parseInt(e3.chart.height, 10);
        else t4.axisCharts ? t4.svgHeight = t4.svgWidth / 1.61 : t4.svgHeight = t4.svgWidth / 1.2;
        if (t4.svgWidth < 0 && (t4.svgWidth = 0), t4.svgHeight < 0 && (t4.svgHeight = 0), w.setAttrs(t4.dom.Paper.node, { width: t4.svgWidth, height: t4.svgHeight }), "%" !== s2) {
          var o3 = e3.chart.sparkline.enabled ? 0 : t4.axisCharts ? e3.chart.parentHeightOffset : 0;
          t4.dom.Paper.node.parentNode.parentNode.style.minHeight = t4.svgHeight + o3 + "px";
        }
        t4.dom.elWrap.style.width = t4.svgWidth + "px", t4.dom.elWrap.style.height = t4.svgHeight + "px";
      } }, { key: "shiftGraphPosition", value: function() {
        var t4 = this.w.globals, e3 = t4.translateY, i2 = { transform: "translate(" + t4.translateX + ", " + e3 + ")" };
        w.setAttrs(t4.dom.elGraphical.node, i2);
      } }, { key: "resizeNonAxisCharts", value: function() {
        var t4 = this.w, e3 = t4.globals, i2 = 0, a3 = t4.config.chart.sparkline.enabled ? 1 : 15;
        a3 += t4.config.grid.padding.bottom, "top" !== t4.config.legend.position && "bottom" !== t4.config.legend.position || !t4.config.legend.show || t4.config.legend.floating || (i2 = new ct2(this.ctx).legendHelpers.getLegendDimensions().clwh + 10);
        var s2 = t4.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"), r3 = 2.05 * t4.globals.radialSize;
        if (s2 && !t4.config.chart.sparkline.enabled && 0 !== t4.config.plotOptions.radialBar.startAngle) {
          var o3 = v.getBoundingClientRect(s2);
          r3 = o3.bottom;
          var n2 = o3.bottom - o3.top;
          r3 = Math.max(2.05 * t4.globals.radialSize, n2);
        }
        var l2 = r3 + e3.translateY + i2 + a3;
        e3.dom.elLegendForeign && e3.dom.elLegendForeign.setAttribute("height", l2), t4.config.chart.height && String(t4.config.chart.height).indexOf("%") > 0 || (e3.dom.elWrap.style.height = l2 + "px", w.setAttrs(e3.dom.Paper.node, { height: l2 }), e3.dom.Paper.node.parentNode.parentNode.style.minHeight = l2 + "px");
      } }, { key: "coreCalculations", value: function() {
        new Z2(this.ctx).init();
      } }, { key: "resetGlobals", value: function() {
        var t4 = this, e3 = function() {
          return t4.w.config.series.map(function(t5) {
            return [];
          });
        }, i2 = new D(), a3 = this.w.globals;
        i2.initGlobalVars(a3), a3.seriesXvalues = e3(), a3.seriesYvalues = e3();
      } }, { key: "isMultipleY", value: function() {
        if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) return this.w.globals.isMultipleYAxis = true, true;
      } }, { key: "xySettings", value: function() {
        var t4 = null, e3 = this.w;
        if (e3.globals.axisCharts) {
          if ("back" === e3.config.xaxis.crosshairs.position) new tt2(this.ctx).drawXCrosshairs();
          if ("back" === e3.config.yaxis[0].crosshairs.position) new tt2(this.ctx).drawYCrosshairs();
          if ("datetime" === e3.config.xaxis.type && void 0 === e3.config.xaxis.labels.formatter) {
            this.ctx.timeScale = new Gt2(this.ctx);
            var i2 = [];
            isFinite(e3.globals.minX) && isFinite(e3.globals.maxX) && !e3.globals.isBarHorizontal ? i2 = this.ctx.timeScale.calculateTimeScaleTicks(e3.globals.minX, e3.globals.maxX) : e3.globals.isBarHorizontal && (i2 = this.ctx.timeScale.calculateTimeScaleTicks(e3.globals.minY, e3.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i2);
          }
          t4 = new k(this.ctx).getCalculatedRatios();
        }
        return t4;
      } }, { key: "updateSourceChart", value: function(t4) {
        this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({ chart: { selection: { xaxis: { min: t4.w.globals.minX, max: t4.w.globals.maxX } } } }, false, false);
      } }, { key: "setupBrushHandler", value: function() {
        var t4 = this, e3 = this.w;
        if (e3.config.chart.brush.enabled && "function" != typeof e3.config.chart.events.selection) {
          var i2 = Array.isArray(e3.config.chart.brush.targets) ? e3.config.chart.brush.targets : [e3.config.chart.brush.target];
          i2.forEach(function(e4) {
            var i3 = ApexCharts.getChartByID(e4);
            i3.w.globals.brushSource = t4.ctx, "function" != typeof i3.w.config.chart.events.zoomed && (i3.w.config.chart.events.zoomed = function() {
              t4.updateSourceChart(i3);
            }), "function" != typeof i3.w.config.chart.events.scrolled && (i3.w.config.chart.events.scrolled = function() {
              t4.updateSourceChart(i3);
            });
          }), e3.config.chart.events.selection = function(t5, e4) {
            i2.forEach(function(t6) {
              ApexCharts.getChartByID(t6).ctx.updateHelpers._updateOptions({ xaxis: { min: e4.xaxis.min, max: e4.xaxis.max } }, false, false, false, false);
            });
          };
        }
      } }]), t3;
    }();
    var jt2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "_updateOptions", value: function(t4) {
        var e3 = this, i2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
        return new Promise(function(o3) {
          var n2 = [e3.ctx];
          s2 && (n2 = e3.ctx.getSyncedCharts()), e3.ctx.w.globals.isExecCalled && (n2 = [e3.ctx], e3.ctx.w.globals.isExecCalled = false), n2.forEach(function(s3, l2) {
            var h2 = s3.w;
            if (h2.globals.shouldAnimate = a3, i2 || (h2.globals.resized = true, h2.globals.dataChanged = true, a3 && s3.series.getPreviousPaths()), t4 && "object" === x(t4) && (s3.config = new R2(t4), t4 = k.extendArrayProps(s3.config, t4, h2), s3.w.globals.chartID !== e3.ctx.w.globals.chartID && delete t4.series, h2.config = v.extend(h2.config, t4), r3 && (h2.globals.lastXAxis = t4.xaxis ? v.clone(t4.xaxis) : [], h2.globals.lastYAxis = t4.yaxis ? v.clone(t4.yaxis) : [], h2.globals.initialConfig = v.extend({}, h2.config), h2.globals.initialSeries = v.clone(h2.config.series), t4.series))) {
              for (var c3 = 0; c3 < h2.globals.collapsedSeriesIndices.length; c3++) {
                var d2 = h2.config.series[h2.globals.collapsedSeriesIndices[c3]];
                h2.globals.collapsedSeries[c3].data = h2.globals.axisCharts ? d2.data.slice() : d2;
              }
              for (var g2 = 0; g2 < h2.globals.ancillaryCollapsedSeriesIndices.length; g2++) {
                var u2 = h2.config.series[h2.globals.ancillaryCollapsedSeriesIndices[g2]];
                h2.globals.ancillaryCollapsedSeries[g2].data = h2.globals.axisCharts ? u2.data.slice() : u2;
              }
              s3.series.emptyCollapsedSeries(h2.config.series);
            }
            return s3.update(t4).then(function() {
              l2 === n2.length - 1 && o3(s3);
            });
          });
        });
      } }, { key: "_updateSeries", value: function(t4, e3) {
        var i2 = this, a3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        return new Promise(function(s2) {
          var r3, o3 = i2.w;
          return o3.globals.shouldAnimate = e3, o3.globals.dataChanged = true, e3 && i2.ctx.series.getPreviousPaths(), o3.globals.axisCharts ? (0 === (r3 = t4.map(function(t5, e4) {
            return i2._extendSeries(t5, e4);
          })).length && (r3 = [{ data: [] }]), o3.config.series = r3) : o3.config.series = t4.slice(), a3 && (o3.globals.initialConfig.series = v.clone(o3.config.series), o3.globals.initialSeries = v.clone(o3.config.series)), i2.ctx.update().then(function() {
            s2(i2.ctx);
          });
        });
      } }, { key: "_extendSeries", value: function(t4, e3) {
        var i2 = this.w, a3 = i2.config.series[e3];
        return d(d({}, i2.config.series[e3]), {}, { name: t4.name ? t4.name : null == a3 ? void 0 : a3.name, color: t4.color ? t4.color : null == a3 ? void 0 : a3.color, type: t4.type ? t4.type : null == a3 ? void 0 : a3.type, group: t4.group ? t4.group : null == a3 ? void 0 : a3.group, hidden: void 0 !== t4.hidden ? t4.hidden : null == a3 ? void 0 : a3.hidden, data: t4.data ? t4.data : null == a3 ? void 0 : a3.data, zIndex: void 0 !== t4.zIndex ? t4.zIndex : e3 });
      } }, { key: "toggleDataPointSelection", value: function(t4, e3) {
        var i2 = this.w, a3 = null, s2 = ".apexcharts-series[data\\:realIndex='".concat(t4, "']");
        return i2.globals.axisCharts ? a3 = i2.globals.dom.Paper.select("".concat(s2, " path[j='").concat(e3, "'], ").concat(s2, " circle[j='").concat(e3, "'], ").concat(s2, " rect[j='").concat(e3, "']")).members[0] : void 0 === e3 && (a3 = i2.globals.dom.Paper.select("".concat(s2, " path[j='").concat(t4, "']")).members[0], "pie" !== i2.config.chart.type && "polarArea" !== i2.config.chart.type && "donut" !== i2.config.chart.type || this.ctx.pie.pieClicked(t4)), a3 ? (new w(this.ctx).pathMouseDown(a3, null), a3.node ? a3.node : null) : (console.warn("toggleDataPointSelection: Element not found"), null);
      } }, { key: "forceXAxisUpdate", value: function(t4) {
        var e3 = this.w;
        if (["min", "max"].forEach(function(i3) {
          void 0 !== t4.xaxis[i3] && (e3.config.xaxis[i3] = t4.xaxis[i3], e3.globals.lastXAxis[i3] = t4.xaxis[i3]);
        }), t4.xaxis.categories && t4.xaxis.categories.length && (e3.config.xaxis.categories = t4.xaxis.categories), e3.config.xaxis.convertedCatToNumeric) {
          var i2 = new F2(t4);
          t4 = i2.convertCatToNumericXaxis(t4, this.ctx);
        }
        return t4;
      } }, { key: "forceYAxisUpdate", value: function(t4) {
        return t4.chart && t4.chart.stacked && "100%" === t4.chart.stackType && (Array.isArray(t4.yaxis) ? t4.yaxis.forEach(function(e3, i2) {
          t4.yaxis[i2].min = 0, t4.yaxis[i2].max = 100;
        }) : (t4.yaxis.min = 0, t4.yaxis.max = 100)), t4;
      } }, { key: "revertDefaultAxisMinMax", value: function(t4) {
        var e3 = this, i2 = this.w, a3 = i2.globals.lastXAxis, s2 = i2.globals.lastYAxis;
        t4 && t4.xaxis && (a3 = t4.xaxis), t4 && t4.yaxis && (s2 = t4.yaxis), i2.config.xaxis.min = a3.min, i2.config.xaxis.max = a3.max;
        var r3 = function(t5) {
          void 0 !== s2[t5] && (i2.config.yaxis[t5].min = s2[t5].min, i2.config.yaxis[t5].max = s2[t5].max);
        };
        i2.config.yaxis.map(function(t5, a4) {
          i2.globals.zoomed || void 0 !== s2[a4] ? r3(a4) : void 0 !== e3.ctx.opts.yaxis[a4] && (t5.min = e3.ctx.opts.yaxis[a4].min, t5.max = e3.ctx.opts.yaxis[a4].max);
        });
      } }]), t3;
    }();
    Ht2 = "undefined" != typeof window ? window : void 0, Ot2 = function(t3, e3) {
      var i2 = (void 0 !== this ? this : t3).SVG = function(t4) {
        if (i2.supported) return t4 = new i2.Doc(t4), i2.parser.draw || i2.prepare(), t4;
      };
      if (i2.ns = "http://www.w3.org/2000/svg", i2.xmlns = "http://www.w3.org/2000/xmlns/", i2.xlink = "http://www.w3.org/1999/xlink", i2.svgjs = "http://svgjs.dev", i2.supported = true, !i2.supported) return false;
      i2.did = 1e3, i2.eid = function(t4) {
        return "Svgjs" + c3(t4) + i2.did++;
      }, i2.create = function(t4) {
        var i3 = e3.createElementNS(this.ns, t4);
        return i3.setAttribute("id", this.eid(t4)), i3;
      }, i2.extend = function() {
        var t4, e4;
        e4 = (t4 = [].slice.call(arguments)).pop();
        for (var a4 = t4.length - 1; a4 >= 0; a4--) if (t4[a4]) for (var s3 in e4) t4[a4].prototype[s3] = e4[s3];
        i2.Set && i2.Set.inherit && i2.Set.inherit();
      }, i2.invent = function(t4) {
        var e4 = "function" == typeof t4.create ? t4.create : function() {
          this.constructor.call(this, i2.create(t4.create));
        };
        return t4.inherit && (e4.prototype = new t4.inherit()), t4.extend && i2.extend(e4, t4.extend), t4.construct && i2.extend(t4.parent || i2.Container, t4.construct), e4;
      }, i2.adopt = function(e4) {
        return e4 ? e4.instance ? e4.instance : ((a4 = "svg" == e4.nodeName ? e4.parentNode instanceof t3.SVGElement ? new i2.Nested() : new i2.Doc() : "linearGradient" == e4.nodeName ? new i2.Gradient("linear") : "radialGradient" == e4.nodeName ? new i2.Gradient("radial") : i2[c3(e4.nodeName)] ? new i2[c3(e4.nodeName)]() : new i2.Element(e4)).type = e4.nodeName, a4.node = e4, e4.instance = a4, a4 instanceof i2.Doc && a4.namespace().defs(), a4.setData(JSON.parse(e4.getAttribute("svgjs:data")) || {}), a4) : null;
        var a4;
      }, i2.prepare = function() {
        var t4 = e3.getElementsByTagName("body")[0], a4 = (t4 ? new i2.Doc(t4) : i2.adopt(e3.documentElement).nested()).size(2, 0);
        i2.parser = { body: t4 || e3.documentElement, draw: a4.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node, poly: a4.polyline().node, path: a4.path().node, native: i2.create("svg") };
      }, i2.parser = { native: i2.create("svg") }, e3.addEventListener("DOMContentLoaded", function() {
        i2.parser.draw || i2.prepare();
      }, false), i2.regex = { numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i, hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i, rgb: /rgb\((\d+),(\d+),(\d+)\)/, reference: /#([a-z0-9\-_]+)/i, transforms: /\)\s*,?\s*/, whitespace: /\s/g, isHex: /^#[a-f0-9]{3,6}$/i, isRgb: /^rgb\(/, isCss: /[^:]+:[^;]+;?/, isBlank: /^(\s+)?$/, isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, isPercent: /^-?[\d\.]+%$/, isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i, delimiter: /[\s,]+/, hyphen: /([^e])\-/gi, pathLetters: /[MLHVCSQTAZ]/gi, isPathLetter: /[MLHVCSQTAZ]/i, numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi, dots: /\./g }, i2.utils = { map: function(t4, e4) {
        for (var i3 = t4.length, a4 = [], s3 = 0; s3 < i3; s3++) a4.push(e4(t4[s3]));
        return a4;
      }, filter: function(t4, e4) {
        for (var i3 = t4.length, a4 = [], s3 = 0; s3 < i3; s3++) e4(t4[s3]) && a4.push(t4[s3]);
        return a4;
      }, filterSVGElements: function(e4) {
        return this.filter(e4, function(e5) {
          return e5 instanceof t3.SVGElement;
        });
      } }, i2.defaults = { attrs: { "fill-opacity": 1, "stroke-opacity": 1, "stroke-width": 0, "stroke-linejoin": "miter", "stroke-linecap": "butt", fill: "#000000", stroke: "#000000", opacity: 1, x: 0, y: 0, cx: 0, cy: 0, width: 0, height: 0, r: 0, rx: 0, ry: 0, offset: 0, "stop-opacity": 1, "stop-color": "#000000", "font-size": 16, "font-family": "Helvetica, Arial, sans-serif", "text-anchor": "start" } }, i2.Color = function(t4) {
        var e4, a4;
        this.r = 0, this.g = 0, this.b = 0, t4 && ("string" == typeof t4 ? i2.regex.isRgb.test(t4) ? (e4 = i2.regex.rgb.exec(t4.replace(i2.regex.whitespace, "")), this.r = parseInt(e4[1]), this.g = parseInt(e4[2]), this.b = parseInt(e4[3])) : i2.regex.isHex.test(t4) && (e4 = i2.regex.hex.exec(4 == (a4 = t4).length ? ["#", a4.substring(1, 2), a4.substring(1, 2), a4.substring(2, 3), a4.substring(2, 3), a4.substring(3, 4), a4.substring(3, 4)].join("") : a4), this.r = parseInt(e4[1], 16), this.g = parseInt(e4[2], 16), this.b = parseInt(e4[3], 16)) : "object" === x(t4) && (this.r = t4.r, this.g = t4.g, this.b = t4.b));
      }, i2.extend(i2.Color, { toString: function() {
        return this.toHex();
      }, toHex: function() {
        return "#" + d2(this.r) + d2(this.g) + d2(this.b);
      }, toRgb: function() {
        return "rgb(" + [this.r, this.g, this.b].join() + ")";
      }, brightness: function() {
        return this.r / 255 * 0.3 + this.g / 255 * 0.59 + this.b / 255 * 0.11;
      }, morph: function(t4) {
        return this.destination = new i2.Color(t4), this;
      }, at: function(t4) {
        return this.destination ? (t4 = t4 < 0 ? 0 : t4 > 1 ? 1 : t4, new i2.Color({ r: ~~(this.r + (this.destination.r - this.r) * t4), g: ~~(this.g + (this.destination.g - this.g) * t4), b: ~~(this.b + (this.destination.b - this.b) * t4) })) : this;
      } }), i2.Color.test = function(t4) {
        return t4 += "", i2.regex.isHex.test(t4) || i2.regex.isRgb.test(t4);
      }, i2.Color.isRgb = function(t4) {
        return t4 && "number" == typeof t4.r && "number" == typeof t4.g && "number" == typeof t4.b;
      }, i2.Color.isColor = function(t4) {
        return i2.Color.isRgb(t4) || i2.Color.test(t4);
      }, i2.Array = function(t4, e4) {
        0 == (t4 = (t4 || []).valueOf()).length && e4 && (t4 = e4.valueOf()), this.value = this.parse(t4);
      }, i2.extend(i2.Array, { toString: function() {
        return this.value.join(" ");
      }, valueOf: function() {
        return this.value;
      }, parse: function(t4) {
        return t4 = t4.valueOf(), Array.isArray(t4) ? t4 : this.split(t4);
      } }), i2.PointArray = function(t4, e4) {
        i2.Array.call(this, t4, e4 || [[0, 0]]);
      }, i2.PointArray.prototype = new i2.Array(), i2.PointArray.prototype.constructor = i2.PointArray;
      for (var a3 = { M: function(t4, e4, i3) {
        return e4.x = i3.x = t4[0], e4.y = i3.y = t4[1], ["M", e4.x, e4.y];
      }, L: function(t4, e4) {
        return e4.x = t4[0], e4.y = t4[1], ["L", t4[0], t4[1]];
      }, H: function(t4, e4) {
        return e4.x = t4[0], ["H", t4[0]];
      }, V: function(t4, e4) {
        return e4.y = t4[0], ["V", t4[0]];
      }, C: function(t4, e4) {
        return e4.x = t4[4], e4.y = t4[5], ["C", t4[0], t4[1], t4[2], t4[3], t4[4], t4[5]];
      }, Q: function(t4, e4) {
        return e4.x = t4[2], e4.y = t4[3], ["Q", t4[0], t4[1], t4[2], t4[3]];
      }, S: function(t4, e4) {
        return e4.x = t4[2], e4.y = t4[3], ["S", t4[0], t4[1], t4[2], t4[3]];
      }, Z: function(t4, e4, i3) {
        return e4.x = i3.x, e4.y = i3.y, ["Z"];
      } }, s2 = "mlhvqtcsaz".split(""), r3 = 0, o3 = s2.length; r3 < o3; ++r3) a3[s2[r3]] = /* @__PURE__ */ function(t4) {
        return function(e4, i3, s3) {
          if ("H" == t4) e4[0] = e4[0] + i3.x;
          else if ("V" == t4) e4[0] = e4[0] + i3.y;
          else if ("A" == t4) e4[5] = e4[5] + i3.x, e4[6] = e4[6] + i3.y;
          else for (var r4 = 0, o4 = e4.length; r4 < o4; ++r4) e4[r4] = e4[r4] + (r4 % 2 ? i3.y : i3.x);
          if (a3 && "function" == typeof a3[t4]) return a3[t4](e4, i3, s3);
        };
      }(s2[r3].toUpperCase());
      i2.PathArray = function(t4, e4) {
        i2.Array.call(this, t4, e4 || [["M", 0, 0]]);
      }, i2.PathArray.prototype = new i2.Array(), i2.PathArray.prototype.constructor = i2.PathArray, i2.extend(i2.PathArray, { toString: function() {
        return function(t4) {
          for (var e4 = 0, i3 = t4.length, a4 = ""; e4 < i3; e4++) a4 += t4[e4][0], null != t4[e4][1] && (a4 += t4[e4][1], null != t4[e4][2] && (a4 += " ", a4 += t4[e4][2], null != t4[e4][3] && (a4 += " ", a4 += t4[e4][3], a4 += " ", a4 += t4[e4][4], null != t4[e4][5] && (a4 += " ", a4 += t4[e4][5], a4 += " ", a4 += t4[e4][6], null != t4[e4][7] && (a4 += " ", a4 += t4[e4][7])))));
          return a4 + " ";
        }(this.value);
      }, move: function(t4, e4) {
        var i3 = this.bbox();
        return i3.x, i3.y, this;
      }, at: function(t4) {
        if (!this.destination) return this;
        for (var e4 = this.value, a4 = this.destination.value, s3 = [], r4 = new i2.PathArray(), o4 = 0, n3 = e4.length; o4 < n3; o4++) {
          s3[o4] = [e4[o4][0]];
          for (var l3 = 1, h3 = e4[o4].length; l3 < h3; l3++) s3[o4][l3] = e4[o4][l3] + (a4[o4][l3] - e4[o4][l3]) * t4;
          "A" === s3[o4][0] && (s3[o4][4] = +(0 != s3[o4][4]), s3[o4][5] = +(0 != s3[o4][5]));
        }
        return r4.value = s3, r4;
      }, parse: function(t4) {
        if (t4 instanceof i2.PathArray) return t4.valueOf();
        var e4, s3 = { M: 2, L: 2, H: 1, V: 1, C: 6, S: 4, Q: 4, T: 2, A: 7, Z: 0 };
        t4 = "string" == typeof t4 ? t4.replace(i2.regex.numbersWithDots, l2).replace(i2.regex.pathLetters, " $& ").replace(i2.regex.hyphen, "$1 -").trim().split(i2.regex.delimiter) : t4.reduce(function(t5, e5) {
          return [].concat.call(t5, e5);
        }, []);
        var r4 = [], o4 = new i2.Point(), n3 = new i2.Point(), h3 = 0, c4 = t4.length;
        do {
          i2.regex.isPathLetter.test(t4[h3]) ? (e4 = t4[h3], ++h3) : "M" == e4 ? e4 = "L" : "m" == e4 && (e4 = "l"), r4.push(a3[e4].call(null, t4.slice(h3, h3 += s3[e4.toUpperCase()]).map(parseFloat), o4, n3));
        } while (c4 > h3);
        return r4;
      }, bbox: function() {
        return i2.parser.draw || i2.prepare(), i2.parser.path.setAttribute("d", this.toString()), i2.parser.path.getBBox();
      } }), i2.Number = i2.invent({ create: function(t4, e4) {
        this.value = 0, this.unit = e4 || "", "number" == typeof t4 ? this.value = isNaN(t4) ? 0 : isFinite(t4) ? t4 : t4 < 0 ? -34e37 : 34e37 : "string" == typeof t4 ? (e4 = t4.match(i2.regex.numberAndUnit)) && (this.value = parseFloat(e4[1]), "%" == e4[5] ? this.value /= 100 : "s" == e4[5] && (this.value *= 1e3), this.unit = e4[5]) : t4 instanceof i2.Number && (this.value = t4.valueOf(), this.unit = t4.unit);
      }, extend: { toString: function() {
        return ("%" == this.unit ? ~~(1e8 * this.value) / 1e6 : "s" == this.unit ? this.value / 1e3 : this.value) + this.unit;
      }, toJSON: function() {
        return this.toString();
      }, valueOf: function() {
        return this.value;
      }, plus: function(t4) {
        return t4 = new i2.Number(t4), new i2.Number(this + t4, this.unit || t4.unit);
      }, minus: function(t4) {
        return t4 = new i2.Number(t4), new i2.Number(this - t4, this.unit || t4.unit);
      }, times: function(t4) {
        return t4 = new i2.Number(t4), new i2.Number(this * t4, this.unit || t4.unit);
      }, divide: function(t4) {
        return t4 = new i2.Number(t4), new i2.Number(this / t4, this.unit || t4.unit);
      }, to: function(t4) {
        var e4 = new i2.Number(this);
        return "string" == typeof t4 && (e4.unit = t4), e4;
      }, morph: function(t4) {
        return this.destination = new i2.Number(t4), t4.relative && (this.destination.value += this.value), this;
      }, at: function(t4) {
        return this.destination ? new i2.Number(this.destination).minus(this).times(t4).plus(this) : this;
      } } }), i2.Element = i2.invent({ create: function(t4) {
        this._stroke = i2.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t4) && (this.type = t4.nodeName, this.node.instance = this, this._stroke = t4.getAttribute("stroke") || this._stroke);
      }, extend: { x: function(t4) {
        return this.attr("x", t4);
      }, y: function(t4) {
        return this.attr("y", t4);
      }, cx: function(t4) {
        return null == t4 ? this.x() + this.width() / 2 : this.x(t4 - this.width() / 2);
      }, cy: function(t4) {
        return null == t4 ? this.y() + this.height() / 2 : this.y(t4 - this.height() / 2);
      }, move: function(t4, e4) {
        return this.x(t4).y(e4);
      }, center: function(t4, e4) {
        return this.cx(t4).cy(e4);
      }, width: function(t4) {
        return this.attr("width", t4);
      }, height: function(t4) {
        return this.attr("height", t4);
      }, size: function(t4, e4) {
        var a4 = g2(this, t4, e4);
        return this.width(new i2.Number(a4.width)).height(new i2.Number(a4.height));
      }, clone: function(t4) {
        this.writeDataToDom();
        var e4 = f2(this.node.cloneNode(true));
        return t4 ? t4.add(e4) : this.after(e4), e4;
      }, remove: function() {
        return this.parent() && this.parent().removeElement(this), this;
      }, replace: function(t4) {
        return this.after(t4).remove(), t4;
      }, addTo: function(t4) {
        return t4.put(this);
      }, putIn: function(t4) {
        return t4.add(this);
      }, id: function(t4) {
        return this.attr("id", t4);
      }, show: function() {
        return this.style("display", "");
      }, hide: function() {
        return this.style("display", "none");
      }, visible: function() {
        return "none" != this.style("display");
      }, toString: function() {
        return this.attr("id");
      }, classes: function() {
        var t4 = this.attr("class");
        return null == t4 ? [] : t4.trim().split(i2.regex.delimiter);
      }, hasClass: function(t4) {
        return -1 != this.classes().indexOf(t4);
      }, addClass: function(t4) {
        if (!this.hasClass(t4)) {
          var e4 = this.classes();
          e4.push(t4), this.attr("class", e4.join(" "));
        }
        return this;
      }, removeClass: function(t4) {
        return this.hasClass(t4) && this.attr("class", this.classes().filter(function(e4) {
          return e4 != t4;
        }).join(" ")), this;
      }, toggleClass: function(t4) {
        return this.hasClass(t4) ? this.removeClass(t4) : this.addClass(t4);
      }, reference: function(t4) {
        return i2.get(this.attr(t4));
      }, parent: function(e4) {
        var a4 = this;
        if (!a4.node.parentNode) return null;
        if (a4 = i2.adopt(a4.node.parentNode), !e4) return a4;
        for (; a4 && a4.node instanceof t3.SVGElement; ) {
          if ("string" == typeof e4 ? a4.matches(e4) : a4 instanceof e4) return a4;
          if (!a4.node.parentNode || "#document" == a4.node.parentNode.nodeName) return null;
          a4 = i2.adopt(a4.node.parentNode);
        }
      }, doc: function() {
        return this instanceof i2.Doc ? this : this.parent(i2.Doc);
      }, parents: function(t4) {
        var e4 = [], i3 = this;
        do {
          if (!(i3 = i3.parent(t4)) || !i3.node) break;
          e4.push(i3);
        } while (i3.parent);
        return e4;
      }, matches: function(t4) {
        return function(t5, e4) {
          return (t5.matches || t5.matchesSelector || t5.msMatchesSelector || t5.mozMatchesSelector || t5.webkitMatchesSelector || t5.oMatchesSelector).call(t5, e4);
        }(this.node, t4);
      }, native: function() {
        return this.node;
      }, svg: function(t4) {
        var a4 = e3.createElementNS("http://www.w3.org/2000/svg", "svg");
        if (!(t4 && this instanceof i2.Parent)) return a4.appendChild(t4 = e3.createElementNS("http://www.w3.org/2000/svg", "svg")), this.writeDataToDom(), t4.appendChild(this.node.cloneNode(true)), a4.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
        a4.innerHTML = "<svg>" + t4.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";
        for (var s3 = 0, r4 = a4.firstChild.childNodes.length; s3 < r4; s3++) this.node.appendChild(a4.firstChild.firstChild);
        return this;
      }, writeDataToDom: function() {
        return (this.each || this.lines) && (this.each ? this : this.lines()).each(function() {
          this.writeDataToDom();
        }), this.node.removeAttribute("svgjs:data"), Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)), this;
      }, setData: function(t4) {
        return this.dom = t4, this;
      }, is: function(t4) {
        return function(t5, e4) {
          return t5 instanceof e4;
        }(this, t4);
      } } }), i2.easing = { "-": function(t4) {
        return t4;
      }, "<>": function(t4) {
        return -Math.cos(t4 * Math.PI) / 2 + 0.5;
      }, ">": function(t4) {
        return Math.sin(t4 * Math.PI / 2);
      }, "<": function(t4) {
        return 1 - Math.cos(t4 * Math.PI / 2);
      } }, i2.morph = function(t4) {
        return function(e4, a4) {
          return new i2.MorphObj(e4, a4).at(t4);
        };
      }, i2.Situation = i2.invent({ create: function(t4) {
        this.init = false, this.reversed = false, this.reversing = false, this.duration = new i2.Number(t4.duration).valueOf(), this.delay = new i2.Number(t4.delay).valueOf(), this.start = +/* @__PURE__ */ new Date() + this.delay, this.finish = this.start + this.duration, this.ease = t4.ease, this.loop = 0, this.loops = false, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};
      } }), i2.FX = i2.invent({ create: function(t4) {
        this._target = t4, this.situations = [], this.active = false, this.situation = null, this.paused = false, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;
      }, extend: { animate: function(t4, e4, a4) {
        "object" === x(t4) && (e4 = t4.ease, a4 = t4.delay, t4 = t4.duration);
        var s3 = new i2.Situation({ duration: t4 || 1e3, delay: a4 || 0, ease: i2.easing[e4 || "-"] || e4 });
        return this.queue(s3), this;
      }, target: function(t4) {
        return t4 && t4 instanceof i2.Element ? (this._target = t4, this) : this._target;
      }, timeToAbsPos: function(t4) {
        return (t4 - this.situation.start) / (this.situation.duration / this._speed);
      }, absPosToTime: function(t4) {
        return this.situation.duration / this._speed * t4 + this.situation.start;
      }, startAnimFrame: function() {
        this.stopAnimFrame(), this.animationFrame = t3.requestAnimationFrame(function() {
          this.step();
        }.bind(this));
      }, stopAnimFrame: function() {
        t3.cancelAnimationFrame(this.animationFrame);
      }, start: function() {
        return !this.active && this.situation && (this.active = true, this.startCurrent()), this;
      }, startCurrent: function() {
        return this.situation.start = +/* @__PURE__ */ new Date() + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();
      }, queue: function(t4) {
        return ("function" == typeof t4 || t4 instanceof i2.Situation) && this.situations.push(t4), this.situation || (this.situation = this.situations.shift()), this;
      }, dequeue: function() {
        return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof i2.Situation ? this.start() : this.situation.call(this)), this;
      }, initAnimations: function() {
        var t4, e4 = this.situation;
        if (e4.init) return this;
        for (var a4 in e4.animations) {
          t4 = this.target()[a4](), Array.isArray(t4) || (t4 = [t4]), Array.isArray(e4.animations[a4]) || (e4.animations[a4] = [e4.animations[a4]]);
          for (var s3 = t4.length; s3--; ) e4.animations[a4][s3] instanceof i2.Number && (t4[s3] = new i2.Number(t4[s3])), e4.animations[a4][s3] = t4[s3].morph(e4.animations[a4][s3]);
        }
        for (var a4 in e4.attrs) e4.attrs[a4] = new i2.MorphObj(this.target().attr(a4), e4.attrs[a4]);
        for (var a4 in e4.styles) e4.styles[a4] = new i2.MorphObj(this.target().style(a4), e4.styles[a4]);
        return e4.initialTransformation = this.target().matrixify(), e4.init = true, this;
      }, clearQueue: function() {
        return this.situations = [], this;
      }, clearCurrent: function() {
        return this.situation = null, this;
      }, stop: function(t4, e4) {
        var i3 = this.active;
        return this.active = false, e4 && this.clearQueue(), t4 && this.situation && (!i3 && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();
      }, after: function(t4) {
        var e4 = this.last();
        return this.target().on("finished.fx", function i3(a4) {
          a4.detail.situation == e4 && (t4.call(this, e4), this.off("finished.fx", i3));
        }), this._callStart();
      }, during: function(t4) {
        var e4 = this.last(), a4 = function(a5) {
          a5.detail.situation == e4 && t4.call(this, a5.detail.pos, i2.morph(a5.detail.pos), a5.detail.eased, e4);
        };
        return this.target().off("during.fx", a4).on("during.fx", a4), this.after(function() {
          this.off("during.fx", a4);
        }), this._callStart();
      }, afterAll: function(t4) {
        var e4 = function e5(i3) {
          t4.call(this), this.off("allfinished.fx", e5);
        };
        return this.target().off("allfinished.fx", e4).on("allfinished.fx", e4), this._callStart();
      }, last: function() {
        return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;
      }, add: function(t4, e4, i3) {
        return this.last()[i3 || "animations"][t4] = e4, this._callStart();
      }, step: function(t4) {
        var e4, i3, a4;
        t4 || (this.absPos = this.timeToAbsPos(+/* @__PURE__ */ new Date())), false !== this.situation.loops ? (e4 = Math.max(this.absPos, 0), i3 = Math.floor(e4), true === this.situation.loops || i3 < this.situation.loops ? (this.pos = e4 - i3, a4 = this.situation.loop, this.situation.loop = i3) : (this.absPos = this.situation.loops, this.pos = 1, a4 = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a4) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);
        var s3 = this.situation.ease(this.pos);
        for (var r4 in this.situation.once) r4 > this.lastPos && r4 <= s3 && (this.situation.once[r4].call(this.target(), this.pos, s3), delete this.situation.once[r4]);
        return this.active && this.target().fire("during", { pos: this.pos, eased: s3, fx: this, situation: this.situation }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire("finished", { fx: this, situation: this.situation }), this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), this.active = false)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s3, this) : this;
      }, eachAt: function() {
        var t4, e4 = this, a4 = this.target(), s3 = this.situation;
        for (var r4 in s3.animations) t4 = [].concat(s3.animations[r4]).map(function(t5) {
          return "string" != typeof t5 && t5.at ? t5.at(s3.ease(e4.pos), e4.pos) : t5;
        }), a4[r4].apply(a4, t4);
        for (var r4 in s3.attrs) t4 = [r4].concat(s3.attrs[r4]).map(function(t5) {
          return "string" != typeof t5 && t5.at ? t5.at(s3.ease(e4.pos), e4.pos) : t5;
        }), a4.attr.apply(a4, t4);
        for (var r4 in s3.styles) t4 = [r4].concat(s3.styles[r4]).map(function(t5) {
          return "string" != typeof t5 && t5.at ? t5.at(s3.ease(e4.pos), e4.pos) : t5;
        }), a4.style.apply(a4, t4);
        if (s3.transforms.length) {
          t4 = s3.initialTransformation, r4 = 0;
          for (var o4 = s3.transforms.length; r4 < o4; r4++) {
            var n3 = s3.transforms[r4];
            n3 instanceof i2.Matrix ? t4 = n3.relative ? t4.multiply(new i2.Matrix().morph(n3).at(s3.ease(this.pos))) : t4.morph(n3).at(s3.ease(this.pos)) : (n3.relative || n3.undo(t4.extract()), t4 = t4.multiply(n3.at(s3.ease(this.pos))));
          }
          a4.matrix(t4);
        }
        return this;
      }, once: function(t4, e4, i3) {
        var a4 = this.last();
        return i3 || (t4 = a4.ease(t4)), a4.once[t4] = e4, this;
      }, _callStart: function() {
        return setTimeout(function() {
          this.start();
        }.bind(this), 0), this;
      } }, parent: i2.Element, construct: { animate: function(t4, e4, a4) {
        return (this.fx || (this.fx = new i2.FX(this))).animate(t4, e4, a4);
      }, delay: function(t4) {
        return (this.fx || (this.fx = new i2.FX(this))).delay(t4);
      }, stop: function(t4, e4) {
        return this.fx && this.fx.stop(t4, e4), this;
      }, finish: function() {
        return this.fx && this.fx.finish(), this;
      } } }), i2.MorphObj = i2.invent({ create: function(t4, e4) {
        return i2.Color.isColor(e4) ? new i2.Color(t4).morph(e4) : i2.regex.delimiter.test(t4) ? i2.regex.pathLetters.test(t4) ? new i2.PathArray(t4).morph(e4) : new i2.Array(t4).morph(e4) : i2.regex.numberAndUnit.test(e4) ? new i2.Number(t4).morph(e4) : (this.value = t4, void (this.destination = e4));
      }, extend: { at: function(t4, e4) {
        return e4 < 1 ? this.value : this.destination;
      }, valueOf: function() {
        return this.value;
      } } }), i2.extend(i2.FX, { attr: function(t4, e4, i3) {
        if ("object" === x(t4)) for (var a4 in t4) this.attr(a4, t4[a4]);
        else this.add(t4, e4, "attrs");
        return this;
      }, plot: function(t4, e4, i3, a4) {
        return 4 == arguments.length ? this.plot([t4, e4, i3, a4]) : this.add("plot", new (this.target()).morphArray(t4));
      } }), i2.Box = i2.invent({ create: function(t4, e4, a4, s3) {
        if (!("object" !== x(t4) || t4 instanceof i2.Element)) return i2.Box.call(this, null != t4.left ? t4.left : t4.x, null != t4.top ? t4.top : t4.y, t4.width, t4.height);
        var r4;
        4 == arguments.length && (this.x = t4, this.y = e4, this.width = a4, this.height = s3), null == (r4 = this).x && (r4.x = 0, r4.y = 0, r4.width = 0, r4.height = 0), r4.w = r4.width, r4.h = r4.height, r4.x2 = r4.x + r4.width, r4.y2 = r4.y + r4.height, r4.cx = r4.x + r4.width / 2, r4.cy = r4.y + r4.height / 2;
      } }), i2.BBox = i2.invent({ create: function(t4) {
        if (i2.Box.apply(this, [].slice.call(arguments)), t4 instanceof i2.Element) {
          var a4;
          try {
            if (!e3.documentElement.contains) {
              for (var s3 = t4.node; s3.parentNode; ) s3 = s3.parentNode;
              if (s3 != e3) throw new Error("Element not in the dom");
            }
            a4 = t4.node.getBBox();
          } catch (e4) {
            if (t4 instanceof i2.Shape) {
              i2.parser.draw || i2.prepare();
              var r4 = t4.clone(i2.parser.draw.instance).show();
              r4 && r4.node && "function" == typeof r4.node.getBBox && (a4 = r4.node.getBBox()), r4 && "function" == typeof r4.remove && r4.remove();
            } else a4 = { x: t4.node.clientLeft, y: t4.node.clientTop, width: t4.node.clientWidth, height: t4.node.clientHeight };
          }
          i2.Box.call(this, a4);
        }
      }, inherit: i2.Box, parent: i2.Element, construct: { bbox: function() {
        return new i2.BBox(this);
      } } }), i2.BBox.prototype.constructor = i2.BBox, i2.Matrix = i2.invent({ create: function(t4) {
        var e4 = p2([1, 0, 0, 1, 0, 0]);
        t4 = null === t4 ? e4 : t4 instanceof i2.Element ? t4.matrixify() : "string" == typeof t4 ? p2(t4.split(i2.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? p2([].slice.call(arguments)) : Array.isArray(t4) ? p2(t4) : t4 && "object" === x(t4) ? t4 : e4;
        for (var a4 = v2.length - 1; a4 >= 0; --a4) this[v2[a4]] = null != t4[v2[a4]] ? t4[v2[a4]] : e4[v2[a4]];
      }, extend: { extract: function() {
        var t4 = u2(this, 0, 1);
        u2(this, 1, 0);
        var e4 = 180 / Math.PI * Math.atan2(t4.y, t4.x) - 90;
        return { x: this.e, y: this.f, transformedX: (this.e * Math.cos(e4 * Math.PI / 180) + this.f * Math.sin(e4 * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b), transformedY: (this.f * Math.cos(e4 * Math.PI / 180) + this.e * Math.sin(-e4 * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d), rotation: e4, a: this.a, b: this.b, c: this.c, d: this.d, e: this.e, f: this.f, matrix: new i2.Matrix(this) };
      }, clone: function() {
        return new i2.Matrix(this);
      }, morph: function(t4) {
        return this.destination = new i2.Matrix(t4), this;
      }, multiply: function(t4) {
        return new i2.Matrix(this.native().multiply(function(t5) {
          return t5 instanceof i2.Matrix || (t5 = new i2.Matrix(t5)), t5;
        }(t4).native()));
      }, inverse: function() {
        return new i2.Matrix(this.native().inverse());
      }, translate: function(t4, e4) {
        return new i2.Matrix(this.native().translate(t4 || 0, e4 || 0));
      }, native: function() {
        for (var t4 = i2.parser.native.createSVGMatrix(), e4 = v2.length - 1; e4 >= 0; e4--) t4[v2[e4]] = this[v2[e4]];
        return t4;
      }, toString: function() {
        return "matrix(" + b2(this.a) + "," + b2(this.b) + "," + b2(this.c) + "," + b2(this.d) + "," + b2(this.e) + "," + b2(this.f) + ")";
      } }, parent: i2.Element, construct: { ctm: function() {
        return new i2.Matrix(this.node.getCTM());
      }, screenCTM: function() {
        if (this instanceof i2.Nested) {
          var t4 = this.rect(1, 1), e4 = t4.node.getScreenCTM();
          return t4.remove(), new i2.Matrix(e4);
        }
        return new i2.Matrix(this.node.getScreenCTM());
      } } }), i2.Point = i2.invent({ create: function(t4, e4) {
        var i3;
        i3 = Array.isArray(t4) ? { x: t4[0], y: t4[1] } : "object" === x(t4) ? { x: t4.x, y: t4.y } : null != t4 ? { x: t4, y: null != e4 ? e4 : t4 } : { x: 0, y: 0 }, this.x = i3.x, this.y = i3.y;
      }, extend: { clone: function() {
        return new i2.Point(this);
      }, morph: function(t4, e4) {
        return this.destination = new i2.Point(t4, e4), this;
      } } }), i2.extend(i2.Element, { point: function(t4, e4) {
        return new i2.Point(t4, e4).transform(this.screenCTM().inverse());
      } }), i2.extend(i2.Element, { attr: function(t4, e4, a4) {
        if (null == t4) {
          for (t4 = {}, a4 = (e4 = this.node.attributes).length - 1; a4 >= 0; a4--) t4[e4[a4].nodeName] = i2.regex.isNumber.test(e4[a4].nodeValue) ? parseFloat(e4[a4].nodeValue) : e4[a4].nodeValue;
          return t4;
        }
        if ("object" === x(t4)) for (var s3 in t4) this.attr(s3, t4[s3]);
        else if (null === e4) this.node.removeAttribute(t4);
        else {
          if (null == e4) return null == (e4 = this.node.getAttribute(t4)) ? i2.defaults.attrs[t4] : i2.regex.isNumber.test(e4) ? parseFloat(e4) : e4;
          "stroke-width" == t4 ? this.attr("stroke", parseFloat(e4) > 0 ? this._stroke : null) : "stroke" == t4 && (this._stroke = e4), "fill" != t4 && "stroke" != t4 || (i2.regex.isImage.test(e4) && (e4 = this.doc().defs().image(e4, 0, 0)), e4 instanceof i2.Image && (e4 = this.doc().defs().pattern(0, 0, function() {
            this.add(e4);
          }))), "number" == typeof e4 ? e4 = new i2.Number(e4) : i2.Color.isColor(e4) ? e4 = new i2.Color(e4) : Array.isArray(e4) && (e4 = new i2.Array(e4)), "leading" == t4 ? this.leading && this.leading(e4) : "string" == typeof a4 ? this.node.setAttributeNS(a4, t4, e4.toString()) : this.node.setAttribute(t4, e4.toString()), !this.rebuild || "font-size" != t4 && "x" != t4 || this.rebuild(t4, e4);
        }
        return this;
      } }), i2.extend(i2.Element, { transform: function(t4, e4) {
        var a4;
        return "object" !== x(t4) ? (a4 = new i2.Matrix(this).extract(), "string" == typeof t4 ? a4[t4] : a4) : (a4 = new i2.Matrix(this), e4 = !!e4 || !!t4.relative, null != t4.a && (a4 = e4 ? a4.multiply(new i2.Matrix(t4)) : new i2.Matrix(t4)), this.attr("transform", a4));
      } }), i2.extend(i2.Element, { untransform: function() {
        return this.attr("transform", null);
      }, matrixify: function() {
        return (this.attr("transform") || "").split(i2.regex.transforms).slice(0, -1).map(function(t4) {
          var e4 = t4.trim().split("(");
          return [e4[0], e4[1].split(i2.regex.delimiter).map(function(t5) {
            return parseFloat(t5);
          })];
        }).reduce(function(t4, e4) {
          return "matrix" == e4[0] ? t4.multiply(p2(e4[1])) : t4[e4[0]].apply(t4, e4[1]);
        }, new i2.Matrix());
      }, toParent: function(t4) {
        if (this == t4) return this;
        var e4 = this.screenCTM(), i3 = t4.screenCTM().inverse();
        return this.addTo(t4).untransform().transform(i3.multiply(e4)), this;
      }, toDoc: function() {
        return this.toParent(this.doc());
      } }), i2.Transformation = i2.invent({ create: function(t4, e4) {
        if (arguments.length > 1 && "boolean" != typeof e4) return this.constructor.call(this, [].slice.call(arguments));
        if (Array.isArray(t4)) for (var i3 = 0, a4 = this.arguments.length; i3 < a4; ++i3) this[this.arguments[i3]] = t4[i3];
        else if (t4 && "object" === x(t4)) for (i3 = 0, a4 = this.arguments.length; i3 < a4; ++i3) this[this.arguments[i3]] = t4[this.arguments[i3]];
        this.inversed = false, true === e4 && (this.inversed = true);
      } }), i2.Translate = i2.invent({ parent: i2.Matrix, inherit: i2.Transformation, create: function(t4, e4) {
        this.constructor.apply(this, [].slice.call(arguments));
      }, extend: { arguments: ["transformedX", "transformedY"], method: "translate" } }), i2.extend(i2.Element, { style: function(t4, e4) {
        if (0 == arguments.length) return this.node.style.cssText || "";
        if (arguments.length < 2) if ("object" === x(t4)) for (var a4 in t4) this.style(a4, t4[a4]);
        else {
          if (!i2.regex.isCss.test(t4)) return this.node.style[h2(t4)];
          for (t4 = t4.split(/\s*;\s*/).filter(function(t5) {
            return !!t5;
          }).map(function(t5) {
            return t5.split(/\s*:\s*/);
          }); e4 = t4.pop(); ) this.style(e4[0], e4[1]);
        }
        else this.node.style[h2(t4)] = null === e4 || i2.regex.isBlank.test(e4) ? "" : e4;
        return this;
      } }), i2.Parent = i2.invent({ create: function(t4) {
        this.constructor.call(this, t4);
      }, inherit: i2.Element, extend: { children: function() {
        return i2.utils.map(i2.utils.filterSVGElements(this.node.childNodes), function(t4) {
          return i2.adopt(t4);
        });
      }, add: function(t4, e4) {
        return null == e4 ? this.node.appendChild(t4.node) : t4.node != this.node.childNodes[e4] && this.node.insertBefore(t4.node, this.node.childNodes[e4]), this;
      }, put: function(t4, e4) {
        return this.add(t4, e4), t4;
      }, has: function(t4) {
        return this.index(t4) >= 0;
      }, index: function(t4) {
        return [].slice.call(this.node.childNodes).indexOf(t4.node);
      }, get: function(t4) {
        return i2.adopt(this.node.childNodes[t4]);
      }, first: function() {
        return this.get(0);
      }, last: function() {
        return this.get(this.node.childNodes.length - 1);
      }, each: function(t4, e4) {
        for (var a4 = this.children(), s3 = 0, r4 = a4.length; s3 < r4; s3++) a4[s3] instanceof i2.Element && t4.apply(a4[s3], [s3, a4]), e4 && a4[s3] instanceof i2.Container && a4[s3].each(t4, e4);
        return this;
      }, removeElement: function(t4) {
        return this.node.removeChild(t4.node), this;
      }, clear: function() {
        for (; this.node.hasChildNodes(); ) this.node.removeChild(this.node.lastChild);
        return delete this._defs, this;
      }, defs: function() {
        return this.doc().defs();
      } } }), i2.extend(i2.Parent, { ungroup: function(t4, e4) {
        return 0 === e4 || this instanceof i2.Defs || this.node == i2.parser.draw || (t4 = t4 || (this instanceof i2.Doc ? this : this.parent(i2.Parent)), e4 = e4 || 1 / 0, this.each(function() {
          return this instanceof i2.Defs ? this : this instanceof i2.Parent ? this.ungroup(t4, e4 - 1) : this.toParent(t4);
        }), this.node.firstChild || this.remove()), this;
      }, flatten: function(t4, e4) {
        return this.ungroup(t4, e4);
      } }), i2.Container = i2.invent({ create: function(t4) {
        this.constructor.call(this, t4);
      }, inherit: i2.Parent }), i2.ViewBox = i2.invent({ parent: i2.Container, construct: {} }), ["click", "dblclick", "mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "touchstart", "touchmove", "touchleave", "touchend", "touchcancel"].forEach(function(t4) {
        i2.Element.prototype[t4] = function(e4) {
          return i2.on(this.node, t4, e4), this;
        };
      }), i2.listeners = [], i2.handlerMap = [], i2.listenerId = 0, i2.on = function(t4, e4, a4, s3, r4) {
        var o4 = a4.bind(s3 || t4.instance || t4), n3 = (i2.handlerMap.indexOf(t4) + 1 || i2.handlerMap.push(t4)) - 1, l3 = e4.split(".")[0], h3 = e4.split(".")[1] || "*";
        i2.listeners[n3] = i2.listeners[n3] || {}, i2.listeners[n3][l3] = i2.listeners[n3][l3] || {}, i2.listeners[n3][l3][h3] = i2.listeners[n3][l3][h3] || {}, a4._svgjsListenerId || (a4._svgjsListenerId = ++i2.listenerId), i2.listeners[n3][l3][h3][a4._svgjsListenerId] = o4, t4.addEventListener(l3, o4, r4 || { passive: false });
      }, i2.off = function(t4, e4, a4) {
        var s3 = i2.handlerMap.indexOf(t4), r4 = e4 && e4.split(".")[0], o4 = e4 && e4.split(".")[1], n3 = "";
        if (-1 != s3) if (a4) {
          if ("function" == typeof a4 && (a4 = a4._svgjsListenerId), !a4) return;
          i2.listeners[s3][r4] && i2.listeners[s3][r4][o4 || "*"] && (t4.removeEventListener(r4, i2.listeners[s3][r4][o4 || "*"][a4], false), delete i2.listeners[s3][r4][o4 || "*"][a4]);
        } else if (o4 && r4) {
          if (i2.listeners[s3][r4] && i2.listeners[s3][r4][o4]) {
            for (var l3 in i2.listeners[s3][r4][o4]) i2.off(t4, [r4, o4].join("."), l3);
            delete i2.listeners[s3][r4][o4];
          }
        } else if (o4) for (var h3 in i2.listeners[s3]) for (var n3 in i2.listeners[s3][h3]) o4 === n3 && i2.off(t4, [h3, o4].join("."));
        else if (r4) {
          if (i2.listeners[s3][r4]) {
            for (var n3 in i2.listeners[s3][r4]) i2.off(t4, [r4, n3].join("."));
            delete i2.listeners[s3][r4];
          }
        } else {
          for (var h3 in i2.listeners[s3]) i2.off(t4, h3);
          delete i2.listeners[s3], delete i2.handlerMap[s3];
        }
      }, i2.extend(i2.Element, { on: function(t4, e4, a4, s3) {
        return i2.on(this.node, t4, e4, a4, s3), this;
      }, off: function(t4, e4) {
        return i2.off(this.node, t4, e4), this;
      }, fire: function(e4, a4) {
        return e4 instanceof t3.Event ? this.node.dispatchEvent(e4) : this.node.dispatchEvent(e4 = new i2.CustomEvent(e4, { detail: a4, cancelable: true })), this._event = e4, this;
      }, event: function() {
        return this._event;
      } }), i2.Defs = i2.invent({ create: "defs", inherit: i2.Container }), i2.G = i2.invent({ create: "g", inherit: i2.Container, extend: { x: function(t4) {
        return null == t4 ? this.transform("x") : this.transform({ x: t4 - this.x() }, true);
      } }, construct: { group: function() {
        return this.put(new i2.G());
      } } }), i2.Doc = i2.invent({ create: function(t4) {
        t4 && ("svg" == (t4 = "string" == typeof t4 ? e3.getElementById(t4) : t4).nodeName ? this.constructor.call(this, t4) : (this.constructor.call(this, i2.create("svg")), t4.appendChild(this.node), this.size("100%", "100%")), this.namespace().defs());
      }, inherit: i2.Container, extend: { namespace: function() {
        return this.attr({ xmlns: i2.ns, version: "1.1" }).attr("xmlns:xlink", i2.xlink, i2.xmlns).attr("xmlns:svgjs", i2.svgjs, i2.xmlns);
      }, defs: function() {
        var t4;
        return this._defs || ((t4 = this.node.getElementsByTagName("defs")[0]) ? this._defs = i2.adopt(t4) : this._defs = new i2.Defs(), this.node.appendChild(this._defs.node)), this._defs;
      }, parent: function() {
        return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null;
      }, remove: function() {
        return this.parent() && this.parent().removeChild(this.node), this;
      }, clear: function() {
        for (; this.node.hasChildNodes(); ) this.node.removeChild(this.node.lastChild);
        return delete this._defs, i2.parser.draw && !i2.parser.draw.parentNode && this.node.appendChild(i2.parser.draw), this;
      }, clone: function(t4) {
        this.writeDataToDom();
        var e4 = this.node, i3 = f2(e4.cloneNode(true));
        return t4 ? (t4.node || t4).appendChild(i3.node) : e4.parentNode.insertBefore(i3.node, e4.nextSibling), i3;
      } } }), i2.extend(i2.Element, {}), i2.Gradient = i2.invent({ create: function(t4) {
        this.constructor.call(this, i2.create(t4 + "Gradient")), this.type = t4;
      }, inherit: i2.Container, extend: { at: function(t4, e4, a4) {
        return this.put(new i2.Stop()).update(t4, e4, a4);
      }, update: function(t4) {
        return this.clear(), "function" == typeof t4 && t4.call(this, this), this;
      }, fill: function() {
        return "url(#" + this.id() + ")";
      }, toString: function() {
        return this.fill();
      }, attr: function(t4, e4, a4) {
        return "transform" == t4 && (t4 = "gradientTransform"), i2.Container.prototype.attr.call(this, t4, e4, a4);
      } }, construct: { gradient: function(t4, e4) {
        return this.defs().gradient(t4, e4);
      } } }), i2.extend(i2.Gradient, i2.FX, { from: function(t4, e4) {
        return "radial" == (this._target || this).type ? this.attr({ fx: new i2.Number(t4), fy: new i2.Number(e4) }) : this.attr({ x1: new i2.Number(t4), y1: new i2.Number(e4) });
      }, to: function(t4, e4) {
        return "radial" == (this._target || this).type ? this.attr({ cx: new i2.Number(t4), cy: new i2.Number(e4) }) : this.attr({ x2: new i2.Number(t4), y2: new i2.Number(e4) });
      } }), i2.extend(i2.Defs, { gradient: function(t4, e4) {
        return this.put(new i2.Gradient(t4)).update(e4);
      } }), i2.Stop = i2.invent({ create: "stop", inherit: i2.Element, extend: { update: function(t4) {
        return ("number" == typeof t4 || t4 instanceof i2.Number) && (t4 = { offset: arguments[0], color: arguments[1], opacity: arguments[2] }), null != t4.opacity && this.attr("stop-opacity", t4.opacity), null != t4.color && this.attr("stop-color", t4.color), null != t4.offset && this.attr("offset", new i2.Number(t4.offset)), this;
      } } }), i2.Pattern = i2.invent({ create: "pattern", inherit: i2.Container, extend: { fill: function() {
        return "url(#" + this.id() + ")";
      }, update: function(t4) {
        return this.clear(), "function" == typeof t4 && t4.call(this, this), this;
      }, toString: function() {
        return this.fill();
      }, attr: function(t4, e4, a4) {
        return "transform" == t4 && (t4 = "patternTransform"), i2.Container.prototype.attr.call(this, t4, e4, a4);
      } }, construct: { pattern: function(t4, e4, i3) {
        return this.defs().pattern(t4, e4, i3);
      } } }), i2.extend(i2.Defs, { pattern: function(t4, e4, a4) {
        return this.put(new i2.Pattern()).update(a4).attr({ x: 0, y: 0, width: t4, height: e4, patternUnits: "userSpaceOnUse" });
      } }), i2.Shape = i2.invent({ create: function(t4) {
        this.constructor.call(this, t4);
      }, inherit: i2.Element }), i2.Symbol = i2.invent({ create: "symbol", inherit: i2.Container, construct: { symbol: function() {
        return this.put(new i2.Symbol());
      } } }), i2.Use = i2.invent({ create: "use", inherit: i2.Shape, extend: { element: function(t4, e4) {
        return this.attr("href", (e4 || "") + "#" + t4, i2.xlink);
      } }, construct: { use: function(t4, e4) {
        return this.put(new i2.Use()).element(t4, e4);
      } } }), i2.Rect = i2.invent({ create: "rect", inherit: i2.Shape, construct: { rect: function(t4, e4) {
        return this.put(new i2.Rect()).size(t4, e4);
      } } }), i2.Circle = i2.invent({ create: "circle", inherit: i2.Shape, construct: { circle: function(t4) {
        return this.put(new i2.Circle()).rx(new i2.Number(t4).divide(2)).move(0, 0);
      } } }), i2.extend(i2.Circle, i2.FX, { rx: function(t4) {
        return this.attr("r", t4);
      }, ry: function(t4) {
        return this.rx(t4);
      } }), i2.Ellipse = i2.invent({ create: "ellipse", inherit: i2.Shape, construct: { ellipse: function(t4, e4) {
        return this.put(new i2.Ellipse()).size(t4, e4).move(0, 0);
      } } }), i2.extend(i2.Ellipse, i2.Rect, i2.FX, { rx: function(t4) {
        return this.attr("rx", t4);
      }, ry: function(t4) {
        return this.attr("ry", t4);
      } }), i2.extend(i2.Circle, i2.Ellipse, { x: function(t4) {
        return null == t4 ? this.cx() - this.rx() : this.cx(t4 + this.rx());
      }, y: function(t4) {
        return null == t4 ? this.cy() - this.ry() : this.cy(t4 + this.ry());
      }, cx: function(t4) {
        return null == t4 ? this.attr("cx") : this.attr("cx", t4);
      }, cy: function(t4) {
        return null == t4 ? this.attr("cy") : this.attr("cy", t4);
      }, width: function(t4) {
        return null == t4 ? 2 * this.rx() : this.rx(new i2.Number(t4).divide(2));
      }, height: function(t4) {
        return null == t4 ? 2 * this.ry() : this.ry(new i2.Number(t4).divide(2));
      }, size: function(t4, e4) {
        var a4 = g2(this, t4, e4);
        return this.rx(new i2.Number(a4.width).divide(2)).ry(new i2.Number(a4.height).divide(2));
      } }), i2.Line = i2.invent({ create: "line", inherit: i2.Shape, extend: { array: function() {
        return new i2.PointArray([[this.attr("x1"), this.attr("y1")], [this.attr("x2"), this.attr("y2")]]);
      }, plot: function(t4, e4, a4, s3) {
        return null == t4 ? this.array() : (t4 = void 0 !== e4 ? { x1: t4, y1: e4, x2: a4, y2: s3 } : new i2.PointArray(t4).toLine(), this.attr(t4));
      }, move: function(t4, e4) {
        return this.attr(this.array().move(t4, e4).toLine());
      }, size: function(t4, e4) {
        var i3 = g2(this, t4, e4);
        return this.attr(this.array().size(i3.width, i3.height).toLine());
      } }, construct: { line: function(t4, e4, a4, s3) {
        return i2.Line.prototype.plot.apply(this.put(new i2.Line()), null != t4 ? [t4, e4, a4, s3] : [0, 0, 0, 0]);
      } } }), i2.Polyline = i2.invent({ create: "polyline", inherit: i2.Shape, construct: { polyline: function(t4) {
        return this.put(new i2.Polyline()).plot(t4 || new i2.PointArray());
      } } }), i2.Polygon = i2.invent({ create: "polygon", inherit: i2.Shape, construct: { polygon: function(t4) {
        return this.put(new i2.Polygon()).plot(t4 || new i2.PointArray());
      } } }), i2.extend(i2.Polyline, i2.Polygon, { array: function() {
        return this._array || (this._array = new i2.PointArray(this.attr("points")));
      }, plot: function(t4) {
        return null == t4 ? this.array() : this.clear().attr("points", "string" == typeof t4 ? t4 : this._array = new i2.PointArray(t4));
      }, clear: function() {
        return delete this._array, this;
      }, move: function(t4, e4) {
        return this.attr("points", this.array().move(t4, e4));
      }, size: function(t4, e4) {
        var i3 = g2(this, t4, e4);
        return this.attr("points", this.array().size(i3.width, i3.height));
      } }), i2.extend(i2.Line, i2.Polyline, i2.Polygon, { morphArray: i2.PointArray, x: function(t4) {
        return null == t4 ? this.bbox().x : this.move(t4, this.bbox().y);
      }, y: function(t4) {
        return null == t4 ? this.bbox().y : this.move(this.bbox().x, t4);
      }, width: function(t4) {
        var e4 = this.bbox();
        return null == t4 ? e4.width : this.size(t4, e4.height);
      }, height: function(t4) {
        var e4 = this.bbox();
        return null == t4 ? e4.height : this.size(e4.width, t4);
      } }), i2.Path = i2.invent({ create: "path", inherit: i2.Shape, extend: { morphArray: i2.PathArray, array: function() {
        return this._array || (this._array = new i2.PathArray(this.attr("d")));
      }, plot: function(t4) {
        return null == t4 ? this.array() : this.clear().attr("d", "string" == typeof t4 ? t4 : this._array = new i2.PathArray(t4));
      }, clear: function() {
        return delete this._array, this;
      } }, construct: { path: function(t4) {
        return this.put(new i2.Path()).plot(t4 || new i2.PathArray());
      } } }), i2.Image = i2.invent({ create: "image", inherit: i2.Shape, extend: { load: function(e4) {
        if (!e4) return this;
        var a4 = this, s3 = new t3.Image();
        return i2.on(s3, "load", function() {
          i2.off(s3);
          var t4 = a4.parent(i2.Pattern);
          null !== t4 && (0 == a4.width() && 0 == a4.height() && a4.size(s3.width, s3.height), t4 && 0 == t4.width() && 0 == t4.height() && t4.size(a4.width(), a4.height()), "function" == typeof a4._loaded && a4._loaded.call(a4, { width: s3.width, height: s3.height, ratio: s3.width / s3.height, url: e4 }));
        }), i2.on(s3, "error", function(t4) {
          i2.off(s3), "function" == typeof a4._error && a4._error.call(a4, t4);
        }), this.attr("href", s3.src = this.src = e4, i2.xlink);
      }, loaded: function(t4) {
        return this._loaded = t4, this;
      }, error: function(t4) {
        return this._error = t4, this;
      } }, construct: { image: function(t4, e4, a4) {
        return this.put(new i2.Image()).load(t4).size(e4 || 0, a4 || e4 || 0);
      } } }), i2.Text = i2.invent({ create: function() {
        this.constructor.call(this, i2.create("text")), this.dom.leading = new i2.Number(1.3), this._rebuild = true, this._build = false, this.attr("font-family", i2.defaults.attrs["font-family"]);
      }, inherit: i2.Shape, extend: { x: function(t4) {
        return null == t4 ? this.attr("x") : this.attr("x", t4);
      }, text: function(t4) {
        if (void 0 === t4) {
          t4 = "";
          for (var e4 = this.node.childNodes, a4 = 0, s3 = e4.length; a4 < s3; ++a4) 0 != a4 && 3 != e4[a4].nodeType && 1 == i2.adopt(e4[a4]).dom.newLined && (t4 += "\n"), t4 += e4[a4].textContent;
          return t4;
        }
        if (this.clear().build(true), "function" == typeof t4) t4.call(this, this);
        else {
          a4 = 0;
          for (var r4 = (t4 = t4.split("\n")).length; a4 < r4; a4++) this.tspan(t4[a4]).newLine();
        }
        return this.build(false).rebuild();
      }, size: function(t4) {
        return this.attr("font-size", t4).rebuild();
      }, leading: function(t4) {
        return null == t4 ? this.dom.leading : (this.dom.leading = new i2.Number(t4), this.rebuild());
      }, lines: function() {
        var t4 = (this.textPath && this.textPath() || this).node, e4 = i2.utils.map(i2.utils.filterSVGElements(t4.childNodes), function(t5) {
          return i2.adopt(t5);
        });
        return new i2.Set(e4);
      }, rebuild: function(t4) {
        if ("boolean" == typeof t4 && (this._rebuild = t4), this._rebuild) {
          var e4 = this, a4 = 0, s3 = this.dom.leading * new i2.Number(this.attr("font-size"));
          this.lines().each(function() {
            this.dom.newLined && (e4.textPath() || this.attr("x", e4.attr("x")), "\n" == this.text() ? a4 += s3 : (this.attr("dy", s3 + a4), a4 = 0));
          }), this.fire("rebuild");
        }
        return this;
      }, build: function(t4) {
        return this._build = !!t4, this;
      }, setData: function(t4) {
        return this.dom = t4, this.dom.leading = new i2.Number(t4.leading || 1.3), this;
      } }, construct: { text: function(t4) {
        return this.put(new i2.Text()).text(t4);
      }, plain: function(t4) {
        return this.put(new i2.Text()).plain(t4);
      } } }), i2.Tspan = i2.invent({ create: "tspan", inherit: i2.Shape, extend: { text: function(t4) {
        return null == t4 ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t4 ? t4.call(this, this) : this.plain(t4), this);
      }, dx: function(t4) {
        return this.attr("dx", t4);
      }, dy: function(t4) {
        return this.attr("dy", t4);
      }, newLine: function() {
        var t4 = this.parent(i2.Text);
        return this.dom.newLined = true, this.dy(t4.dom.leading * t4.attr("font-size")).attr("x", t4.x());
      } } }), i2.extend(i2.Text, i2.Tspan, { plain: function(t4) {
        return false === this._build && this.clear(), this.node.appendChild(e3.createTextNode(t4)), this;
      }, tspan: function(t4) {
        var e4 = (this.textPath && this.textPath() || this).node, a4 = new i2.Tspan();
        return false === this._build && this.clear(), e4.appendChild(a4.node), a4.text(t4);
      }, clear: function() {
        for (var t4 = (this.textPath && this.textPath() || this).node; t4.hasChildNodes(); ) t4.removeChild(t4.lastChild);
        return this;
      }, length: function() {
        return this.node.getComputedTextLength();
      } }), i2.TextPath = i2.invent({ create: "textPath", inherit: i2.Parent, parent: i2.Text, construct: { morphArray: i2.PathArray, array: function() {
        var t4 = this.track();
        return t4 ? t4.array() : null;
      }, plot: function(t4) {
        var e4 = this.track(), i3 = null;
        return e4 && (i3 = e4.plot(t4)), null == t4 ? i3 : this;
      }, track: function() {
        var t4 = this.textPath();
        if (t4) return t4.reference("href");
      }, textPath: function() {
        if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName) return i2.adopt(this.node.firstChild);
      } } }), i2.Nested = i2.invent({ create: function() {
        this.constructor.call(this, i2.create("svg")), this.style("overflow", "visible");
      }, inherit: i2.Container, construct: { nested: function() {
        return this.put(new i2.Nested());
      } } });
      var n2 = { stroke: ["color", "width", "opacity", "linecap", "linejoin", "miterlimit", "dasharray", "dashoffset"], fill: ["color", "opacity", "rule"], prefix: function(t4, e4) {
        return "color" == e4 ? t4 : t4 + "-" + e4;
      } };
      function l2(t4, e4, a4, s3) {
        return a4 + s3.replace(i2.regex.dots, " .");
      }
      function h2(t4) {
        return t4.toLowerCase().replace(/-(.)/g, function(t5, e4) {
          return e4.toUpperCase();
        });
      }
      function c3(t4) {
        return t4.charAt(0).toUpperCase() + t4.slice(1);
      }
      function d2(t4) {
        var e4 = t4.toString(16);
        return 1 == e4.length ? "0" + e4 : e4;
      }
      function g2(t4, e4, i3) {
        if (null == e4 || null == i3) {
          var a4 = t4.bbox();
          null == e4 ? e4 = a4.width / a4.height * i3 : null == i3 && (i3 = a4.height / a4.width * e4);
        }
        return { width: e4, height: i3 };
      }
      function u2(t4, e4, i3) {
        return { x: e4 * t4.a + i3 * t4.c + 0, y: e4 * t4.b + i3 * t4.d + 0 };
      }
      function p2(t4) {
        return { a: t4[0], b: t4[1], c: t4[2], d: t4[3], e: t4[4], f: t4[5] };
      }
      function f2(e4) {
        for (var a4 = e4.childNodes.length - 1; a4 >= 0; a4--) e4.childNodes[a4] instanceof t3.SVGElement && f2(e4.childNodes[a4]);
        return i2.adopt(e4).id(i2.eid(e4.nodeName));
      }
      function b2(t4) {
        return Math.abs(t4) > 1e-37 ? t4 : 0;
      }
      ["fill", "stroke"].forEach(function(t4) {
        var e4 = {};
        e4[t4] = function(e5) {
          if (void 0 === e5) return this;
          if ("string" == typeof e5 || i2.Color.isRgb(e5) || e5 && "function" == typeof e5.fill) this.attr(t4, e5);
          else for (var a4 = n2[t4].length - 1; a4 >= 0; a4--) null != e5[n2[t4][a4]] && this.attr(n2.prefix(t4, n2[t4][a4]), e5[n2[t4][a4]]);
          return this;
        }, i2.extend(i2.Element, i2.FX, e4);
      }), i2.extend(i2.Element, i2.FX, { translate: function(t4, e4) {
        return this.transform({ x: t4, y: e4 });
      }, matrix: function(t4) {
        return this.attr("transform", new i2.Matrix(6 == arguments.length ? [].slice.call(arguments) : t4));
      }, opacity: function(t4) {
        return this.attr("opacity", t4);
      }, dx: function(t4) {
        return this.x(new i2.Number(t4).plus(this instanceof i2.FX ? 0 : this.x()), true);
      }, dy: function(t4) {
        return this.y(new i2.Number(t4).plus(this instanceof i2.FX ? 0 : this.y()), true);
      } }), i2.extend(i2.Path, { length: function() {
        return this.node.getTotalLength();
      }, pointAt: function(t4) {
        return this.node.getPointAtLength(t4);
      } }), i2.Set = i2.invent({ create: function(t4) {
        Array.isArray(t4) ? this.members = t4 : this.clear();
      }, extend: { add: function() {
        for (var t4 = [].slice.call(arguments), e4 = 0, i3 = t4.length; e4 < i3; e4++) this.members.push(t4[e4]);
        return this;
      }, remove: function(t4) {
        var e4 = this.index(t4);
        return e4 > -1 && this.members.splice(e4, 1), this;
      }, each: function(t4) {
        for (var e4 = 0, i3 = this.members.length; e4 < i3; e4++) t4.apply(this.members[e4], [e4, this.members]);
        return this;
      }, clear: function() {
        return this.members = [], this;
      }, length: function() {
        return this.members.length;
      }, has: function(t4) {
        return this.index(t4) >= 0;
      }, index: function(t4) {
        return this.members.indexOf(t4);
      }, get: function(t4) {
        return this.members[t4];
      }, first: function() {
        return this.get(0);
      }, last: function() {
        return this.get(this.members.length - 1);
      }, valueOf: function() {
        return this.members;
      } }, construct: { set: function(t4) {
        return new i2.Set(t4);
      } } }), i2.FX.Set = i2.invent({ create: function(t4) {
        this.set = t4;
      } }), i2.Set.inherit = function() {
        var t4 = [];
        for (var e4 in i2.Shape.prototype) "function" == typeof i2.Shape.prototype[e4] && "function" != typeof i2.Set.prototype[e4] && t4.push(e4);
        for (var e4 in t4.forEach(function(t5) {
          i2.Set.prototype[t5] = function() {
            for (var e5 = 0, a4 = this.members.length; e5 < a4; e5++) this.members[e5] && "function" == typeof this.members[e5][t5] && this.members[e5][t5].apply(this.members[e5], arguments);
            return "animate" == t5 ? this.fx || (this.fx = new i2.FX.Set(this)) : this;
          };
        }), t4 = [], i2.FX.prototype) "function" == typeof i2.FX.prototype[e4] && "function" != typeof i2.FX.Set.prototype[e4] && t4.push(e4);
        t4.forEach(function(t5) {
          i2.FX.Set.prototype[t5] = function() {
            for (var e5 = 0, i3 = this.set.members.length; e5 < i3; e5++) this.set.members[e5].fx[t5].apply(this.set.members[e5].fx, arguments);
            return this;
          };
        });
      }, i2.extend(i2.Element, {}), i2.extend(i2.Element, { remember: function(t4, e4) {
        if ("object" === x(arguments[0])) for (var i3 in t4) this.remember(i3, t4[i3]);
        else {
          if (1 == arguments.length) return this.memory()[t4];
          this.memory()[t4] = e4;
        }
        return this;
      }, forget: function() {
        if (0 == arguments.length) this._memory = {};
        else for (var t4 = arguments.length - 1; t4 >= 0; t4--) delete this.memory()[arguments[t4]];
        return this;
      }, memory: function() {
        return this._memory || (this._memory = {});
      } }), i2.get = function(t4) {
        var a4 = e3.getElementById(function(t5) {
          var e4 = (t5 || "").toString().match(i2.regex.reference);
          if (e4) return e4[1];
        }(t4) || t4);
        return i2.adopt(a4);
      }, i2.select = function(t4, a4) {
        return new i2.Set(i2.utils.map((a4 || e3).querySelectorAll(t4), function(t5) {
          return i2.adopt(t5);
        }));
      }, i2.extend(i2.Parent, { select: function(t4) {
        return i2.select(t4, this.node);
      } });
      var v2 = "abcdef".split("");
      if ("function" != typeof t3.CustomEvent) {
        var m2 = function(t4, i3) {
          i3 = i3 || { bubbles: false, cancelable: false, detail: void 0 };
          var a4 = e3.createEvent("CustomEvent");
          return a4.initCustomEvent(t4, i3.bubbles, i3.cancelable, i3.detail), a4;
        };
        m2.prototype = t3.Event.prototype, i2.CustomEvent = m2;
      } else i2.CustomEvent = t3.CustomEvent;
      return i2;
    }, "function" == typeof define && define.amd ? define(function() {
      return Ot2(Ht2, Ht2.document);
    }) : "object" === ("undefined" == typeof exports ? "undefined" : x(exports)) && "undefined" != typeof module ? module.exports = Ht2.document ? Ot2(Ht2, Ht2.document) : function(t3) {
      return Ot2(t3, t3.document);
    } : Ht2.SVG = Ot2(Ht2, Ht2.document), /*! svg.filter.js - v2.0.2 - 2016-02-24
    * https://github.com/wout/svg.filter.js
    * Copyright (c) 2016 Wout Fierens; Licensed MIT */
    function() {
      SVG.Filter = SVG.invent({ create: "filter", inherit: SVG.Parent, extend: { source: "SourceGraphic", sourceAlpha: "SourceAlpha", background: "BackgroundImage", backgroundAlpha: "BackgroundAlpha", fill: "FillPaint", stroke: "StrokePaint", autoSetIn: true, put: function(t4, e4) {
        return this.add(t4, e4), !t4.attr("in") && this.autoSetIn && t4.attr("in", this.source), t4.attr("result") || t4.attr("result", t4), t4;
      }, blend: function(t4, e4, i3) {
        return this.put(new SVG.BlendEffect(t4, e4, i3));
      }, colorMatrix: function(t4, e4) {
        return this.put(new SVG.ColorMatrixEffect(t4, e4));
      }, convolveMatrix: function(t4) {
        return this.put(new SVG.ConvolveMatrixEffect(t4));
      }, componentTransfer: function(t4) {
        return this.put(new SVG.ComponentTransferEffect(t4));
      }, composite: function(t4, e4, i3) {
        return this.put(new SVG.CompositeEffect(t4, e4, i3));
      }, flood: function(t4, e4) {
        return this.put(new SVG.FloodEffect(t4, e4));
      }, offset: function(t4, e4) {
        return this.put(new SVG.OffsetEffect(t4, e4));
      }, image: function(t4) {
        return this.put(new SVG.ImageEffect(t4));
      }, merge: function() {
        var t4 = [void 0];
        for (var e4 in arguments) t4.push(arguments[e4]);
        return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t4))());
      }, gaussianBlur: function(t4, e4) {
        return this.put(new SVG.GaussianBlurEffect(t4, e4));
      }, morphology: function(t4, e4) {
        return this.put(new SVG.MorphologyEffect(t4, e4));
      }, diffuseLighting: function(t4, e4, i3) {
        return this.put(new SVG.DiffuseLightingEffect(t4, e4, i3));
      }, displacementMap: function(t4, e4, i3, a4, s3) {
        return this.put(new SVG.DisplacementMapEffect(t4, e4, i3, a4, s3));
      }, specularLighting: function(t4, e4, i3, a4) {
        return this.put(new SVG.SpecularLightingEffect(t4, e4, i3, a4));
      }, tile: function() {
        return this.put(new SVG.TileEffect());
      }, turbulence: function(t4, e4, i3, a4, s3) {
        return this.put(new SVG.TurbulenceEffect(t4, e4, i3, a4, s3));
      }, toString: function() {
        return "url(#" + this.attr("id") + ")";
      } } }), SVG.extend(SVG.Defs, { filter: function(t4) {
        var e4 = this.put(new SVG.Filter());
        return "function" == typeof t4 && t4.call(e4, e4), e4;
      } }), SVG.extend(SVG.Container, { filter: function(t4) {
        return this.defs().filter(t4);
      } }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, { filter: function(t4) {
        return this.filterer = t4 instanceof SVG.Element ? t4 : this.doc().filter(t4), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr("filter", this.filterer), this.filterer;
      }, unfilter: function(t4) {
        return this.filterer && true === t4 && this.filterer.remove(), delete this.filterer, this.attr("filter", null);
      } }), SVG.Effect = SVG.invent({ create: function() {
        this.constructor.call(this);
      }, inherit: SVG.Element, extend: { in: function(t4) {
        return null == t4 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t4);
      }, result: function(t4) {
        return null == t4 ? this.attr("result") : this.attr("result", t4);
      }, toString: function() {
        return this.result();
      } } }), SVG.ParentEffect = SVG.invent({ create: function() {
        this.constructor.call(this);
      }, inherit: SVG.Parent, extend: { in: function(t4) {
        return null == t4 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t4);
      }, result: function(t4) {
        return null == t4 ? this.attr("result") : this.attr("result", t4);
      }, toString: function() {
        return this.result();
      } } });
      var t3 = { blend: function(t4, e4) {
        return this.parent() && this.parent().blend(this, t4, e4);
      }, colorMatrix: function(t4, e4) {
        return this.parent() && this.parent().colorMatrix(t4, e4).in(this);
      }, convolveMatrix: function(t4) {
        return this.parent() && this.parent().convolveMatrix(t4).in(this);
      }, componentTransfer: function(t4) {
        return this.parent() && this.parent().componentTransfer(t4).in(this);
      }, composite: function(t4, e4) {
        return this.parent() && this.parent().composite(this, t4, e4);
      }, flood: function(t4, e4) {
        return this.parent() && this.parent().flood(t4, e4);
      }, offset: function(t4, e4) {
        return this.parent() && this.parent().offset(t4, e4).in(this);
      }, image: function(t4) {
        return this.parent() && this.parent().image(t4);
      }, merge: function() {
        return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));
      }, gaussianBlur: function(t4, e4) {
        return this.parent() && this.parent().gaussianBlur(t4, e4).in(this);
      }, morphology: function(t4, e4) {
        return this.parent() && this.parent().morphology(t4, e4).in(this);
      }, diffuseLighting: function(t4, e4, i3) {
        return this.parent() && this.parent().diffuseLighting(t4, e4, i3).in(this);
      }, displacementMap: function(t4, e4, i3, a4) {
        return this.parent() && this.parent().displacementMap(this, t4, e4, i3, a4);
      }, specularLighting: function(t4, e4, i3, a4) {
        return this.parent() && this.parent().specularLighting(t4, e4, i3, a4).in(this);
      }, tile: function() {
        return this.parent() && this.parent().tile().in(this);
      }, turbulence: function(t4, e4, i3, a4, s3) {
        return this.parent() && this.parent().turbulence(t4, e4, i3, a4, s3).in(this);
      } };
      SVG.extend(SVG.Effect, t3), SVG.extend(SVG.ParentEffect, t3), SVG.ChildEffect = SVG.invent({ create: function() {
        this.constructor.call(this);
      }, inherit: SVG.Element, extend: { in: function(t4) {
        this.attr("in", t4);
      } } });
      var e3 = { blend: function(t4, e4, i3) {
        this.attr({ in: t4, in2: e4, mode: i3 || "normal" });
      }, colorMatrix: function(t4, e4) {
        "matrix" == t4 && (e4 = s2(e4)), this.attr({ type: t4, values: void 0 === e4 ? null : e4 });
      }, convolveMatrix: function(t4) {
        t4 = s2(t4), this.attr({ order: Math.sqrt(t4.split(" ").length), kernelMatrix: t4 });
      }, composite: function(t4, e4, i3) {
        this.attr({ in: t4, in2: e4, operator: i3 });
      }, flood: function(t4, e4) {
        this.attr("flood-color", t4), null != e4 && this.attr("flood-opacity", e4);
      }, offset: function(t4, e4) {
        this.attr({ dx: t4, dy: e4 });
      }, image: function(t4) {
        this.attr("href", t4, SVG.xlink);
      }, displacementMap: function(t4, e4, i3, a4, s3) {
        this.attr({ in: t4, in2: e4, scale: i3, xChannelSelector: a4, yChannelSelector: s3 });
      }, gaussianBlur: function(t4, e4) {
        null != t4 || null != e4 ? this.attr("stdDeviation", function(t5) {
          if (!Array.isArray(t5)) return t5;
          for (var e5 = 0, i3 = t5.length, a4 = []; e5 < i3; e5++) a4.push(t5[e5]);
          return a4.join(" ");
        }(Array.prototype.slice.call(arguments))) : this.attr("stdDeviation", "0 0");
      }, morphology: function(t4, e4) {
        this.attr({ operator: t4, radius: e4 });
      }, tile: function() {
      }, turbulence: function(t4, e4, i3, a4, s3) {
        this.attr({ numOctaves: e4, seed: i3, stitchTiles: a4, baseFrequency: t4, type: s3 });
      } }, i2 = { merge: function() {
        var t4;
        if (arguments[0] instanceof SVG.Set) {
          var e4 = this;
          arguments[0].each(function(t5) {
            this instanceof SVG.MergeNode ? e4.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e4.put(new SVG.MergeNode(this));
          });
        } else {
          t4 = Array.isArray(arguments[0]) ? arguments[0] : arguments;
          for (var i3 = 0; i3 < t4.length; i3++) t4[i3] instanceof SVG.MergeNode ? this.put(t4[i3]) : this.put(new SVG.MergeNode(t4[i3]));
        }
      }, componentTransfer: function(t4) {
        if (this.rgb = new SVG.Set(), ["r", "g", "b", "a"].forEach(function(t5) {
          this[t5] = new SVG["Func" + t5.toUpperCase()]("identity"), this.rgb.add(this[t5]), this.node.appendChild(this[t5].node);
        }.bind(this)), t4) for (var e4 in t4.rgb && (["r", "g", "b"].forEach(function(e5) {
          this[e5].attr(t4.rgb);
        }.bind(this)), delete t4.rgb), t4) this[e4].attr(t4[e4]);
      }, diffuseLighting: function(t4, e4, i3) {
        this.attr({ surfaceScale: t4, diffuseConstant: e4, kernelUnitLength: i3 });
      }, specularLighting: function(t4, e4, i3, a4) {
        this.attr({ surfaceScale: t4, diffuseConstant: e4, specularExponent: i3, kernelUnitLength: a4 });
      } }, a3 = { distantLight: function(t4, e4) {
        this.attr({ azimuth: t4, elevation: e4 });
      }, pointLight: function(t4, e4, i3) {
        this.attr({ x: t4, y: e4, z: i3 });
      }, spotLight: function(t4, e4, i3, a4, s3, r4) {
        this.attr({ x: t4, y: e4, z: i3, pointsAtX: a4, pointsAtY: s3, pointsAtZ: r4 });
      }, mergeNode: function(t4) {
        this.attr("in", t4);
      } };
      function s2(t4) {
        return Array.isArray(t4) && (t4 = new SVG.Array(t4)), t4.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ");
      }
      function r3() {
        var t4 = function() {
        };
        for (var e4 in "function" == typeof arguments[arguments.length - 1] && (t4 = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments) for (var i3 in arguments[e4]) t4(arguments[e4][i3], i3, arguments[e4]);
      }
      ["r", "g", "b", "a"].forEach(function(t4) {
        a3["Func" + t4.toUpperCase()] = function(t5) {
          switch (this.attr("type", t5), t5) {
            case "table":
              this.attr("tableValues", arguments[1]);
              break;
            case "linear":
              this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
              break;
            case "gamma":
              this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2]);
          }
        };
      }), r3(e3, function(t4, e4) {
        var i3 = e4.charAt(0).toUpperCase() + e4.slice(1);
        SVG[i3 + "Effect"] = SVG.invent({ create: function() {
          this.constructor.call(this, SVG.create("fe" + i3)), t4.apply(this, arguments), this.result(this.attr("id") + "Out");
        }, inherit: SVG.Effect, extend: {} });
      }), r3(i2, function(t4, e4) {
        var i3 = e4.charAt(0).toUpperCase() + e4.slice(1);
        SVG[i3 + "Effect"] = SVG.invent({ create: function() {
          this.constructor.call(this, SVG.create("fe" + i3)), t4.apply(this, arguments), this.result(this.attr("id") + "Out");
        }, inherit: SVG.ParentEffect, extend: {} });
      }), r3(a3, function(t4, e4) {
        var i3 = e4.charAt(0).toUpperCase() + e4.slice(1);
        SVG[i3] = SVG.invent({ create: function() {
          this.constructor.call(this, SVG.create("fe" + i3)), t4.apply(this, arguments);
        }, inherit: SVG.ChildEffect, extend: {} });
      }), SVG.extend(SVG.MergeEffect, { in: function(t4) {
        return t4 instanceof SVG.MergeNode ? this.add(t4, 0) : this.add(new SVG.MergeNode(t4), 0), this;
      } }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, { in2: function(t4) {
        return null == t4 ? this.parent() && this.parent().select('[result="' + this.attr("in2") + '"]').get(0) || this.attr("in2") : this.attr("in2", t4);
      } }), SVG.filter = { sepiatone: [0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334, 0.111, 0, 0, 0, 0, 0, 1, 0] };
    }.call(void 0), function() {
      function t3(t4, s3, r3, o3, n2, l2, h2) {
        for (var c3 = t4.slice(s3, r3 || h2), d2 = o3.slice(n2, l2 || h2), g2 = 0, u2 = { pos: [0, 0], start: [0, 0] }, p2 = { pos: [0, 0], start: [0, 0] }; ; ) {
          if (c3[g2] = e3.call(u2, c3[g2]), d2[g2] = e3.call(p2, d2[g2]), c3[g2][0] != d2[g2][0] || "M" == c3[g2][0] || "A" == c3[g2][0] && (c3[g2][4] != d2[g2][4] || c3[g2][5] != d2[g2][5]) ? (Array.prototype.splice.apply(c3, [g2, 1].concat(a3.call(u2, c3[g2]))), Array.prototype.splice.apply(d2, [g2, 1].concat(a3.call(p2, d2[g2])))) : (c3[g2] = i2.call(u2, c3[g2]), d2[g2] = i2.call(p2, d2[g2])), ++g2 == c3.length && g2 == d2.length) break;
          g2 == c3.length && c3.push(["C", u2.pos[0], u2.pos[1], u2.pos[0], u2.pos[1], u2.pos[0], u2.pos[1]]), g2 == d2.length && d2.push(["C", p2.pos[0], p2.pos[1], p2.pos[0], p2.pos[1], p2.pos[0], p2.pos[1]]);
        }
        return { start: c3, dest: d2 };
      }
      function e3(t4) {
        switch (t4[0]) {
          case "z":
          case "Z":
            t4[0] = "L", t4[1] = this.start[0], t4[2] = this.start[1];
            break;
          case "H":
            t4[0] = "L", t4[2] = this.pos[1];
            break;
          case "V":
            t4[0] = "L", t4[2] = t4[1], t4[1] = this.pos[0];
            break;
          case "T":
            t4[0] = "Q", t4[3] = t4[1], t4[4] = t4[2], t4[1] = this.reflection[1], t4[2] = this.reflection[0];
            break;
          case "S":
            t4[0] = "C", t4[6] = t4[4], t4[5] = t4[3], t4[4] = t4[2], t4[3] = t4[1], t4[2] = this.reflection[1], t4[1] = this.reflection[0];
        }
        return t4;
      }
      function i2(t4) {
        var e4 = t4.length;
        return this.pos = [t4[e4 - 2], t4[e4 - 1]], -1 != "SCQT".indexOf(t4[0]) && (this.reflection = [2 * this.pos[0] - t4[e4 - 4], 2 * this.pos[1] - t4[e4 - 3]]), t4;
      }
      function a3(t4) {
        var e4 = [t4];
        switch (t4[0]) {
          case "M":
            return this.pos = this.start = [t4[1], t4[2]], e4;
          case "L":
            t4[5] = t4[3] = t4[1], t4[6] = t4[4] = t4[2], t4[1] = this.pos[0], t4[2] = this.pos[1];
            break;
          case "Q":
            t4[6] = t4[4], t4[5] = t4[3], t4[4] = 1 * t4[4] / 3 + 2 * t4[2] / 3, t4[3] = 1 * t4[3] / 3 + 2 * t4[1] / 3, t4[2] = 1 * this.pos[1] / 3 + 2 * t4[2] / 3, t4[1] = 1 * this.pos[0] / 3 + 2 * t4[1] / 3;
            break;
          case "A":
            e4 = function(t5, e5) {
              var i3, a4, s3, r3, o3, n2, l2, h2, c3, d2, g2, u2, p2, f2, x2, b2, v2, m2, y3, w2, k2, A2, S2, C3, L3, P3, M2 = Math.abs(e5[1]), I3 = Math.abs(e5[2]), T2 = e5[3] % 360, z2 = e5[4], X3 = e5[5], E2 = e5[6], Y2 = e5[7], F3 = new SVG.Point(t5), R3 = new SVG.Point(E2, Y2), D2 = [];
              if (0 === M2 || 0 === I3 || F3.x === R3.x && F3.y === R3.y) return [["C", F3.x, F3.y, R3.x, R3.y, R3.x, R3.y]];
              i3 = new SVG.Point((F3.x - R3.x) / 2, (F3.y - R3.y) / 2).transform(new SVG.Matrix().rotate(T2)), (a4 = i3.x * i3.x / (M2 * M2) + i3.y * i3.y / (I3 * I3)) > 1 && (M2 *= a4 = Math.sqrt(a4), I3 *= a4);
              s3 = new SVG.Matrix().rotate(T2).scale(1 / M2, 1 / I3).rotate(-T2), F3 = F3.transform(s3), R3 = R3.transform(s3), r3 = [R3.x - F3.x, R3.y - F3.y], n2 = r3[0] * r3[0] + r3[1] * r3[1], o3 = Math.sqrt(n2), r3[0] /= o3, r3[1] /= o3, l2 = n2 < 4 ? Math.sqrt(1 - n2 / 4) : 0, z2 === X3 && (l2 *= -1);
              h2 = new SVG.Point((R3.x + F3.x) / 2 + l2 * -r3[1], (R3.y + F3.y) / 2 + l2 * r3[0]), c3 = new SVG.Point(F3.x - h2.x, F3.y - h2.y), d2 = new SVG.Point(R3.x - h2.x, R3.y - h2.y), g2 = Math.acos(c3.x / Math.sqrt(c3.x * c3.x + c3.y * c3.y)), c3.y < 0 && (g2 *= -1);
              u2 = Math.acos(d2.x / Math.sqrt(d2.x * d2.x + d2.y * d2.y)), d2.y < 0 && (u2 *= -1);
              X3 && g2 > u2 && (u2 += 2 * Math.PI);
              !X3 && g2 < u2 && (u2 -= 2 * Math.PI);
              for (f2 = Math.ceil(2 * Math.abs(g2 - u2) / Math.PI), b2 = [], v2 = g2, p2 = (u2 - g2) / f2, x2 = 4 * Math.tan(p2 / 4) / 3, k2 = 0; k2 <= f2; k2++) y3 = Math.cos(v2), m2 = Math.sin(v2), w2 = new SVG.Point(h2.x + y3, h2.y + m2), b2[k2] = [new SVG.Point(w2.x + x2 * m2, w2.y - x2 * y3), w2, new SVG.Point(w2.x - x2 * m2, w2.y + x2 * y3)], v2 += p2;
              for (b2[0][0] = b2[0][1].clone(), b2[b2.length - 1][2] = b2[b2.length - 1][1].clone(), s3 = new SVG.Matrix().rotate(T2).scale(M2, I3).rotate(-T2), k2 = 0, A2 = b2.length; k2 < A2; k2++) b2[k2][0] = b2[k2][0].transform(s3), b2[k2][1] = b2[k2][1].transform(s3), b2[k2][2] = b2[k2][2].transform(s3);
              for (k2 = 1, A2 = b2.length; k2 < A2; k2++) S2 = (w2 = b2[k2 - 1][2]).x, C3 = w2.y, L3 = (w2 = b2[k2][0]).x, P3 = w2.y, E2 = (w2 = b2[k2][1]).x, Y2 = w2.y, D2.push(["C", S2, C3, L3, P3, E2, Y2]);
              return D2;
            }(this.pos, t4), t4 = e4[0];
        }
        return t4[0] = "C", this.pos = [t4[5], t4[6]], this.reflection = [2 * t4[5] - t4[3], 2 * t4[6] - t4[4]], e4;
      }
      function s2(t4, e4) {
        if (false === e4) return false;
        for (var i3 = e4, a4 = t4.length; i3 < a4; ++i3) if ("M" == t4[i3][0]) return i3;
        return false;
      }
      SVG.extend(SVG.PathArray, { morph: function(e4) {
        for (var i3 = this.value, a4 = this.parse(e4), r3 = 0, o3 = 0, n2 = false, l2 = false; false !== r3 || false !== o3; ) {
          var h2;
          n2 = s2(i3, false !== r3 && r3 + 1), l2 = s2(a4, false !== o3 && o3 + 1), false === r3 && (r3 = 0 == (h2 = new SVG.PathArray(c3.start).bbox()).height || 0 == h2.width ? i3.push(i3[0]) - 1 : i3.push(["M", h2.x + h2.width / 2, h2.y + h2.height / 2]) - 1), false === o3 && (o3 = 0 == (h2 = new SVG.PathArray(c3.dest).bbox()).height || 0 == h2.width ? a4.push(a4[0]) - 1 : a4.push(["M", h2.x + h2.width / 2, h2.y + h2.height / 2]) - 1);
          var c3 = t3(i3, r3, n2, a4, o3, l2);
          i3 = i3.slice(0, r3).concat(c3.start, false === n2 ? [] : i3.slice(n2)), a4 = a4.slice(0, o3).concat(c3.dest, false === l2 ? [] : a4.slice(l2)), r3 = false !== n2 && r3 + c3.start.length, o3 = false !== l2 && o3 + c3.dest.length;
        }
        return this.value = i3, this.destination = new SVG.PathArray(), this.destination.value = a4, this;
      } });
    }(), /*! svg.draggable.js - v2.2.2 - 2019-01-08
    * https://github.com/svgdotjs/svg.draggable.js
    * Copyright (c) 2019 Wout Fierens; Licensed MIT */
    function() {
      function t3(t4) {
        t4.remember("_draggable", this), this.el = t4;
      }
      t3.prototype.init = function(t4, e3) {
        var i2 = this;
        this.constraint = t4, this.value = e3, this.el.on("mousedown.drag", function(t5) {
          i2.start(t5);
        }), this.el.on("touchstart.drag", function(t5) {
          i2.start(t5);
        });
      }, t3.prototype.transformPoint = function(t4, e3) {
        var i2 = (t4 = t4 || window.event).changedTouches && t4.changedTouches[0] || t4;
        return this.p.x = i2.clientX - (e3 || 0), this.p.y = i2.clientY, this.p.matrixTransform(this.m);
      }, t3.prototype.getBBox = function() {
        var t4 = this.el.bbox();
        return this.el instanceof SVG.Nested && (t4 = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t4.x = this.el.x(), t4.y = this.el.y()), t4;
      }, t3.prototype.start = function(t4) {
        if ("click" != t4.type && "mousedown" != t4.type && "mousemove" != t4.type || 1 == (t4.which || t4.buttons)) {
          var e3 = this;
          if (this.el.fire("beforedrag", { event: t4, handler: this }), !this.el.event().defaultPrevented) {
            t4.preventDefault(), t4.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();
            var i2, a3 = this.getBBox();
            if (this.el instanceof SVG.Text) switch (i2 = this.el.node.getComputedTextLength(), this.el.attr("text-anchor")) {
              case "middle":
                i2 /= 2;
                break;
              case "start":
                i2 = 0;
            }
            this.startPoints = { point: this.transformPoint(t4, i2), box: a3, transform: this.el.transform() }, SVG.on(window, "mousemove.drag", function(t5) {
              e3.drag(t5);
            }), SVG.on(window, "touchmove.drag", function(t5) {
              e3.drag(t5);
            }), SVG.on(window, "mouseup.drag", function(t5) {
              e3.end(t5);
            }), SVG.on(window, "touchend.drag", function(t5) {
              e3.end(t5);
            }), this.el.fire("dragstart", { event: t4, p: this.startPoints.point, m: this.m, handler: this });
          }
        }
      }, t3.prototype.drag = function(t4) {
        var e3 = this.getBBox(), i2 = this.transformPoint(t4), a3 = this.startPoints.box.x + i2.x - this.startPoints.point.x, s2 = this.startPoints.box.y + i2.y - this.startPoints.point.y, r3 = this.constraint, o3 = i2.x - this.startPoints.point.x, n2 = i2.y - this.startPoints.point.y;
        if (this.el.fire("dragmove", { event: t4, p: i2, m: this.m, handler: this }), this.el.event().defaultPrevented) return i2;
        if ("function" == typeof r3) {
          var l2 = r3.call(this.el, a3, s2, this.m);
          "boolean" == typeof l2 && (l2 = { x: l2, y: l2 }), true === l2.x ? this.el.x(a3) : false !== l2.x && this.el.x(l2.x), true === l2.y ? this.el.y(s2) : false !== l2.y && this.el.y(l2.y);
        } else "object" == typeof r3 && (null != r3.minX && a3 < r3.minX ? o3 = (a3 = r3.minX) - this.startPoints.box.x : null != r3.maxX && a3 > r3.maxX - e3.width && (o3 = (a3 = r3.maxX - e3.width) - this.startPoints.box.x), null != r3.minY && s2 < r3.minY ? n2 = (s2 = r3.minY) - this.startPoints.box.y : null != r3.maxY && s2 > r3.maxY - e3.height && (n2 = (s2 = r3.maxY - e3.height) - this.startPoints.box.y), null != r3.snapToGrid && (a3 -= a3 % r3.snapToGrid, s2 -= s2 % r3.snapToGrid, o3 -= o3 % r3.snapToGrid, n2 -= n2 % r3.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({ x: o3, y: n2 }, true) : this.el.move(a3, s2));
        return i2;
      }, t3.prototype.end = function(t4) {
        var e3 = this.drag(t4);
        this.el.fire("dragend", { event: t4, p: e3, m: this.m, handler: this }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag");
      }, SVG.extend(SVG.Element, { draggable: function(e3, i2) {
        "function" != typeof e3 && "object" != typeof e3 || (i2 = e3, e3 = true);
        var a3 = this.remember("_draggable") || new t3(this);
        return (e3 = void 0 === e3 || e3) ? a3.init(i2 || {}, e3) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this;
      } });
    }.call(void 0), function() {
      function t3(t4) {
        this.el = t4, t4.remember("_selectHandler", this), this.pointSelection = { isSelected: false }, this.rectSelection = { isSelected: false }, this.pointsList = { lt: [0, 0], rt: ["width", 0], rb: ["width", "height"], lb: [0, "height"], t: ["width", 0], r: ["width", "height"], b: ["width", "height"], l: [0, "height"] }, this.pointCoord = function(t5, e3, i2) {
          var a3 = "string" != typeof t5 ? t5 : e3[t5];
          return i2 ? a3 / 2 : a3;
        }, this.pointCoords = function(t5, e3) {
          var i2 = this.pointsList[t5];
          return { x: this.pointCoord(i2[0], e3, "t" === t5 || "b" === t5), y: this.pointCoord(i2[1], e3, "r" === t5 || "l" === t5) };
        };
      }
      t3.prototype.init = function(t4, e3) {
        var i2 = this.el.bbox();
        this.options = {};
        var a3 = this.el.selectize.defaults.points;
        for (var s2 in this.el.selectize.defaults) this.options[s2] = this.el.selectize.defaults[s2], void 0 !== e3[s2] && (this.options[s2] = e3[s2]);
        var r3 = ["points", "pointsExclude"];
        for (var s2 in r3) {
          var o3 = this.options[r3[s2]];
          "string" == typeof o3 ? o3 = o3.length > 0 ? o3.split(/\s*,\s*/i) : [] : "boolean" == typeof o3 && "points" === r3[s2] && (o3 = o3 ? a3 : []), this.options[r3[s2]] = o3;
        }
        this.options.points = [a3, this.options.points].reduce(function(t5, e4) {
          return t5.filter(function(t6) {
            return e4.indexOf(t6) > -1;
          });
        }), this.options.points = [this.options.points, this.options.pointsExclude].reduce(function(t5, e4) {
          return t5.filter(function(t6) {
            return e4.indexOf(t6) < 0;
          });
        }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i2.x, i2.y)), this.options.deepSelect && -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type) ? this.selectPoints(t4) : this.selectRect(t4), this.observe(), this.cleanup();
      }, t3.prototype.selectPoints = function(t4) {
        return this.pointSelection.isSelected = t4, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this;
      }, t3.prototype.getPointArray = function() {
        var t4 = this.el.bbox();
        return this.el.array().valueOf().map(function(e3) {
          return [e3[0] - t4.x, e3[1] - t4.y];
        });
      }, t3.prototype.drawPoints = function() {
        for (var t4 = this, e3 = this.getPointArray(), i2 = 0, a3 = e3.length; i2 < a3; ++i2) {
          var s2 = /* @__PURE__ */ function(e4) {
            return function(i3) {
              (i3 = i3 || window.event).preventDefault ? i3.preventDefault() : i3.returnValue = false, i3.stopPropagation();
              var a4 = i3.pageX || i3.touches[0].pageX, s3 = i3.pageY || i3.touches[0].pageY;
              t4.el.fire("point", { x: a4, y: s3, i: e4, event: i3 });
            };
          }(i2), r3 = this.drawPoint(e3[i2][0], e3[i2][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", s2).on("mousedown", s2);
          this.pointSelection.set.add(r3);
        }
      }, t3.prototype.drawPoint = function(t4, e3) {
        var i2 = this.options.pointType;
        switch (i2) {
          case "circle":
            return this.drawCircle(t4, e3);
          case "rect":
            return this.drawRect(t4, e3);
          default:
            if ("function" == typeof i2) return i2.call(this, t4, e3);
            throw new Error("Unknown " + i2 + " point type!");
        }
      }, t3.prototype.drawCircle = function(t4, e3) {
        return this.nested.circle(this.options.pointSize).center(t4, e3);
      }, t3.prototype.drawRect = function(t4, e3) {
        return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t4, e3);
      }, t3.prototype.updatePointSelection = function() {
        var t4 = this.getPointArray();
        this.pointSelection.set.each(function(e3) {
          this.cx() === t4[e3][0] && this.cy() === t4[e3][1] || this.center(t4[e3][0], t4[e3][1]);
        });
      }, t3.prototype.updateRectSelection = function() {
        var t4 = this, e3 = this.el.bbox();
        if (this.rectSelection.set.get(0).attr({ width: e3.width, height: e3.height }), this.options.points.length && this.options.points.map(function(i3, a3) {
          var s2 = t4.pointCoords(i3, e3);
          t4.rectSelection.set.get(a3 + 1).center(s2.x, s2.y);
        }), this.options.rotationPoint) {
          var i2 = this.rectSelection.set.length();
          this.rectSelection.set.get(i2 - 1).center(e3.width / 2, 20);
        }
      }, t3.prototype.selectRect = function(t4) {
        var e3 = this, i2 = this.el.bbox();
        function a3(t5) {
          return function(i3) {
            (i3 = i3 || window.event).preventDefault ? i3.preventDefault() : i3.returnValue = false, i3.stopPropagation();
            var a4 = i3.pageX || i3.touches[0].pageX, s3 = i3.pageY || i3.touches[0].pageY;
            e3.el.fire(t5, { x: a4, y: s3, event: i3 });
          };
        }
        if (this.rectSelection.isSelected = t4, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i2.width, i2.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) {
          this.options.points.map(function(t5, s3) {
            var r4 = e3.pointCoords(t5, i2), o3 = e3.drawPoint(r4.x, r4.y).attr("class", e3.options.classPoints + "_" + t5).on("mousedown", a3(t5)).on("touchstart", a3(t5));
            e3.rectSelection.set.add(o3);
          }), this.rectSelection.set.each(function() {
            this.addClass(e3.options.classPoints);
          });
        }
        if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {
          var s2 = function(t5) {
            (t5 = t5 || window.event).preventDefault ? t5.preventDefault() : t5.returnValue = false, t5.stopPropagation();
            var i3 = t5.pageX || t5.touches[0].pageX, a4 = t5.pageY || t5.touches[0].pageY;
            e3.el.fire("rot", { x: i3, y: a4, event: t5 });
          }, r3 = this.drawPoint(i2.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", s2).on("mousedown", s2);
          this.rectSelection.set.add(r3);
        }
      }, t3.prototype.handler = function() {
        var t4 = this.el.bbox();
        this.nested.matrix(new SVG.Matrix(this.el).translate(t4.x, t4.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();
      }, t3.prototype.observe = function() {
        var t4 = this;
        if (MutationObserver) if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver(function() {
          t4.handler();
        }), this.observerInst.observe(this.el.node, { attributes: true });
        else try {
          this.observerInst.disconnect(), delete this.observerInst;
        } catch (t5) {
        }
        else this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", function() {
          t4.handler();
        });
      }, t3.prototype.cleanup = function() {
        !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function() {
          this.remove();
        }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function() {
          this.remove();
        }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);
      }, SVG.extend(SVG.Element, { selectize: function(e3, i2) {
        return "object" == typeof e3 && (i2 = e3, e3 = true), (this.remember("_selectHandler") || new t3(this)).init(void 0 === e3 || e3, i2 || {}), this;
      } }), SVG.Element.prototype.selectize.defaults = { points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"], pointsExclude: [], classRect: "svg_select_boundingRect", classPoints: "svg_select_points", pointSize: 7, rotationPoint: true, deepSelect: false, pointType: "circle" };
    }(), function() {
      (function() {
        function t3(t4) {
          t4.remember("_resizeHandler", this), this.el = t4, this.parameters = {}, this.lastUpdateCall = null, this.p = t4.doc().node.createSVGPoint();
        }
        t3.prototype.transformPoint = function(t4, e3, i2) {
          return this.p.x = t4 - (this.offset.x - window.pageXOffset), this.p.y = e3 - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i2 || this.m);
        }, t3.prototype._extractPosition = function(t4) {
          return { x: null != t4.clientX ? t4.clientX : t4.touches[0].clientX, y: null != t4.clientY ? t4.clientY : t4.touches[0].clientY };
        }, t3.prototype.init = function(t4) {
          var e3 = this;
          if (this.stop(), "stop" !== t4) {
            for (var i2 in this.options = {}, this.el.resize.defaults) this.options[i2] = this.el.resize.defaults[i2], void 0 !== t4[i2] && (this.options[i2] = t4[i2]);
            this.el.on("lt.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("rt.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("rb.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("lb.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("t.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("r.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("b.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("l.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("rot.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("point.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.update();
          }
        }, t3.prototype.stop = function() {
          return this.el.off("lt.resize"), this.el.off("rt.resize"), this.el.off("rb.resize"), this.el.off("lb.resize"), this.el.off("t.resize"), this.el.off("r.resize"), this.el.off("b.resize"), this.el.off("l.resize"), this.el.off("rot.resize"), this.el.off("point.resize"), this;
        }, t3.prototype.resize = function(t4) {
          var e3 = this;
          this.m = this.el.node.getScreenCTM().inverse(), this.offset = { x: window.pageXOffset, y: window.pageYOffset };
          var i2 = this._extractPosition(t4.detail.event);
          if (this.parameters = { type: this.el.type, p: this.transformPoint(i2.x, i2.y), x: t4.detail.x, y: t4.detail.y, box: this.el.bbox(), rotation: this.el.transform().rotation }, "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]), void 0 !== t4.detail.i) {
            var a3 = this.el.array().valueOf();
            this.parameters.i = t4.detail.i, this.parameters.pointCoords = [a3[t4.detail.i][0], a3[t4.detail.i][1]];
          }
          switch (t4.type) {
            case "lt":
              this.calc = function(t5, e4) {
                var i3 = this.snapToGrid(t5, e4);
                if (this.parameters.box.width - i3[0] > 0 && this.parameters.box.height - i3[1] > 0) {
                  if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i3[0]);
                  i3 = this.checkAspectRatio(i3), this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y + i3[1]).size(this.parameters.box.width - i3[0], this.parameters.box.height - i3[1]);
                }
              };
              break;
            case "rt":
              this.calc = function(t5, e4) {
                var i3 = this.snapToGrid(t5, e4, 2);
                if (this.parameters.box.width + i3[0] > 0 && this.parameters.box.height - i3[1] > 0) {
                  if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i3[0]);
                  i3 = this.checkAspectRatio(i3, true), this.el.move(this.parameters.box.x, this.parameters.box.y + i3[1]).size(this.parameters.box.width + i3[0], this.parameters.box.height - i3[1]);
                }
              };
              break;
            case "rb":
              this.calc = function(t5, e4) {
                var i3 = this.snapToGrid(t5, e4, 0);
                if (this.parameters.box.width + i3[0] > 0 && this.parameters.box.height + i3[1] > 0) {
                  if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i3[0]);
                  i3 = this.checkAspectRatio(i3), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i3[0], this.parameters.box.height + i3[1]);
                }
              };
              break;
            case "lb":
              this.calc = function(t5, e4) {
                var i3 = this.snapToGrid(t5, e4, 1);
                if (this.parameters.box.width - i3[0] > 0 && this.parameters.box.height + i3[1] > 0) {
                  if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i3[0]);
                  i3 = this.checkAspectRatio(i3, true), this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y).size(this.parameters.box.width - i3[0], this.parameters.box.height + i3[1]);
                }
              };
              break;
            case "t":
              this.calc = function(t5, e4) {
                var i3 = this.snapToGrid(t5, e4, 2);
                if (this.parameters.box.height - i3[1] > 0) {
                  if ("text" === this.parameters.type) return;
                  this.el.move(this.parameters.box.x, this.parameters.box.y + i3[1]).height(this.parameters.box.height - i3[1]);
                }
              };
              break;
            case "r":
              this.calc = function(t5, e4) {
                var i3 = this.snapToGrid(t5, e4, 0);
                if (this.parameters.box.width + i3[0] > 0) {
                  if ("text" === this.parameters.type) return;
                  this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i3[0]);
                }
              };
              break;
            case "b":
              this.calc = function(t5, e4) {
                var i3 = this.snapToGrid(t5, e4, 0);
                if (this.parameters.box.height + i3[1] > 0) {
                  if ("text" === this.parameters.type) return;
                  this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i3[1]);
                }
              };
              break;
            case "l":
              this.calc = function(t5, e4) {
                var i3 = this.snapToGrid(t5, e4, 1);
                if (this.parameters.box.width - i3[0] > 0) {
                  if ("text" === this.parameters.type) return;
                  this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y).width(this.parameters.box.width - i3[0]);
                }
              };
              break;
            case "rot":
              this.calc = function(t5, e4) {
                var i3 = t5 + this.parameters.p.x, a4 = e4 + this.parameters.p.y, s2 = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2), r3 = Math.atan2(a4 - this.parameters.box.y - this.parameters.box.height / 2, i3 - this.parameters.box.x - this.parameters.box.width / 2), o3 = this.parameters.rotation + 180 * (r3 - s2) / Math.PI + this.options.snapToAngle / 2;
                this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(o3 - o3 % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);
              };
              break;
            case "point":
              this.calc = function(t5, e4) {
                var i3 = this.snapToGrid(t5, e4, this.parameters.pointCoords[0], this.parameters.pointCoords[1]), a4 = this.el.array().valueOf();
                a4[this.parameters.i][0] = this.parameters.pointCoords[0] + i3[0], a4[this.parameters.i][1] = this.parameters.pointCoords[1] + i3[1], this.el.plot(a4);
              };
          }
          this.el.fire("resizestart", { dx: this.parameters.x, dy: this.parameters.y, event: t4 }), SVG.on(window, "touchmove.resize", function(t5) {
            e3.update(t5 || window.event);
          }), SVG.on(window, "touchend.resize", function() {
            e3.done();
          }), SVG.on(window, "mousemove.resize", function(t5) {
            e3.update(t5 || window.event);
          }), SVG.on(window, "mouseup.resize", function() {
            e3.done();
          });
        }, t3.prototype.update = function(t4) {
          if (t4) {
            var e3 = this._extractPosition(t4), i2 = this.transformPoint(e3.x, e3.y), a3 = i2.x - this.parameters.p.x, s2 = i2.y - this.parameters.p.y;
            this.lastUpdateCall = [a3, s2], this.calc(a3, s2), this.el.fire("resizing", { dx: a3, dy: s2, event: t4 });
          } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
        }, t3.prototype.done = function() {
          this.lastUpdateCall = null, SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone");
        }, t3.prototype.snapToGrid = function(t4, e3, i2, a3) {
          var s2;
          return void 0 !== a3 ? s2 = [(i2 + t4) % this.options.snapToGrid, (a3 + e3) % this.options.snapToGrid] : (i2 = null == i2 ? 3 : i2, s2 = [(this.parameters.box.x + t4 + (1 & i2 ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e3 + (2 & i2 ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t4 < 0 && (s2[0] -= this.options.snapToGrid), e3 < 0 && (s2[1] -= this.options.snapToGrid), t4 -= Math.abs(s2[0]) < this.options.snapToGrid / 2 ? s2[0] : s2[0] - (t4 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e3 -= Math.abs(s2[1]) < this.options.snapToGrid / 2 ? s2[1] : s2[1] - (e3 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t4, e3, i2, a3);
        }, t3.prototype.constraintToBox = function(t4, e3, i2, a3) {
          var s2, r3, o3 = this.options.constraint || {};
          return void 0 !== a3 ? (s2 = i2, r3 = a3) : (s2 = this.parameters.box.x + (1 & i2 ? 0 : this.parameters.box.width), r3 = this.parameters.box.y + (2 & i2 ? 0 : this.parameters.box.height)), void 0 !== o3.minX && s2 + t4 < o3.minX && (t4 = o3.minX - s2), void 0 !== o3.maxX && s2 + t4 > o3.maxX && (t4 = o3.maxX - s2), void 0 !== o3.minY && r3 + e3 < o3.minY && (e3 = o3.minY - r3), void 0 !== o3.maxY && r3 + e3 > o3.maxY && (e3 = o3.maxY - r3), [t4, e3];
        }, t3.prototype.checkAspectRatio = function(t4, e3) {
          if (!this.options.saveAspectRatio) return t4;
          var i2 = t4.slice(), a3 = this.parameters.box.width / this.parameters.box.height, s2 = this.parameters.box.width + t4[0], r3 = this.parameters.box.height - t4[1], o3 = s2 / r3;
          return o3 < a3 ? (i2[1] = s2 / a3 - this.parameters.box.height, e3 && (i2[1] = -i2[1])) : o3 > a3 && (i2[0] = this.parameters.box.width - r3 * a3, e3 && (i2[0] = -i2[0])), i2;
        }, SVG.extend(SVG.Element, { resize: function(e3) {
          return (this.remember("_resizeHandler") || new t3(this)).init(e3 || {}), this;
        } }), SVG.Element.prototype.resize.defaults = { snapToAngle: 0.1, snapToGrid: 1, constraint: {}, saveAspectRatio: false };
      }).call(this);
    }(), void 0 === window.Apex && (window.Apex = {});
    var _t2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "initModules", value: function() {
        this.ctx.publicMethods = ["updateOptions", "updateSeries", "appendData", "appendSeries", "isSeriesHidden", "highlightSeries", "toggleSeries", "showSeries", "hideSeries", "setLocale", "resetSeries", "zoomX", "toggleDataPointSelection", "dataURI", "exportToCSV", "addXaxisAnnotation", "addYaxisAnnotation", "addPointAnnotation", "clearAnnotations", "removeAnnotation", "paper", "destroy"], this.ctx.eventList = ["click", "mousedown", "mousemove", "mouseleave", "touchstart", "touchmove", "touchleave", "mouseup", "touchend"], this.ctx.animations = new m(this.ctx), this.ctx.axes = new K2(this.ctx), this.ctx.core = new Vt2(this.ctx.el, this.ctx), this.ctx.config = new R2({}), this.ctx.data = new V(this.ctx), this.ctx.grid = new U2(this.ctx), this.ctx.graphics = new w(this.ctx), this.ctx.coreUtils = new k(this.ctx), this.ctx.crosshairs = new tt2(this.ctx), this.ctx.events = new J2(this.ctx), this.ctx.exports = new j(this.ctx), this.ctx.fill = new O2(this.ctx), this.ctx.localization = new Q2(this.ctx), this.ctx.options = new z(), this.ctx.responsive = new et2(this.ctx), this.ctx.series = new G2(this.ctx), this.ctx.theme = new it2(this.ctx), this.ctx.formatters = new L2(this.ctx), this.ctx.titleSubtitle = new at2(this.ctx), this.ctx.legend = new ct2(this.ctx), this.ctx.toolbar = new dt2(this.ctx), this.ctx.tooltip = new mt2(this.ctx), this.ctx.dimensions = new lt2(this.ctx), this.ctx.updateHelpers = new jt2(this.ctx), this.ctx.zoomPanSelection = new gt2(this.ctx), this.ctx.w.globals.tooltip = new mt2(this.ctx);
      } }]), t3;
    }();
    var Ut2 = function() {
      function t3(e3) {
        i(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return s(t3, [{ key: "clear", value: function(t4) {
        var e3 = t4.isUpdating;
        this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({ isUpdating: e3 });
      } }, { key: "killSVG", value: function(t4) {
        t4.each(function(t5, e3) {
          this.removeClass("*"), this.off(), this.stop();
        }, true), t4.ungroup(), t4.clear();
      } }, { key: "clearDomElements", value: function(t4) {
        var e3 = this, i2 = t4.isUpdating, a3 = this.w.globals.dom.Paper.node;
        a3.parentNode && a3.parentNode.parentNode && !i2 && (a3.parentNode.parentNode.style.minHeight = "unset");
        var s2 = this.w.globals.dom.baseEl;
        s2 && this.ctx.eventList.forEach(function(t5) {
          s2.removeEventListener(t5, e3.ctx.events.documentEvent);
        });
        var r3 = this.w.globals.dom;
        if (null !== this.ctx.el) for (; this.ctx.el.firstChild; ) this.ctx.el.removeChild(this.ctx.el.firstChild);
        this.killSVG(r3.Paper), r3.Paper.remove(), r3.elWrap = null, r3.elGraphical = null, r3.elLegendWrap = null, r3.elLegendForeign = null, r3.baseEl = null, r3.elGridRect = null, r3.elGridRectMask = null, r3.elGridRectMarkerMask = null, r3.elForecastMask = null, r3.elNonForecastMask = null, r3.elDefs = null;
      } }]), t3;
    }();
    var qt2 = /* @__PURE__ */ new WeakMap();
    var Zt2 = function() {
      function t3(e3, a3) {
        i(this, t3), this.opts = a3, this.ctx = this, this.w = new H(a3).init(), this.el = e3, this.w.globals.cuid = v.randomId(), this.w.globals.chartID = this.w.config.chart.id ? v.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new _t2(this).initModules(), this.create = v.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);
      }
      return s(t3, [{ key: "render", value: function() {
        var t4 = this;
        return new Promise(function(e3, i2) {
          if (null !== t4.el) {
            void 0 === Apex._chartInstances && (Apex._chartInstances = []), t4.w.config.chart.id && Apex._chartInstances.push({ id: t4.w.globals.chartID, group: t4.w.config.chart.group, chart: t4 }), t4.setLocale(t4.w.config.chart.defaultLocale);
            var a3 = t4.w.config.chart.events.beforeMount;
            "function" == typeof a3 && a3(t4, t4.w), t4.events.fireEvent("beforeMount", [t4, t4.w]), window.addEventListener("resize", t4.windowResizeHandler), function(t5, e4) {
              var i3 = false;
              if (t5.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
                var a4 = t5.getBoundingClientRect();
                "none" !== t5.style.display && 0 !== a4.width || (i3 = true);
              }
              var s3 = new ResizeObserver(function(a5) {
                i3 && e4.call(t5, a5), i3 = true;
              });
              t5.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t5.children).forEach(function(t6) {
                return s3.observe(t6);
              }) : s3.observe(t5), qt2.set(e4, s3);
            }(t4.el.parentNode, t4.parentResizeHandler);
            var s2 = t4.el.getRootNode && t4.el.getRootNode(), r3 = v.is("ShadowRoot", s2), o3 = t4.el.ownerDocument, n2 = r3 ? s2.getElementById("apexcharts-css") : o3.getElementById("apexcharts-css");
            if (!n2) {
              var l2;
              (n2 = document.createElement("style")).id = "apexcharts-css", n2.textContent = '@keyframes opaque {\n  0% {\n    opacity: 0\n  }\n\n  to {\n    opacity: 1\n  }\n}\n\n@keyframes resizeanim {\n\n  0%,\n  to {\n    opacity: 0\n  }\n}\n\n.apexcharts-canvas {\n  position: relative;\n  user-select: none\n}\n\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5)\n}\n\n.apexcharts-inner {\n  position: relative\n}\n\n.apexcharts-text tspan {\n  font-family: inherit\n}\n\nrect.legend-mouseover-inactive,\n.legend-mouseover-inactive rect,\n.legend-mouseover-inactive path,\n.legend-mouseover-inactive circle,\n.legend-mouseover-inactive line,\n.legend-mouseover-inactive text.apexcharts-yaxis-title-text,\n.legend-mouseover-inactive text.apexcharts-yaxis-label {\n  transition: .15s ease all;\n  opacity: .2\n}\n\n.apexcharts-legend-text {\n  padding-left: 15px;\n  margin-left: -15px;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, .96)\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30, 30, 30, .8)\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #eceff1;\n  border-bottom: 1px solid #ddd\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, .7);\n  border-bottom: 1px solid #333\n}\n\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  margin-left: 5px;\n  font-weight: 600\n}\n\n.apexcharts-tooltip-text-goals-label:empty,\n.apexcharts-tooltip-text-goals-value:empty,\n.apexcharts-tooltip-text-y-label:empty,\n.apexcharts-tooltip-text-y-value:empty,\n.apexcharts-tooltip-text-z-value:empty,\n.apexcharts-tooltip-title:empty {\n  display: none\n}\n\n.apexcharts-tooltip-text-goals-label,\n.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px\n}\n\n.apexcharts-tooltip-goals-group,\n.apexcharts-tooltip-text-goals-label,\n.apexcharts-tooltip-text-goals-value {\n  display: flex\n}\n\n.apexcharts-tooltip-text-goals-label:not(:empty),\n.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0;\n  margin-right: 10px;\n  border-radius: 50%\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,\n.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px\n}\n\n.apexcharts-custom-tooltip,\n.apexcharts-tooltip-box {\n  padding: 4px 8px\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: 700\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: 700;\n  display: block;\n  margin-bottom: 5px\n}\n\n.apexcharts-xaxistooltip,\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #eceff1;\n  border: 1px solid #90a4ae\n}\n\n.apexcharts-xaxistooltip {\n  padding: 9px 10px;\n  transition: .15s ease all\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, .7);\n  border: 1px solid rgba(0, 0, 0, .5);\n  color: #fff\n}\n\n.apexcharts-xaxistooltip:after,\n.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-left: -6px\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-left: -7px\n}\n\n.apexcharts-xaxistooltip-bottom:after,\n.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%\n}\n\n.apexcharts-xaxistooltip-top:after,\n.apexcharts-xaxistooltip-top:before {\n  top: 100%\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-yaxistooltip {\n  padding: 4px 10px\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, .7);\n  border: 1px solid rgba(0, 0, 0, .5);\n  color: #fff\n}\n\n.apexcharts-yaxistooltip:after,\n.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-top: -6px\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-top: -7px\n}\n\n.apexcharts-yaxistooltip-left:after,\n.apexcharts-yaxistooltip-left:before {\n  left: 100%\n}\n\n.apexcharts-yaxistooltip-right:after,\n.apexcharts-yaxistooltip-right:before {\n  right: 100%\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none\n}\n\n.apexcharts-xcrosshairs,\n.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: .15s ease all\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,\n.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0\n}\n\n.apexcharts-selection-rect {\n  cursor: move\n}\n\n.svg_select_boundingRect,\n.svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_boundingRect,\n.apexcharts-selection-rect+g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_points_l,\n.apexcharts-selection-rect+g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-menu-icon,\n.apexcharts-pan-icon,\n.apexcharts-reset-icon,\n.apexcharts-selection-icon,\n.apexcharts-toolbar-custom-icon,\n.apexcharts-zoom-icon,\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6e8192;\n  text-align: center\n}\n\n.apexcharts-menu-icon svg,\n.apexcharts-reset-icon svg,\n.apexcharts-zoom-icon svg,\n.apexcharts-zoomin-icon svg,\n.apexcharts-zoomout-icon svg {\n  fill: #6e8192\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(.76)\n}\n\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\n  fill: #f3f4f5\n}\n\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\n  fill: #008ffb\n}\n\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\n  fill: #333\n}\n\n.apexcharts-menu-icon,\n.apexcharts-selection-icon {\n  position: relative\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px\n}\n\n.apexcharts-menu-icon,\n.apexcharts-reset-icon,\n.apexcharts-zoom-icon {\n  transform: scale(.85)\n}\n\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  transform: scale(.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px\n}\n\n.apexcharts-pan-icon {\n  transform: scale(.62);\n  position: relative;\n  left: 1px;\n  top: 0\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6e8192;\n  stroke-width: 2\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008ffb\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0 6px 2px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: .15s ease all;\n  pointer-events: none\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: .15s ease all\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0, 0, 0, .7);\n  color: #fff\n}\n\n@media screen and (min-width:768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1\n  }\n}\n\n.apexcharts-canvas .apexcharts-element-hidden,\n.apexcharts-datalabel.apexcharts-element-hidden,\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-hidden-element-shown {\n  opacity: 1;\n  transition: 0.25s ease all;\n}\n\n.apexcharts-datalabel,\n.apexcharts-datalabel-label,\n.apexcharts-datalabel-value,\n.apexcharts-datalabels,\n.apexcharts-pie-label {\n  cursor: default;\n  pointer-events: none\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: .3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease\n}\n\n.apexcharts-radialbar-label {\n  cursor: pointer;\n}\n\n.apexcharts-annotation-rect,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-gridline,\n.apexcharts-line,\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-point-annotation-label,\n.apexcharts-radar-series path:not(.apexcharts-marker),\n.apexcharts-radar-series polygon,\n.apexcharts-toolbar svg,\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-xaxis-annotation-label,\n.apexcharts-yaxis-annotation-label,\n.apexcharts-zoom-rect {\n  pointer-events: none\n}\n\n.apexcharts-tooltip-active .apexcharts-marker {\n  transition: .15s ease all\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden\n}\n\n.contract-trigger:before,\n.resize-triggers,\n.resize-triggers>div {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0\n}\n\n.resize-triggers>div {\n  height: 100%;\n  width: 100%;\n  background: #eee;\n  overflow: auto\n}\n\n.contract-trigger:before {\n  overflow: hidden;\n  width: 200%;\n  height: 200%\n}\n\n.apexcharts-bar-goals-markers {\n  pointer-events: none\n}\n\n.apexcharts-bar-shadows {\n  pointer-events: none\n}\n\n.apexcharts-rangebar-goals-markers {\n  pointer-events: none\n}';
              var h2 = (null === (l2 = t4.opts.chart) || void 0 === l2 ? void 0 : l2.nonce) || t4.w.config.chart.nonce;
              h2 && n2.setAttribute("nonce", h2), r3 ? s2.prepend(n2) : o3.head.appendChild(n2);
            }
            var c3 = t4.create(t4.w.config.series, {});
            if (!c3) return e3(t4);
            t4.mount(c3).then(function() {
              "function" == typeof t4.w.config.chart.events.mounted && t4.w.config.chart.events.mounted(t4, t4.w), t4.events.fireEvent("mounted", [t4, t4.w]), e3(c3);
            }).catch(function(t5) {
              i2(t5);
            });
          } else i2(new Error("Element not found"));
        });
      } }, { key: "create", value: function(t4, e3) {
        var i2 = this, a3 = this.w;
        new _t2(this).initModules();
        var s2 = this.w.globals;
        (s2.noData = false, s2.animationEnded = false, this.responsive.checkResponsiveConfig(e3), a3.config.xaxis.convertedCatToNumeric) && new F2(a3.config).convertCatToNumericXaxis(a3.config, this.ctx);
        if (null === this.el) return s2.animationEnded = true, null;
        if (this.core.setupElements(), "treemap" === a3.config.chart.type && (a3.config.grid.show = false, a3.config.yaxis[0].show = false), 0 === s2.svgWidth) return s2.animationEnded = true, null;
        var r3 = t4;
        t4.forEach(function(t5, e4) {
          t5.hidden && (r3 = i2.legend.legendHelpers.getSeriesAfterCollapsing({ realIndex: e4 }));
        });
        var o3 = k.checkComboSeries(r3, a3.config.chart.type);
        s2.comboCharts = o3.comboCharts, s2.comboBarCount = o3.comboBarCount;
        var n2 = r3.every(function(t5) {
          return t5.data && 0 === t5.data.length;
        });
        (0 === r3.length || n2 && s2.collapsedSeries.length < 1) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(r3), this.theme.init(), new N(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), s2.noData && s2.collapsedSeries.length !== s2.series.length && !a3.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), s2.axisCharts && (this.core.coreCalculations(), "category" !== a3.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = a3.globals.minX, this.ctx.toolbar.maxX = a3.globals.maxX), this.formatters.heatmapLabelFormatters(), new k(this).getLargestMarkerSize(), this.dimensions.plotCoords();
        var l2 = this.core.xySettings();
        this.grid.createGridMask();
        var h2 = this.core.plotChartType(r3, l2), c3 = new B2(this);
        return c3.bringForward(), a3.config.dataLabels.background.enabled && c3.dataLabelsBackground(), this.core.shiftGraphPosition(), { elGraph: h2, xyRatios: l2, dimensions: { plot: { left: a3.globals.translateX, top: a3.globals.translateY, width: a3.globals.gridWidth, height: a3.globals.gridHeight } } };
      } }, { key: "mount", value: function() {
        var t4 = this, e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i2 = this, a3 = i2.w;
        return new Promise(function(s2, r3) {
          if (null === i2.el) return r3(new Error("Not enough data to display or target element not found"));
          (null === e3 || a3.globals.allSeriesCollapsed) && i2.series.handleNoData(), i2.grid = new U2(i2);
          var o3, n2, l2 = i2.grid.drawGrid();
          (i2.annotations = new X2(i2), i2.annotations.drawImageAnnos(), i2.annotations.drawTextAnnos(), "back" === a3.config.grid.position) && (l2 && a3.globals.dom.elGraphical.add(l2.el), null != l2 && null !== (o3 = l2.elGridBorders) && void 0 !== o3 && o3.node && a3.globals.dom.elGraphical.add(l2.elGridBorders));
          if (Array.isArray(e3.elGraph)) for (var h2 = 0; h2 < e3.elGraph.length; h2++) a3.globals.dom.elGraphical.add(e3.elGraph[h2]);
          else a3.globals.dom.elGraphical.add(e3.elGraph);
          "front" === a3.config.grid.position && (l2 && a3.globals.dom.elGraphical.add(l2.el), null != l2 && null !== (n2 = l2.elGridBorders) && void 0 !== n2 && n2.node && a3.globals.dom.elGraphical.add(l2.elGridBorders));
          "front" === a3.config.xaxis.crosshairs.position && i2.crosshairs.drawXCrosshairs(), "front" === a3.config.yaxis[0].crosshairs.position && i2.crosshairs.drawYCrosshairs(), "treemap" !== a3.config.chart.type && i2.axes.drawAxis(a3.config.chart.type, l2);
          var c3 = new _(t4.ctx, l2), d2 = new $(t4.ctx, l2);
          if (null !== l2 && (c3.xAxisLabelCorrections(l2.xAxisTickWidth), d2.setYAxisTextAlignments(), a3.config.yaxis.map(function(t5, e4) {
            -1 === a3.globals.ignoreYAxisIndexes.indexOf(e4) && d2.yAxisTitleRotate(e4, t5.opposite);
          })), i2.annotations.drawAxesAnnotations(), !a3.globals.noData) {
            if (a3.config.tooltip.enabled && !a3.globals.noData && i2.w.globals.tooltip.drawTooltip(e3.xyRatios), a3.globals.axisCharts && (a3.globals.isXNumeric || a3.config.xaxis.convertedCatToNumeric || a3.globals.isRangeBar)) (a3.config.chart.zoom.enabled || a3.config.chart.selection && a3.config.chart.selection.enabled || a3.config.chart.pan && a3.config.chart.pan.enabled) && i2.zoomPanSelection.init({ xyRatios: e3.xyRatios });
            else {
              var g2 = a3.config.chart.toolbar.tools;
              ["zoom", "zoomin", "zoomout", "selection", "pan", "reset"].forEach(function(t5) {
                g2[t5] = false;
              });
            }
            a3.config.chart.toolbar.show && !a3.globals.allSeriesCollapsed && i2.toolbar.createToolbar();
          }
          a3.globals.memory.methodsToExec.length > 0 && a3.globals.memory.methodsToExec.forEach(function(t5) {
            t5.method(t5.params, false, t5.context);
          }), a3.globals.axisCharts || a3.globals.noData || i2.core.resizeNonAxisCharts(), s2(i2);
        });
      } }, { key: "destroy", value: function() {
        var t4, e3;
        window.removeEventListener("resize", this.windowResizeHandler), this.el.parentNode, t4 = this.parentResizeHandler, (e3 = qt2.get(t4)) && (e3.disconnect(), qt2.delete(t4));
        var i2 = this.w.config.chart.id;
        i2 && Apex._chartInstances.forEach(function(t5, e4) {
          t5.id === v.escapeString(i2) && Apex._chartInstances.splice(e4, 1);
        }), new Ut2(this.ctx).clear({ isUpdating: false });
      } }, { key: "updateOptions", value: function(t4) {
        var e3 = this, i2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r3 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], o3 = this.w;
        return o3.globals.selection = void 0, t4.series && (this.series.resetSeries(false, true, false), t4.series.length && t4.series[0].data && (t4.series = t4.series.map(function(t5, i3) {
          return e3.updateHelpers._extendSeries(t5, i3);
        })), this.updateHelpers.revertDefaultAxisMinMax()), t4.xaxis && (t4 = this.updateHelpers.forceXAxisUpdate(t4)), t4.yaxis && (t4 = this.updateHelpers.forceYAxisUpdate(t4)), o3.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t4.theme && (t4 = this.theme.updateThemeOptions(t4)), this.updateHelpers._updateOptions(t4, i2, a3, s2, r3);
      } }, { key: "updateSeries", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
        return this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t4, e3, i2);
      } }, { key: "appendSeries", value: function(t4) {
        var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a3 = this.w.config.series.slice();
        return a3.push(t4), this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a3, e3, i2);
      } }, { key: "appendData", value: function(t4) {
        var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = this;
        i2.w.globals.dataChanged = true, i2.series.getPreviousPaths();
        for (var a3 = i2.w.config.series.slice(), s2 = 0; s2 < a3.length; s2++) if (null !== t4[s2] && void 0 !== t4[s2]) for (var r3 = 0; r3 < t4[s2].data.length; r3++) a3[s2].data.push(t4[s2].data[r3]);
        return i2.w.config.series = a3, e3 && (i2.w.globals.initialSeries = v.clone(i2.w.config.series)), this.update();
      } }, { key: "update", value: function(t4) {
        var e3 = this;
        return new Promise(function(i2, a3) {
          new Ut2(e3.ctx).clear({ isUpdating: true });
          var s2 = e3.create(e3.w.config.series, t4);
          if (!s2) return i2(e3);
          e3.mount(s2).then(function() {
            "function" == typeof e3.w.config.chart.events.updated && e3.w.config.chart.events.updated(e3, e3.w), e3.events.fireEvent("updated", [e3, e3.w]), e3.w.globals.isDirty = true, i2(e3);
          }).catch(function(t5) {
            a3(t5);
          });
        });
      } }, { key: "getSyncedCharts", value: function() {
        var t4 = this.getGroupedCharts(), e3 = [this];
        return t4.length && (e3 = [], t4.forEach(function(t5) {
          e3.push(t5);
        })), e3;
      } }, { key: "getGroupedCharts", value: function() {
        var t4 = this;
        return Apex._chartInstances.filter(function(t5) {
          if (t5.group) return true;
        }).map(function(e3) {
          return t4.w.config.chart.group === e3.group ? e3.chart : t4;
        });
      } }, { key: "toggleSeries", value: function(t4) {
        return this.series.toggleSeries(t4);
      } }, { key: "highlightSeriesOnLegendHover", value: function(t4, e3) {
        return this.series.toggleSeriesOnHover(t4, e3);
      } }, { key: "showSeries", value: function(t4) {
        this.series.showSeries(t4);
      } }, { key: "hideSeries", value: function(t4) {
        this.series.hideSeries(t4);
      } }, { key: "highlightSeries", value: function(t4) {
        this.series.highlightSeries(t4);
      } }, { key: "isSeriesHidden", value: function(t4) {
        this.series.isSeriesHidden(t4);
      } }, { key: "resetSeries", value: function() {
        var t4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this.series.resetSeries(t4, e3);
      } }, { key: "addEventListener", value: function(t4, e3) {
        this.events.addEventListener(t4, e3);
      } }, { key: "removeEventListener", value: function(t4, e3) {
        this.events.removeEventListener(t4, e3);
      } }, { key: "addXaxisAnnotation", value: function(t4) {
        var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
        i2 && (a3 = i2), a3.annotations.addXaxisAnnotationExternal(t4, e3, a3);
      } }, { key: "addYaxisAnnotation", value: function(t4) {
        var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
        i2 && (a3 = i2), a3.annotations.addYaxisAnnotationExternal(t4, e3, a3);
      } }, { key: "addPointAnnotation", value: function(t4) {
        var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
        i2 && (a3 = i2), a3.annotations.addPointAnnotationExternal(t4, e3, a3);
      } }, { key: "clearAnnotations", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, e3 = this;
        t4 && (e3 = t4), e3.annotations.clearAnnotations(e3);
      } }, { key: "removeAnnotation", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, i2 = this;
        e3 && (i2 = e3), i2.annotations.removeAnnotation(i2, t4);
      } }, { key: "getChartArea", value: function() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
      } }, { key: "getSeriesTotalXRange", value: function(t4, e3) {
        return this.coreUtils.getSeriesTotalsXRange(t4, e3);
      } }, { key: "getHighestValueInSeries", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        return new Z2(this.ctx).getMinYMaxY(t4).highestY;
      } }, { key: "getLowestValueInSeries", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        return new Z2(this.ctx).getMinYMaxY(t4).lowestY;
      } }, { key: "getSeriesTotal", value: function() {
        return this.w.globals.seriesTotals;
      } }, { key: "toggleDataPointSelection", value: function(t4, e3) {
        return this.updateHelpers.toggleDataPointSelection(t4, e3);
      } }, { key: "zoomX", value: function(t4, e3) {
        this.ctx.toolbar.zoomUpdateOptions(t4, e3);
      } }, { key: "setLocale", value: function(t4) {
        this.localization.setCurrentLocaleValues(t4);
      } }, { key: "dataURI", value: function(t4) {
        return new j(this.ctx).dataURI(t4);
      } }, { key: "exportToCSV", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return new j(this.ctx).exportToCSV(t4);
      } }, { key: "paper", value: function() {
        return this.w.globals.dom.Paper;
      } }, { key: "_parentResizeCallback", value: function() {
        this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();
      } }, { key: "_windowResize", value: function() {
        var t4 = this;
        clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function() {
          t4.w.globals.resized = true, t4.w.globals.dataChanged = false, t4.ctx.update();
        }, 150);
      } }, { key: "_windowResizeHandler", value: function() {
        var t4 = this.w.config.chart.redrawOnWindowResize;
        "function" == typeof t4 && (t4 = t4()), t4 && this._windowResize();
      } }], [{ key: "getChartByID", value: function(t4) {
        var e3 = v.escapeString(t4);
        if (Apex._chartInstances) {
          var i2 = Apex._chartInstances.filter(function(t5) {
            return t5.id === e3;
          })[0];
          return i2 && i2.chart;
        }
      } }, { key: "initOnLoad", value: function() {
        for (var e3 = document.querySelectorAll("[data-apexcharts]"), i2 = 0; i2 < e3.length; i2++) {
          new t3(e3[i2], JSON.parse(e3[i2].getAttribute("data-options"))).render();
        }
      } }, { key: "exec", value: function(t4, e3) {
        var i2 = this.getChartByID(t4);
        if (i2) {
          i2.w.globals.isExecCalled = true;
          var a3 = null;
          if (-1 !== i2.publicMethods.indexOf(e3)) {
            for (var s2 = arguments.length, r3 = new Array(s2 > 2 ? s2 - 2 : 0), o3 = 2; o3 < s2; o3++) r3[o3 - 2] = arguments[o3];
            a3 = i2[e3].apply(i2, r3);
          }
          return a3;
        }
      } }, { key: "merge", value: function(t4, e3) {
        return v.extend(t4, e3);
      } }]), t3;
    }();
    module.exports = Zt2;
  }
});

// node_modules/react-apexcharts/dist/react-apexcharts.min.js
var require_react_apexcharts_min = __commonJS({
  "node_modules/react-apexcharts/dist/react-apexcharts.min.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
      return typeof e2;
    } : function(e2) {
      return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
    };
    var _extends = Object.assign || function(e2) {
      for (var t2 = 1; t2 < arguments.length; t2++) {
        var r2, n = arguments[t2];
        for (r2 in n) Object.prototype.hasOwnProperty.call(n, r2) && (e2[r2] = n[r2]);
      }
      return e2;
    };
    var _createClass = /* @__PURE__ */ function() {
      function n(e2, t2) {
        for (var r2 = 0; r2 < t2.length; r2++) {
          var n2 = t2[r2];
          n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e2, n2.key, n2);
        }
      }
      return function(e2, t2, r2) {
        return t2 && n(e2.prototype, t2), r2 && n(e2, r2), e2;
      };
    }();
    var _apexcharts = require_apexcharts_common();
    var _apexcharts2 = _interopRequireDefault(_apexcharts);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    function _interopRequireDefault(e2) {
      return e2 && e2.__esModule ? e2 : { default: e2 };
    }
    function _defineProperty2(e2, t2, r2) {
      return t2 in e2 ? Object.defineProperty(e2, t2, { value: r2, enumerable: true, configurable: true, writable: true }) : e2[t2] = r2, e2;
    }
    function _objectWithoutProperties2(e2, t2) {
      var r2, n = {};
      for (r2 in e2) 0 <= t2.indexOf(r2) || Object.prototype.hasOwnProperty.call(e2, r2) && (n[r2] = e2[r2]);
      return n;
    }
    function _classCallCheck(e2, t2) {
      if (!(e2 instanceof t2)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(e2, t2) {
      if (e2) return !t2 || "object" != typeof t2 && "function" != typeof t2 ? e2 : t2;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    function _inherits(e2, t2) {
      if ("function" != typeof t2 && null !== t2) throw new TypeError("Super expression must either be null or a function, not " + typeof t2);
      e2.prototype = Object.create(t2 && t2.prototype, { constructor: { value: e2, enumerable: false, writable: true, configurable: true } }), t2 && (Object.setPrototypeOf ? Object.setPrototypeOf(e2, t2) : e2.__proto__ = t2);
    }
    window.ApexCharts = _apexcharts2.default;
    var Charts = function() {
      function r2(e2) {
        _classCallCheck(this, r2);
        var t2 = _possibleConstructorReturn(this, (r2.__proto__ || Object.getPrototypeOf(r2)).call(this, e2));
        return _react2.default.createRef ? t2.chartRef = _react2.default.createRef() : t2.setRef = function(e3) {
          return t2.chartRef = e3;
        }, t2.chart = null, t2;
      }
      return _inherits(r2, _react.Component), _createClass(r2, [{ key: "render", value: function() {
        var e2 = _objectWithoutProperties2(this.props, []);
        return _react2.default.createElement("div", _extends({ ref: _react2.default.createRef ? this.chartRef : this.setRef }, e2));
      } }, { key: "componentDidMount", value: function() {
        var e2 = _react2.default.createRef ? this.chartRef.current : this.chartRef;
        this.chart = new _apexcharts2.default(e2, this.getConfig()), this.chart.render();
      } }, { key: "getConfig", value: function() {
        var e2 = this.props, t2 = e2.type, r3 = e2.height, n = e2.width, o2 = e2.series, e2 = e2.options;
        return this.extend(e2, { chart: { type: t2, height: r3, width: n }, series: o2 });
      } }, { key: "isObject", value: function(e2) {
        return e2 && "object" === (void 0 === e2 ? "undefined" : _typeof2(e2)) && !Array.isArray(e2) && null != e2;
      } }, { key: "extend", value: function(t2, r3) {
        var n = this, o2 = ("function" != typeof Object.assign && (Object.assign = function(e2) {
          if (null == e2) throw new TypeError("Cannot convert undefined or null to object");
          for (var t3 = Object(e2), r4 = 1; r4 < arguments.length; r4++) {
            var n2 = arguments[r4];
            if (null != n2) for (var o3 in n2) n2.hasOwnProperty(o3) && (t3[o3] = n2[o3]);
          }
          return t3;
        }), Object.assign({}, t2));
        return this.isObject(t2) && this.isObject(r3) && Object.keys(r3).forEach(function(e2) {
          n.isObject(r3[e2]) && e2 in t2 ? o2[e2] = n.extend(t2[e2], r3[e2]) : Object.assign(o2, _defineProperty2({}, e2, r3[e2]));
        }), o2;
      } }, { key: "componentDidUpdate", value: function(e2) {
        if (!this.chart) return null;
        var t2 = this.props, r3 = t2.options, n = t2.series, o2 = t2.height, t2 = t2.width, i = JSON.stringify(e2.options), a2 = JSON.stringify(e2.series), r3 = JSON.stringify(r3), s = JSON.stringify(n);
        i === r3 && a2 === s && o2 === e2.height && t2 === e2.width || (a2 !== s && i === r3 && o2 === e2.height && t2 === e2.width ? this.chart.updateSeries(n) : this.chart.updateOptions(this.getConfig()));
      } }, { key: "componentWillUnmount", value: function() {
        this.chart && "function" == typeof this.chart.destroy && this.chart.destroy();
      } }]), r2;
    }();
    (exports.default = Charts).propTypes = { type: _propTypes2.default.string.isRequired, width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]), height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]), series: _propTypes2.default.array.isRequired, options: _propTypes2.default.object.isRequired }, Charts.defaultProps = { type: "line", width: "100%", height: "auto" };
  }
});

// app/components/ActionItems.tsx
var ActionItems_exports = {};
__export(ActionItems_exports, {
  default: () => ActionItems_default
});
var import_react4, import_jsx_runtime5, ActionItems, ActionItems_default;
var init_ActionItems = __esm({
  "app/components/ActionItems.tsx"() {
    "use strict";
    import_react4 = __toESM(require_react(), 1);
    init_pro_solid_svg_icons();
    init_axios2();
    init_CustomIcon();
    init_skeleton();
    import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
    ActionItems = ({ projectId, userId, compId }) => {
      const [data, setData] = (0, import_react4.useState)([]);
      (0, import_react4.useEffect)(() => {
        const fetchData = async () => {
          try {
            const formData = new FormData();
            formData.append("op", "get_project_reference_detail");
            formData.append("project_id", projectId.toString() ?? "0");
            formData.append("need_more_data", "0");
            formData.append("for_module_key", "");
            formData.append("version", "web");
            formData.append("from", "panel");
            formData.append("iframe_call", "0");
            formData.append("tz", "+5:30");
            formData.append("tzid", "Asia/Calcutta");
            formData.append("curr_time", "2024-08-31 15:50:38");
            formData.append("force_login", "0");
            formData.append("global_project", "");
            formData.append("user_id", userId.toString() ?? "0");
            formData.append("company_id", compId.toString() ?? "0");
            const response = await axios_default.post(
              `https://api-cfdev.contractorforeman.net/service.php?opp=get_project_reference_detail&c=${compId ? Number(compId) : 0}&u=${userId ? Number(userId) : 0}&p=manage_projects`,
              formData
            );
            setData(response?.data?.data?.modules);
          } catch (error) {
            console.log("Error fetching data:", error);
          }
        };
        const timeOut = setTimeout(() => {
          fetchData();
        }, 300);
        return () => {
          clearTimeout(timeOut);
        };
      }, []);
      const ReactApexChart = require_react_apexcharts_min().default;
      const options = {
        chart: {
          id: "chart1",
          type: "bar",
          stacked: true,
          toolbar: {
            show: false
          }
        },
        plotOptions: {
          bar: {
            horizontal: true,
            dataLabels: {
              total: {
                enabled: true,
                offsetX: 0,
                style: {
                  fontSize: "13px",
                  fontWeight: 900
                }
              }
            }
          }
        },
        xaxis: { categories: ["OPEN", "DUE", "CLOSED"], tickPlacement: "on" },
        colors: ["#684CC7", "#e01f35", "#282691"],
        legend: {
          show: true,
          position: "top"
        }
      };
      const invoices = data?.open_incomplete_item?.opnIncoInvoice[0] || {};
      const bills = data?.open_incomplete_item?.opnIncoBills[0] || {};
      const pos = data?.open_incomplete_item?.opnIncoPurchaseOrder[0] || {};
      const series = [
        {
          name: "Invocies",
          data: [
            Number(invoices?.total_open) || 0,
            Number(invoices?.total_due) || 0,
            Number(invoices?.total_close) || 0
          ]
        },
        {
          name: "Bills",
          data: [
            Number(bills?.total_open) || 0,
            Number(bills?.bill_count) || 0,
            Number(bills?.total_close) || 0
          ]
        },
        {
          name: "Bills",
          data: [
            Number(pos?.total_open) || 0,
            Number(pos?.bill_count) || 0,
            Number(pos?.total_close) || 0
          ]
        }
      ];
      return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "h-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          CustomIcon_default,
          {
            icon: faBoxCircleCheck,
            label: "Action-Items",
            bgColor: "#ECF3FE",
            color: "#7FB2FF"
          }
        ),
        !ReactApexChart ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "space-y-4", children: [...Array(4)].map((_, index) => /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(skeleton_default, { className: "w-8 h-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
            skeleton_default,
            {
              className: `h-14 ${index === 1 ? "w-3/4" : index === 2 ? "w-full" : "w-1/2"}`
            }
          )
        ] }, index)) }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          ReactApexChart,
          {
            type: "bar",
            options,
            series,
            height: 307
          }
        )
      ] });
    };
    ActionItems_default = ActionItems;
  }
});

// app/components/SummaryPercentages.tsx
var SummaryPercentages_exports = {};
__export(SummaryPercentages_exports, {
  default: () => SummaryPercentages_default
});
var import_jsx_runtime6, SummaryPercentages, SummaryPercentages_default, ChartSkeleton;
var init_SummaryPercentages = __esm({
  "app/components/SummaryPercentages.tsx"() {
    "use strict";
    init_pro_solid_svg_icons();
    init_CustomIcon();
    init_skeleton();
    import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
    SummaryPercentages = ({ data }) => {
      const billing_vs_actual = data?.billing_vs_actual;
      const all_item_total = data?.all_item_total;
      console.log(data);
      const formatCurrency2 = (value) => {
        return new Intl.NumberFormat("en-US", {
          style: "currency",
          currency: "USD",
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        }).format(value);
      };
      const ReactApexChart = require_react_apexcharts_min().default;
      const options = {
        chart: {
          id: "chart1",
          toolbar: {
            show: false
          }
        },
        plotOptions: {
          bar: {
            horizontal: false,
            columnWidth: "30%",
            // Adjust the column width
            dataLabels: {
              position: "top"
              // Optional: show data labels above bars
            }
          }
        },
        xaxis: {
          categories: ["Committed", "Actual", "Labor", "Invoiced"]
        },
        yaxis: {
          labels: {
            formatter: function(val) {
              return `${val.toFixed(0)}%`;
            }
          },
          min: 0,
          max: 1e3
        },
        dataLabels: {
          enabled: false
          // Disable default data labels on the chart
        },
        stroke: {
          colors: ["transparent"],
          width: 5
        },
        tooltip: {
          shared: true,
          // Show multiple series in the tooltip (as shown in the image)
          intersect: false,
          y: {
            formatter: function(val) {
              return formatCurrency2(Number(val));
            }
          }
        },
        colors: ["#7989A9", "#F9C75C"],
        // Adjust colors for bars
        legend: {
          show: false,
          position: "top"
        }
      };
      const series = [
        {
          name: "Invoiced to Date",
          data: [
            Number(all_item_total?.total?.commited_total) || 0,
            Number(all_item_total?.total?.actual_total) || 0,
            Number(all_item_total?.labor?.actual_total) || 0,
            Number(billing_vs_actual?.amount_invoiced / 100) || 0
          ]
        },
        {
          name: "Total Project Amount",
          data: [
            Number(all_item_total?.unassigned?.estimated_total) || 0,
            Number(all_item_total?.total?.estimated_total) || 0,
            Number(all_item_total?.labor?.estimated_total) || 0,
            Number(billing_vs_actual?.original_contract_amount / 100) || 0
          ]
        }
      ];
      return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "h-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          CustomIcon_default,
          {
            icon: faSackDollar,
            label: "Summary Percentages",
            bgColor: "#FEF6E5",
            color: "#F8AB07",
            className: "text-base"
          }
        ),
        !ReactApexChart ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "mt-5", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(ChartSkeleton, {}) }) : /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          ReactApexChart,
          {
            type: "bar",
            height: 307,
            options,
            series
          }
        )
      ] });
    };
    SummaryPercentages_default = SummaryPercentages;
    ChartSkeleton = () => {
      return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "relative h-64 ", children: [
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "absolute left-0 top-0 bottom-0 flex flex-col justify-between py-2", children: [...Array(6)].map((_, index) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(skeleton_default, { className: "w-10 h-2" }, index)) }),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "absolute left-14  right-0 top-0 bottom-8 flex justify-between items-end", children: [10, 16, 60, 20, 40].map((height, index) => /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "flex flex-col items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(skeleton_default, { className: `w-12 mb-1 h-${height}` }),
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(skeleton_default, { className: "w-16 h-2" })
        ] }, index)) })
      ] });
    };
  }
});

// app/components/WorkInprogress.tsx
var WorkInprogress_exports = {};
__export(WorkInprogress_exports, {
  default: () => WorkInprogress_default
});
var import_react5, import_jsx_runtime7, WorkInprogress, WorkInprogress_default;
var init_WorkInprogress = __esm({
  "app/components/WorkInprogress.tsx"() {
    "use strict";
    init_pro_solid_svg_icons();
    init_helpers();
    init_CustomIcon();
    import_react5 = __toESM(require_react(), 1);
    init_skeleton();
    import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
    WorkInprogress = ({ data }) => {
      const [isLoading, setIsLoading] = (0, import_react5.useState)(true);
      (0, import_react5.useEffect)(() => {
        setTimeout(() => {
          setIsLoading(false);
        }, 1e3);
      }, []);
      console.log("Work in progress", data);
      const {
        cost_completed,
        current_cost_budget,
        earned_revenue,
        forcast_completed,
        original_contract_amount,
        over_billing,
        total_actual_cost,
        under_billing
      } = data;
      const Items = [
        {
          id: 1,
          label: "Total Project Amount (no/Tax)",
          value: `${formatCurrency(Number(original_contract_amount))}
`,
          color: "text-emerald-600"
        },
        {
          id: 2,
          label: "Invoiced to Date (no/Tax)",
          value: `${formatCurrency(Number(original_contract_amount))}
`,
          color: "text-emerald-600"
        },
        {
          id: 3,
          label: "Current Cost Budget",
          value: `${formatCurrency(Number(current_cost_budget))}`,
          color: "text-red-600"
        },
        {
          id: 4,
          label: "Total Actual Costs",
          value: `${formatCurrency(Number(total_actual_cost))}`,
          color: "text-red-600"
        },
        {
          id: 5,
          label: "Cost % Complete",
          value: `${Number(cost_completed).toFixed(2)}%`,
          color: ""
        },
        {
          id: 6,
          label: "Forecasted % Complete",
          value: `${Number(forcast_completed)}%`,
          color: ""
        },
        {
          id: 7,
          label: "Earned Revenue",
          value: `${formatCurrency(Number(earned_revenue))}`,
          color: "text-emerald-600"
        },
        {
          id: 8,
          label: "Over Billings",
          value: `${formatCurrency(Number(over_billing))}`,
          color: "text-emerald-600"
        },
        {
          id: 9,
          label: " Under Billings",
          value: `${formatCurrency(Number(under_billing))}`,
          color: "text-red-600"
        }
      ];
      return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(import_jsx_runtime7.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          CustomIcon_default,
          {
            icon: faFileLines,
            label: "Work In Progress (WIP)",
            bgColor: "#F3EEFD",
            color: "#8C55E9"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "pt-2.5 flex flex-col gap-[1px] lg:gap-[1.7px]", children: Items.map((i) => /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("p", { className: "flex justify-between items-center text-sm", children: [
          i.label,
          " ",
          isLoading ? /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(skeleton_default, { className: "w-6 h-3 rounded-xl" }) : /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: `${i.color} font-semibold`, children: i.value })
        ] }, i.id)) })
      ] });
    };
    WorkInprogress_default = WorkInprogress;
  }
});

// node_modules/lightgallery/react/Lightgallery.es5.js
function __rest(s, e2) {
  var t2 = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e2.indexOf(p) < 0)
    t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e2.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r2 = Array(s), k = 0, i = 0; i < il; i++)
    for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
      r2[k] = a2[j];
  return r2;
}
function initLgPolyfills() {
  (function() {
    if (typeof window.CustomEvent === "function")
      return false;
    function CustomEvent2(event, params) {
      params = params || {
        bubbles: false,
        cancelable: false,
        detail: null
      };
      var evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
      return evt;
    }
    window.CustomEvent = CustomEvent2;
  })();
  (function() {
    if (!Element.prototype.matches) {
      Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    }
  })();
}
function $LG(selector) {
  initLgPolyfills();
  return new lgQuery(selector);
}
function convertToData(attr) {
  if (attr === "href") {
    return "src";
  }
  attr = attr.replace("data-", "");
  attr = attr.charAt(0).toLowerCase() + attr.slice(1);
  attr = attr.replace(/-([a-z])/g, function(g) {
    return g[1].toUpperCase();
  });
  return attr;
}
function lightGallery(el, options) {
  return new LightGallery(el, options);
}
var import_react6, __assign, lGEvents, lightGalleryCoreSettings, lgQuery, defaultDynamicOptions, utils, lgId, LightGallery, LgMethods, LG, Lightgallery_es5_default;
var init_Lightgallery_es5 = __esm({
  "node_modules/lightgallery/react/Lightgallery.es5.js"() {
    import_react6 = __toESM(require_react());
    __assign = function() {
      __assign = Object.assign || function __assign6(t2) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t2[p] = s[p];
        }
        return t2;
      };
      return __assign.apply(this, arguments);
    };
    lGEvents = {
      afterAppendSlide: "lgAfterAppendSlide",
      init: "lgInit",
      hasVideo: "lgHasVideo",
      containerResize: "lgContainerResize",
      updateSlides: "lgUpdateSlides",
      afterAppendSubHtml: "lgAfterAppendSubHtml",
      beforeOpen: "lgBeforeOpen",
      afterOpen: "lgAfterOpen",
      slideItemLoad: "lgSlideItemLoad",
      beforeSlide: "lgBeforeSlide",
      afterSlide: "lgAfterSlide",
      posterClick: "lgPosterClick",
      dragStart: "lgDragStart",
      dragMove: "lgDragMove",
      dragEnd: "lgDragEnd",
      beforeNextSlide: "lgBeforeNextSlide",
      beforePrevSlide: "lgBeforePrevSlide",
      beforeClose: "lgBeforeClose",
      afterClose: "lgAfterClose",
      rotateLeft: "lgRotateLeft",
      rotateRight: "lgRotateRight",
      flipHorizontal: "lgFlipHorizontal",
      flipVertical: "lgFlipVertical",
      autoplay: "lgAutoplay",
      autoplayStart: "lgAutoplayStart",
      autoplayStop: "lgAutoplayStop"
    };
    lightGalleryCoreSettings = {
      mode: "lg-slide",
      easing: "ease",
      speed: 400,
      licenseKey: "0000-0000-000-0000",
      height: "100%",
      width: "100%",
      addClass: "",
      startClass: "lg-start-zoom",
      backdropDuration: 300,
      container: "",
      startAnimationDuration: 400,
      zoomFromOrigin: true,
      hideBarsDelay: 0,
      showBarsAfter: 1e4,
      slideDelay: 0,
      supportLegacyBrowser: true,
      allowMediaOverlap: false,
      videoMaxSize: "1280-720",
      loadYouTubePoster: true,
      defaultCaptionHeight: 0,
      ariaLabelledby: "",
      ariaDescribedby: "",
      resetScrollPosition: true,
      hideScrollbar: false,
      closable: true,
      swipeToClose: true,
      closeOnTap: true,
      showCloseIcon: true,
      showMaximizeIcon: false,
      loop: true,
      escKey: true,
      keyPress: true,
      trapFocus: true,
      controls: true,
      slideEndAnimation: true,
      hideControlOnEnd: false,
      mousewheel: false,
      getCaptionFromTitleOrAlt: true,
      appendSubHtmlTo: ".lg-sub-html",
      subHtmlSelectorRelative: false,
      preload: 2,
      numberOfSlideItemsInDom: 10,
      selector: "",
      selectWithin: "",
      nextHtml: "",
      prevHtml: "",
      index: 0,
      iframeWidth: "100%",
      iframeHeight: "100%",
      iframeMaxWidth: "100%",
      iframeMaxHeight: "100%",
      download: true,
      counter: true,
      appendCounterTo: ".lg-toolbar",
      swipeThreshold: 50,
      enableSwipe: true,
      enableDrag: true,
      dynamic: false,
      dynamicEl: [],
      extraProps: [],
      exThumbImage: "",
      isMobile: void 0,
      mobileSettings: {
        controls: false,
        showCloseIcon: false,
        download: false
      },
      plugins: [],
      strings: {
        closeGallery: "Close gallery",
        toggleMaximize: "Toggle maximize",
        previousSlide: "Previous slide",
        nextSlide: "Next slide",
        download: "Download",
        playVideo: "Play video",
        mediaLoadingFailed: "Oops... Failed to load content..."
      }
    };
    lgQuery = /** @class */
    function() {
      function lgQuery2(selector) {
        this.cssVenderPrefixes = [
          "TransitionDuration",
          "TransitionTimingFunction",
          "Transform",
          "Transition"
        ];
        this.selector = this._getSelector(selector);
        this.firstElement = this._getFirstEl();
        return this;
      }
      lgQuery2.generateUUID = function() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c2) {
          var r2 = Math.random() * 16 | 0, v = c2 == "x" ? r2 : r2 & 3 | 8;
          return v.toString(16);
        });
      };
      lgQuery2.prototype._getSelector = function(selector, context) {
        if (context === void 0) {
          context = document;
        }
        if (typeof selector !== "string") {
          return selector;
        }
        context = context || document;
        var fl = selector.substring(0, 1);
        if (fl === "#") {
          return context.querySelector(selector);
        } else {
          return context.querySelectorAll(selector);
        }
      };
      lgQuery2.prototype._each = function(func) {
        if (!this.selector) {
          return this;
        }
        if (this.selector.length !== void 0) {
          [].forEach.call(this.selector, func);
        } else {
          func(this.selector, 0);
        }
        return this;
      };
      lgQuery2.prototype._setCssVendorPrefix = function(el, cssProperty, value) {
        var property = cssProperty.replace(/-([a-z])/gi, function(s, group1) {
          return group1.toUpperCase();
        });
        if (this.cssVenderPrefixes.indexOf(property) !== -1) {
          el.style[property.charAt(0).toLowerCase() + property.slice(1)] = value;
          el.style["webkit" + property] = value;
          el.style["moz" + property] = value;
          el.style["ms" + property] = value;
          el.style["o" + property] = value;
        } else {
          el.style[property] = value;
        }
      };
      lgQuery2.prototype._getFirstEl = function() {
        if (this.selector && this.selector.length !== void 0) {
          return this.selector[0];
        } else {
          return this.selector;
        }
      };
      lgQuery2.prototype.isEventMatched = function(event, eventName) {
        var eventNamespace = eventName.split(".");
        return event.split(".").filter(function(e2) {
          return e2;
        }).every(function(e2) {
          return eventNamespace.indexOf(e2) !== -1;
        });
      };
      lgQuery2.prototype.attr = function(attr, value) {
        if (value === void 0) {
          if (!this.firstElement) {
            return "";
          }
          return this.firstElement.getAttribute(attr);
        }
        this._each(function(el) {
          el.setAttribute(attr, value);
        });
        return this;
      };
      lgQuery2.prototype.find = function(selector) {
        return $LG(this._getSelector(selector, this.selector));
      };
      lgQuery2.prototype.first = function() {
        if (this.selector && this.selector.length !== void 0) {
          return $LG(this.selector[0]);
        } else {
          return $LG(this.selector);
        }
      };
      lgQuery2.prototype.eq = function(index) {
        return $LG(this.selector[index]);
      };
      lgQuery2.prototype.parent = function() {
        return $LG(this.selector.parentElement);
      };
      lgQuery2.prototype.get = function() {
        return this._getFirstEl();
      };
      lgQuery2.prototype.removeAttr = function(attributes) {
        var attrs = attributes.split(" ");
        this._each(function(el) {
          attrs.forEach(function(attr) {
            return el.removeAttribute(attr);
          });
        });
        return this;
      };
      lgQuery2.prototype.wrap = function(className) {
        if (!this.firstElement) {
          return this;
        }
        var wrapper = document.createElement("div");
        wrapper.className = className;
        this.firstElement.parentNode.insertBefore(wrapper, this.firstElement);
        this.firstElement.parentNode.removeChild(this.firstElement);
        wrapper.appendChild(this.firstElement);
        return this;
      };
      lgQuery2.prototype.addClass = function(classNames) {
        if (classNames === void 0) {
          classNames = "";
        }
        this._each(function(el) {
          classNames.split(" ").forEach(function(className) {
            if (className) {
              el.classList.add(className);
            }
          });
        });
        return this;
      };
      lgQuery2.prototype.removeClass = function(classNames) {
        this._each(function(el) {
          classNames.split(" ").forEach(function(className) {
            if (className) {
              el.classList.remove(className);
            }
          });
        });
        return this;
      };
      lgQuery2.prototype.hasClass = function(className) {
        if (!this.firstElement) {
          return false;
        }
        return this.firstElement.classList.contains(className);
      };
      lgQuery2.prototype.hasAttribute = function(attribute) {
        if (!this.firstElement) {
          return false;
        }
        return this.firstElement.hasAttribute(attribute);
      };
      lgQuery2.prototype.toggleClass = function(className) {
        if (!this.firstElement) {
          return this;
        }
        if (this.hasClass(className)) {
          this.removeClass(className);
        } else {
          this.addClass(className);
        }
        return this;
      };
      lgQuery2.prototype.css = function(property, value) {
        var _this = this;
        this._each(function(el) {
          _this._setCssVendorPrefix(el, property, value);
        });
        return this;
      };
      lgQuery2.prototype.on = function(events, listener2) {
        var _this = this;
        if (!this.selector) {
          return this;
        }
        events.split(" ").forEach(function(event) {
          if (!Array.isArray(lgQuery2.eventListeners[event])) {
            lgQuery2.eventListeners[event] = [];
          }
          lgQuery2.eventListeners[event].push(listener2);
          _this.selector.addEventListener(event.split(".")[0], listener2);
        });
        return this;
      };
      lgQuery2.prototype.once = function(event, listener2) {
        var _this = this;
        this.on(event, function() {
          _this.off(event);
          listener2(event);
        });
        return this;
      };
      lgQuery2.prototype.off = function(event) {
        var _this = this;
        if (!this.selector) {
          return this;
        }
        Object.keys(lgQuery2.eventListeners).forEach(function(eventName) {
          if (_this.isEventMatched(event, eventName)) {
            lgQuery2.eventListeners[eventName].forEach(function(listener2) {
              _this.selector.removeEventListener(eventName.split(".")[0], listener2);
            });
            lgQuery2.eventListeners[eventName] = [];
          }
        });
        return this;
      };
      lgQuery2.prototype.trigger = function(event, detail) {
        if (!this.firstElement) {
          return this;
        }
        var customEvent = new CustomEvent(event.split(".")[0], {
          detail: detail || null
        });
        this.firstElement.dispatchEvent(customEvent);
        return this;
      };
      lgQuery2.prototype.load = function(url) {
        var _this = this;
        fetch(url).then(function(res) {
          return res.text();
        }).then(function(html) {
          _this.selector.innerHTML = html;
        });
        return this;
      };
      lgQuery2.prototype.html = function(html) {
        if (html === void 0) {
          if (!this.firstElement) {
            return "";
          }
          return this.firstElement.innerHTML;
        }
        this._each(function(el) {
          el.innerHTML = html;
        });
        return this;
      };
      lgQuery2.prototype.append = function(html) {
        this._each(function(el) {
          if (typeof html === "string") {
            el.insertAdjacentHTML("beforeend", html);
          } else {
            el.appendChild(html);
          }
        });
        return this;
      };
      lgQuery2.prototype.prepend = function(html) {
        this._each(function(el) {
          el.insertAdjacentHTML("afterbegin", html);
        });
        return this;
      };
      lgQuery2.prototype.remove = function() {
        this._each(function(el) {
          el.parentNode.removeChild(el);
        });
        return this;
      };
      lgQuery2.prototype.empty = function() {
        this._each(function(el) {
          el.innerHTML = "";
        });
        return this;
      };
      lgQuery2.prototype.scrollTop = function(scrollTop) {
        if (scrollTop !== void 0) {
          document.body.scrollTop = scrollTop;
          document.documentElement.scrollTop = scrollTop;
          return this;
        } else {
          return window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
        }
      };
      lgQuery2.prototype.scrollLeft = function(scrollLeft) {
        if (scrollLeft !== void 0) {
          document.body.scrollLeft = scrollLeft;
          document.documentElement.scrollLeft = scrollLeft;
          return this;
        } else {
          return window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
        }
      };
      lgQuery2.prototype.offset = function() {
        if (!this.firstElement) {
          return {
            left: 0,
            top: 0
          };
        }
        var rect = this.firstElement.getBoundingClientRect();
        var bodyMarginLeft = $LG("body").style().marginLeft;
        return {
          left: rect.left - parseFloat(bodyMarginLeft) + this.scrollLeft(),
          top: rect.top + this.scrollTop()
        };
      };
      lgQuery2.prototype.style = function() {
        if (!this.firstElement) {
          return {};
        }
        return this.firstElement.currentStyle || window.getComputedStyle(this.firstElement);
      };
      lgQuery2.prototype.width = function() {
        var style = this.style();
        return this.firstElement.clientWidth - parseFloat(style.paddingLeft) - parseFloat(style.paddingRight);
      };
      lgQuery2.prototype.height = function() {
        var style = this.style();
        return this.firstElement.clientHeight - parseFloat(style.paddingTop) - parseFloat(style.paddingBottom);
      };
      lgQuery2.eventListeners = {};
      return lgQuery2;
    }();
    defaultDynamicOptions = [
      "src",
      "sources",
      "subHtml",
      "subHtmlUrl",
      "html",
      "video",
      "poster",
      "slideName",
      "responsive",
      "srcset",
      "sizes",
      "iframe",
      "downloadUrl",
      "download",
      "width",
      "facebookShareUrl",
      "tweetText",
      "iframeTitle",
      "twitterShareUrl",
      "pinterestShareUrl",
      "pinterestText",
      "fbHtml",
      "disqusIdentifier",
      "disqusUrl"
    ];
    utils = {
      /**
       * get possible width and height from the lgSize attribute. Used for ZoomFromOrigin option
       */
      getSize: function(el, container, spacing, defaultLgSize) {
        if (spacing === void 0) {
          spacing = 0;
        }
        var LGel = $LG(el);
        var lgSize = LGel.attr("data-lg-size") || defaultLgSize;
        if (!lgSize) {
          return;
        }
        var isResponsiveSizes = lgSize.split(",");
        if (isResponsiveSizes[1]) {
          var wWidth = window.innerWidth;
          for (var i = 0; i < isResponsiveSizes.length; i++) {
            var size_1 = isResponsiveSizes[i];
            var responsiveWidth = parseInt(size_1.split("-")[2], 10);
            if (responsiveWidth > wWidth) {
              lgSize = size_1;
              break;
            }
            if (i === isResponsiveSizes.length - 1) {
              lgSize = size_1;
            }
          }
        }
        var size = lgSize.split("-");
        var width = parseInt(size[0], 10);
        var height = parseInt(size[1], 10);
        var cWidth = container.width();
        var cHeight = container.height() - spacing;
        var maxWidth = Math.min(cWidth, width);
        var maxHeight = Math.min(cHeight, height);
        var ratio = Math.min(maxWidth / width, maxHeight / height);
        return { width: width * ratio, height: height * ratio };
      },
      /**
       * @desc Get transform value based on the imageSize. Used for ZoomFromOrigin option
       * @param {jQuery Element}
       * @returns {String} Transform CSS string
       */
      getTransform: function(el, container, top, bottom, imageSize) {
        if (!imageSize) {
          return;
        }
        var LGel = $LG(el).find("img").first();
        if (!LGel.get()) {
          return;
        }
        var containerRect = container.get().getBoundingClientRect();
        var wWidth = containerRect.width;
        var wHeight = container.height() - (top + bottom);
        var elWidth = LGel.width();
        var elHeight = LGel.height();
        var elStyle = LGel.style();
        var x = (wWidth - elWidth) / 2 - LGel.offset().left + (parseFloat(elStyle.paddingLeft) || 0) + (parseFloat(elStyle.borderLeft) || 0) + $LG(window).scrollLeft() + containerRect.left;
        var y2 = (wHeight - elHeight) / 2 - LGel.offset().top + (parseFloat(elStyle.paddingTop) || 0) + (parseFloat(elStyle.borderTop) || 0) + $LG(window).scrollTop() + top;
        var scX = elWidth / imageSize.width;
        var scY = elHeight / imageSize.height;
        var transform = "translate3d(" + (x *= -1) + "px, " + (y2 *= -1) + "px, 0) scale3d(" + scX + ", " + scY + ", 1)";
        return transform;
      },
      getIframeMarkup: function(iframeWidth, iframeHeight, iframeMaxWidth, iframeMaxHeight, src, iframeTitle) {
        var title = iframeTitle ? 'title="' + iframeTitle + '"' : "";
        return '<div class="lg-video-cont lg-has-iframe" style="width:' + iframeWidth + "; max-width:" + iframeMaxWidth + "; height: " + iframeHeight + "; max-height:" + iframeMaxHeight + '">\n                    <iframe class="lg-object" frameborder="0" ' + title + ' src="' + src + '"  allowfullscreen="true"></iframe>\n                </div>';
      },
      getImgMarkup: function(index, src, altAttr, srcset, sizes, sources) {
        var srcsetAttr = srcset ? 'srcset="' + srcset + '"' : "";
        var sizesAttr = sizes ? 'sizes="' + sizes + '"' : "";
        var imgMarkup = "<img " + altAttr + " " + srcsetAttr + "  " + sizesAttr + ' class="lg-object lg-image" data-index="' + index + '" src="' + src + '" />';
        var sourceTag = "";
        if (sources) {
          var sourceObj = typeof sources === "string" ? JSON.parse(sources) : sources;
          sourceTag = sourceObj.map(function(source) {
            var attrs = "";
            Object.keys(source).forEach(function(key) {
              attrs += " " + key + '="' + source[key] + '"';
            });
            return "<source " + attrs + "></source>";
          });
        }
        return "" + sourceTag + imgMarkup;
      },
      // Get src from responsive src
      getResponsiveSrc: function(srcItms) {
        var rsWidth = [];
        var rsSrc = [];
        var src = "";
        for (var i = 0; i < srcItms.length; i++) {
          var _src = srcItms[i].split(" ");
          if (_src[0] === "") {
            _src.splice(0, 1);
          }
          rsSrc.push(_src[0]);
          rsWidth.push(_src[1]);
        }
        var wWidth = window.innerWidth;
        for (var j = 0; j < rsWidth.length; j++) {
          if (parseInt(rsWidth[j], 10) > wWidth) {
            src = rsSrc[j];
            break;
          }
        }
        return src;
      },
      isImageLoaded: function(img) {
        if (!img)
          return false;
        if (!img.complete) {
          return false;
        }
        if (img.naturalWidth === 0) {
          return false;
        }
        return true;
      },
      getVideoPosterMarkup: function(_poster, dummyImg, videoContStyle, playVideoString, _isVideo) {
        var videoClass = "";
        if (_isVideo && _isVideo.youtube) {
          videoClass = "lg-has-youtube";
        } else if (_isVideo && _isVideo.vimeo) {
          videoClass = "lg-has-vimeo";
        } else {
          videoClass = "lg-has-html5";
        }
        return '<div class="lg-video-cont ' + videoClass + '" style="' + videoContStyle + '">\n                <div class="lg-video-play-button">\n                <svg\n                    viewBox="0 0 20 20"\n                    preserveAspectRatio="xMidYMid"\n                    focusable="false"\n                    aria-labelledby="' + playVideoString + '"\n                    role="img"\n                    class="lg-video-play-icon"\n                >\n                    <title>' + playVideoString + '</title>\n                    <polygon class="lg-video-play-icon-inner" points="1,0 20,10 1,20"></polygon>\n                </svg>\n                <svg class="lg-video-play-icon-bg" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle></svg>\n                <svg class="lg-video-play-icon-circle" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle>\n                </svg>\n            </div>\n            ' + (dummyImg || "") + '\n            <img class="lg-object lg-video-poster" src="' + _poster + '" />\n        </div>';
      },
      getFocusableElements: function(container) {
        var elements = container.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])');
        var visibleElements = [].filter.call(elements, function(element) {
          var style = window.getComputedStyle(element);
          return style.display !== "none" && style.visibility !== "hidden";
        });
        return visibleElements;
      },
      /**
       * @desc Create dynamic elements array from gallery items when dynamic option is false
       * It helps to avoid frequent DOM interaction
       * and avoid multiple checks for dynamic elments
       *
       * @returns {Array} dynamicEl
       */
      getDynamicOptions: function(items, extraProps, getCaptionFromTitleOrAlt, exThumbImage) {
        var dynamicElements = [];
        var availableDynamicOptions = __spreadArrays(defaultDynamicOptions, extraProps);
        [].forEach.call(items, function(item) {
          var dynamicEl = {};
          for (var i = 0; i < item.attributes.length; i++) {
            var attr = item.attributes[i];
            if (attr.specified) {
              var dynamicAttr = convertToData(attr.name);
              var label = "";
              if (availableDynamicOptions.indexOf(dynamicAttr) > -1) {
                label = dynamicAttr;
              }
              if (label) {
                dynamicEl[label] = attr.value;
              }
            }
          }
          var currentItem = $LG(item);
          var alt = currentItem.find("img").first().attr("alt");
          var title = currentItem.attr("title");
          var thumb = exThumbImage ? currentItem.attr(exThumbImage) : currentItem.find("img").first().attr("src");
          dynamicEl.thumb = thumb;
          if (getCaptionFromTitleOrAlt && !dynamicEl.subHtml) {
            dynamicEl.subHtml = title || alt || "";
          }
          dynamicEl.alt = alt || title || "";
          dynamicElements.push(dynamicEl);
        });
        return dynamicElements;
      },
      isMobile: function() {
        return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
      },
      /**
       * @desc Check the given src is video
       * @param {String} src
       * @return {Object} video type
       * Ex:{ youtube  :  ["//www.youtube.com/watch?v=c0asJgSyxcY", "c0asJgSyxcY"] }
       *
       * @todo - this information can be moved to dynamicEl to avoid frequent calls
       */
      isVideo: function(src, isHTML5VIdeo, index) {
        if (!src) {
          if (isHTML5VIdeo) {
            return {
              html5: true
            };
          } else {
            console.error("lightGallery :- data-src is not provided on slide item " + (index + 1) + ". Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/");
            return;
          }
        }
        var youtube = src.match(/\/\/(?:www\.)?youtu(?:\.be|be\.com|be-nocookie\.com)\/(?:watch\?v=|embed\/)?([a-z0-9\-\_\%]+)([\&|?][\S]*)*/i);
        var vimeo = src.match(/\/\/(?:www\.)?(?:player\.)?vimeo.com\/(?:video\/)?([0-9a-z\-_]+)(.*)?/i);
        var wistia = src.match(/https?:\/\/(.+)?(wistia\.com|wi\.st)\/(medias|embed)\/([0-9a-z\-_]+)(.*)/);
        if (youtube) {
          return {
            youtube
          };
        } else if (vimeo) {
          return {
            vimeo
          };
        } else if (wistia) {
          return {
            wistia
          };
        }
      }
    };
    lgId = 0;
    LightGallery = /** @class */
    function() {
      function LightGallery2(element, options) {
        this.lgOpened = false;
        this.index = 0;
        this.plugins = [];
        this.lGalleryOn = false;
        this.lgBusy = false;
        this.currentItemsInDom = [];
        this.prevScrollTop = 0;
        this.bodyPaddingRight = 0;
        this.isDummyImageRemoved = false;
        this.dragOrSwipeEnabled = false;
        this.mediaContainerPosition = {
          top: 0,
          bottom: 0
        };
        if (!element) {
          return this;
        }
        lgId++;
        this.lgId = lgId;
        this.el = element;
        this.LGel = $LG(element);
        this.generateSettings(options);
        this.buildModules();
        if (this.settings.dynamic && this.settings.dynamicEl !== void 0 && !Array.isArray(this.settings.dynamicEl)) {
          throw "When using dynamic mode, you must also define dynamicEl as an Array.";
        }
        this.galleryItems = this.getItems();
        this.normalizeSettings();
        this.init();
        this.validateLicense();
        return this;
      }
      LightGallery2.prototype.generateSettings = function(options) {
        this.settings = __assign(__assign({}, lightGalleryCoreSettings), options);
        if (this.settings.isMobile && typeof this.settings.isMobile === "function" ? this.settings.isMobile() : utils.isMobile()) {
          var mobileSettings = __assign(__assign({}, this.settings.mobileSettings), this.settings.mobileSettings);
          this.settings = __assign(__assign({}, this.settings), mobileSettings);
        }
      };
      LightGallery2.prototype.normalizeSettings = function() {
        if (this.settings.slideEndAnimation) {
          this.settings.hideControlOnEnd = false;
        }
        if (!this.settings.closable) {
          this.settings.swipeToClose = false;
        }
        this.zoomFromOrigin = this.settings.zoomFromOrigin;
        if (this.settings.dynamic) {
          this.zoomFromOrigin = false;
        }
        if (!this.settings.container) {
          this.settings.container = document.body;
        }
        this.settings.preload = Math.min(this.settings.preload, this.galleryItems.length);
      };
      LightGallery2.prototype.init = function() {
        var _this = this;
        this.addSlideVideoInfo(this.galleryItems);
        this.buildStructure();
        this.LGel.trigger(lGEvents.init, {
          instance: this
        });
        if (this.settings.keyPress) {
          this.keyPress();
        }
        setTimeout(function() {
          _this.enableDrag();
          _this.enableSwipe();
          _this.triggerPosterClick();
        }, 50);
        this.arrow();
        if (this.settings.mousewheel) {
          this.mousewheel();
        }
        if (!this.settings.dynamic) {
          this.openGalleryOnItemClick();
        }
      };
      LightGallery2.prototype.openGalleryOnItemClick = function() {
        var _this = this;
        var _loop_1 = function(index2) {
          var element = this_1.items[index2];
          var $element = $LG(element);
          var uuid = lgQuery.generateUUID();
          $element.attr("data-lg-id", uuid).on("click.lgcustom-item-" + uuid, function(e2) {
            e2.preventDefault();
            var currentItemIndex = _this.settings.index || index2;
            _this.openGallery(currentItemIndex, element);
          });
        };
        var this_1 = this;
        for (var index = 0; index < this.items.length; index++) {
          _loop_1(index);
        }
      };
      LightGallery2.prototype.buildModules = function() {
        var _this = this;
        this.settings.plugins.forEach(function(plugin) {
          _this.plugins.push(new plugin(_this, $LG));
        });
      };
      LightGallery2.prototype.validateLicense = function() {
        if (!this.settings.licenseKey) {
          console.error("Please provide a valid license key");
        } else if (this.settings.licenseKey === "0000-0000-000-0000") {
          console.warn("lightGallery: " + this.settings.licenseKey + " license key is not valid for production use");
        }
      };
      LightGallery2.prototype.getSlideItem = function(index) {
        return $LG(this.getSlideItemId(index));
      };
      LightGallery2.prototype.getSlideItemId = function(index) {
        return "#lg-item-" + this.lgId + "-" + index;
      };
      LightGallery2.prototype.getIdName = function(id) {
        return id + "-" + this.lgId;
      };
      LightGallery2.prototype.getElementById = function(id) {
        return $LG("#" + this.getIdName(id));
      };
      LightGallery2.prototype.manageSingleSlideClassName = function() {
        if (this.galleryItems.length < 2) {
          this.outer.addClass("lg-single-item");
        } else {
          this.outer.removeClass("lg-single-item");
        }
      };
      LightGallery2.prototype.buildStructure = function() {
        var _this = this;
        var container = this.$container && this.$container.get();
        if (container) {
          return;
        }
        var controls = "";
        var subHtmlCont = "";
        if (this.settings.controls) {
          controls = '<button type="button" id="' + this.getIdName("lg-prev") + '" aria-label="' + this.settings.strings["previousSlide"] + '" class="lg-prev lg-icon"> ' + this.settings.prevHtml + ' </button>\n                <button type="button" id="' + this.getIdName("lg-next") + '" aria-label="' + this.settings.strings["nextSlide"] + '" class="lg-next lg-icon"> ' + this.settings.nextHtml + " </button>";
        }
        if (this.settings.appendSubHtmlTo !== ".lg-item") {
          subHtmlCont = '<div class="lg-sub-html" role="status" aria-live="polite"></div>';
        }
        var addClasses = "";
        if (this.settings.allowMediaOverlap) {
          addClasses += "lg-media-overlap ";
        }
        var ariaLabelledby = this.settings.ariaLabelledby ? 'aria-labelledby="' + this.settings.ariaLabelledby + '"' : "";
        var ariaDescribedby = this.settings.ariaDescribedby ? 'aria-describedby="' + this.settings.ariaDescribedby + '"' : "";
        var containerClassName = "lg-container " + this.settings.addClass + " " + (document.body !== this.settings.container ? "lg-inline" : "");
        var closeIcon = this.settings.closable && this.settings.showCloseIcon ? '<button type="button" aria-label="' + this.settings.strings["closeGallery"] + '" id="' + this.getIdName("lg-close") + '" class="lg-close lg-icon"></button>' : "";
        var maximizeIcon = this.settings.showMaximizeIcon ? '<button type="button" aria-label="' + this.settings.strings["toggleMaximize"] + '" id="' + this.getIdName("lg-maximize") + '" class="lg-maximize lg-icon"></button>' : "";
        var template = '\n        <div class="' + containerClassName + '" id="' + this.getIdName("lg-container") + '" tabindex="-1" aria-modal="true" ' + ariaLabelledby + " " + ariaDescribedby + ' role="dialog"\n        >\n            <div id="' + this.getIdName("lg-backdrop") + '" class="lg-backdrop"></div>\n\n            <div id="' + this.getIdName("lg-outer") + '" class="lg-outer lg-use-css3 lg-css3 lg-hide-items ' + addClasses + ' ">\n\n              <div id="' + this.getIdName("lg-content") + '" class="lg-content">\n                <div id="' + this.getIdName("lg-inner") + '" class="lg-inner">\n                </div>\n                ' + controls + '\n              </div>\n                <div id="' + this.getIdName("lg-toolbar") + '" class="lg-toolbar lg-group">\n                    ' + maximizeIcon + "\n                    " + closeIcon + "\n                    </div>\n                    " + (this.settings.appendSubHtmlTo === ".lg-outer" ? subHtmlCont : "") + '\n                <div id="' + this.getIdName("lg-components") + '" class="lg-components">\n                    ' + (this.settings.appendSubHtmlTo === ".lg-sub-html" ? subHtmlCont : "") + "\n                </div>\n            </div>\n        </div>\n        ";
        $LG(this.settings.container).append(template);
        if (document.body !== this.settings.container) {
          $LG(this.settings.container).css("position", "relative");
        }
        this.outer = this.getElementById("lg-outer");
        this.$lgComponents = this.getElementById("lg-components");
        this.$backdrop = this.getElementById("lg-backdrop");
        this.$container = this.getElementById("lg-container");
        this.$inner = this.getElementById("lg-inner");
        this.$content = this.getElementById("lg-content");
        this.$toolbar = this.getElementById("lg-toolbar");
        this.$backdrop.css("transition-duration", this.settings.backdropDuration + "ms");
        var outerClassNames = this.settings.mode + " ";
        this.manageSingleSlideClassName();
        if (this.settings.enableDrag) {
          outerClassNames += "lg-grab ";
        }
        this.outer.addClass(outerClassNames);
        this.$inner.css("transition-timing-function", this.settings.easing);
        this.$inner.css("transition-duration", this.settings.speed + "ms");
        if (this.settings.download) {
          this.$toolbar.append('<a id="' + this.getIdName("lg-download") + '" target="_blank" rel="noopener" aria-label="' + this.settings.strings["download"] + '" download class="lg-download lg-icon"></a>');
        }
        this.counter();
        $LG(window).on("resize.lg.global" + this.lgId + " orientationchange.lg.global" + this.lgId, function() {
          _this.refreshOnResize();
        });
        this.hideBars();
        this.manageCloseGallery();
        this.toggleMaximize();
        this.initModules();
      };
      LightGallery2.prototype.refreshOnResize = function() {
        if (this.lgOpened) {
          var currentGalleryItem = this.galleryItems[this.index];
          var __slideVideoInfo = currentGalleryItem.__slideVideoInfo;
          this.mediaContainerPosition = this.getMediaContainerPosition();
          var _a2 = this.mediaContainerPosition, top_1 = _a2.top, bottom = _a2.bottom;
          this.currentImageSize = utils.getSize(this.items[this.index], this.outer, top_1 + bottom, __slideVideoInfo && this.settings.videoMaxSize);
          if (__slideVideoInfo) {
            this.resizeVideoSlide(this.index, this.currentImageSize);
          }
          if (this.zoomFromOrigin && !this.isDummyImageRemoved) {
            var imgStyle = this.getDummyImgStyles(this.currentImageSize);
            this.outer.find(".lg-current .lg-dummy-img").first().attr("style", imgStyle);
          }
          this.LGel.trigger(lGEvents.containerResize);
        }
      };
      LightGallery2.prototype.resizeVideoSlide = function(index, imageSize) {
        var lgVideoStyle = this.getVideoContStyle(imageSize);
        var currentSlide = this.getSlideItem(index);
        currentSlide.find(".lg-video-cont").attr("style", lgVideoStyle);
      };
      LightGallery2.prototype.updateSlides = function(items, index) {
        if (this.index > items.length - 1) {
          this.index = items.length - 1;
        }
        if (items.length === 1) {
          this.index = 0;
        }
        if (!items.length) {
          this.closeGallery();
          return;
        }
        var currentSrc = this.galleryItems[index].src;
        this.galleryItems = items;
        this.updateControls();
        this.$inner.empty();
        this.currentItemsInDom = [];
        var _index = 0;
        this.galleryItems.some(function(galleryItem, itemIndex) {
          if (galleryItem.src === currentSrc) {
            _index = itemIndex;
            return true;
          }
          return false;
        });
        this.currentItemsInDom = this.organizeSlideItems(_index, -1);
        this.loadContent(_index, true);
        this.getSlideItem(_index).addClass("lg-current");
        this.index = _index;
        this.updateCurrentCounter(_index);
        this.LGel.trigger(lGEvents.updateSlides);
      };
      LightGallery2.prototype.getItems = function() {
        this.items = [];
        if (!this.settings.dynamic) {
          if (this.settings.selector === "this") {
            this.items.push(this.el);
          } else if (this.settings.selector) {
            if (typeof this.settings.selector === "string") {
              if (this.settings.selectWithin) {
                var selectWithin = $LG(this.settings.selectWithin);
                this.items = selectWithin.find(this.settings.selector).get();
              } else {
                this.items = this.el.querySelectorAll(this.settings.selector);
              }
            } else {
              this.items = this.settings.selector;
            }
          } else {
            this.items = this.el.children;
          }
          return utils.getDynamicOptions(this.items, this.settings.extraProps, this.settings.getCaptionFromTitleOrAlt, this.settings.exThumbImage);
        } else {
          return this.settings.dynamicEl || [];
        }
      };
      LightGallery2.prototype.shouldHideScrollbar = function() {
        return this.settings.hideScrollbar && document.body === this.settings.container;
      };
      LightGallery2.prototype.hideScrollbar = function() {
        if (!this.shouldHideScrollbar()) {
          return;
        }
        this.bodyPaddingRight = parseFloat($LG("body").style().paddingRight);
        var bodyRect = document.documentElement.getBoundingClientRect();
        var scrollbarWidth = window.innerWidth - bodyRect.width;
        $LG(document.body).css("padding-right", scrollbarWidth + this.bodyPaddingRight + "px");
        $LG(document.body).addClass("lg-overlay-open");
      };
      LightGallery2.prototype.resetScrollBar = function() {
        if (!this.shouldHideScrollbar()) {
          return;
        }
        $LG(document.body).css("padding-right", this.bodyPaddingRight + "px");
        $LG(document.body).removeClass("lg-overlay-open");
      };
      LightGallery2.prototype.openGallery = function(index, element) {
        var _this = this;
        if (index === void 0) {
          index = this.settings.index;
        }
        if (this.lgOpened)
          return;
        this.lgOpened = true;
        this.outer.removeClass("lg-hide-items");
        this.hideScrollbar();
        this.$container.addClass("lg-show");
        var itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(index, index);
        this.currentItemsInDom = itemsToBeInsertedToDom;
        var items = "";
        itemsToBeInsertedToDom.forEach(function(item) {
          items = items + ('<div id="' + item + '" class="lg-item"></div>');
        });
        this.$inner.append(items);
        this.addHtml(index);
        var transform = "";
        this.mediaContainerPosition = this.getMediaContainerPosition();
        var _a2 = this.mediaContainerPosition, top = _a2.top, bottom = _a2.bottom;
        if (!this.settings.allowMediaOverlap) {
          this.setMediaContainerPosition(top, bottom);
        }
        var __slideVideoInfo = this.galleryItems[index].__slideVideoInfo;
        if (this.zoomFromOrigin && element) {
          this.currentImageSize = utils.getSize(element, this.outer, top + bottom, __slideVideoInfo && this.settings.videoMaxSize);
          transform = utils.getTransform(element, this.outer, top, bottom, this.currentImageSize);
        }
        if (!this.zoomFromOrigin || !transform) {
          this.outer.addClass(this.settings.startClass);
          this.getSlideItem(index).removeClass("lg-complete");
        }
        var timeout = this.settings.zoomFromOrigin ? 100 : this.settings.backdropDuration;
        setTimeout(function() {
          _this.outer.addClass("lg-components-open");
        }, timeout);
        this.index = index;
        this.LGel.trigger(lGEvents.beforeOpen);
        this.getSlideItem(index).addClass("lg-current");
        this.lGalleryOn = false;
        this.prevScrollTop = $LG(window).scrollTop();
        setTimeout(function() {
          if (_this.zoomFromOrigin && transform) {
            var currentSlide_1 = _this.getSlideItem(index);
            currentSlide_1.css("transform", transform);
            setTimeout(function() {
              currentSlide_1.addClass("lg-start-progress lg-start-end-progress").css("transition-duration", _this.settings.startAnimationDuration + "ms");
              _this.outer.addClass("lg-zoom-from-image");
            });
            setTimeout(function() {
              currentSlide_1.css("transform", "translate3d(0, 0, 0)");
            }, 100);
          }
          setTimeout(function() {
            _this.$backdrop.addClass("in");
            _this.$container.addClass("lg-show-in");
          }, 10);
          setTimeout(function() {
            if (_this.settings.trapFocus && document.body === _this.settings.container) {
              _this.trapFocus();
            }
          }, _this.settings.backdropDuration + 50);
          if (!_this.zoomFromOrigin || !transform) {
            setTimeout(function() {
              _this.outer.addClass("lg-visible");
            }, _this.settings.backdropDuration);
          }
          _this.slide(index, false, false, false);
          _this.LGel.trigger(lGEvents.afterOpen);
        });
        if (document.body === this.settings.container) {
          $LG("html").addClass("lg-on");
        }
      };
      LightGallery2.prototype.getMediaContainerPosition = function() {
        if (this.settings.allowMediaOverlap) {
          return {
            top: 0,
            bottom: 0
          };
        }
        var top = this.$toolbar.get().clientHeight || 0;
        var subHtml = this.outer.find(".lg-components .lg-sub-html").get();
        var captionHeight = this.settings.defaultCaptionHeight || subHtml && subHtml.clientHeight || 0;
        var thumbContainer = this.outer.find(".lg-thumb-outer").get();
        var thumbHeight = thumbContainer ? thumbContainer.clientHeight : 0;
        var bottom = thumbHeight + captionHeight;
        return {
          top,
          bottom
        };
      };
      LightGallery2.prototype.setMediaContainerPosition = function(top, bottom) {
        if (top === void 0) {
          top = 0;
        }
        if (bottom === void 0) {
          bottom = 0;
        }
        this.$content.css("top", top + "px").css("bottom", bottom + "px");
      };
      LightGallery2.prototype.hideBars = function() {
        var _this = this;
        setTimeout(function() {
          _this.outer.removeClass("lg-hide-items");
          if (_this.settings.hideBarsDelay > 0) {
            _this.outer.on("mousemove.lg click.lg touchstart.lg", function() {
              _this.outer.removeClass("lg-hide-items");
              clearTimeout(_this.hideBarTimeout);
              _this.hideBarTimeout = setTimeout(function() {
                _this.outer.addClass("lg-hide-items");
              }, _this.settings.hideBarsDelay);
            });
            _this.outer.trigger("mousemove.lg");
          }
        }, this.settings.showBarsAfter);
      };
      LightGallery2.prototype.initPictureFill = function($img) {
        if (this.settings.supportLegacyBrowser) {
          try {
            picturefill({
              elements: [$img.get()]
            });
          } catch (e2) {
            console.warn("lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.");
          }
        }
      };
      LightGallery2.prototype.counter = function() {
        if (this.settings.counter) {
          var counterHtml = '<div class="lg-counter" role="status" aria-live="polite">\n                <span id="' + this.getIdName("lg-counter-current") + '" class="lg-counter-current">' + (this.index + 1) + ' </span> /\n                <span id="' + this.getIdName("lg-counter-all") + '" class="lg-counter-all">' + this.galleryItems.length + " </span></div>";
          this.outer.find(this.settings.appendCounterTo).append(counterHtml);
        }
      };
      LightGallery2.prototype.addHtml = function(index) {
        var subHtml;
        var subHtmlUrl;
        if (this.galleryItems[index].subHtmlUrl) {
          subHtmlUrl = this.galleryItems[index].subHtmlUrl;
        } else {
          subHtml = this.galleryItems[index].subHtml;
        }
        if (!subHtmlUrl) {
          if (subHtml) {
            var fL = subHtml.substring(0, 1);
            if (fL === "." || fL === "#") {
              if (this.settings.subHtmlSelectorRelative && !this.settings.dynamic) {
                subHtml = $LG(this.items).eq(index).find(subHtml).first().html();
              } else {
                subHtml = $LG(subHtml).first().html();
              }
            }
          } else {
            subHtml = "";
          }
        }
        if (this.settings.appendSubHtmlTo !== ".lg-item") {
          if (subHtmlUrl) {
            this.outer.find(".lg-sub-html").load(subHtmlUrl);
          } else {
            this.outer.find(".lg-sub-html").html(subHtml);
          }
        } else {
          var currentSlide = $LG(this.getSlideItemId(index));
          if (subHtmlUrl) {
            currentSlide.load(subHtmlUrl);
          } else {
            currentSlide.append('<div class="lg-sub-html">' + subHtml + "</div>");
          }
        }
        if (typeof subHtml !== "undefined" && subHtml !== null) {
          if (subHtml === "") {
            this.outer.find(this.settings.appendSubHtmlTo).addClass("lg-empty-html");
          } else {
            this.outer.find(this.settings.appendSubHtmlTo).removeClass("lg-empty-html");
          }
        }
        this.LGel.trigger(lGEvents.afterAppendSubHtml, {
          index
        });
      };
      LightGallery2.prototype.preload = function(index) {
        for (var i = 1; i <= this.settings.preload; i++) {
          if (i >= this.galleryItems.length - index) {
            break;
          }
          this.loadContent(index + i, false);
        }
        for (var j = 1; j <= this.settings.preload; j++) {
          if (index - j < 0) {
            break;
          }
          this.loadContent(index - j, false);
        }
      };
      LightGallery2.prototype.getDummyImgStyles = function(imageSize) {
        if (!imageSize)
          return "";
        return "width:" + imageSize.width + "px;\n                margin-left: -" + imageSize.width / 2 + "px;\n                margin-top: -" + imageSize.height / 2 + "px;\n                height:" + imageSize.height + "px";
      };
      LightGallery2.prototype.getVideoContStyle = function(imageSize) {
        if (!imageSize)
          return "";
        return "width:" + imageSize.width + "px;\n                height:" + imageSize.height + "px";
      };
      LightGallery2.prototype.getDummyImageContent = function($currentSlide, index, alt) {
        var $currentItem;
        if (!this.settings.dynamic) {
          $currentItem = $LG(this.items).eq(index);
        }
        if ($currentItem) {
          var _dummyImgSrc = void 0;
          if (!this.settings.exThumbImage) {
            _dummyImgSrc = $currentItem.find("img").first().attr("src");
          } else {
            _dummyImgSrc = $currentItem.attr(this.settings.exThumbImage);
          }
          if (!_dummyImgSrc)
            return "";
          var imgStyle = this.getDummyImgStyles(this.currentImageSize);
          var dummyImgContent = "<img " + alt + ' style="' + imgStyle + '" class="lg-dummy-img" src="' + _dummyImgSrc + '" />';
          $currentSlide.addClass("lg-first-slide");
          this.outer.addClass("lg-first-slide-loading");
          return dummyImgContent;
        }
        return "";
      };
      LightGallery2.prototype.setImgMarkup = function(src, $currentSlide, index) {
        var currentGalleryItem = this.galleryItems[index];
        var alt = currentGalleryItem.alt, srcset = currentGalleryItem.srcset, sizes = currentGalleryItem.sizes, sources = currentGalleryItem.sources;
        var imgContent = "";
        var altAttr = alt ? 'alt="' + alt + '"' : "";
        if (this.isFirstSlideWithZoomAnimation()) {
          imgContent = this.getDummyImageContent($currentSlide, index, altAttr);
        } else {
          imgContent = utils.getImgMarkup(index, src, altAttr, srcset, sizes, sources);
        }
        var imgMarkup = '<picture class="lg-img-wrap"> ' + imgContent + "</picture>";
        $currentSlide.prepend(imgMarkup);
      };
      LightGallery2.prototype.onSlideObjectLoad = function($slide, isHTML5VideoWithoutPoster, onLoad, onError) {
        var mediaObject = $slide.find(".lg-object").first();
        if (utils.isImageLoaded(mediaObject.get()) || isHTML5VideoWithoutPoster) {
          onLoad();
        } else {
          mediaObject.on("load.lg error.lg", function() {
            onLoad && onLoad();
          });
          mediaObject.on("error.lg", function() {
            onError && onError();
          });
        }
      };
      LightGallery2.prototype.onLgObjectLoad = function(currentSlide, index, delay, speed, isFirstSlide, isHTML5VideoWithoutPoster) {
        var _this = this;
        this.onSlideObjectLoad(currentSlide, isHTML5VideoWithoutPoster, function() {
          _this.triggerSlideItemLoad(currentSlide, index, delay, speed, isFirstSlide);
        }, function() {
          currentSlide.addClass("lg-complete lg-complete_");
          currentSlide.html('<span class="lg-error-msg">' + _this.settings.strings["mediaLoadingFailed"] + "</span>");
        });
      };
      LightGallery2.prototype.triggerSlideItemLoad = function($currentSlide, index, delay, speed, isFirstSlide) {
        var _this = this;
        var currentGalleryItem = this.galleryItems[index];
        var _speed = isFirstSlide && this.getSlideType(currentGalleryItem) === "video" && !currentGalleryItem.poster ? speed : 0;
        setTimeout(function() {
          $currentSlide.addClass("lg-complete lg-complete_");
          _this.LGel.trigger(lGEvents.slideItemLoad, {
            index,
            delay: delay || 0,
            isFirstSlide
          });
        }, _speed);
      };
      LightGallery2.prototype.isFirstSlideWithZoomAnimation = function() {
        return !!(!this.lGalleryOn && this.zoomFromOrigin && this.currentImageSize);
      };
      LightGallery2.prototype.addSlideVideoInfo = function(items) {
        var _this = this;
        items.forEach(function(element, index) {
          element.__slideVideoInfo = utils.isVideo(element.src, !!element.video, index);
          if (element.__slideVideoInfo && _this.settings.loadYouTubePoster && !element.poster && element.__slideVideoInfo.youtube) {
            element.poster = "//img.youtube.com/vi/" + element.__slideVideoInfo.youtube[1] + "/maxresdefault.jpg";
          }
        });
      };
      LightGallery2.prototype.loadContent = function(index, rec) {
        var _this = this;
        var currentGalleryItem = this.galleryItems[index];
        var $currentSlide = $LG(this.getSlideItemId(index));
        var poster = currentGalleryItem.poster, srcset = currentGalleryItem.srcset, sizes = currentGalleryItem.sizes, sources = currentGalleryItem.sources;
        var src = currentGalleryItem.src;
        var video = currentGalleryItem.video;
        var _html5Video = video && typeof video === "string" ? JSON.parse(video) : video;
        if (currentGalleryItem.responsive) {
          var srcDyItms = currentGalleryItem.responsive.split(",");
          src = utils.getResponsiveSrc(srcDyItms) || src;
        }
        var videoInfo = currentGalleryItem.__slideVideoInfo;
        var lgVideoStyle = "";
        var iframe = !!currentGalleryItem.iframe;
        var isFirstSlide = !this.lGalleryOn;
        var delay = 0;
        if (isFirstSlide) {
          if (this.zoomFromOrigin && this.currentImageSize) {
            delay = this.settings.startAnimationDuration + 10;
          } else {
            delay = this.settings.backdropDuration + 10;
          }
        }
        if (!$currentSlide.hasClass("lg-loaded")) {
          if (videoInfo) {
            var _a2 = this.mediaContainerPosition, top_2 = _a2.top, bottom = _a2.bottom;
            var videoSize = utils.getSize(this.items[index], this.outer, top_2 + bottom, videoInfo && this.settings.videoMaxSize);
            lgVideoStyle = this.getVideoContStyle(videoSize);
          }
          if (iframe) {
            var markup = utils.getIframeMarkup(this.settings.iframeWidth, this.settings.iframeHeight, this.settings.iframeMaxWidth, this.settings.iframeMaxHeight, src, currentGalleryItem.iframeTitle);
            $currentSlide.prepend(markup);
          } else if (poster) {
            var dummyImg = "";
            var hasStartAnimation = isFirstSlide && this.zoomFromOrigin && this.currentImageSize;
            if (hasStartAnimation) {
              dummyImg = this.getDummyImageContent($currentSlide, index, "");
            }
            var markup = utils.getVideoPosterMarkup(poster, dummyImg || "", lgVideoStyle, this.settings.strings["playVideo"], videoInfo);
            $currentSlide.prepend(markup);
          } else if (videoInfo) {
            var markup = '<div class="lg-video-cont " style="' + lgVideoStyle + '"></div>';
            $currentSlide.prepend(markup);
          } else {
            this.setImgMarkup(src, $currentSlide, index);
            if (srcset || sources) {
              var $img = $currentSlide.find(".lg-object");
              this.initPictureFill($img);
            }
          }
          if (poster || videoInfo) {
            this.LGel.trigger(lGEvents.hasVideo, {
              index,
              src,
              html5Video: _html5Video,
              hasPoster: !!poster
            });
          }
          this.LGel.trigger(lGEvents.afterAppendSlide, { index });
          if (this.lGalleryOn && this.settings.appendSubHtmlTo === ".lg-item") {
            this.addHtml(index);
          }
        }
        var _speed = 0;
        if (delay && !$LG(document.body).hasClass("lg-from-hash")) {
          _speed = delay;
        }
        if (this.isFirstSlideWithZoomAnimation()) {
          setTimeout(function() {
            $currentSlide.removeClass("lg-start-end-progress lg-start-progress").removeAttr("style");
          }, this.settings.startAnimationDuration + 100);
          if (!$currentSlide.hasClass("lg-loaded")) {
            setTimeout(function() {
              if (_this.getSlideType(currentGalleryItem) === "image") {
                var alt = currentGalleryItem.alt;
                var altAttr = alt ? 'alt="' + alt + '"' : "";
                $currentSlide.find(".lg-img-wrap").append(utils.getImgMarkup(index, src, altAttr, srcset, sizes, currentGalleryItem.sources));
                if (srcset || sources) {
                  var $img2 = $currentSlide.find(".lg-object");
                  _this.initPictureFill($img2);
                }
              }
              if (_this.getSlideType(currentGalleryItem) === "image" || _this.getSlideType(currentGalleryItem) === "video" && poster) {
                _this.onLgObjectLoad($currentSlide, index, delay, _speed, true, false);
                _this.onSlideObjectLoad($currentSlide, !!(videoInfo && videoInfo.html5 && !poster), function() {
                  _this.loadContentOnFirstSlideLoad(index, $currentSlide, _speed);
                }, function() {
                  _this.loadContentOnFirstSlideLoad(index, $currentSlide, _speed);
                });
              }
            }, this.settings.startAnimationDuration + 100);
          }
        }
        $currentSlide.addClass("lg-loaded");
        if (!this.isFirstSlideWithZoomAnimation() || this.getSlideType(currentGalleryItem) === "video" && !poster) {
          this.onLgObjectLoad($currentSlide, index, delay, _speed, isFirstSlide, !!(videoInfo && videoInfo.html5 && !poster));
        }
        if ((!this.zoomFromOrigin || !this.currentImageSize) && $currentSlide.hasClass("lg-complete_") && !this.lGalleryOn) {
          setTimeout(function() {
            $currentSlide.addClass("lg-complete");
          }, this.settings.backdropDuration);
        }
        this.lGalleryOn = true;
        if (rec === true) {
          if (!$currentSlide.hasClass("lg-complete_")) {
            $currentSlide.find(".lg-object").first().on("load.lg error.lg", function() {
              _this.preload(index);
            });
          } else {
            this.preload(index);
          }
        }
      };
      LightGallery2.prototype.loadContentOnFirstSlideLoad = function(index, $currentSlide, speed) {
        var _this = this;
        setTimeout(function() {
          $currentSlide.find(".lg-dummy-img").remove();
          $currentSlide.removeClass("lg-first-slide");
          _this.outer.removeClass("lg-first-slide-loading");
          _this.isDummyImageRemoved = true;
          _this.preload(index);
        }, speed + 300);
      };
      LightGallery2.prototype.getItemsToBeInsertedToDom = function(index, prevIndex, numberOfItems) {
        var _this = this;
        if (numberOfItems === void 0) {
          numberOfItems = 0;
        }
        var itemsToBeInsertedToDom = [];
        var possibleNumberOfItems = Math.max(numberOfItems, 3);
        possibleNumberOfItems = Math.min(possibleNumberOfItems, this.galleryItems.length);
        var prevIndexItem = "lg-item-" + this.lgId + "-" + prevIndex;
        if (this.galleryItems.length <= 3) {
          this.galleryItems.forEach(function(_element, index2) {
            itemsToBeInsertedToDom.push("lg-item-" + _this.lgId + "-" + index2);
          });
          return itemsToBeInsertedToDom;
        }
        if (index < (this.galleryItems.length - 1) / 2) {
          for (var idx = index; idx > index - possibleNumberOfItems / 2 && idx >= 0; idx--) {
            itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + idx);
          }
          var numberOfExistingItems = itemsToBeInsertedToDom.length;
          for (var idx = 0; idx < possibleNumberOfItems - numberOfExistingItems; idx++) {
            itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + (index + idx + 1));
          }
        } else {
          for (var idx = index; idx <= this.galleryItems.length - 1 && idx < index + possibleNumberOfItems / 2; idx++) {
            itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + idx);
          }
          var numberOfExistingItems = itemsToBeInsertedToDom.length;
          for (var idx = 0; idx < possibleNumberOfItems - numberOfExistingItems; idx++) {
            itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + (index - idx - 1));
          }
        }
        if (this.settings.loop) {
          if (index === this.galleryItems.length - 1) {
            itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-0");
          } else if (index === 0) {
            itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + (this.galleryItems.length - 1));
          }
        }
        if (itemsToBeInsertedToDom.indexOf(prevIndexItem) === -1) {
          itemsToBeInsertedToDom.push("lg-item-" + this.lgId + "-" + prevIndex);
        }
        return itemsToBeInsertedToDom;
      };
      LightGallery2.prototype.organizeSlideItems = function(index, prevIndex) {
        var _this = this;
        var itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(index, prevIndex, this.settings.numberOfSlideItemsInDom);
        itemsToBeInsertedToDom.forEach(function(item) {
          if (_this.currentItemsInDom.indexOf(item) === -1) {
            _this.$inner.append('<div id="' + item + '" class="lg-item"></div>');
          }
        });
        this.currentItemsInDom.forEach(function(item) {
          if (itemsToBeInsertedToDom.indexOf(item) === -1) {
            $LG("#" + item).remove();
          }
        });
        return itemsToBeInsertedToDom;
      };
      LightGallery2.prototype.getPreviousSlideIndex = function() {
        var prevIndex = 0;
        try {
          var currentItemId = this.outer.find(".lg-current").first().attr("id");
          prevIndex = parseInt(currentItemId.split("-")[3]) || 0;
        } catch (error) {
          prevIndex = 0;
        }
        return prevIndex;
      };
      LightGallery2.prototype.setDownloadValue = function(index) {
        if (this.settings.download) {
          var currentGalleryItem = this.galleryItems[index];
          var hideDownloadBtn = currentGalleryItem.downloadUrl === false || currentGalleryItem.downloadUrl === "false";
          if (hideDownloadBtn) {
            this.outer.addClass("lg-hide-download");
          } else {
            var $download = this.getElementById("lg-download");
            this.outer.removeClass("lg-hide-download");
            $download.attr("href", currentGalleryItem.downloadUrl || currentGalleryItem.src);
            if (currentGalleryItem.download) {
              $download.attr("download", currentGalleryItem.download);
            }
          }
        }
      };
      LightGallery2.prototype.makeSlideAnimation = function(direction, currentSlideItem, previousSlideItem) {
        var _this = this;
        if (this.lGalleryOn) {
          previousSlideItem.addClass("lg-slide-progress");
        }
        setTimeout(function() {
          _this.outer.addClass("lg-no-trans");
          _this.outer.find(".lg-item").removeClass("lg-prev-slide lg-next-slide");
          if (direction === "prev") {
            currentSlideItem.addClass("lg-prev-slide");
            previousSlideItem.addClass("lg-next-slide");
          } else {
            currentSlideItem.addClass("lg-next-slide");
            previousSlideItem.addClass("lg-prev-slide");
          }
          setTimeout(function() {
            _this.outer.find(".lg-item").removeClass("lg-current");
            currentSlideItem.addClass("lg-current");
            _this.outer.removeClass("lg-no-trans");
          }, 50);
        }, this.lGalleryOn ? this.settings.slideDelay : 0);
      };
      LightGallery2.prototype.slide = function(index, fromTouch, fromThumb, direction) {
        var _this = this;
        var prevIndex = this.getPreviousSlideIndex();
        this.currentItemsInDom = this.organizeSlideItems(index, prevIndex);
        if (this.lGalleryOn && prevIndex === index) {
          return;
        }
        var numberOfGalleryItems = this.galleryItems.length;
        if (!this.lgBusy) {
          if (this.settings.counter) {
            this.updateCurrentCounter(index);
          }
          var currentSlideItem = this.getSlideItem(index);
          var previousSlideItem_1 = this.getSlideItem(prevIndex);
          var currentGalleryItem = this.galleryItems[index];
          var videoInfo = currentGalleryItem.__slideVideoInfo;
          this.outer.attr("data-lg-slide-type", this.getSlideType(currentGalleryItem));
          this.setDownloadValue(index);
          if (videoInfo) {
            var _a2 = this.mediaContainerPosition, top_3 = _a2.top, bottom = _a2.bottom;
            var videoSize = utils.getSize(this.items[index], this.outer, top_3 + bottom, videoInfo && this.settings.videoMaxSize);
            this.resizeVideoSlide(index, videoSize);
          }
          this.LGel.trigger(lGEvents.beforeSlide, {
            prevIndex,
            index,
            fromTouch: !!fromTouch,
            fromThumb: !!fromThumb
          });
          this.lgBusy = true;
          clearTimeout(this.hideBarTimeout);
          this.arrowDisable(index);
          if (!direction) {
            if (index < prevIndex) {
              direction = "prev";
            } else if (index > prevIndex) {
              direction = "next";
            }
          }
          if (!fromTouch) {
            this.makeSlideAnimation(direction, currentSlideItem, previousSlideItem_1);
          } else {
            this.outer.find(".lg-item").removeClass("lg-prev-slide lg-current lg-next-slide");
            var touchPrev = void 0;
            var touchNext = void 0;
            if (numberOfGalleryItems > 2) {
              touchPrev = index - 1;
              touchNext = index + 1;
              if (index === 0 && prevIndex === numberOfGalleryItems - 1) {
                touchNext = 0;
                touchPrev = numberOfGalleryItems - 1;
              } else if (index === numberOfGalleryItems - 1 && prevIndex === 0) {
                touchNext = 0;
                touchPrev = numberOfGalleryItems - 1;
              }
            } else {
              touchPrev = 0;
              touchNext = 1;
            }
            if (direction === "prev") {
              this.getSlideItem(touchNext).addClass("lg-next-slide");
            } else {
              this.getSlideItem(touchPrev).addClass("lg-prev-slide");
            }
            currentSlideItem.addClass("lg-current");
          }
          if (!this.lGalleryOn) {
            this.loadContent(index, true);
          } else {
            setTimeout(function() {
              _this.loadContent(index, true);
              if (_this.settings.appendSubHtmlTo !== ".lg-item") {
                _this.addHtml(index);
              }
            }, this.settings.speed + 50 + (fromTouch ? 0 : this.settings.slideDelay));
          }
          setTimeout(function() {
            _this.lgBusy = false;
            previousSlideItem_1.removeClass("lg-slide-progress");
            _this.LGel.trigger(lGEvents.afterSlide, {
              prevIndex,
              index,
              fromTouch,
              fromThumb
            });
          }, (this.lGalleryOn ? this.settings.speed + 100 : 100) + (fromTouch ? 0 : this.settings.slideDelay));
        }
        this.index = index;
      };
      LightGallery2.prototype.updateCurrentCounter = function(index) {
        this.getElementById("lg-counter-current").html(index + 1 + "");
      };
      LightGallery2.prototype.updateCounterTotal = function() {
        this.getElementById("lg-counter-all").html(this.galleryItems.length + "");
      };
      LightGallery2.prototype.getSlideType = function(item) {
        if (item.__slideVideoInfo) {
          return "video";
        } else if (item.iframe) {
          return "iframe";
        } else {
          return "image";
        }
      };
      LightGallery2.prototype.touchMove = function(startCoords, endCoords, e2) {
        var distanceX = endCoords.pageX - startCoords.pageX;
        var distanceY = endCoords.pageY - startCoords.pageY;
        var allowSwipe = false;
        if (this.swipeDirection) {
          allowSwipe = true;
        } else {
          if (Math.abs(distanceX) > 15) {
            this.swipeDirection = "horizontal";
            allowSwipe = true;
          } else if (Math.abs(distanceY) > 15) {
            this.swipeDirection = "vertical";
            allowSwipe = true;
          }
        }
        if (!allowSwipe) {
          return;
        }
        var $currentSlide = this.getSlideItem(this.index);
        if (this.swipeDirection === "horizontal") {
          e2 === null || e2 === void 0 ? void 0 : e2.preventDefault();
          this.outer.addClass("lg-dragging");
          this.setTranslate($currentSlide, distanceX, 0);
          var width = $currentSlide.get().offsetWidth;
          var slideWidthAmount = width * 15 / 100;
          var gutter = slideWidthAmount - Math.abs(distanceX * 10 / 100);
          this.setTranslate(this.outer.find(".lg-prev-slide").first(), -width + distanceX - gutter, 0);
          this.setTranslate(this.outer.find(".lg-next-slide").first(), width + distanceX + gutter, 0);
        } else if (this.swipeDirection === "vertical") {
          if (this.settings.swipeToClose) {
            e2 === null || e2 === void 0 ? void 0 : e2.preventDefault();
            this.$container.addClass("lg-dragging-vertical");
            var opacity = 1 - Math.abs(distanceY) / window.innerHeight;
            this.$backdrop.css("opacity", opacity);
            var scale = 1 - Math.abs(distanceY) / (window.innerWidth * 2);
            this.setTranslate($currentSlide, 0, distanceY, scale, scale);
            if (Math.abs(distanceY) > 100) {
              this.outer.addClass("lg-hide-items").removeClass("lg-components-open");
            }
          }
        }
      };
      LightGallery2.prototype.touchEnd = function(endCoords, startCoords, event) {
        var _this = this;
        var distance;
        if (this.settings.mode !== "lg-slide") {
          this.outer.addClass("lg-slide");
        }
        setTimeout(function() {
          _this.$container.removeClass("lg-dragging-vertical");
          _this.outer.removeClass("lg-dragging lg-hide-items").addClass("lg-components-open");
          var triggerClick = true;
          if (_this.swipeDirection === "horizontal") {
            distance = endCoords.pageX - startCoords.pageX;
            var distanceAbs = Math.abs(endCoords.pageX - startCoords.pageX);
            if (distance < 0 && distanceAbs > _this.settings.swipeThreshold) {
              _this.goToNextSlide(true);
              triggerClick = false;
            } else if (distance > 0 && distanceAbs > _this.settings.swipeThreshold) {
              _this.goToPrevSlide(true);
              triggerClick = false;
            }
          } else if (_this.swipeDirection === "vertical") {
            distance = Math.abs(endCoords.pageY - startCoords.pageY);
            if (_this.settings.closable && _this.settings.swipeToClose && distance > 100) {
              _this.closeGallery();
              return;
            } else {
              _this.$backdrop.css("opacity", 1);
            }
          }
          _this.outer.find(".lg-item").removeAttr("style");
          if (triggerClick && Math.abs(endCoords.pageX - startCoords.pageX) < 5) {
            var target = $LG(event.target);
            if (_this.isPosterElement(target)) {
              _this.LGel.trigger(lGEvents.posterClick);
            }
          }
          _this.swipeDirection = void 0;
        });
        setTimeout(function() {
          if (!_this.outer.hasClass("lg-dragging") && _this.settings.mode !== "lg-slide") {
            _this.outer.removeClass("lg-slide");
          }
        }, this.settings.speed + 100);
      };
      LightGallery2.prototype.enableSwipe = function() {
        var _this = this;
        var startCoords = {};
        var endCoords = {};
        var isMoved = false;
        var isSwiping = false;
        if (this.settings.enableSwipe) {
          this.$inner.on("touchstart.lg", function(e2) {
            _this.dragOrSwipeEnabled = true;
            var $item = _this.getSlideItem(_this.index);
            if (($LG(e2.target).hasClass("lg-item") || $item.get().contains(e2.target)) && !_this.outer.hasClass("lg-zoomed") && !_this.lgBusy && e2.touches.length === 1) {
              isSwiping = true;
              _this.touchAction = "swipe";
              _this.manageSwipeClass();
              startCoords = {
                pageX: e2.touches[0].pageX,
                pageY: e2.touches[0].pageY
              };
            }
          });
          this.$inner.on("touchmove.lg", function(e2) {
            if (isSwiping && _this.touchAction === "swipe" && e2.touches.length === 1) {
              endCoords = {
                pageX: e2.touches[0].pageX,
                pageY: e2.touches[0].pageY
              };
              _this.touchMove(startCoords, endCoords, e2);
              isMoved = true;
            }
          });
          this.$inner.on("touchend.lg", function(event) {
            if (_this.touchAction === "swipe") {
              if (isMoved) {
                isMoved = false;
                _this.touchEnd(endCoords, startCoords, event);
              } else if (isSwiping) {
                var target = $LG(event.target);
                if (_this.isPosterElement(target)) {
                  _this.LGel.trigger(lGEvents.posterClick);
                }
              }
              _this.touchAction = void 0;
              isSwiping = false;
            }
          });
        }
      };
      LightGallery2.prototype.enableDrag = function() {
        var _this = this;
        var startCoords = {};
        var endCoords = {};
        var isDraging = false;
        var isMoved = false;
        if (this.settings.enableDrag) {
          this.outer.on("mousedown.lg", function(e2) {
            _this.dragOrSwipeEnabled = true;
            var $item = _this.getSlideItem(_this.index);
            if ($LG(e2.target).hasClass("lg-item") || $item.get().contains(e2.target)) {
              if (!_this.outer.hasClass("lg-zoomed") && !_this.lgBusy) {
                e2.preventDefault();
                if (!_this.lgBusy) {
                  _this.manageSwipeClass();
                  startCoords = {
                    pageX: e2.pageX,
                    pageY: e2.pageY
                  };
                  isDraging = true;
                  _this.outer.get().scrollLeft += 1;
                  _this.outer.get().scrollLeft -= 1;
                  _this.outer.removeClass("lg-grab").addClass("lg-grabbing");
                  _this.LGel.trigger(lGEvents.dragStart);
                }
              }
            }
          });
          $LG(window).on("mousemove.lg.global" + this.lgId, function(e2) {
            if (isDraging && _this.lgOpened) {
              isMoved = true;
              endCoords = {
                pageX: e2.pageX,
                pageY: e2.pageY
              };
              _this.touchMove(startCoords, endCoords);
              _this.LGel.trigger(lGEvents.dragMove);
            }
          });
          $LG(window).on("mouseup.lg.global" + this.lgId, function(event) {
            if (!_this.lgOpened) {
              return;
            }
            var target = $LG(event.target);
            if (isMoved) {
              isMoved = false;
              _this.touchEnd(endCoords, startCoords, event);
              _this.LGel.trigger(lGEvents.dragEnd);
            } else if (_this.isPosterElement(target)) {
              _this.LGel.trigger(lGEvents.posterClick);
            }
            if (isDraging) {
              isDraging = false;
              _this.outer.removeClass("lg-grabbing").addClass("lg-grab");
            }
          });
        }
      };
      LightGallery2.prototype.triggerPosterClick = function() {
        var _this = this;
        this.$inner.on("click.lg", function(event) {
          if (!_this.dragOrSwipeEnabled && _this.isPosterElement($LG(event.target))) {
            _this.LGel.trigger(lGEvents.posterClick);
          }
        });
      };
      LightGallery2.prototype.manageSwipeClass = function() {
        var _touchNext = this.index + 1;
        var _touchPrev = this.index - 1;
        if (this.settings.loop && this.galleryItems.length > 2) {
          if (this.index === 0) {
            _touchPrev = this.galleryItems.length - 1;
          } else if (this.index === this.galleryItems.length - 1) {
            _touchNext = 0;
          }
        }
        this.outer.find(".lg-item").removeClass("lg-next-slide lg-prev-slide");
        if (_touchPrev > -1) {
          this.getSlideItem(_touchPrev).addClass("lg-prev-slide");
        }
        this.getSlideItem(_touchNext).addClass("lg-next-slide");
      };
      LightGallery2.prototype.goToNextSlide = function(fromTouch) {
        var _this = this;
        var _loop = this.settings.loop;
        if (fromTouch && this.galleryItems.length < 3) {
          _loop = false;
        }
        if (!this.lgBusy) {
          if (this.index + 1 < this.galleryItems.length) {
            this.index++;
            this.LGel.trigger(lGEvents.beforeNextSlide, {
              index: this.index
            });
            this.slide(this.index, !!fromTouch, false, "next");
          } else {
            if (_loop) {
              this.index = 0;
              this.LGel.trigger(lGEvents.beforeNextSlide, {
                index: this.index
              });
              this.slide(this.index, !!fromTouch, false, "next");
            } else if (this.settings.slideEndAnimation && !fromTouch) {
              this.outer.addClass("lg-right-end");
              setTimeout(function() {
                _this.outer.removeClass("lg-right-end");
              }, 400);
            }
          }
        }
      };
      LightGallery2.prototype.goToPrevSlide = function(fromTouch) {
        var _this = this;
        var _loop = this.settings.loop;
        if (fromTouch && this.galleryItems.length < 3) {
          _loop = false;
        }
        if (!this.lgBusy) {
          if (this.index > 0) {
            this.index--;
            this.LGel.trigger(lGEvents.beforePrevSlide, {
              index: this.index,
              fromTouch
            });
            this.slide(this.index, !!fromTouch, false, "prev");
          } else {
            if (_loop) {
              this.index = this.galleryItems.length - 1;
              this.LGel.trigger(lGEvents.beforePrevSlide, {
                index: this.index,
                fromTouch
              });
              this.slide(this.index, !!fromTouch, false, "prev");
            } else if (this.settings.slideEndAnimation && !fromTouch) {
              this.outer.addClass("lg-left-end");
              setTimeout(function() {
                _this.outer.removeClass("lg-left-end");
              }, 400);
            }
          }
        }
      };
      LightGallery2.prototype.keyPress = function() {
        var _this = this;
        $LG(window).on("keydown.lg.global" + this.lgId, function(e2) {
          if (_this.lgOpened && _this.settings.escKey === true && e2.keyCode === 27) {
            e2.preventDefault();
            if (_this.settings.allowMediaOverlap && _this.outer.hasClass("lg-can-toggle") && _this.outer.hasClass("lg-components-open")) {
              _this.outer.removeClass("lg-components-open");
            } else {
              _this.closeGallery();
            }
          }
          if (_this.lgOpened && _this.galleryItems.length > 1) {
            if (e2.keyCode === 37) {
              e2.preventDefault();
              _this.goToPrevSlide();
            }
            if (e2.keyCode === 39) {
              e2.preventDefault();
              _this.goToNextSlide();
            }
          }
        });
      };
      LightGallery2.prototype.arrow = function() {
        var _this = this;
        this.getElementById("lg-prev").on("click.lg", function() {
          _this.goToPrevSlide();
        });
        this.getElementById("lg-next").on("click.lg", function() {
          _this.goToNextSlide();
        });
      };
      LightGallery2.prototype.arrowDisable = function(index) {
        if (!this.settings.loop && this.settings.hideControlOnEnd) {
          var $prev = this.getElementById("lg-prev");
          var $next = this.getElementById("lg-next");
          if (index + 1 === this.galleryItems.length) {
            $next.attr("disabled", "disabled").addClass("disabled");
          } else {
            $next.removeAttr("disabled").removeClass("disabled");
          }
          if (index === 0) {
            $prev.attr("disabled", "disabled").addClass("disabled");
          } else {
            $prev.removeAttr("disabled").removeClass("disabled");
          }
        }
      };
      LightGallery2.prototype.setTranslate = function($el, xValue, yValue, scaleX, scaleY) {
        if (scaleX === void 0) {
          scaleX = 1;
        }
        if (scaleY === void 0) {
          scaleY = 1;
        }
        $el.css("transform", "translate3d(" + xValue + "px, " + yValue + "px, 0px) scale3d(" + scaleX + ", " + scaleY + ", 1)");
      };
      LightGallery2.prototype.mousewheel = function() {
        var _this = this;
        var lastCall = 0;
        this.outer.on("wheel.lg", function(e2) {
          if (!e2.deltaY || _this.galleryItems.length < 2) {
            return;
          }
          e2.preventDefault();
          var now = (/* @__PURE__ */ new Date()).getTime();
          if (now - lastCall < 1e3) {
            return;
          }
          lastCall = now;
          if (e2.deltaY > 0) {
            _this.goToNextSlide();
          } else if (e2.deltaY < 0) {
            _this.goToPrevSlide();
          }
        });
      };
      LightGallery2.prototype.isSlideElement = function(target) {
        return target.hasClass("lg-outer") || target.hasClass("lg-item") || target.hasClass("lg-img-wrap");
      };
      LightGallery2.prototype.isPosterElement = function(target) {
        var playButton = this.getSlideItem(this.index).find(".lg-video-play-button").get();
        return target.hasClass("lg-video-poster") || target.hasClass("lg-video-play-button") || playButton && playButton.contains(target.get());
      };
      LightGallery2.prototype.toggleMaximize = function() {
        var _this = this;
        this.getElementById("lg-maximize").on("click.lg", function() {
          _this.$container.toggleClass("lg-inline");
          _this.refreshOnResize();
        });
      };
      LightGallery2.prototype.invalidateItems = function() {
        for (var index = 0; index < this.items.length; index++) {
          var element = this.items[index];
          var $element = $LG(element);
          $element.off("click.lgcustom-item-" + $element.attr("data-lg-id"));
        }
      };
      LightGallery2.prototype.trapFocus = function() {
        var _this = this;
        this.$container.get().focus({
          preventScroll: true
        });
        $LG(window).on("keydown.lg.global" + this.lgId, function(e2) {
          if (!_this.lgOpened) {
            return;
          }
          var isTabPressed = e2.key === "Tab" || e2.keyCode === 9;
          if (!isTabPressed) {
            return;
          }
          var focusableEls = utils.getFocusableElements(_this.$container.get());
          var firstFocusableEl = focusableEls[0];
          var lastFocusableEl = focusableEls[focusableEls.length - 1];
          if (e2.shiftKey) {
            if (document.activeElement === firstFocusableEl) {
              lastFocusableEl.focus();
              e2.preventDefault();
            }
          } else {
            if (document.activeElement === lastFocusableEl) {
              firstFocusableEl.focus();
              e2.preventDefault();
            }
          }
        });
      };
      LightGallery2.prototype.manageCloseGallery = function() {
        var _this = this;
        if (!this.settings.closable)
          return;
        var mousedown = false;
        this.getElementById("lg-close").on("click.lg", function() {
          _this.closeGallery();
        });
        if (this.settings.closeOnTap) {
          this.outer.on("mousedown.lg", function(e2) {
            var target = $LG(e2.target);
            if (_this.isSlideElement(target)) {
              mousedown = true;
            } else {
              mousedown = false;
            }
          });
          this.outer.on("mousemove.lg", function() {
            mousedown = false;
          });
          this.outer.on("mouseup.lg", function(e2) {
            var target = $LG(e2.target);
            if (_this.isSlideElement(target) && mousedown) {
              if (!_this.outer.hasClass("lg-dragging")) {
                _this.closeGallery();
              }
            }
          });
        }
      };
      LightGallery2.prototype.closeGallery = function(force) {
        var _this = this;
        if (!this.lgOpened || !this.settings.closable && !force) {
          return 0;
        }
        this.LGel.trigger(lGEvents.beforeClose);
        if (this.settings.resetScrollPosition && !this.settings.hideScrollbar) {
          $LG(window).scrollTop(this.prevScrollTop);
        }
        var currentItem = this.items[this.index];
        var transform;
        if (this.zoomFromOrigin && currentItem) {
          var _a2 = this.mediaContainerPosition, top_4 = _a2.top, bottom = _a2.bottom;
          var _b = this.galleryItems[this.index], __slideVideoInfo = _b.__slideVideoInfo, poster = _b.poster;
          var imageSize = utils.getSize(currentItem, this.outer, top_4 + bottom, __slideVideoInfo && poster && this.settings.videoMaxSize);
          transform = utils.getTransform(currentItem, this.outer, top_4, bottom, imageSize);
        }
        if (this.zoomFromOrigin && transform) {
          this.outer.addClass("lg-closing lg-zoom-from-image");
          this.getSlideItem(this.index).addClass("lg-start-end-progress").css("transition-duration", this.settings.startAnimationDuration + "ms").css("transform", transform);
        } else {
          this.outer.addClass("lg-hide-items");
          this.outer.removeClass("lg-zoom-from-image");
        }
        this.destroyModules();
        this.lGalleryOn = false;
        this.isDummyImageRemoved = false;
        this.zoomFromOrigin = this.settings.zoomFromOrigin;
        clearTimeout(this.hideBarTimeout);
        this.hideBarTimeout = false;
        $LG("html").removeClass("lg-on");
        this.outer.removeClass("lg-visible lg-components-open");
        this.$backdrop.removeClass("in").css("opacity", 0);
        var removeTimeout = this.zoomFromOrigin && transform ? Math.max(this.settings.startAnimationDuration, this.settings.backdropDuration) : this.settings.backdropDuration;
        this.$container.removeClass("lg-show-in");
        setTimeout(function() {
          if (_this.zoomFromOrigin && transform) {
            _this.outer.removeClass("lg-zoom-from-image");
          }
          _this.$container.removeClass("lg-show");
          _this.resetScrollBar();
          _this.$backdrop.removeAttr("style").css("transition-duration", _this.settings.backdropDuration + "ms");
          _this.outer.removeClass("lg-closing " + _this.settings.startClass);
          _this.getSlideItem(_this.index).removeClass("lg-start-end-progress");
          _this.$inner.empty();
          if (_this.lgOpened) {
            _this.LGel.trigger(lGEvents.afterClose, {
              instance: _this
            });
          }
          if (_this.$container.get()) {
            _this.$container.get().blur();
          }
          _this.lgOpened = false;
        }, removeTimeout + 100);
        return removeTimeout + 100;
      };
      LightGallery2.prototype.initModules = function() {
        this.plugins.forEach(function(module) {
          try {
            module.init();
          } catch (err) {
            console.warn("lightGallery:- make sure lightGallery module is properly initiated");
          }
        });
      };
      LightGallery2.prototype.destroyModules = function(destroy) {
        this.plugins.forEach(function(module) {
          try {
            if (destroy) {
              module.destroy();
            } else {
              module.closeGallery && module.closeGallery();
            }
          } catch (err) {
            console.warn("lightGallery:- make sure lightGallery module is properly destroyed");
          }
        });
      };
      LightGallery2.prototype.refresh = function(galleryItems) {
        if (!this.settings.dynamic) {
          this.invalidateItems();
        }
        if (galleryItems) {
          this.galleryItems = galleryItems;
        } else {
          this.galleryItems = this.getItems();
        }
        this.updateControls();
        this.openGalleryOnItemClick();
        this.LGel.trigger(lGEvents.updateSlides);
      };
      LightGallery2.prototype.updateControls = function() {
        this.addSlideVideoInfo(this.galleryItems);
        this.updateCounterTotal();
        this.manageSingleSlideClassName();
      };
      LightGallery2.prototype.destroyGallery = function() {
        this.destroyModules(true);
        if (!this.settings.dynamic) {
          this.invalidateItems();
        }
        $LG(window).off(".lg.global" + this.lgId);
        this.LGel.off(".lg");
        this.$container.remove();
      };
      LightGallery2.prototype.destroy = function() {
        var closeTimeout = this.closeGallery(true);
        if (closeTimeout) {
          setTimeout(this.destroyGallery.bind(this), closeTimeout);
        } else {
          this.destroyGallery();
        }
        return closeTimeout;
      };
      return LightGallery2;
    }();
    LgMethods = {
      onAfterAppendSlide: "lgAfterAppendSlide",
      onInit: "lgInit",
      onHasVideo: "lgHasVideo",
      onContainerResize: "lgContainerResize",
      onUpdateSlides: "lgUpdateSlides",
      onAfterAppendSubHtml: "lgAfterAppendSubHtml",
      onBeforeOpen: "lgBeforeOpen",
      onAfterOpen: "lgAfterOpen",
      onSlideItemLoad: "lgSlideItemLoad",
      onBeforeSlide: "lgBeforeSlide",
      onAfterSlide: "lgAfterSlide",
      onPosterClick: "lgPosterClick",
      onDragStart: "lgDragStart",
      onDragMove: "lgDragMove",
      onDragEnd: "lgDragEnd",
      onBeforeNextSlide: "lgBeforeNextSlide",
      onBeforePrevSlide: "lgBeforePrevSlide",
      onBeforeClose: "lgBeforeClose",
      onAfterClose: "lgAfterClose",
      onRotateLeft: "lgRotateLeft",
      onRotateRight: "lgRotateRight",
      onFlipHorizontal: "lgFlipHorizontal",
      onFlipVertical: "lgFlipVertical"
    };
    LG = function(_a2) {
      var children = _a2.children, elementClassNames = _a2.elementClassNames, onAfterAppendSlide = _a2.onAfterAppendSlide, onInit = _a2.onInit, onHasVideo = _a2.onHasVideo, onContainerResize = _a2.onContainerResize, onAfterAppendSubHtml = _a2.onAfterAppendSubHtml, onBeforeOpen = _a2.onBeforeOpen, onAfterOpen = _a2.onAfterOpen, onSlideItemLoad = _a2.onSlideItemLoad, onBeforeSlide = _a2.onBeforeSlide, onAfterSlide = _a2.onAfterSlide, onPosterClick = _a2.onPosterClick, onDragStart = _a2.onDragStart, onDragMove = _a2.onDragMove, onDragEnd = _a2.onDragEnd, onBeforeNextSlide = _a2.onBeforeNextSlide, onBeforePrevSlide = _a2.onBeforePrevSlide, onBeforeClose = _a2.onBeforeClose, onAfterClose = _a2.onAfterClose, onRotateLeft = _a2.onRotateLeft, onRotateRight = _a2.onRotateRight, onFlipHorizontal = _a2.onFlipHorizontal, onFlipVertical = _a2.onFlipVertical, restProps = __rest(_a2, ["children", "elementClassNames", "onAfterAppendSlide", "onInit", "onHasVideo", "onContainerResize", "onAfterAppendSubHtml", "onBeforeOpen", "onAfterOpen", "onSlideItemLoad", "onBeforeSlide", "onAfterSlide", "onPosterClick", "onDragStart", "onDragMove", "onDragEnd", "onBeforeNextSlide", "onBeforePrevSlide", "onBeforeClose", "onAfterClose", "onRotateLeft", "onRotateRight", "onFlipHorizontal", "onFlipVertical"]);
      var $lg = (0, import_react6.useRef)(null);
      var registerEvents = (0, import_react6.useCallback)(function() {
        if (onAfterAppendSlide && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onAfterAppendSlide, function(event) {
            onAfterAppendSlide(event.detail);
          });
        }
        if (onInit && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onInit, function(event) {
            onInit(event.detail);
          });
        }
        if (onHasVideo && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onHasVideo, function(event) {
            onHasVideo(event.detail);
          });
        }
        if (onContainerResize && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onContainerResize, function(event) {
            onContainerResize(event.detail);
          });
        }
        if (onAfterAppendSubHtml && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onAfterAppendSubHtml, function(event) {
            onAfterAppendSubHtml(event.detail);
          });
        }
        if (onBeforeOpen && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onBeforeOpen, function(event) {
            onBeforeOpen(event.detail);
          });
        }
        if (onAfterOpen && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onAfterOpen, function(event) {
            onAfterOpen(event.detail);
          });
        }
        if (onSlideItemLoad && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onSlideItemLoad, function(event) {
            onSlideItemLoad(event.detail);
          });
        }
        if (onBeforeSlide && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onBeforeSlide, function(event) {
            onBeforeSlide(event.detail);
          });
        }
        if (onAfterSlide && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onAfterSlide, function(event) {
            onAfterSlide(event.detail);
          });
        }
        if (onPosterClick && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onPosterClick, function(event) {
            onPosterClick(event.detail);
          });
        }
        if (onDragStart && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onDragStart, function(event) {
            onDragStart(event.detail);
          });
        }
        if (onDragMove && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onDragMove, function(event) {
            onDragMove(event.detail);
          });
        }
        if (onDragEnd && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onDragEnd, function(event) {
            onDragEnd(event.detail);
          });
        }
        if (onBeforeNextSlide && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onBeforeNextSlide, function(event) {
            onBeforeNextSlide(event.detail);
          });
        }
        if (onBeforePrevSlide && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onBeforePrevSlide, function(event) {
            onBeforePrevSlide(event.detail);
          });
        }
        if (onBeforeClose && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onBeforeClose, function(event) {
            onBeforeClose(event.detail);
          });
        }
        if (onAfterClose && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onAfterClose, function(event) {
            onAfterClose(event.detail);
          });
        }
        if (onRotateLeft && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onRotateLeft, function(event) {
            onRotateLeft(event.detail);
          });
        }
        if (onRotateRight && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onRotateRight, function(event) {
            onRotateRight(event.detail);
          });
        }
        if (onFlipHorizontal && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onFlipHorizontal, function(event) {
            onFlipHorizontal(event.detail);
          });
        }
        if (onFlipVertical && $lg && $lg.current) {
          $lg.current.addEventListener(LgMethods.onFlipVertical, function(event) {
            onFlipVertical(event.detail);
          });
        }
      }, [
        onAfterAppendSlide,
        onAfterAppendSubHtml,
        onAfterClose,
        onRotateLeft,
        onRotateRight,
        onFlipHorizontal,
        onFlipVertical,
        onAfterOpen,
        onAfterSlide,
        onBeforeClose,
        onBeforeNextSlide,
        onBeforeOpen,
        onBeforePrevSlide,
        onBeforeSlide,
        onContainerResize,
        onDragEnd,
        onDragMove,
        onDragStart,
        onHasVideo,
        onInit,
        onPosterClick,
        onSlideItemLoad
      ]);
      (0, import_react6.useEffect)(function() {
        registerEvents();
        var lightGallery$1 = lightGallery($lg.current, restProps);
        return function cleanup() {
          lightGallery$1.destroy();
        };
      }, [registerEvents, restProps]);
      return (0, import_react6.createElement)("div", { className: "lg-react-element " + (elementClassNames ? elementClassNames : ""), ref: $lg }, children);
    };
    Lightgallery_es5_default = LG;
  }
});

// node_modules/lightgallery/plugins/thumbnail/lg-thumbnail.es5.js
var __assign2, thumbnailsSettings, lGEvents2, Thumbnail, lg_thumbnail_es5_default;
var init_lg_thumbnail_es5 = __esm({
  "node_modules/lightgallery/plugins/thumbnail/lg-thumbnail.es5.js"() {
    __assign2 = function() {
      __assign2 = Object.assign || function __assign6(t2) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t2[p] = s[p];
        }
        return t2;
      };
      return __assign2.apply(this, arguments);
    };
    thumbnailsSettings = {
      thumbnail: true,
      animateThumb: true,
      currentPagerPosition: "middle",
      alignThumbnails: "middle",
      thumbWidth: 100,
      thumbHeight: "80px",
      thumbMargin: 5,
      appendThumbnailsTo: ".lg-components",
      toggleThumb: false,
      enableThumbDrag: true,
      enableThumbSwipe: true,
      thumbnailSwipeThreshold: 10,
      loadYouTubeThumbnail: true,
      youTubeThumbSize: 1,
      thumbnailPluginStrings: {
        toggleThumbnails: "Toggle thumbnails"
      }
    };
    lGEvents2 = {
      afterAppendSlide: "lgAfterAppendSlide",
      init: "lgInit",
      hasVideo: "lgHasVideo",
      containerResize: "lgContainerResize",
      updateSlides: "lgUpdateSlides",
      afterAppendSubHtml: "lgAfterAppendSubHtml",
      beforeOpen: "lgBeforeOpen",
      afterOpen: "lgAfterOpen",
      slideItemLoad: "lgSlideItemLoad",
      beforeSlide: "lgBeforeSlide",
      afterSlide: "lgAfterSlide",
      posterClick: "lgPosterClick",
      dragStart: "lgDragStart",
      dragMove: "lgDragMove",
      dragEnd: "lgDragEnd",
      beforeNextSlide: "lgBeforeNextSlide",
      beforePrevSlide: "lgBeforePrevSlide",
      beforeClose: "lgBeforeClose",
      afterClose: "lgAfterClose",
      rotateLeft: "lgRotateLeft",
      rotateRight: "lgRotateRight",
      flipHorizontal: "lgFlipHorizontal",
      flipVertical: "lgFlipVertical",
      autoplay: "lgAutoplay",
      autoplayStart: "lgAutoplayStart",
      autoplayStop: "lgAutoplayStop"
    };
    Thumbnail = /** @class */
    function() {
      function Thumbnail2(instance, $LG2) {
        this.thumbOuterWidth = 0;
        this.thumbTotalWidth = 0;
        this.translateX = 0;
        this.thumbClickable = false;
        this.core = instance;
        this.$LG = $LG2;
        return this;
      }
      Thumbnail2.prototype.init = function() {
        this.settings = __assign2(__assign2({}, thumbnailsSettings), this.core.settings);
        this.thumbOuterWidth = 0;
        this.thumbTotalWidth = this.core.galleryItems.length * (this.settings.thumbWidth + this.settings.thumbMargin);
        this.translateX = 0;
        this.setAnimateThumbStyles();
        if (!this.core.settings.allowMediaOverlap) {
          this.settings.toggleThumb = false;
        }
        if (this.settings.thumbnail) {
          this.build();
          if (this.settings.animateThumb) {
            if (this.settings.enableThumbDrag) {
              this.enableThumbDrag();
            }
            if (this.settings.enableThumbSwipe) {
              this.enableThumbSwipe();
            }
            this.thumbClickable = false;
          } else {
            this.thumbClickable = true;
          }
          this.toggleThumbBar();
          this.thumbKeyPress();
        }
      };
      Thumbnail2.prototype.build = function() {
        var _this = this;
        this.setThumbMarkup();
        this.manageActiveClassOnSlideChange();
        this.$lgThumb.first().on("click.lg touchend.lg", function(e2) {
          var $target = _this.$LG(e2.target);
          if (!$target.hasAttribute("data-lg-item-id")) {
            return;
          }
          setTimeout(function() {
            if (_this.thumbClickable && !_this.core.lgBusy) {
              var index = parseInt($target.attr("data-lg-item-id"));
              _this.core.slide(index, false, true, false);
            }
          }, 50);
        });
        this.core.LGel.on(lGEvents2.beforeSlide + ".thumb", function(event) {
          var index = event.detail.index;
          _this.animateThumb(index);
        });
        this.core.LGel.on(lGEvents2.beforeOpen + ".thumb", function() {
          _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;
        });
        this.core.LGel.on(lGEvents2.updateSlides + ".thumb", function() {
          _this.rebuildThumbnails();
        });
        this.core.LGel.on(lGEvents2.containerResize + ".thumb", function() {
          if (!_this.core.lgOpened)
            return;
          setTimeout(function() {
            _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;
            _this.animateThumb(_this.core.index);
            _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;
          }, 50);
        });
      };
      Thumbnail2.prototype.setThumbMarkup = function() {
        var thumbOuterClassNames = "lg-thumb-outer ";
        if (this.settings.alignThumbnails) {
          thumbOuterClassNames += "lg-thumb-align-" + this.settings.alignThumbnails;
        }
        var html = '<div class="' + thumbOuterClassNames + '">\n        <div class="lg-thumb lg-group">\n        </div>\n        </div>';
        this.core.outer.addClass("lg-has-thumb");
        if (this.settings.appendThumbnailsTo === ".lg-components") {
          this.core.$lgComponents.append(html);
        } else {
          this.core.outer.append(html);
        }
        this.$thumbOuter = this.core.outer.find(".lg-thumb-outer").first();
        this.$lgThumb = this.core.outer.find(".lg-thumb").first();
        if (this.settings.animateThumb) {
          this.core.outer.find(".lg-thumb").css("transition-duration", this.core.settings.speed + "ms").css("width", this.thumbTotalWidth + "px").css("position", "relative");
        }
        this.setThumbItemHtml(this.core.galleryItems);
      };
      Thumbnail2.prototype.enableThumbDrag = function() {
        var _this = this;
        var thumbDragUtils = {
          cords: {
            startX: 0,
            endX: 0
          },
          isMoved: false,
          newTranslateX: 0,
          startTime: /* @__PURE__ */ new Date(),
          endTime: /* @__PURE__ */ new Date(),
          touchMoveTime: 0
        };
        var isDragging = false;
        this.$thumbOuter.addClass("lg-grab");
        this.core.outer.find(".lg-thumb").first().on("mousedown.lg.thumb", function(e2) {
          if (_this.thumbTotalWidth > _this.thumbOuterWidth) {
            e2.preventDefault();
            thumbDragUtils.cords.startX = e2.pageX;
            thumbDragUtils.startTime = /* @__PURE__ */ new Date();
            _this.thumbClickable = false;
            isDragging = true;
            _this.core.outer.get().scrollLeft += 1;
            _this.core.outer.get().scrollLeft -= 1;
            _this.$thumbOuter.removeClass("lg-grab").addClass("lg-grabbing");
          }
        });
        this.$LG(window).on("mousemove.lg.thumb.global" + this.core.lgId, function(e2) {
          if (!_this.core.lgOpened)
            return;
          if (isDragging) {
            thumbDragUtils.cords.endX = e2.pageX;
            thumbDragUtils = _this.onThumbTouchMove(thumbDragUtils);
          }
        });
        this.$LG(window).on("mouseup.lg.thumb.global" + this.core.lgId, function() {
          if (!_this.core.lgOpened)
            return;
          if (thumbDragUtils.isMoved) {
            thumbDragUtils = _this.onThumbTouchEnd(thumbDragUtils);
          } else {
            _this.thumbClickable = true;
          }
          if (isDragging) {
            isDragging = false;
            _this.$thumbOuter.removeClass("lg-grabbing").addClass("lg-grab");
          }
        });
      };
      Thumbnail2.prototype.enableThumbSwipe = function() {
        var _this = this;
        var thumbDragUtils = {
          cords: {
            startX: 0,
            endX: 0
          },
          isMoved: false,
          newTranslateX: 0,
          startTime: /* @__PURE__ */ new Date(),
          endTime: /* @__PURE__ */ new Date(),
          touchMoveTime: 0
        };
        this.$lgThumb.on("touchstart.lg", function(e2) {
          if (_this.thumbTotalWidth > _this.thumbOuterWidth) {
            e2.preventDefault();
            thumbDragUtils.cords.startX = e2.targetTouches[0].pageX;
            _this.thumbClickable = false;
            thumbDragUtils.startTime = /* @__PURE__ */ new Date();
          }
        });
        this.$lgThumb.on("touchmove.lg", function(e2) {
          if (_this.thumbTotalWidth > _this.thumbOuterWidth) {
            e2.preventDefault();
            thumbDragUtils.cords.endX = e2.targetTouches[0].pageX;
            thumbDragUtils = _this.onThumbTouchMove(thumbDragUtils);
          }
        });
        this.$lgThumb.on("touchend.lg", function() {
          if (thumbDragUtils.isMoved) {
            thumbDragUtils = _this.onThumbTouchEnd(thumbDragUtils);
          } else {
            _this.thumbClickable = true;
          }
        });
      };
      Thumbnail2.prototype.rebuildThumbnails = function() {
        var _this = this;
        this.$thumbOuter.addClass("lg-rebuilding-thumbnails");
        setTimeout(function() {
          _this.thumbTotalWidth = _this.core.galleryItems.length * (_this.settings.thumbWidth + _this.settings.thumbMargin);
          _this.$lgThumb.css("width", _this.thumbTotalWidth + "px");
          _this.$lgThumb.empty();
          _this.setThumbItemHtml(_this.core.galleryItems);
          _this.animateThumb(_this.core.index);
        }, 50);
        setTimeout(function() {
          _this.$thumbOuter.removeClass("lg-rebuilding-thumbnails");
        }, 200);
      };
      Thumbnail2.prototype.setTranslate = function(value) {
        this.$lgThumb.css("transform", "translate3d(-" + value + "px, 0px, 0px)");
      };
      Thumbnail2.prototype.getPossibleTransformX = function(left) {
        if (left > this.thumbTotalWidth - this.thumbOuterWidth) {
          left = this.thumbTotalWidth - this.thumbOuterWidth;
        }
        if (left < 0) {
          left = 0;
        }
        return left;
      };
      Thumbnail2.prototype.animateThumb = function(index) {
        this.$lgThumb.css("transition-duration", this.core.settings.speed + "ms");
        if (this.settings.animateThumb) {
          var position = 0;
          switch (this.settings.currentPagerPosition) {
            case "left":
              position = 0;
              break;
            case "middle":
              position = this.thumbOuterWidth / 2 - this.settings.thumbWidth / 2;
              break;
            case "right":
              position = this.thumbOuterWidth - this.settings.thumbWidth;
          }
          this.translateX = (this.settings.thumbWidth + this.settings.thumbMargin) * index - 1 - position;
          if (this.translateX > this.thumbTotalWidth - this.thumbOuterWidth) {
            this.translateX = this.thumbTotalWidth - this.thumbOuterWidth;
          }
          if (this.translateX < 0) {
            this.translateX = 0;
          }
          this.setTranslate(this.translateX);
        }
      };
      Thumbnail2.prototype.onThumbTouchMove = function(thumbDragUtils) {
        thumbDragUtils.newTranslateX = this.translateX;
        thumbDragUtils.isMoved = true;
        thumbDragUtils.touchMoveTime = (/* @__PURE__ */ new Date()).valueOf();
        thumbDragUtils.newTranslateX -= thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;
        thumbDragUtils.newTranslateX = this.getPossibleTransformX(thumbDragUtils.newTranslateX);
        this.setTranslate(thumbDragUtils.newTranslateX);
        this.$thumbOuter.addClass("lg-dragging");
        return thumbDragUtils;
      };
      Thumbnail2.prototype.onThumbTouchEnd = function(thumbDragUtils) {
        thumbDragUtils.isMoved = false;
        thumbDragUtils.endTime = /* @__PURE__ */ new Date();
        this.$thumbOuter.removeClass("lg-dragging");
        var touchDuration = thumbDragUtils.endTime.valueOf() - thumbDragUtils.startTime.valueOf();
        var distanceXnew = thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;
        var speedX = Math.abs(distanceXnew) / touchDuration;
        if (speedX > 0.15 && thumbDragUtils.endTime.valueOf() - thumbDragUtils.touchMoveTime < 30) {
          speedX += 1;
          if (speedX > 2) {
            speedX += 1;
          }
          speedX = speedX + speedX * (Math.abs(distanceXnew) / this.thumbOuterWidth);
          this.$lgThumb.css("transition-duration", Math.min(speedX - 1, 2) + "settings");
          distanceXnew = distanceXnew * speedX;
          this.translateX = this.getPossibleTransformX(this.translateX - distanceXnew);
          this.setTranslate(this.translateX);
        } else {
          this.translateX = thumbDragUtils.newTranslateX;
        }
        if (Math.abs(thumbDragUtils.cords.endX - thumbDragUtils.cords.startX) < this.settings.thumbnailSwipeThreshold) {
          this.thumbClickable = true;
        }
        return thumbDragUtils;
      };
      Thumbnail2.prototype.getThumbHtml = function(thumb, index, alt) {
        var slideVideoInfo = this.core.galleryItems[index].__slideVideoInfo || {};
        var thumbImg;
        if (slideVideoInfo.youtube) {
          if (this.settings.loadYouTubeThumbnail) {
            thumbImg = "//img.youtube.com/vi/" + slideVideoInfo.youtube[1] + "/" + this.settings.youTubeThumbSize + ".jpg";
          } else {
            thumbImg = thumb;
          }
        } else {
          thumbImg = thumb;
        }
        var altAttr = alt ? 'alt="' + alt + '"' : "";
        return '<div data-lg-item-id="' + index + '" class="lg-thumb-item ' + (index === this.core.index ? " active" : "") + '"\n        style="width:' + this.settings.thumbWidth + "px; height: " + this.settings.thumbHeight + ";\n            margin-right: " + this.settings.thumbMargin + 'px;">\n            <img ' + altAttr + ' data-lg-item-id="' + index + '" src="' + thumbImg + '" />\n        </div>';
      };
      Thumbnail2.prototype.getThumbItemHtml = function(items) {
        var thumbList = "";
        for (var i = 0; i < items.length; i++) {
          thumbList += this.getThumbHtml(items[i].thumb, i, items[i].alt);
        }
        return thumbList;
      };
      Thumbnail2.prototype.setThumbItemHtml = function(items) {
        var thumbList = this.getThumbItemHtml(items);
        this.$lgThumb.html(thumbList);
      };
      Thumbnail2.prototype.setAnimateThumbStyles = function() {
        if (this.settings.animateThumb) {
          this.core.outer.addClass("lg-animate-thumb");
        }
      };
      Thumbnail2.prototype.manageActiveClassOnSlideChange = function() {
        var _this = this;
        this.core.LGel.on(lGEvents2.beforeSlide + ".thumb", function(event) {
          var $thumb = _this.core.outer.find(".lg-thumb-item");
          var index = event.detail.index;
          $thumb.removeClass("active");
          $thumb.eq(index).addClass("active");
        });
      };
      Thumbnail2.prototype.toggleThumbBar = function() {
        var _this = this;
        if (this.settings.toggleThumb) {
          this.core.outer.addClass("lg-can-toggle");
          this.core.$toolbar.append('<button type="button" aria-label="' + this.settings.thumbnailPluginStrings["toggleThumbnails"] + '" class="lg-toggle-thumb lg-icon"></button>');
          this.core.outer.find(".lg-toggle-thumb").first().on("click.lg", function() {
            _this.core.outer.toggleClass("lg-components-open");
          });
        }
      };
      Thumbnail2.prototype.thumbKeyPress = function() {
        var _this = this;
        this.$LG(window).on("keydown.lg.thumb.global" + this.core.lgId, function(e2) {
          if (!_this.core.lgOpened || !_this.settings.toggleThumb)
            return;
          if (e2.keyCode === 38) {
            e2.preventDefault();
            _this.core.outer.addClass("lg-components-open");
          } else if (e2.keyCode === 40) {
            e2.preventDefault();
            _this.core.outer.removeClass("lg-components-open");
          }
        });
      };
      Thumbnail2.prototype.destroy = function() {
        if (this.settings.thumbnail) {
          this.$LG(window).off(".lg.thumb.global" + this.core.lgId);
          this.core.LGel.off(".lg.thumb");
          this.core.LGel.off(".thumb");
          this.$thumbOuter.remove();
          this.core.outer.removeClass("lg-has-thumb");
        }
      };
      return Thumbnail2;
    }();
    lg_thumbnail_es5_default = Thumbnail;
  }
});

// node_modules/lightgallery/plugins/zoom/lg-zoom.es5.js
var __assign3, zoomSettings, lGEvents3, ZOOM_TRANSITION_DURATION, Zoom, lg_zoom_es5_default;
var init_lg_zoom_es5 = __esm({
  "node_modules/lightgallery/plugins/zoom/lg-zoom.es5.js"() {
    __assign3 = function() {
      __assign3 = Object.assign || function __assign6(t2) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t2[p] = s[p];
        }
        return t2;
      };
      return __assign3.apply(this, arguments);
    };
    zoomSettings = {
      scale: 1,
      zoom: true,
      infiniteZoom: true,
      actualSize: true,
      showZoomInOutIcons: false,
      actualSizeIcons: {
        zoomIn: "lg-zoom-in",
        zoomOut: "lg-zoom-out"
      },
      enableZoomAfter: 300,
      zoomPluginStrings: {
        zoomIn: "Zoom in",
        zoomOut: "Zoom out",
        viewActualSize: "View actual size"
      }
    };
    lGEvents3 = {
      afterAppendSlide: "lgAfterAppendSlide",
      init: "lgInit",
      hasVideo: "lgHasVideo",
      containerResize: "lgContainerResize",
      updateSlides: "lgUpdateSlides",
      afterAppendSubHtml: "lgAfterAppendSubHtml",
      beforeOpen: "lgBeforeOpen",
      afterOpen: "lgAfterOpen",
      slideItemLoad: "lgSlideItemLoad",
      beforeSlide: "lgBeforeSlide",
      afterSlide: "lgAfterSlide",
      posterClick: "lgPosterClick",
      dragStart: "lgDragStart",
      dragMove: "lgDragMove",
      dragEnd: "lgDragEnd",
      beforeNextSlide: "lgBeforeNextSlide",
      beforePrevSlide: "lgBeforePrevSlide",
      beforeClose: "lgBeforeClose",
      afterClose: "lgAfterClose",
      rotateLeft: "lgRotateLeft",
      rotateRight: "lgRotateRight",
      flipHorizontal: "lgFlipHorizontal",
      flipVertical: "lgFlipVertical",
      autoplay: "lgAutoplay",
      autoplayStart: "lgAutoplayStart",
      autoplayStop: "lgAutoplayStop"
    };
    ZOOM_TRANSITION_DURATION = 500;
    Zoom = /** @class */
    function() {
      function Zoom2(instance, $LG2) {
        this.core = instance;
        this.$LG = $LG2;
        this.settings = __assign3(__assign3({}, zoomSettings), this.core.settings);
        return this;
      }
      Zoom2.prototype.buildTemplates = function() {
        var zoomIcons = this.settings.showZoomInOutIcons ? '<button id="' + this.core.getIdName("lg-zoom-in") + '" type="button" aria-label="' + this.settings.zoomPluginStrings["zoomIn"] + '" class="lg-zoom-in lg-icon"></button><button id="' + this.core.getIdName("lg-zoom-out") + '" type="button" aria-label="' + this.settings.zoomPluginStrings["zoomIn"] + '" class="lg-zoom-out lg-icon"></button>' : "";
        if (this.settings.actualSize) {
          zoomIcons += '<button id="' + this.core.getIdName("lg-actual-size") + '" type="button" aria-label="' + this.settings.zoomPluginStrings["viewActualSize"] + '" class="' + this.settings.actualSizeIcons.zoomIn + ' lg-icon"></button>';
        }
        this.core.outer.addClass("lg-use-transition-for-zoom");
        this.core.$toolbar.first().append(zoomIcons);
      };
      Zoom2.prototype.enableZoom = function(event) {
        var _this = this;
        var _speed = this.settings.enableZoomAfter + event.detail.delay;
        if (this.$LG("body").first().hasClass("lg-from-hash") && event.detail.delay) {
          _speed = 0;
        } else {
          this.$LG("body").first().removeClass("lg-from-hash");
        }
        this.zoomableTimeout = setTimeout(function() {
          if (!_this.isImageSlide(_this.core.index)) {
            return;
          }
          _this.core.getSlideItem(event.detail.index).addClass("lg-zoomable");
          if (event.detail.index === _this.core.index) {
            _this.setZoomEssentials();
          }
        }, _speed + 30);
      };
      Zoom2.prototype.enableZoomOnSlideItemLoad = function() {
        this.core.LGel.on(lGEvents3.slideItemLoad + ".zoom", this.enableZoom.bind(this));
      };
      Zoom2.prototype.getDragCords = function(e2) {
        return {
          x: e2.pageX,
          y: e2.pageY
        };
      };
      Zoom2.prototype.getSwipeCords = function(e2) {
        var x = e2.touches[0].pageX;
        var y2 = e2.touches[0].pageY;
        return {
          x,
          y: y2
        };
      };
      Zoom2.prototype.getDragAllowedAxises = function(scale, scaleDiff) {
        var $image = this.core.getSlideItem(this.core.index).find(".lg-image").first().get();
        var height = 0;
        var width = 0;
        var rect = $image.getBoundingClientRect();
        if (scale) {
          height = $image.offsetHeight * scale;
          width = $image.offsetWidth * scale;
        } else if (scaleDiff) {
          height = rect.height + scaleDiff * rect.height;
          width = rect.width + scaleDiff * rect.width;
        } else {
          height = rect.height;
          width = rect.width;
        }
        var allowY = height > this.containerRect.height;
        var allowX = width > this.containerRect.width;
        return {
          allowX,
          allowY
        };
      };
      Zoom2.prototype.setZoomEssentials = function() {
        this.containerRect = this.core.$content.get().getBoundingClientRect();
      };
      Zoom2.prototype.zoomImage = function(scale, scaleDiff, reposition, resetToMax) {
        if (Math.abs(scaleDiff) <= 0)
          return;
        var offsetX = this.containerRect.width / 2 + this.containerRect.left;
        var offsetY = this.containerRect.height / 2 + this.containerRect.top + this.scrollTop;
        var originalX;
        var originalY;
        if (scale === 1) {
          this.positionChanged = false;
        }
        var dragAllowedAxises = this.getDragAllowedAxises(0, scaleDiff);
        var allowY = dragAllowedAxises.allowY, allowX = dragAllowedAxises.allowX;
        if (this.positionChanged) {
          originalX = this.left / (this.scale - scaleDiff);
          originalY = this.top / (this.scale - scaleDiff);
          this.pageX = offsetX - originalX;
          this.pageY = offsetY - originalY;
          this.positionChanged = false;
        }
        var possibleSwipeCords = this.getPossibleSwipeDragCords(scaleDiff);
        var x;
        var y2;
        var _x = offsetX - this.pageX;
        var _y = offsetY - this.pageY;
        if (scale - scaleDiff > 1) {
          var scaleVal = (scale - scaleDiff) / Math.abs(scaleDiff);
          _x = (scaleDiff < 0 ? -_x : _x) + this.left * (scaleVal + (scaleDiff < 0 ? -1 : 1));
          _y = (scaleDiff < 0 ? -_y : _y) + this.top * (scaleVal + (scaleDiff < 0 ? -1 : 1));
          x = _x / scaleVal;
          y2 = _y / scaleVal;
        } else {
          var scaleVal = (scale - scaleDiff) * scaleDiff;
          x = _x * scaleVal;
          y2 = _y * scaleVal;
        }
        if (reposition) {
          if (allowX) {
            if (this.isBeyondPossibleLeft(x, possibleSwipeCords.minX)) {
              x = possibleSwipeCords.minX;
            } else if (this.isBeyondPossibleRight(x, possibleSwipeCords.maxX)) {
              x = possibleSwipeCords.maxX;
            }
          } else {
            if (scale > 1) {
              if (x < possibleSwipeCords.minX) {
                x = possibleSwipeCords.minX;
              } else if (x > possibleSwipeCords.maxX) {
                x = possibleSwipeCords.maxX;
              }
            }
          }
          if (allowY) {
            if (this.isBeyondPossibleTop(y2, possibleSwipeCords.minY)) {
              y2 = possibleSwipeCords.minY;
            } else if (this.isBeyondPossibleBottom(y2, possibleSwipeCords.maxY)) {
              y2 = possibleSwipeCords.maxY;
            }
          } else {
            if (scale > 1) {
              if (y2 < possibleSwipeCords.minY) {
                y2 = possibleSwipeCords.minY;
              } else if (y2 > possibleSwipeCords.maxY) {
                y2 = possibleSwipeCords.maxY;
              }
            }
          }
        }
        this.setZoomStyles({
          x,
          y: y2,
          scale
        });
        this.left = x;
        this.top = y2;
        if (resetToMax) {
          this.setZoomImageSize();
        }
      };
      Zoom2.prototype.resetImageTranslate = function(index) {
        if (!this.isImageSlide(index)) {
          return;
        }
        var $image = this.core.getSlideItem(index).find(".lg-image").first();
        this.imageReset = false;
        $image.removeClass("reset-transition reset-transition-y reset-transition-x");
        this.core.outer.removeClass("lg-actual-size");
        $image.css("width", "auto").css("height", "auto");
        setTimeout(function() {
          $image.removeClass("no-transition");
        }, 10);
      };
      Zoom2.prototype.setZoomImageSize = function() {
        var _this = this;
        var $image = this.core.getSlideItem(this.core.index).find(".lg-image").first();
        setTimeout(function() {
          var actualSizeScale = _this.getCurrentImageActualSizeScale();
          if (_this.scale >= actualSizeScale) {
            $image.addClass("no-transition");
            _this.imageReset = true;
          }
        }, ZOOM_TRANSITION_DURATION);
        setTimeout(function() {
          var actualSizeScale = _this.getCurrentImageActualSizeScale();
          if (_this.scale >= actualSizeScale) {
            var dragAllowedAxises = _this.getDragAllowedAxises(_this.scale);
            $image.css("width", $image.get().naturalWidth + "px").css("height", $image.get().naturalHeight + "px");
            _this.core.outer.addClass("lg-actual-size");
            if (dragAllowedAxises.allowX && dragAllowedAxises.allowY) {
              $image.addClass("reset-transition");
            } else if (dragAllowedAxises.allowX && !dragAllowedAxises.allowY) {
              $image.addClass("reset-transition-x");
            } else if (!dragAllowedAxises.allowX && dragAllowedAxises.allowY) {
              $image.addClass("reset-transition-y");
            }
          }
        }, ZOOM_TRANSITION_DURATION + 50);
      };
      Zoom2.prototype.setZoomStyles = function(style) {
        var $imageWrap = this.core.getSlideItem(this.core.index).find(".lg-img-wrap").first();
        var $image = this.core.getSlideItem(this.core.index).find(".lg-image").first();
        var $dummyImage = this.core.outer.find(".lg-current .lg-dummy-img").first();
        this.scale = style.scale;
        $image.css("transform", "scale3d(" + style.scale + ", " + style.scale + ", 1)");
        $dummyImage.css("transform", "scale3d(" + style.scale + ", " + style.scale + ", 1)");
        var transform = "translate3d(" + style.x + "px, " + style.y + "px, 0)";
        $imageWrap.css("transform", transform);
      };
      Zoom2.prototype.setActualSize = function(index, event) {
        var _this = this;
        if (this.zoomInProgress) {
          return;
        }
        this.zoomInProgress = true;
        var currentItem = this.core.galleryItems[this.core.index];
        this.resetImageTranslate(index);
        setTimeout(function() {
          if (!currentItem.src || _this.core.outer.hasClass("lg-first-slide-loading")) {
            return;
          }
          var scale = _this.getCurrentImageActualSizeScale();
          var prevScale = _this.scale;
          if (_this.core.outer.hasClass("lg-zoomed")) {
            _this.scale = 1;
          } else {
            _this.scale = _this.getScale(scale);
          }
          _this.setPageCords(event);
          _this.beginZoom(_this.scale);
          _this.zoomImage(_this.scale, _this.scale - prevScale, true, true);
        }, 50);
        setTimeout(function() {
          _this.core.outer.removeClass("lg-grabbing").addClass("lg-grab");
        }, 60);
        setTimeout(function() {
          _this.zoomInProgress = false;
        }, ZOOM_TRANSITION_DURATION + 110);
      };
      Zoom2.prototype.getNaturalWidth = function(index) {
        var $image = this.core.getSlideItem(index).find(".lg-image").first();
        var naturalWidth = this.core.galleryItems[index].width;
        return naturalWidth ? parseFloat(naturalWidth) : $image.get().naturalWidth;
      };
      Zoom2.prototype.getActualSizeScale = function(naturalWidth, width) {
        var _scale;
        var scale;
        if (naturalWidth >= width) {
          _scale = naturalWidth / width;
          scale = _scale || 2;
        } else {
          scale = 1;
        }
        return scale;
      };
      Zoom2.prototype.getCurrentImageActualSizeScale = function() {
        var $image = this.core.getSlideItem(this.core.index).find(".lg-image").first();
        var width = $image.get().offsetWidth;
        var naturalWidth = this.getNaturalWidth(this.core.index) || width;
        return this.getActualSizeScale(naturalWidth, width);
      };
      Zoom2.prototype.getPageCords = function(event) {
        var cords = {};
        if (event) {
          cords.x = event.pageX || event.touches[0].pageX;
          cords.y = event.pageY || event.touches[0].pageY;
        } else {
          var containerRect = this.core.$content.get().getBoundingClientRect();
          cords.x = containerRect.width / 2 + containerRect.left;
          cords.y = containerRect.height / 2 + this.scrollTop + containerRect.top;
        }
        return cords;
      };
      Zoom2.prototype.setPageCords = function(event) {
        var pageCords = this.getPageCords(event);
        this.pageX = pageCords.x;
        this.pageY = pageCords.y;
      };
      Zoom2.prototype.manageActualPixelClassNames = function() {
        var $actualSize = this.core.getElementById("lg-actual-size");
        $actualSize.removeClass(this.settings.actualSizeIcons.zoomIn).addClass(this.settings.actualSizeIcons.zoomOut);
      };
      Zoom2.prototype.beginZoom = function(scale) {
        this.core.outer.removeClass("lg-zoom-drag-transition lg-zoom-dragging");
        if (scale > 1) {
          this.core.outer.addClass("lg-zoomed");
          this.manageActualPixelClassNames();
        } else {
          this.resetZoom();
        }
        return scale > 1;
      };
      Zoom2.prototype.getScale = function(scale) {
        var actualSizeScale = this.getCurrentImageActualSizeScale();
        if (scale < 1) {
          scale = 1;
        } else if (scale > actualSizeScale) {
          scale = actualSizeScale;
        }
        return scale;
      };
      Zoom2.prototype.init = function() {
        var _this = this;
        if (!this.settings.zoom) {
          return;
        }
        this.buildTemplates();
        this.enableZoomOnSlideItemLoad();
        var tapped = null;
        this.core.outer.on("dblclick.lg", function(event) {
          if (!_this.$LG(event.target).hasClass("lg-image")) {
            return;
          }
          _this.setActualSize(_this.core.index, event);
        });
        this.core.outer.on("touchstart.lg", function(event) {
          var $target = _this.$LG(event.target);
          if (event.touches.length === 1 && $target.hasClass("lg-image")) {
            if (!tapped) {
              tapped = setTimeout(function() {
                tapped = null;
              }, 300);
            } else {
              clearTimeout(tapped);
              tapped = null;
              event.preventDefault();
              _this.setActualSize(_this.core.index, event);
            }
          }
        });
        this.core.LGel.on(lGEvents3.containerResize + ".zoom " + lGEvents3.rotateRight + ".zoom " + lGEvents3.rotateLeft + ".zoom " + lGEvents3.flipHorizontal + ".zoom " + lGEvents3.flipVertical + ".zoom", function() {
          if (!_this.core.lgOpened || !_this.isImageSlide(_this.core.index) || _this.core.touchAction) {
            return;
          }
          var _LGel = _this.core.getSlideItem(_this.core.index).find(".lg-img-wrap").first();
          _this.top = 0;
          _this.left = 0;
          _this.setZoomEssentials();
          _this.setZoomSwipeStyles(_LGel, { x: 0, y: 0 });
          _this.positionChanged = true;
        });
        this.$LG(window).on("scroll.lg.zoom.global" + this.core.lgId, function() {
          if (!_this.core.lgOpened)
            return;
          _this.scrollTop = _this.$LG(window).scrollTop();
        });
        this.core.getElementById("lg-zoom-out").on("click.lg", function() {
          if (!_this.isImageSlide(_this.core.index)) {
            return;
          }
          var timeout = 0;
          if (_this.imageReset) {
            _this.resetImageTranslate(_this.core.index);
            timeout = 50;
          }
          setTimeout(function() {
            var scale = _this.scale - _this.settings.scale;
            if (scale < 1) {
              scale = 1;
            }
            _this.beginZoom(scale);
            _this.zoomImage(scale, -_this.settings.scale, true, !_this.settings.infiniteZoom);
          }, timeout);
        });
        this.core.getElementById("lg-zoom-in").on("click.lg", function() {
          _this.zoomIn();
        });
        this.core.getElementById("lg-actual-size").on("click.lg", function() {
          _this.setActualSize(_this.core.index);
        });
        this.core.LGel.on(lGEvents3.beforeOpen + ".zoom", function() {
          _this.core.outer.find(".lg-item").removeClass("lg-zoomable");
        });
        this.core.LGel.on(lGEvents3.afterOpen + ".zoom", function() {
          _this.scrollTop = _this.$LG(window).scrollTop();
          _this.pageX = _this.core.outer.width() / 2;
          _this.pageY = _this.core.outer.height() / 2 + _this.scrollTop;
          _this.scale = 1;
        });
        this.core.LGel.on(lGEvents3.afterSlide + ".zoom", function(event) {
          var prevIndex = event.detail.prevIndex;
          _this.scale = 1;
          _this.positionChanged = false;
          _this.zoomInProgress = false;
          _this.resetZoom(prevIndex);
          _this.resetImageTranslate(prevIndex);
          if (_this.isImageSlide(_this.core.index)) {
            _this.setZoomEssentials();
          }
        });
        this.zoomDrag();
        this.pinchZoom();
        this.zoomSwipe();
        this.zoomableTimeout = false;
        this.positionChanged = false;
        this.zoomInProgress = false;
      };
      Zoom2.prototype.zoomIn = function() {
        if (!this.isImageSlide(this.core.index)) {
          return;
        }
        var scale = this.scale + this.settings.scale;
        if (!this.settings.infiniteZoom) {
          scale = this.getScale(scale);
        }
        this.beginZoom(scale);
        this.zoomImage(scale, Math.min(this.settings.scale, scale - this.scale), true, !this.settings.infiniteZoom);
      };
      Zoom2.prototype.resetZoom = function(index) {
        this.core.outer.removeClass("lg-zoomed lg-zoom-drag-transition");
        var $actualSize = this.core.getElementById("lg-actual-size");
        var $item = this.core.getSlideItem(index !== void 0 ? index : this.core.index);
        $actualSize.removeClass(this.settings.actualSizeIcons.zoomOut).addClass(this.settings.actualSizeIcons.zoomIn);
        $item.find(".lg-img-wrap").first().removeAttr("style");
        $item.find(".lg-image").first().removeAttr("style");
        this.scale = 1;
        this.left = 0;
        this.top = 0;
        this.setPageCords();
      };
      Zoom2.prototype.getTouchDistance = function(e2) {
        return Math.sqrt((e2.touches[0].pageX - e2.touches[1].pageX) * (e2.touches[0].pageX - e2.touches[1].pageX) + (e2.touches[0].pageY - e2.touches[1].pageY) * (e2.touches[0].pageY - e2.touches[1].pageY));
      };
      Zoom2.prototype.pinchZoom = function() {
        var _this = this;
        var startDist = 0;
        var pinchStarted = false;
        var initScale = 1;
        var prevScale = 0;
        var $item = this.core.getSlideItem(this.core.index);
        this.core.outer.on("touchstart.lg", function(e2) {
          $item = _this.core.getSlideItem(_this.core.index);
          if (!_this.isImageSlide(_this.core.index)) {
            return;
          }
          if (e2.touches.length === 2) {
            e2.preventDefault();
            if (_this.core.outer.hasClass("lg-first-slide-loading")) {
              return;
            }
            initScale = _this.scale || 1;
            _this.core.outer.removeClass("lg-zoom-drag-transition lg-zoom-dragging");
            _this.setPageCords(e2);
            _this.resetImageTranslate(_this.core.index);
            _this.core.touchAction = "pinch";
            startDist = _this.getTouchDistance(e2);
          }
        });
        this.core.$inner.on("touchmove.lg", function(e2) {
          if (e2.touches.length === 2 && _this.core.touchAction === "pinch" && (_this.$LG(e2.target).hasClass("lg-item") || $item.get().contains(e2.target))) {
            e2.preventDefault();
            var endDist = _this.getTouchDistance(e2);
            var distance = startDist - endDist;
            if (!pinchStarted && Math.abs(distance) > 5) {
              pinchStarted = true;
            }
            if (pinchStarted) {
              prevScale = _this.scale;
              var _scale = Math.max(1, initScale + -distance * 0.02);
              _this.scale = Math.round((_scale + Number.EPSILON) * 100) / 100;
              var diff = _this.scale - prevScale;
              _this.zoomImage(_this.scale, Math.round((diff + Number.EPSILON) * 100) / 100, false, false);
            }
          }
        });
        this.core.$inner.on("touchend.lg", function(e2) {
          if (_this.core.touchAction === "pinch" && (_this.$LG(e2.target).hasClass("lg-item") || $item.get().contains(e2.target))) {
            pinchStarted = false;
            startDist = 0;
            if (_this.scale <= 1) {
              _this.resetZoom();
            } else {
              var actualSizeScale = _this.getCurrentImageActualSizeScale();
              if (_this.scale >= actualSizeScale) {
                var scaleDiff = actualSizeScale - _this.scale;
                if (scaleDiff === 0) {
                  scaleDiff = 0.01;
                }
                _this.zoomImage(actualSizeScale, scaleDiff, false, true);
              }
              _this.manageActualPixelClassNames();
              _this.core.outer.addClass("lg-zoomed");
            }
            _this.core.touchAction = void 0;
          }
        });
      };
      Zoom2.prototype.touchendZoom = function(startCoords, endCoords, allowX, allowY, touchDuration) {
        var distanceXnew = endCoords.x - startCoords.x;
        var distanceYnew = endCoords.y - startCoords.y;
        var speedX = Math.abs(distanceXnew) / touchDuration + 1;
        var speedY = Math.abs(distanceYnew) / touchDuration + 1;
        if (speedX > 2) {
          speedX += 1;
        }
        if (speedY > 2) {
          speedY += 1;
        }
        distanceXnew = distanceXnew * speedX;
        distanceYnew = distanceYnew * speedY;
        var _LGel = this.core.getSlideItem(this.core.index).find(".lg-img-wrap").first();
        var distance = {};
        distance.x = this.left + distanceXnew;
        distance.y = this.top + distanceYnew;
        var possibleSwipeCords = this.getPossibleSwipeDragCords();
        if (Math.abs(distanceXnew) > 15 || Math.abs(distanceYnew) > 15) {
          if (allowY) {
            if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {
              distance.y = possibleSwipeCords.minY;
            } else if (this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)) {
              distance.y = possibleSwipeCords.maxY;
            }
          }
          if (allowX) {
            if (this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)) {
              distance.x = possibleSwipeCords.minX;
            } else if (this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)) {
              distance.x = possibleSwipeCords.maxX;
            }
          }
          if (allowY) {
            this.top = distance.y;
          } else {
            distance.y = this.top;
          }
          if (allowX) {
            this.left = distance.x;
          } else {
            distance.x = this.left;
          }
          this.setZoomSwipeStyles(_LGel, distance);
          this.positionChanged = true;
        }
      };
      Zoom2.prototype.getZoomSwipeCords = function(startCoords, endCoords, allowX, allowY, possibleSwipeCords) {
        var distance = {};
        if (allowY) {
          distance.y = this.top + (endCoords.y - startCoords.y);
          if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {
            var diffMinY = possibleSwipeCords.minY - distance.y;
            distance.y = possibleSwipeCords.minY - diffMinY / 6;
          } else if (this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)) {
            var diffMaxY = distance.y - possibleSwipeCords.maxY;
            distance.y = possibleSwipeCords.maxY + diffMaxY / 6;
          }
        } else {
          distance.y = this.top;
        }
        if (allowX) {
          distance.x = this.left + (endCoords.x - startCoords.x);
          if (this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)) {
            var diffMinX = possibleSwipeCords.minX - distance.x;
            distance.x = possibleSwipeCords.minX - diffMinX / 6;
          } else if (this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)) {
            var difMaxX = distance.x - possibleSwipeCords.maxX;
            distance.x = possibleSwipeCords.maxX + difMaxX / 6;
          }
        } else {
          distance.x = this.left;
        }
        return distance;
      };
      Zoom2.prototype.isBeyondPossibleLeft = function(x, minX) {
        return x >= minX;
      };
      Zoom2.prototype.isBeyondPossibleRight = function(x, maxX) {
        return x <= maxX;
      };
      Zoom2.prototype.isBeyondPossibleTop = function(y2, minY) {
        return y2 >= minY;
      };
      Zoom2.prototype.isBeyondPossibleBottom = function(y2, maxY) {
        return y2 <= maxY;
      };
      Zoom2.prototype.isImageSlide = function(index) {
        var currentItem = this.core.galleryItems[index];
        return this.core.getSlideType(currentItem) === "image";
      };
      Zoom2.prototype.getPossibleSwipeDragCords = function(scale) {
        var $image = this.core.getSlideItem(this.core.index).find(".lg-image").first();
        var bottom = this.core.mediaContainerPosition.bottom;
        var imgRect = $image.get().getBoundingClientRect();
        var imageHeight = imgRect.height;
        var imageWidth = imgRect.width;
        if (scale) {
          imageHeight = imageHeight + scale * imageHeight;
          imageWidth = imageWidth + scale * imageWidth;
        }
        var minY = (imageHeight - this.containerRect.height) / 2;
        var maxY = (this.containerRect.height - imageHeight) / 2 + bottom;
        var minX = (imageWidth - this.containerRect.width) / 2;
        var maxX = (this.containerRect.width - imageWidth) / 2;
        var possibleSwipeCords = {
          minY,
          maxY,
          minX,
          maxX
        };
        return possibleSwipeCords;
      };
      Zoom2.prototype.setZoomSwipeStyles = function(LGel, distance) {
        LGel.css("transform", "translate3d(" + distance.x + "px, " + distance.y + "px, 0)");
      };
      Zoom2.prototype.zoomSwipe = function() {
        var _this = this;
        var startCoords = {};
        var endCoords = {};
        var isMoved = false;
        var allowX = false;
        var allowY = false;
        var startTime = /* @__PURE__ */ new Date();
        var endTime = /* @__PURE__ */ new Date();
        var possibleSwipeCords;
        var _LGel;
        var $item = this.core.getSlideItem(this.core.index);
        this.core.$inner.on("touchstart.lg", function(e2) {
          if (!_this.isImageSlide(_this.core.index)) {
            return;
          }
          $item = _this.core.getSlideItem(_this.core.index);
          if ((_this.$LG(e2.target).hasClass("lg-item") || $item.get().contains(e2.target)) && e2.touches.length === 1 && _this.core.outer.hasClass("lg-zoomed")) {
            e2.preventDefault();
            startTime = /* @__PURE__ */ new Date();
            _this.core.touchAction = "zoomSwipe";
            _LGel = _this.core.getSlideItem(_this.core.index).find(".lg-img-wrap").first();
            var dragAllowedAxises = _this.getDragAllowedAxises(0);
            allowY = dragAllowedAxises.allowY;
            allowX = dragAllowedAxises.allowX;
            if (allowX || allowY) {
              startCoords = _this.getSwipeCords(e2);
            }
            possibleSwipeCords = _this.getPossibleSwipeDragCords();
            _this.core.outer.addClass("lg-zoom-dragging lg-zoom-drag-transition");
          }
        });
        this.core.$inner.on("touchmove.lg", function(e2) {
          if (e2.touches.length === 1 && _this.core.touchAction === "zoomSwipe" && (_this.$LG(e2.target).hasClass("lg-item") || $item.get().contains(e2.target))) {
            e2.preventDefault();
            _this.core.touchAction = "zoomSwipe";
            endCoords = _this.getSwipeCords(e2);
            var distance = _this.getZoomSwipeCords(startCoords, endCoords, allowX, allowY, possibleSwipeCords);
            if (Math.abs(endCoords.x - startCoords.x) > 15 || Math.abs(endCoords.y - startCoords.y) > 15) {
              isMoved = true;
              _this.setZoomSwipeStyles(_LGel, distance);
            }
          }
        });
        this.core.$inner.on("touchend.lg", function(e2) {
          if (_this.core.touchAction === "zoomSwipe" && (_this.$LG(e2.target).hasClass("lg-item") || $item.get().contains(e2.target))) {
            e2.preventDefault();
            _this.core.touchAction = void 0;
            _this.core.outer.removeClass("lg-zoom-dragging");
            if (!isMoved) {
              return;
            }
            isMoved = false;
            endTime = /* @__PURE__ */ new Date();
            var touchDuration = endTime.valueOf() - startTime.valueOf();
            _this.touchendZoom(startCoords, endCoords, allowX, allowY, touchDuration);
          }
        });
      };
      Zoom2.prototype.zoomDrag = function() {
        var _this = this;
        var startCoords = {};
        var endCoords = {};
        var isDragging = false;
        var isMoved = false;
        var allowX = false;
        var allowY = false;
        var startTime;
        var endTime;
        var possibleSwipeCords;
        var _LGel;
        this.core.outer.on("mousedown.lg.zoom", function(e2) {
          if (!_this.isImageSlide(_this.core.index)) {
            return;
          }
          var $item = _this.core.getSlideItem(_this.core.index);
          if (_this.$LG(e2.target).hasClass("lg-item") || $item.get().contains(e2.target)) {
            startTime = /* @__PURE__ */ new Date();
            _LGel = _this.core.getSlideItem(_this.core.index).find(".lg-img-wrap").first();
            var dragAllowedAxises = _this.getDragAllowedAxises(0);
            allowY = dragAllowedAxises.allowY;
            allowX = dragAllowedAxises.allowX;
            if (_this.core.outer.hasClass("lg-zoomed")) {
              if (_this.$LG(e2.target).hasClass("lg-object") && (allowX || allowY)) {
                e2.preventDefault();
                startCoords = _this.getDragCords(e2);
                possibleSwipeCords = _this.getPossibleSwipeDragCords();
                isDragging = true;
                _this.core.outer.removeClass("lg-grab").addClass("lg-grabbing lg-zoom-drag-transition lg-zoom-dragging");
              }
            }
          }
        });
        this.$LG(window).on("mousemove.lg.zoom.global" + this.core.lgId, function(e2) {
          if (isDragging) {
            isMoved = true;
            endCoords = _this.getDragCords(e2);
            var distance = _this.getZoomSwipeCords(startCoords, endCoords, allowX, allowY, possibleSwipeCords);
            _this.setZoomSwipeStyles(_LGel, distance);
          }
        });
        this.$LG(window).on("mouseup.lg.zoom.global" + this.core.lgId, function(e2) {
          if (isDragging) {
            endTime = /* @__PURE__ */ new Date();
            isDragging = false;
            _this.core.outer.removeClass("lg-zoom-dragging");
            if (isMoved && (startCoords.x !== endCoords.x || startCoords.y !== endCoords.y)) {
              endCoords = _this.getDragCords(e2);
              var touchDuration = endTime.valueOf() - startTime.valueOf();
              _this.touchendZoom(startCoords, endCoords, allowX, allowY, touchDuration);
            }
            isMoved = false;
          }
          _this.core.outer.removeClass("lg-grabbing").addClass("lg-grab");
        });
      };
      Zoom2.prototype.closeGallery = function() {
        this.resetZoom();
        this.zoomInProgress = false;
      };
      Zoom2.prototype.destroy = function() {
        this.$LG(window).off(".lg.zoom.global" + this.core.lgId);
        this.core.LGel.off(".lg.zoom");
        this.core.LGel.off(".zoom");
        clearTimeout(this.zoomableTimeout);
        this.zoomableTimeout = false;
      };
      return Zoom2;
    }();
    lg_zoom_es5_default = Zoom;
  }
});

// node_modules/lightgallery/plugins/fullscreen/lg-fullscreen.es5.js
var __assign4, fullscreenSettings, FullScreen, lg_fullscreen_es5_default;
var init_lg_fullscreen_es5 = __esm({
  "node_modules/lightgallery/plugins/fullscreen/lg-fullscreen.es5.js"() {
    __assign4 = function() {
      __assign4 = Object.assign || function __assign6(t2) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t2[p] = s[p];
        }
        return t2;
      };
      return __assign4.apply(this, arguments);
    };
    fullscreenSettings = {
      fullScreen: true,
      fullscreenPluginStrings: {
        toggleFullscreen: "Toggle Fullscreen"
      }
    };
    FullScreen = /** @class */
    function() {
      function FullScreen2(instance, $LG2) {
        this.core = instance;
        this.$LG = $LG2;
        this.settings = __assign4(__assign4({}, fullscreenSettings), this.core.settings);
        return this;
      }
      FullScreen2.prototype.init = function() {
        var fullScreen = "";
        if (this.settings.fullScreen) {
          if (!document.fullscreenEnabled && !document.webkitFullscreenEnabled && !document.mozFullScreenEnabled && !document.msFullscreenEnabled) {
            return;
          } else {
            fullScreen = '<button type="button" aria-label="' + this.settings.fullscreenPluginStrings["toggleFullscreen"] + '" class="lg-fullscreen lg-icon"></button>';
            this.core.$toolbar.append(fullScreen);
            this.fullScreen();
          }
        }
      };
      FullScreen2.prototype.isFullScreen = function() {
        return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      };
      FullScreen2.prototype.requestFullscreen = function() {
        var el = document.documentElement;
        if (el.requestFullscreen) {
          el.requestFullscreen();
        } else if (el.msRequestFullscreen) {
          el.msRequestFullscreen();
        } else if (el.mozRequestFullScreen) {
          el.mozRequestFullScreen();
        } else if (el.webkitRequestFullscreen) {
          el.webkitRequestFullscreen();
        }
      };
      FullScreen2.prototype.exitFullscreen = function() {
        if (document.exitFullscreen) {
          document.exitFullscreen();
        } else if (document.msExitFullscreen) {
          document.msExitFullscreen();
        } else if (document.mozCancelFullScreen) {
          document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
          document.webkitExitFullscreen();
        }
      };
      FullScreen2.prototype.fullScreen = function() {
        var _this = this;
        this.$LG(document).on("fullscreenchange.lg.global" + this.core.lgId + " \n            webkitfullscreenchange.lg.global" + this.core.lgId + " \n            mozfullscreenchange.lg.global" + this.core.lgId + " \n            MSFullscreenChange.lg.global" + this.core.lgId, function() {
          if (!_this.core.lgOpened)
            return;
          _this.core.outer.toggleClass("lg-fullscreen-on");
        });
        this.core.outer.find(".lg-fullscreen").first().on("click.lg", function() {
          if (_this.isFullScreen()) {
            _this.exitFullscreen();
          } else {
            _this.requestFullscreen();
          }
        });
      };
      FullScreen2.prototype.closeGallery = function() {
        if (this.isFullScreen()) {
          this.exitFullscreen();
        }
      };
      FullScreen2.prototype.destroy = function() {
        this.$LG(document).off("fullscreenchange.lg.global" + this.core.lgId + " \n            webkitfullscreenchange.lg.global" + this.core.lgId + " \n            mozfullscreenchange.lg.global" + this.core.lgId + " \n            MSFullscreenChange.lg.global" + this.core.lgId);
      };
      return FullScreen2;
    }();
    lg_fullscreen_es5_default = FullScreen;
  }
});

// node_modules/lightgallery/plugins/autoplay/lg-autoplay.es5.js
var __assign5, lGEvents4, autoplaySettings, Autoplay, lg_autoplay_es5_default;
var init_lg_autoplay_es5 = __esm({
  "node_modules/lightgallery/plugins/autoplay/lg-autoplay.es5.js"() {
    __assign5 = function() {
      __assign5 = Object.assign || function __assign6(t2) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t2[p] = s[p];
        }
        return t2;
      };
      return __assign5.apply(this, arguments);
    };
    lGEvents4 = {
      afterAppendSlide: "lgAfterAppendSlide",
      init: "lgInit",
      hasVideo: "lgHasVideo",
      containerResize: "lgContainerResize",
      updateSlides: "lgUpdateSlides",
      afterAppendSubHtml: "lgAfterAppendSubHtml",
      beforeOpen: "lgBeforeOpen",
      afterOpen: "lgAfterOpen",
      slideItemLoad: "lgSlideItemLoad",
      beforeSlide: "lgBeforeSlide",
      afterSlide: "lgAfterSlide",
      posterClick: "lgPosterClick",
      dragStart: "lgDragStart",
      dragMove: "lgDragMove",
      dragEnd: "lgDragEnd",
      beforeNextSlide: "lgBeforeNextSlide",
      beforePrevSlide: "lgBeforePrevSlide",
      beforeClose: "lgBeforeClose",
      afterClose: "lgAfterClose",
      rotateLeft: "lgRotateLeft",
      rotateRight: "lgRotateRight",
      flipHorizontal: "lgFlipHorizontal",
      flipVertical: "lgFlipVertical",
      autoplay: "lgAutoplay",
      autoplayStart: "lgAutoplayStart",
      autoplayStop: "lgAutoplayStop"
    };
    autoplaySettings = {
      autoplay: true,
      slideShowAutoplay: false,
      slideShowInterval: 5e3,
      progressBar: true,
      forceSlideShowAutoplay: false,
      autoplayControls: true,
      appendAutoplayControlsTo: ".lg-toolbar",
      autoplayPluginStrings: {
        toggleAutoplay: "Toggle Autoplay"
      }
    };
    Autoplay = /** @class */
    function() {
      function Autoplay2(instance) {
        this.core = instance;
        this.settings = __assign5(__assign5({}, autoplaySettings), this.core.settings);
        return this;
      }
      Autoplay2.prototype.init = function() {
        var _this = this;
        if (!this.settings.autoplay) {
          return;
        }
        this.interval = false;
        this.fromAuto = true;
        this.pausedOnTouchDrag = false;
        this.pausedOnSlideChange = false;
        if (this.settings.autoplayControls) {
          this.controls();
        }
        if (this.settings.progressBar) {
          this.core.outer.append('<div class="lg-progress-bar"><div class="lg-progress"></div></div>');
        }
        if (this.settings.slideShowAutoplay) {
          this.core.LGel.once(lGEvents4.slideItemLoad + ".autoplay", function() {
            _this.startAutoPlay();
          });
        }
        this.core.LGel.on(lGEvents4.dragStart + ".autoplay touchstart.lg.autoplay", function() {
          if (_this.interval) {
            _this.stopAutoPlay();
            _this.pausedOnTouchDrag = true;
          }
        });
        this.core.LGel.on(lGEvents4.dragEnd + ".autoplay touchend.lg.autoplay", function() {
          if (!_this.interval && _this.pausedOnTouchDrag) {
            _this.startAutoPlay();
            _this.pausedOnTouchDrag = false;
          }
        });
        this.core.LGel.on(lGEvents4.beforeSlide + ".autoplay", function() {
          _this.showProgressBar();
          if (!_this.fromAuto && _this.interval) {
            _this.stopAutoPlay();
            _this.pausedOnSlideChange = true;
          } else {
            _this.pausedOnSlideChange = false;
          }
          _this.fromAuto = false;
        });
        this.core.LGel.on(lGEvents4.afterSlide + ".autoplay", function() {
          if (_this.pausedOnSlideChange && !_this.interval && _this.settings.forceSlideShowAutoplay) {
            _this.startAutoPlay();
            _this.pausedOnSlideChange = false;
          }
        });
        this.showProgressBar();
      };
      Autoplay2.prototype.showProgressBar = function() {
        var _this = this;
        if (this.settings.progressBar && this.fromAuto) {
          var _$progressBar_1 = this.core.outer.find(".lg-progress-bar");
          var _$progress_1 = this.core.outer.find(".lg-progress");
          if (this.interval) {
            _$progress_1.removeAttr("style");
            _$progressBar_1.removeClass("lg-start");
            setTimeout(function() {
              _$progress_1.css("transition", "width " + (_this.core.settings.speed + _this.settings.slideShowInterval) + "ms ease 0s");
              _$progressBar_1.addClass("lg-start");
            }, 20);
          }
        }
      };
      Autoplay2.prototype.controls = function() {
        var _this = this;
        var _html = '<button aria-label="' + this.settings.autoplayPluginStrings["toggleAutoplay"] + '" type="button" class="lg-autoplay-button lg-icon"></button>';
        this.core.outer.find(this.settings.appendAutoplayControlsTo).append(_html);
        this.core.outer.find(".lg-autoplay-button").first().on("click.lg.autoplay", function() {
          if (_this.core.outer.hasClass("lg-show-autoplay")) {
            _this.stopAutoPlay();
          } else {
            if (!_this.interval) {
              _this.startAutoPlay();
            }
          }
        });
      };
      Autoplay2.prototype.startAutoPlay = function() {
        var _this = this;
        this.core.outer.find(".lg-progress").css("transition", "width " + (this.core.settings.speed + this.settings.slideShowInterval) + "ms ease 0s");
        this.core.outer.addClass("lg-show-autoplay");
        this.core.outer.find(".lg-progress-bar").addClass("lg-start");
        this.core.LGel.trigger(lGEvents4.autoplayStart, {
          index: this.core.index
        });
        this.interval = setInterval(function() {
          if (_this.core.index + 1 < _this.core.galleryItems.length) {
            _this.core.index++;
          } else {
            _this.core.index = 0;
          }
          _this.core.LGel.trigger(lGEvents4.autoplay, {
            index: _this.core.index
          });
          _this.fromAuto = true;
          _this.core.slide(_this.core.index, false, false, "next");
        }, this.core.settings.speed + this.settings.slideShowInterval);
      };
      Autoplay2.prototype.stopAutoPlay = function() {
        if (this.interval) {
          this.core.LGel.trigger(lGEvents4.autoplayStop, {
            index: this.core.index
          });
          this.core.outer.find(".lg-progress").removeAttr("style");
          this.core.outer.removeClass("lg-show-autoplay");
          this.core.outer.find(".lg-progress-bar").removeClass("lg-start");
        }
        clearInterval(this.interval);
        this.interval = false;
      };
      Autoplay2.prototype.closeGallery = function() {
        this.stopAutoPlay();
      };
      Autoplay2.prototype.destroy = function() {
        if (this.settings.autoplay) {
          this.core.outer.find(".lg-progress-bar").remove();
        }
        this.core.LGel.off(".lg.autoplay");
        this.core.LGel.off(".autoplay");
      };
      return Autoplay2;
    }();
    lg_autoplay_es5_default = Autoplay;
  }
});

// app/components/LightGallery/index.tsx
var import_react7, import_jsx_runtime8, CFGallery;
var init_LightGallery = __esm({
  "app/components/LightGallery/index.tsx"() {
    "use strict";
    import_react7 = __toESM(require_react(), 1);
    init_Lightgallery_es5();
    init_lg_thumbnail_es5();
    init_lg_zoom_es5();
    init_lg_fullscreen_es5();
    init_lg_autoplay_es5();
    import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
    CFGallery = import_react7.default.forwardRef(
      ({ children, className = "", ...props }, ref) => {
        return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { className: "App", ref, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
          Lightgallery_es5_default,
          {
            speed: 500,
            hideBarsDelay: 5e3,
            plugins: [lg_thumbnail_es5_default, lg_zoom_es5_default, lg_fullscreen_es5_default, lg_autoplay_es5_default],
            selector: "a.light-gallery",
            licenseKey: "68FE79DA-DD0D-4845-8E89-3DBF1CD4E321",
            elementClassNames: `${className}`,
            ...props,
            children
          }
        ) });
      }
    );
  }
});

// app/components/RecentPhtotos.tsx
var RecentPhtotos_exports = {};
__export(RecentPhtotos_exports, {
  default: () => RecentPhtotos_default
});
var import_react9, import_jsx_runtime9, RecentPhotos, RecentPhtotos_default;
var init_RecentPhtotos = __esm({
  "app/components/RecentPhtotos.tsx"() {
    "use strict";
    init_pro_solid_svg_icons();
    init_CustomIcon();
    import_react9 = __toESM(require_react(), 1);
    init_skeleton();
    init_LightGallery();
    import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
    RecentPhotos = ({ data }) => {
      const [isLoading, setIsLoading] = (0, import_react9.useState)(true);
      (0, import_react9.useEffect)(() => {
        setTimeout(() => {
          setIsLoading(false);
        }, 1e3);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "h-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(CustomIcon_default, { icon: faFileImage, label: "Recent Photos" }),
        isLoading ? /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "grid grid-cols-5 gap-4 mt-4 w-full", children: [...Array(10)].map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
          skeleton_default,
          {
            className: "w-20 h-20 rounded-md col-span-1"
          },
          i
        )) }) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "w-full", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
          CFGallery,
          {
            zoom: true,
            animateThumb: false,
            zoomFromOrigin: false,
            allowMediaOverlap: true,
            toggleThumb: true,
            backdropDuration: 150,
            showZoomInOutIcons: true,
            actualSize: false,
            mode: "lg-slide",
            alignThumbnails: "left",
            className: "flex gap-[15px] flex-wrap",
            mousewheel: true,
            children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "grid grid-cols-5 gap-4 w-full mt-4", children: data?.aws_files?.length > 0 ? data?.aws_files.map(
              ({ image_id, file_path, is_image, file_name }, i) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
                "a",
                {
                  href: file_path,
                  download: !is_image,
                  className: "light-gallery overflow-hidden w-16 md:w-20 h-16 md:h-20 col-span-1  rounded-md ",
                  "data-sub-html": `<h4>${file_name}</h4>`,
                  children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
                    "img",
                    {
                      src: file_path,
                      alt: file_name,
                      className: "cursor-pointer"
                    }
                  )
                },
                image_id ?? i
              )
            ) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("img", { src: "../../public/NoPage.svg", alt: "No Photos" }) })
          }
        ) })
      ] });
    };
    RecentPhtotos_default = RecentPhotos;
  }
});

// node_modules/dhtmlx-scheduler/codebase/dhtmlxscheduler.css
var init_dhtmlxscheduler = __esm({
  "node_modules/dhtmlx-scheduler/codebase/dhtmlxscheduler.css"() {
  }
});

// app/styles/dhtmlxs.css
var init_dhtmlxs = __esm({
  "app/styles/dhtmlxs.css"() {
  }
});

// node_modules/dhtmlx-scheduler/codebase/dhtmlxscheduler.es.js
var dhtmlxscheduler_es_exports = {};
__export(dhtmlxscheduler_es_exports, {
  Scheduler: () => ht,
  default: () => Ye,
  scheduler: () => Ye
});
function Nt(e2) {
  let i = [], t2 = false, r2 = null, d = null;
  function n() {
    return e2.config.drag_highlight && e2.markTimespan;
  }
  function s(o2) {
    const l = e2.getView(o2);
    return l ? l.layout : o2;
  }
  function _(o2) {
    const { event: l, layout: h, viewName: v, sectionId: u, eventNode: f } = o2;
    (function(m, g) {
      switch (g) {
        case "month":
          m.style.top = "", m.style.left = "";
          break;
        case "timeline":
          m.style.left = "", m.style.marginLeft = "1px";
          break;
        default:
          m.style.top = "";
      }
    })(f, h);
    const c2 = {};
    let p = { start_date: l.start_date, end_date: l.end_date, css: "dhx_scheduler_dnd_marker", html: f };
    return h != "timeline" && h != "month" || (p = { ...p, end_date: e2.date.add(l.start_date, 1, "minute") }), u && (c2[v] = u, p.sections = c2), p;
  }
  function a2(o2) {
    const { layout: l } = o2;
    let h;
    switch (l) {
      case "month":
        h = function(v) {
          let u = [];
          const { event: f, layout: c2, viewName: p, sectionId: m } = v, g = [];
          let y2 = new Date(f.start_date);
          for (; y2.valueOf() < f.end_date.valueOf(); ) {
            let b = { start_date: y2 };
            g.push(b), y2 = e2.date.week_start(e2.date.add(y2, 1, "week"));
          }
          let x = e2.$container.querySelectorAll(`[${e2.config.event_attribute}='${f.id}']`);
          for (let b = 0; b < x.length; b++) {
            const k = { event: g[b], layout: c2, viewName: p, sectionId: m, eventNode: x[b].cloneNode(true) };
            u.push(_(k));
          }
          return u;
        }(o2);
        break;
      case "timeline":
      case "units":
        h = function(v) {
          let u = [];
          const { event: f, layout: c2, viewName: p, eventNode: m } = v;
          let g = function(y2) {
            const x = e2.getView(y2);
            return x.y_property ? x.y_property : x.map_to ? x.map_to : void 0;
          }(p);
          if (e2.config.multisection && g) {
            const y2 = String(f[g]).split(e2.config.section_delimiter).map((b) => String(b)), x = [];
            for (let b = 0; b < y2.length; b++) {
              x[b] = m.cloneNode(true);
              const k = { event: f, layout: c2, viewName: p, sectionId: y2[b], eventNode: x[b] };
              u.push(_(k));
            }
          }
          return u;
        }(o2);
        break;
      default:
        h = function(v) {
          const { event: u, layout: f, viewName: c2, sectionId: p } = v;
          let m = [], g = e2.$container.querySelectorAll(`[${e2.config.event_attribute}='${u.id}']:not(.dhx_cal_select_menu):not(.dhx_drag_marker)`);
          if (g)
            for (let y2 = 0; y2 < g.length; y2++) {
              let x = g[y2].cloneNode(true);
              const b = { event: { start_date: /* @__PURE__ */ new Date(+x.getAttribute("data-bar-start")), end_date: /* @__PURE__ */ new Date(+x.getAttribute("data-bar-end")) }, layout: f, viewName: c2, sectionId: p, eventNode: x };
              m.push(_(b));
            }
          return m;
        }(o2);
    }
    h.forEach((v) => {
      i.push(e2.markTimespan(v));
    });
  }
  e2.attachEvent("onBeforeDrag", function(o2, l, h) {
    return n() && (t2 = true, d = e2.getEvent(o2), r2 = h.target.closest(`[${e2.config.event_attribute}]`), s(e2.getState().mode) == "units" && e2.config.cascade_event_display && (e2.unselect(o2), r2 = h.target.closest(`[${e2.config.event_attribute}]`))), true;
  }), e2.attachEvent("onEventDrag", function(o2, l, h) {
    if (t2 && n()) {
      t2 = false;
      const v = e2.getState().mode, u = s(v), f = e2.getActionData(h).section;
      d && a2({ event: d, layout: u, viewName: v, sectionId: f, eventNode: r2 });
    }
  }), e2.attachEvent("onDragEnd", function(o2, l, h) {
    for (let v = 0; v < i.length; v++)
      e2.unmarkTimespan(i[v]);
    i = [], r2 = null, d = null;
  });
}
function Mt(e2) {
  e2.config.mark_now = true, e2.config.display_marked_timespans = true, e2.config.overwrite_marked_timespans = true;
  var i = "dhx_time_block", t2 = "default", r2 = function(n, s, _) {
    var a2 = typeof n == "object" ? n : { days: n };
    return a2.type = i, a2.css = "", s && (_ && (a2.sections = _), a2 = function(o2, l, h) {
      return l instanceof Date && h instanceof Date ? (o2.start_date = l, o2.end_date = h) : (o2.days = l, o2.zones = h), o2;
    }(a2, n, s)), a2;
  };
  function d(n, s, _, a2, o2) {
    var l = e2, h = [], v = { _props: "map_to", matrix: "y_property" };
    for (var u in v) {
      var f = v[u];
      if (l[u])
        for (var c2 in l[u]) {
          var p = l[u][c2][f];
          n[p] && (h = l._add_timespan_zones(h, e2._get_blocked_zones(s[c2], n[p], _, a2, o2)));
        }
    }
    return h = l._add_timespan_zones(h, e2._get_blocked_zones(s, "global", _, a2, o2));
  }
  e2.blockTime = function(n, s, _) {
    var a2 = r2(n, s, _);
    return e2.addMarkedTimespan(a2);
  }, e2.unblockTime = function(n, s, _) {
    var a2 = r2(n, s = s || "fullday", _);
    return e2.deleteMarkedTimespan(a2);
  }, e2.checkInMarkedTimespan = function(n, s, _) {
    s = s || t2;
    for (var a2 = true, o2 = new Date(n.start_date.valueOf()), l = e2.date.add(o2, 1, "day"), h = e2._marked_timespans; o2 < n.end_date; o2 = e2.date.date_part(l), l = e2.date.add(o2, 1, "day")) {
      var v = +e2.date.date_part(new Date(o2)), u = d(n, h, o2.getDay(), v, s);
      if (u)
        for (var f = 0; f < u.length; f += 2) {
          var c2 = e2._get_zone_minutes(o2), p = n.end_date > l || n.end_date.getDate() != o2.getDate() ? 1440 : e2._get_zone_minutes(n.end_date), m = u[f], g = u[f + 1];
          if (m < p && g > c2 && !(a2 = typeof _ == "function" && _(n, c2, p, m, g)))
            break;
        }
    }
    return !a2;
  }, e2.checkLimitViolation = function(n) {
    if (!n || !e2.config.check_limits)
      return true;
    var s = e2, _ = s.config, a2 = [];
    if (n.rec_type && n._end_date || n.rrule) {
      const u = n._end_date || n.end_date;
      return !_.limit_start || !_.limit_end || u.valueOf() >= _.limit_start.valueOf() && n.start_date.valueOf() <= _.limit_end.valueOf();
    }
    a2 = [n];
    for (var o2 = true, l = 0; l < a2.length; l++) {
      var h = true, v = a2[l];
      v._timed = e2.isOneDayEvent(v), (h = !_.limit_start || !_.limit_end || v.start_date.valueOf() >= _.limit_start.valueOf() && v.end_date.valueOf() <= _.limit_end.valueOf()) && (h = !e2.checkInMarkedTimespan(v, i, function(u, f, c2, p, m) {
        var g = true;
        return f <= m && f >= p && ((m == 1440 || c2 <= m) && (g = false), u._timed && s._drag_id && s._drag_mode == "new-size" ? (u.start_date.setHours(0), u.start_date.setMinutes(m)) : g = false), (c2 >= p && c2 <= m || f < p && c2 > m) && (u._timed && s._drag_id && s._drag_mode == "new-size" ? (u.end_date.setHours(0), u.end_date.setMinutes(p)) : g = false), g;
      })), h || (h = s.checkEvent("onLimitViolation") ? s.callEvent("onLimitViolation", [v.id, v]) : h), o2 = o2 && h;
    }
    return o2 || (s._drag_id = null, s._drag_mode = null), o2;
  }, e2._get_blocked_zones = function(n, s, _, a2, o2) {
    var l = [];
    if (n && n[s])
      for (var h = n[s], v = this._get_relevant_blocked_zones(_, a2, h, o2), u = 0; u < v.length; u++)
        l = this._add_timespan_zones(l, v[u].zones);
    return l;
  }, e2._get_relevant_blocked_zones = function(n, s, _, a2) {
    var o2;
    return e2.config.overwrite_marked_timespans ? o2 = _[s] && _[s][a2] ? _[s][a2] : _[n] && _[n][a2] ? _[n][a2] : [] : (o2 = [], _[s] && _[s][a2] && (o2 = o2.concat(_[s][a2])), _[n] && _[n][a2] && (o2 = o2.concat(_[n][a2]))), o2;
  }, e2._mark_now = function(n) {
    var s = "dhx_now_time";
    this._els[s] || (this._els[s] = []);
    var _ = e2._currentDate(), a2 = this.config;
    if (e2._remove_mark_now(), !n && a2.mark_now && _ < this._max_date && _ > this._min_date && _.getHours() >= a2.first_hour && _.getHours() < a2.last_hour) {
      var o2 = this.locate_holder_day(_);
      this._els[s] = e2._append_mark_now(o2, _);
    }
  }, e2._append_mark_now = function(n, s) {
    var _ = "dhx_now_time", a2 = e2._get_zone_minutes(s), o2 = { zones: [a2, a2 + 1], css: _, type: _ };
    if (!this._table_view) {
      if (this._props && this._props[this._mode]) {
        var l, h, v = this._props[this._mode], u = v.size || v.options.length;
        v.days > 1 ? (v.size && v.options.length && (n = (v.position + n) / v.options.length * v.size), l = n, h = n + u) : h = (l = 0) + u;
        for (var f = [], c2 = l; c2 < h; c2++) {
          var p = c2;
          o2.days = p;
          var m = e2._render_marked_timespan(o2, null, p)[0];
          f.push(m);
        }
        return f;
      }
      return o2.days = n, e2._render_marked_timespan(o2, null, n);
    }
    if (this._mode == "month")
      return o2.days = +e2.date.date_part(s), e2._render_marked_timespan(o2, null, null);
  }, e2._remove_mark_now = function() {
    for (var n = "dhx_now_time", s = this._els[n], _ = 0; _ < s.length; _++) {
      var a2 = s[_], o2 = a2.parentNode;
      o2 && o2.removeChild(a2);
    }
    this._els[n] = [];
  }, e2._marked_timespans = { global: {} }, e2._get_zone_minutes = function(n) {
    return 60 * n.getHours() + n.getMinutes();
  }, e2._prepare_timespan_options = function(n) {
    var s = [], _ = [];
    if (n.days == "fullweek" && (n.days = [0, 1, 2, 3, 4, 5, 6]), n.days instanceof Array) {
      for (var a2 = n.days.slice(), o2 = 0; o2 < a2.length; o2++) {
        var l = e2._lame_clone(n);
        l.days = a2[o2], s.push.apply(s, e2._prepare_timespan_options(l));
      }
      return s;
    }
    if (!n || !(n.start_date && n.end_date && n.end_date > n.start_date || n.days !== void 0 && n.zones) && !n.type)
      return s;
    n.zones == "fullday" && (n.zones = [0, 1440]), n.zones && n.invert_zones && (n.zones = e2.invertZones(n.zones)), n.id = e2.uid(), n.css = n.css || "", n.type = n.type || t2;
    var h = n.sections;
    if (h) {
      for (var v in h)
        if (h.hasOwnProperty(v)) {
          var u = h[v];
          for (u instanceof Array || (u = [u]), o2 = 0; o2 < u.length; o2++)
            (x = e2._lame_copy({}, n)).sections = {}, x.sections[v] = u[o2], _.push(x);
        }
    } else
      _.push(n);
    for (var f = 0; f < _.length; f++) {
      var c2 = _[f], p = c2.start_date, m = c2.end_date;
      if (p && m)
        for (var g = e2.date.date_part(new Date(p)), y2 = e2.date.add(g, 1, "day"); g < m; ) {
          var x;
          delete (x = e2._lame_copy({}, c2)).start_date, delete x.end_date, x.days = g.valueOf();
          var b = p > g ? e2._get_zone_minutes(p) : 0, k = m > y2 || m.getDate() != g.getDate() ? 1440 : e2._get_zone_minutes(m);
          x.zones = [b, k], s.push(x), g = y2, y2 = e2.date.add(y2, 1, "day");
        }
      else
        c2.days instanceof Date && (c2.days = e2.date.date_part(c2.days).valueOf()), c2.zones = n.zones.slice(), s.push(c2);
    }
    return s;
  }, e2._get_dates_by_index = function(n, s, _) {
    var a2 = [];
    s = e2.date.date_part(new Date(s || e2._min_date)), _ = new Date(_ || e2._max_date);
    for (var o2 = s.getDay(), l = n - o2 >= 0 ? n - o2 : 7 - s.getDay() + n, h = e2.date.add(s, l, "day"); h < _; h = e2.date.add(h, 1, "week"))
      a2.push(h);
    return a2;
  }, e2._get_css_classes_by_config = function(n) {
    var s = [];
    return n.type == i && (s.push(i), n.css && s.push(i + "_reset")), s.push("dhx_marked_timespan", n.css), s.join(" ");
  }, e2._get_block_by_config = function(n) {
    var s = document.createElement("div");
    return n.html && (typeof n.html == "string" ? s.innerHTML = n.html : s.appendChild(n.html)), s;
  }, e2._render_marked_timespan = function(n, s, _) {
    var a2 = [], o2 = e2.config, l = this._min_date, h = this._max_date, v = false;
    if (!o2.display_marked_timespans)
      return a2;
    if (!_ && _ !== 0) {
      if (n.days < 7)
        _ = n.days;
      else {
        var u = new Date(n.days);
        if (v = +u, !(+h > +u && +l <= +u))
          return a2;
        _ = u.getDay();
      }
      var f = l.getDay();
      f > _ ? _ = 7 - (f - _) : _ -= f;
    }
    var c2 = n.zones, p = e2._get_css_classes_by_config(n);
    if (e2._table_view && e2._mode == "month") {
      var m = [], g = [];
      if (s)
        m.push(s), g.push(_);
      else {
        g = v ? [v] : e2._get_dates_by_index(_);
        for (var y2 = 0; y2 < g.length; y2++)
          m.push(this._scales[g[y2]]);
      }
      for (y2 = 0; y2 < m.length; y2++) {
        s = m[y2], _ = g[y2];
        var x = this.locate_holder_day(_, false) % this._cols.length;
        if (!this._ignores[x]) {
          var b = e2._get_block_by_config(n);
          b.className = p, b.style.top = "0px", b.style.height = "100%";
          for (var k = 0; k < c2.length; k += 2) {
            var E = c2[y2];
            if ((N = c2[y2 + 1]) <= E)
              return [];
            (M = b.cloneNode(true)).style.left = "0px", M.style.width = "100%", s.appendChild(M), a2.push(M);
          }
        }
      }
    } else {
      var D = _;
      if (this._ignores[this.locate_holder_day(_, false)])
        return a2;
      if (this._props && this._props[this._mode] && n.sections && n.sections[this._mode]) {
        var w = this._props[this._mode];
        D = w.order[n.sections[this._mode]];
        var S = w.order[n.sections[this._mode]];
        w.days > 1 ? D = D * (w.size || w.options.length) + S : (D = S, w.size && D > w.position + w.size && (D = 0));
      }
      for (s = s || e2.locate_holder(D), y2 = 0; y2 < c2.length; y2 += 2) {
        var N, M;
        if (E = Math.max(c2[y2], 60 * o2.first_hour), (N = Math.min(c2[y2 + 1], 60 * o2.last_hour)) <= E) {
          if (y2 + 2 < c2.length)
            continue;
          return [];
        }
        (M = e2._get_block_by_config(n)).className = p;
        var T = 24 * this.config.hour_size_px + 1, A = 36e5;
        M.style.top = Math.round((60 * E * 1e3 - this.config.first_hour * A) * this.config.hour_size_px / A) % T + "px", M.style.height = Math.max(Math.round(60 * (N - E) * 1e3 * this.config.hour_size_px / A) % T, 1) + "px", s.appendChild(M), a2.push(M);
      }
    }
    return a2;
  }, e2._mark_timespans = function() {
    var n = this._els.dhx_cal_data[0], s = [];
    if (e2._table_view && e2._mode == "month")
      for (var _ in this._scales) {
        var a2 = /* @__PURE__ */ new Date(+_);
        s.push.apply(s, e2._on_scale_add_marker(this._scales[_], a2));
      }
    else {
      a2 = new Date(e2._min_date);
      for (var o2 = 0, l = n.childNodes.length; o2 < l; o2++) {
        var h = n.childNodes[o2];
        h.firstChild && e2._getClassName(h.firstChild).indexOf("dhx_scale_hour") > -1 || (s.push.apply(s, e2._on_scale_add_marker(h, a2)), a2 = e2.date.add(a2, 1, "day"));
      }
    }
    return s;
  }, e2.markTimespan = function(n) {
    if (!this._els)
      throw new Error("`scheduler.markTimespan` can't be used before scheduler initialization. Place `scheduler.markTimespan` call after `scheduler.init`.");
    var s = false;
    this._els.dhx_cal_data || (e2.get_elements(), s = true);
    var _ = e2._marked_timespans_ids, a2 = e2._marked_timespans_types, o2 = e2._marked_timespans;
    e2.deleteMarkedTimespan(), e2.addMarkedTimespan(n);
    var l = e2._mark_timespans();
    return s && (e2._els = []), e2._marked_timespans_ids = _, e2._marked_timespans_types = a2, e2._marked_timespans = o2, l;
  }, e2.unmarkTimespan = function(n) {
    if (n)
      for (var s = 0; s < n.length; s++) {
        var _ = n[s];
        _.parentNode && _.parentNode.removeChild(_);
      }
  }, e2._addMarkerTimespanConfig = function(n) {
    var s = "global", _ = e2._marked_timespans, a2 = n.id, o2 = e2._marked_timespans_ids;
    o2[a2] || (o2[a2] = []);
    var l = n.days, h = n.sections, v = n.type;
    if (n.id = a2, h) {
      for (var u in h)
        if (h.hasOwnProperty(u)) {
          _[u] || (_[u] = {});
          var f = h[u], c2 = _[u];
          c2[f] || (c2[f] = {}), c2[f][l] || (c2[f][l] = {}), c2[f][l][v] || (c2[f][l][v] = [], e2._marked_timespans_types || (e2._marked_timespans_types = {}), e2._marked_timespans_types[v] || (e2._marked_timespans_types[v] = true));
          var p = c2[f][l][v];
          n._array = p, p.push(n), o2[a2].push(n);
        }
    } else
      _[s][l] || (_[s][l] = {}), _[s][l][v] || (_[s][l][v] = []), e2._marked_timespans_types || (e2._marked_timespans_types = {}), e2._marked_timespans_types[v] || (e2._marked_timespans_types[v] = true), p = _[s][l][v], n._array = p, p.push(n), o2[a2].push(n);
  }, e2._marked_timespans_ids = {}, e2.addMarkedTimespan = function(n) {
    var s = e2._prepare_timespan_options(n);
    if (s.length) {
      for (var _ = s[0].id, a2 = 0; a2 < s.length; a2++)
        e2._addMarkerTimespanConfig(s[a2]);
      return _;
    }
  }, e2._add_timespan_zones = function(n, s) {
    var _ = n.slice();
    if (s = s.slice(), !_.length)
      return s;
    for (var a2 = 0; a2 < _.length; a2 += 2)
      for (var o2 = _[a2], l = _[a2 + 1], h = a2 + 2 == _.length, v = 0; v < s.length; v += 2) {
        var u = s[v], f = s[v + 1];
        if (f > l && u <= l || u < o2 && f >= o2)
          _[a2] = Math.min(o2, u), _[a2 + 1] = Math.max(l, f), a2 -= 2;
        else {
          if (!h)
            continue;
          var c2 = o2 > u ? 0 : 2;
          _.splice(a2 + c2, 0, u, f);
        }
        s.splice(v--, 2);
        break;
      }
    return _;
  }, e2._subtract_timespan_zones = function(n, s) {
    for (var _ = n.slice(), a2 = 0; a2 < _.length; a2 += 2)
      for (var o2 = _[a2], l = _[a2 + 1], h = 0; h < s.length; h += 2) {
        var v = s[h], u = s[h + 1];
        if (u > o2 && v < l) {
          var f = false;
          o2 >= v && l <= u && _.splice(a2, 2), o2 < v && (_.splice(a2, 2, o2, v), f = true), l > u && _.splice(f ? a2 + 2 : a2, f ? 0 : 2, u, l), a2 -= 2;
          break;
        }
      }
    return _;
  }, e2.invertZones = function(n) {
    return e2._subtract_timespan_zones([0, 1440], n.slice());
  }, e2._delete_marked_timespan_by_id = function(n) {
    var s = e2._marked_timespans_ids[n];
    if (s) {
      for (var _ = 0; _ < s.length; _++)
        for (var a2 = s[_], o2 = a2._array, l = 0; l < o2.length; l++)
          if (o2[l] == a2) {
            o2.splice(l, 1);
            break;
          }
    }
  }, e2._delete_marked_timespan_by_config = function(n) {
    var s, _ = e2._marked_timespans, a2 = n.sections, o2 = n.days, l = n.type || t2;
    if (a2) {
      for (var h in a2)
        if (a2.hasOwnProperty(h) && _[h]) {
          var v = a2[h];
          _[h][v] && (s = _[h][v]);
        }
    } else
      s = _.global;
    if (s) {
      if (o2 !== void 0)
        s[o2] && s[o2][l] && (e2._addMarkerTimespanConfig(n), e2._delete_marked_timespans_list(s[o2][l], n));
      else
        for (var u in s)
          if (s[u][l]) {
            var f = e2._lame_clone(n);
            n.days = u, e2._addMarkerTimespanConfig(f), e2._delete_marked_timespans_list(s[u][l], n);
          }
    }
  }, e2._delete_marked_timespans_list = function(n, s) {
    for (var _ = 0; _ < n.length; _++) {
      var a2 = n[_], o2 = e2._subtract_timespan_zones(a2.zones, s.zones);
      if (o2.length)
        a2.zones = o2;
      else {
        n.splice(_, 1), _--;
        for (var l = e2._marked_timespans_ids[a2.id], h = 0; h < l.length; h++)
          if (l[h] == a2) {
            l.splice(h, 1);
            break;
          }
      }
    }
  }, e2.deleteMarkedTimespan = function(n) {
    if (arguments.length || (e2._marked_timespans = { global: {} }, e2._marked_timespans_ids = {}, e2._marked_timespans_types = {}), typeof n != "object")
      e2._delete_marked_timespan_by_id(n);
    else {
      n.start_date && n.end_date || (n.days !== void 0 || n.type || (n.days = "fullweek"), n.zones || (n.zones = "fullday"));
      var s = [];
      if (n.type)
        s.push(n.type);
      else
        for (var _ in e2._marked_timespans_types)
          s.push(_);
      for (var a2 = e2._prepare_timespan_options(n), o2 = 0; o2 < a2.length; o2++)
        for (var l = a2[o2], h = 0; h < s.length; h++) {
          var v = e2._lame_clone(l);
          v.type = s[h], e2._delete_marked_timespan_by_config(v);
        }
    }
  }, e2._get_types_to_render = function(n, s) {
    var _ = n ? e2._lame_copy({}, n) : {};
    for (var a2 in s || {})
      s.hasOwnProperty(a2) && (_[a2] = s[a2]);
    return _;
  }, e2._get_configs_to_render = function(n) {
    var s = [];
    for (var _ in n)
      n.hasOwnProperty(_) && s.push.apply(s, n[_]);
    return s;
  }, e2._on_scale_add_marker = function(n, s) {
    if (!e2._table_view || e2._mode == "month") {
      var _ = s.getDay(), a2 = s.valueOf(), o2 = this._mode, l = e2._marked_timespans, h = [], v = [];
      if (this._props && this._props[o2]) {
        var u = this._props[o2], f = u.options, c2 = f[e2._get_unit_index(u, s)];
        if (u.days > 1) {
          var p = Math.round((s - e2._min_date) / 864e5), m = u.size || f.length;
          s = e2.date.add(e2._min_date, Math.floor(p / m), "day"), s = e2.date.date_part(s);
        } else
          s = e2.date.date_part(new Date(this._date));
        if (_ = s.getDay(), a2 = s.valueOf(), l[o2] && l[o2][c2.key]) {
          var g = l[o2][c2.key], y2 = e2._get_types_to_render(g[_], g[a2]);
          h.push.apply(h, e2._get_configs_to_render(y2));
        }
      }
      var x = l.global;
      if (e2.config.overwrite_marked_timespans) {
        var b = x[a2] || x[_];
        h.push.apply(h, e2._get_configs_to_render(b));
      } else
        x[a2] && h.push.apply(h, e2._get_configs_to_render(x[a2])), x[_] && h.push.apply(h, e2._get_configs_to_render(x[_]));
      for (var k = 0; k < h.length; k++)
        v.push.apply(v, e2._render_marked_timespan(h[k], n, s));
      return v;
    }
  }, e2.attachEvent("onScaleAdd", function() {
    e2._on_scale_add_marker.apply(e2, arguments);
  }), e2.dblclick_dhx_marked_timespan = function(n, s) {
    e2.callEvent("onScaleDblClick", [e2.getActionData(n).date, s, n]), e2.config.dblclick_create && e2.addEventNow(e2.getActionData(n).date, null, n);
  };
}
function Tt(e2) {
  var i = {}, t2 = false;
  function r2(a2, o2) {
    o2 = typeof o2 == "function" ? o2 : function() {
    }, i[a2] || (i[a2] = this[a2], this[a2] = o2);
  }
  function d(a2) {
    i[a2] && (this[a2] = i[a2], i[a2] = null);
  }
  function n(a2) {
    for (var o2 in a2)
      r2.call(this, o2, a2[o2]);
  }
  function s() {
    for (var a2 in i)
      d.call(this, a2);
  }
  function _(a2) {
    try {
      a2();
    } catch (o2) {
      window.console.error(o2);
    }
  }
  return e2.$stateProvider.registerProvider("batchUpdate", function() {
    return { batch_update: t2 };
  }, false), function(a2, o2) {
    if (t2)
      return void _(a2);
    var l, h = this._dp && this._dp.updateMode != "off";
    h && (l = this._dp.updateMode, this._dp.setUpdateMode("off"));
    const v = { setModeDate: { date: null, mode: null }, needRender: false, needUpdateView: false, repaintEvents: {} }, u = (c2, p) => {
      c2 && (v.setModeDate.date = c2), p && (v.setModeDate.mode = p);
    };
    var f = { render: (c2, p) => {
      v.needRender = true, u(c2, p);
    }, setCurrentView: (c2, p) => {
      v.needRender = true, u(c2, p);
    }, updateView: (c2, p) => {
      v.needUpdateView = true, u(c2, p);
    }, render_data: () => v.needRender = true, render_view_data: (c2) => {
      c2 && c2.length ? c2.forEach((p) => v.repaintEvents[p.id] = true) : v.needRender = true;
    } };
    if (n.call(this, f), t2 = true, this.callEvent("onBeforeBatchUpdate", []), _(a2), this.callEvent("onAfterBatchUpdate", []), s.call(this), t2 = false, !o2)
      if (v.needRender)
        e2.render(v.setModeDate.date, v.setModeDate.mode);
      else if (v.needUpdateView)
        e2.updateView(v.setModeDate.date, v.setModeDate.mode);
      else
        for (const c2 in v.repaintEvents)
          e2.updateEvent(c2);
    h && (this._dp.setUpdateMode(l), this._dp.sendData());
  };
}
function At(e2) {
  (function(i) {
    i.attachEvent("onEventDeleted", function(t2, r2) {
      let d = i.copy(r2);
      i.config.undo_deleted && !i.getState().new_event && i.message({ text: `<div class="dhx_info_message">
                            <span class="undo_popup_text">Event deleted</span>
                            <button class="undo_button" data-deleted-event-id="${r2.id}">Undo</button>
                        </div>`, expire: 1e4, type: "popup_after_delete", callback: function(n) {
        n.target.closest(`[data-deleted-event-id="${r2.id}"]`) && (i.addEvent(d), i.render());
      } });
    });
  })(e2), Nt(e2), Mt(e2), function(i) {
    i.batchUpdate = Tt(i);
  }(e2);
}
function Me(e2) {
  return !(!e2 || typeof e2 != "object") && !!(e2.getFullYear && e2.getMonth && e2.getDate);
}
function Ot(e2) {
  function i(_) {
    var a2 = document.createElement("div");
    return (_ || "").split(" ").forEach(function(o2) {
      a2.classList.add(o2);
    }), a2;
  }
  var t2 = { rows_container: function() {
    return i("dhx_cal_navbar_rows_container");
  }, row: function() {
    return i("dhx_cal_navbar_row");
  }, view: function(_) {
    var a2 = i("dhx_cal_tab");
    return a2.setAttribute("name", _.view + "_tab"), a2.setAttribute("data-tab", _.view), e2.config.fix_tab_position && (_.$firstTab ? a2.classList.add("dhx_cal_tab_first") : _.$lastTab ? a2.classList.add("dhx_cal_tab_last") : _.view !== "week" && a2.classList.add("dhx_cal_tab_standalone"), _.$segmentedTab && a2.classList.add("dhx_cal_tab_segmented")), a2;
  }, date: function() {
    return i("dhx_cal_date");
  }, button: function(_) {
    return i("dhx_cal_nav_button dhx_cal_nav_button_custom dhx_cal_tab");
  }, builtInButton: function(_) {
    return i("dhx_cal_" + _.view + "_button dhx_cal_nav_button");
  }, spacer: function() {
    return i("dhx_cal_line_spacer");
  }, minicalendarButton: function(_) {
    var a2 = i("dhx_minical_icon");
    return _.click || a2.$_eventAttached || e2.event(a2, "click", function() {
      e2.isCalendarVisible() ? e2.destroyCalendar() : e2.renderCalendar({ position: this, date: e2.getState().date, navigation: true, handler: function(o2, l) {
        e2.setCurrentView(o2), e2.destroyCalendar();
      } });
    }), a2;
  }, html_element: function(_) {
    return i("dhx_cal_nav_content");
  } };
  function r2(_) {
    var a2 = function(h) {
      var v;
      if (h.view)
        switch (h.view) {
          case "today":
          case "next":
          case "prev":
            v = t2.builtInButton;
            break;
          case "date":
            v = t2.date;
            break;
          case "spacer":
            v = t2.spacer;
            break;
          case "button":
            v = t2.button;
            break;
          case "minicalendar":
            v = t2.minicalendarButton;
            break;
          default:
            v = t2.view;
        }
      else
        h.rows ? v = t2.rows_container : h.cols && (v = t2.row);
      return v;
    }(_);
    if (a2) {
      var o2 = a2(_);
      if (_.css && o2.classList.add(_.css), _.width && ((l = _.width) === 1 * l && (l += "px"), o2.style.width = l), _.height && ((l = _.height) === 1 * l && (l += "px"), o2.style.height = l), _.click && e2.event(o2, "click", _.click), _.html && (o2.innerHTML = _.html), _.align) {
        var l = "";
        _.align == "right" ? l = "flex-end" : _.align == "left" && (l = "flex-start"), o2.style.justifyContent = l;
      }
      return o2;
    }
  }
  function d(_) {
    return typeof _ == "string" && (_ = { view: _ }), _.view || _.rows || _.cols || (_.view = "button"), _;
  }
  function n(_) {
    var a2, o2 = document.createDocumentFragment();
    a2 = Array.isArray(_) ? _ : [_];
    for (var l = 0; l < a2.length; l++) {
      var h, v = d(a2[l]);
      v.view === "day" && a2[l + 1] && ((h = d(a2[l + 1])).view !== "week" && h.view !== "month" || (v.$firstTab = true, v.$segmentedTab = true)), v.view === "week" && a2[l - 1] && ((h = d(a2[l + 1])).view !== "week" && h.view !== "month" || (v.$segmentedTab = true)), v.view === "month" && a2[l - 1] && ((h = d(a2[l - 1])).view !== "week" && h.view !== "day" || (v.$lastTab = true, v.$segmentedTab = true));
      var u = r2(v);
      o2.appendChild(u), (v.cols || v.rows) && u.appendChild(n(v.cols || v.rows));
    }
    return o2;
  }
  e2._init_nav_bar = function(_) {
    var a2 = this.$container.querySelector(".dhx_cal_navline");
    return a2 || ((a2 = document.createElement("div")).className = "dhx_cal_navline dhx_cal_navline_flex", e2._update_nav_bar(_, a2), a2);
  };
  var s = null;
  e2._update_nav_bar = function(_, a2) {
    if (_) {
      var o2 = false, l = _.height || e2.xy.nav_height;
      s !== null && s === l || (o2 = true), o2 && (e2.xy.nav_height = l), a2.innerHTML = "", a2.appendChild(n(_)), e2.unset_actions(), e2._els = [], e2.get_elements(), e2.set_actions(), a2.style.display = l === 0 ? "none" : "", s = l;
    }
  };
}
function Lt(e2) {
  function i(n) {
    for (var s = document.body; n && n != s; )
      n = n.parentNode;
    return s == n;
  }
  function t2(n) {
    return { w: n.innerWidth || document.documentElement.clientWidth, h: n.innerHeight || document.documentElement.clientHeight };
  }
  function r2(n, s) {
    var _, a2 = t2(s);
    n.event(s, "resize", function() {
      clearTimeout(_), _ = setTimeout(function() {
        if (i(n.$container) && !n.$destroyed) {
          var o2, l, h = t2(s);
          l = h, ((o2 = a2).w != l.w || o2.h != l.h) && (a2 = h, d(n));
        }
      }, 150);
    });
  }
  function d(n) {
    !n.$destroyed && n.$root && i(n.$root) && n.callEvent("onSchedulerResize", []) && (n.updateView(), n.callEvent("onAfterSchedulerResize", []));
  }
  (function(n) {
    var s = n.$container;
    window.getComputedStyle(s).getPropertyValue("position") == "static" && (s.style.position = "relative");
    var _ = document.createElement("iframe");
    _.className = "scheduler_container_resize_watcher", _.tabIndex = -1, n.config.wai_aria_attributes && (_.setAttribute("role", "none"), _.setAttribute("aria-hidden", true)), window.Sfdc || window.$A || window.Aura ? function(a2) {
      var o2 = a2.$root.offsetHeight, l = a2.$root.offsetWidth;
      (function h() {
        a2.$destroyed || (a2.$root && (a2.$root.offsetHeight == o2 && a2.$root.offsetWidth == l || d(a2), o2 = a2.$root.offsetHeight, l = a2.$root.offsetWidth), setTimeout(h, 200));
      })();
    }(n) : (s.appendChild(_), _.contentWindow ? r2(n, _.contentWindow) : (s.removeChild(_), r2(n, window)));
  })(e2);
}
function Ue(e2) {
  const i = new Ht();
  e2.attachEvent = function(t2, r2, d) {
    t2 = "ev_" + t2.toLowerCase(), i.listeners[t2] || (i.listeners[t2] = $t(this)), d && d.thisObject && (r2 = r2.bind(d.thisObject));
    let n = t2 + ":" + i.listeners[t2].addEvent(r2, d);
    return d && d.id && (n = d.id), n;
  }, e2.attachAll = function(t2) {
    this.attachEvent("listen_all", t2);
  }, e2.callEvent = function(t2, r2) {
    if (i._silent_mode)
      return true;
    const d = "ev_" + t2.toLowerCase(), n = i.listeners;
    return n.ev_listen_all && n.ev_listen_all.apply(this, [t2].concat(r2)), !n[d] || n[d].apply(this, r2);
  }, e2.checkEvent = function(t2) {
    return !!i.listeners["ev_" + t2.toLowerCase()];
  }, e2.detachEvent = function(t2) {
    if (t2) {
      let r2 = i.listeners;
      for (const n in r2)
        r2[n].removeEvent(t2);
      const d = t2.split(":");
      if (r2 = i.listeners, d.length === 2) {
        const n = d[0], s = d[1];
        r2[n] && r2[n].removeEvent(s);
      }
    }
  }, e2.detachAllEvents = function() {
    for (const t2 in i.listeners)
      i.listeners[t2].clear();
  };
}
function zt(e2) {
  var i = function() {
    var t2 = function(r2, d) {
      r2 = r2 || We.event, d = d || We.eventRemove;
      var n = [], s = { attach: function(_, a2, o2, l) {
        n.push({ element: _, event: a2, callback: o2, capture: l }), r2(_, a2, o2, l);
      }, detach: function(_, a2, o2, l) {
        d(_, a2, o2, l);
        for (var h = 0; h < n.length; h++) {
          var v = n[h];
          v.element === _ && v.event === a2 && v.callback === o2 && v.capture === l && (n.splice(h, 1), h--);
        }
      }, detachAll: function() {
        for (var _ = n.slice(), a2 = 0; a2 < _.length; a2++) {
          var o2 = _[a2];
          s.detach(o2.element, o2.event, o2.callback, o2.capture), s.detach(o2.element, o2.event, o2.callback, void 0), s.detach(o2.element, o2.event, o2.callback, false), s.detach(o2.element, o2.event, o2.callback, true);
        }
        n.splice(0, n.length);
      }, extend: function() {
        return t2(this.event, this.eventRemove);
      } };
      return s;
    };
    return t2();
  }();
  e2.event = i.attach, e2.eventRemove = i.detach, e2._eventRemoveAll = i.detachAll, e2._createDomEventScope = i.extend, e2._trim = function(t2) {
    return (String.prototype.trim || function() {
      return this.replace(/^\s+|\s+$/g, "");
    }).apply(t2);
  }, e2._isDate = function(t2) {
    return !(!t2 || typeof t2 != "object") && !!(t2.getFullYear && t2.getMonth && t2.getDate);
  }, e2._isObject = function(t2) {
    return t2 && typeof t2 == "object";
  };
}
function ut(e2) {
  if (!e2)
    return "";
  var i = e2.className || "";
  return i.baseVal && (i = i.baseVal), i.indexOf || (i = ""), i || "";
}
function ft(e2, i, t2) {
  t2 === void 0 && (t2 = true);
  for (var r2 = e2.target || e2.srcElement, d = ""; r2; ) {
    if (d = ut(r2)) {
      var n = d.indexOf(i);
      if (n >= 0) {
        if (!t2)
          return r2;
        var s = n === 0 || !(d.charAt(n - 1) || "").trim(), _ = n + i.length >= d.length || !d.charAt(n + i.length).trim();
        if (s && _)
          return r2;
      }
    }
    r2 = r2.parentNode;
  }
  return null;
}
function qt(e2) {
  var i = false, t2 = false;
  if (window.getComputedStyle) {
    var r2 = window.getComputedStyle(e2, null);
    i = r2.display, t2 = r2.visibility;
  } else
    e2.currentStyle && (i = e2.currentStyle.display, t2 = e2.currentStyle.visibility);
  var d = false, n = ft({ target: e2 }, "dhx_form_repeat", false);
  return n && (d = n.style.height == "0px"), d = d || !e2.offsetHeight, i != "none" && t2 != "hidden" && !d;
}
function jt(e2) {
  return !isNaN(e2.getAttribute("tabindex")) && 1 * e2.getAttribute("tabindex") >= 0;
}
function It(e2) {
  return !{ a: true, area: true }[e2.nodeName.loLowerCase()] || !!e2.getAttribute("href");
}
function Pt(e2) {
  return !{ input: true, select: true, textarea: true, button: true, object: true }[e2.nodeName.toLowerCase()] || !e2.hasAttribute("disabled");
}
function pt() {
  return document.head.createShadowRoot || document.head.attachShadow;
}
function Ke(e2) {
  if (!e2 || !pt())
    return document.body;
  for (; e2.parentNode && (e2 = e2.parentNode); )
    if (e2 instanceof ShadowRoot)
      return e2.host;
  return document.body;
}
function Te(e2) {
  if (typeof e2 == "string" || typeof e2 == "number")
    return e2;
  var i = "";
  for (var t2 in e2) {
    var r2 = "";
    e2.hasOwnProperty(t2) && (r2 = t2 + "=" + (r2 = typeof e2[t2] == "string" ? encodeURIComponent(e2[t2]) : typeof e2[t2] == "number" ? e2[t2] : encodeURIComponent(JSON.stringify(e2[t2]))), i.length && (r2 = "&" + r2), i += r2);
  }
  return i;
}
function Ut(e2) {
  var i = function(n, s) {
    for (var _ = "var temp=date.match(/[a-zA-Z]+|[0-9]+/g);", a2 = n.match(/%[a-zA-Z]/g), o2 = 0; o2 < a2.length; o2++)
      switch (a2[o2]) {
        case "%j":
        case "%d":
          _ += "set[2]=temp[" + o2 + "]||1;";
          break;
        case "%n":
        case "%m":
          _ += "set[1]=(temp[" + o2 + "]||1)-1;";
          break;
        case "%y":
          _ += "set[0]=temp[" + o2 + "]*1+(temp[" + o2 + "]>50?1900:2000);";
          break;
        case "%g":
        case "%G":
        case "%h":
        case "%H":
          _ += "set[3]=temp[" + o2 + "]||0;";
          break;
        case "%i":
          _ += "set[4]=temp[" + o2 + "]||0;";
          break;
        case "%Y":
          _ += "set[0]=temp[" + o2 + "]||0;";
          break;
        case "%a":
        case "%A":
          _ += "set[3]=set[3]%12+((temp[" + o2 + "]||'').toLowerCase()=='am'?0:12);";
          break;
        case "%s":
          _ += "set[5]=temp[" + o2 + "]||0;";
          break;
        case "%M":
          _ += "set[1]=this.locale.date.month_short_hash[temp[" + o2 + "]]||0;";
          break;
        case "%F":
          _ += "set[1]=this.locale.date.month_full_hash[temp[" + o2 + "]]||0;";
      }
    var l = "set[0],set[1],set[2],set[3],set[4],set[5]";
    return s && (l = " Date.UTC(" + l + ")"), new Function("date", "var set=[0,0,1,0,0,0]; " + _ + " return new Date(" + l + ");");
  }, t2 = function(n, s) {
    const _ = n.match(/%[a-zA-Z]/g);
    return function(a2) {
      for (var o2 = [0, 0, 1, 0, 0, 0], l = a2.match(/[a-zA-Z]+|[0-9]+/g), h = 0; h < _.length; h++)
        switch (_[h]) {
          case "%j":
          case "%d":
            o2[2] = l[h] || 1;
            break;
          case "%n":
          case "%m":
            o2[1] = (l[h] || 1) - 1;
            break;
          case "%y":
            o2[0] = 1 * l[h] + (l[h] > 50 ? 1900 : 2e3);
            break;
          case "%g":
          case "%G":
          case "%h":
          case "%H":
            o2[3] = l[h] || 0;
            break;
          case "%i":
            o2[4] = l[h] || 0;
            break;
          case "%Y":
            o2[0] = l[h] || 0;
            break;
          case "%a":
          case "%A":
            o2[3] = o2[3] % 12 + ((l[h] || "").toLowerCase() == "am" ? 0 : 12);
            break;
          case "%s":
            o2[5] = l[h] || 0;
            break;
          case "%M":
            o2[1] = e2.locale.date.month_short_hash[l[h]] || 0;
            break;
          case "%F":
            o2[1] = e2.locale.date.month_full_hash[l[h]] || 0;
        }
      return s ? new Date(Date.UTC(o2[0], o2[1], o2[2], o2[3], o2[4], o2[5])) : new Date(o2[0], o2[1], o2[2], o2[3], o2[4], o2[5]);
    };
  };
  let r2;
  function d() {
    var n = false;
    return e2.config.csp === "auto" ? (r2 === void 0 && (r2 = function() {
      try {
        new Function("cspEnabled = false;"), r2 = false;
      } catch {
        r2 = true;
      }
      return r2;
    }()), n = r2) : n = e2.config.csp, n;
  }
  e2.date = { init: function() {
    for (var n = e2.locale.date.month_short, s = e2.locale.date.month_short_hash = {}, _ = 0; _ < n.length; _++)
      s[n[_]] = _;
    for (n = e2.locale.date.month_full, s = e2.locale.date.month_full_hash = {}, _ = 0; _ < n.length; _++)
      s[n[_]] = _;
  }, date_part: function(n) {
    var s = new Date(n);
    return n.setHours(0), n.setMinutes(0), n.setSeconds(0), n.setMilliseconds(0), n.getHours() && (n.getDate() < s.getDate() || n.getMonth() < s.getMonth() || n.getFullYear() < s.getFullYear()) && n.setTime(n.getTime() + 36e5 * (24 - n.getHours())), n;
  }, time_part: function(n) {
    return (n.valueOf() / 1e3 - 60 * n.getTimezoneOffset()) % 86400;
  }, week_start: function(n) {
    var s = n.getDay();
    return e2.config.start_on_monday && (s === 0 ? s = 6 : s--), this.date_part(this.add(n, -1 * s, "day"));
  }, month_start: function(n) {
    return n.setDate(1), this.date_part(n);
  }, year_start: function(n) {
    return n.setMonth(0), this.month_start(n);
  }, day_start: function(n) {
    return this.date_part(n);
  }, _add_days: function(n, s) {
    var _ = new Date(n.valueOf());
    if (_.setDate(_.getDate() + s), s == Math.round(s) && s > 0) {
      var a2 = (+_ - +n) % 864e5;
      if (a2 && n.getTimezoneOffset() == _.getTimezoneOffset()) {
        var o2 = a2 / 36e5;
        _.setTime(_.getTime() + 60 * (24 - o2) * 60 * 1e3);
      }
    }
    return s >= 0 && !n.getHours() && _.getHours() && (_.getDate() < n.getDate() || _.getMonth() < n.getMonth() || _.getFullYear() < n.getFullYear()) && _.setTime(_.getTime() + 36e5 * (24 - _.getHours())), _;
  }, add: function(n, s, _) {
    var a2 = new Date(n.valueOf());
    switch (_) {
      case "day":
        a2 = e2.date._add_days(a2, s);
        break;
      case "week":
        a2 = e2.date._add_days(a2, 7 * s);
        break;
      case "month":
        a2.setMonth(a2.getMonth() + s);
        break;
      case "year":
        a2.setYear(a2.getFullYear() + s);
        break;
      case "hour":
        a2.setTime(a2.getTime() + 60 * s * 60 * 1e3);
        break;
      case "minute":
        a2.setTime(a2.getTime() + 60 * s * 1e3);
        break;
      default:
        return e2.date["add_" + _](n, s, _);
    }
    return a2;
  }, to_fixed: function(n) {
    return n < 10 ? "0" + n : n;
  }, copy: function(n) {
    return new Date(n.valueOf());
  }, date_to_str: function(n, s) {
    return d() ? /* @__PURE__ */ function(_, a2) {
      return function(o2) {
        return _.replace(/%[a-zA-Z]/g, function(l) {
          switch (l) {
            case "%d":
              return a2 ? e2.date.to_fixed(o2.getUTCDate()) : e2.date.to_fixed(o2.getDate());
            case "%m":
              return a2 ? e2.date.to_fixed(o2.getUTCMonth() + 1) : e2.date.to_fixed(o2.getMonth() + 1);
            case "%j":
              return a2 ? o2.getUTCDate() : o2.getDate();
            case "%n":
              return a2 ? o2.getUTCMonth() + 1 : o2.getMonth() + 1;
            case "%y":
              return a2 ? e2.date.to_fixed(o2.getUTCFullYear() % 100) : e2.date.to_fixed(o2.getFullYear() % 100);
            case "%Y":
              return a2 ? o2.getUTCFullYear() : o2.getFullYear();
            case "%D":
              return a2 ? e2.locale.date.day_short[o2.getUTCDay()] : e2.locale.date.day_short[o2.getDay()];
            case "%l":
              return a2 ? e2.locale.date.day_full[o2.getUTCDay()] : e2.locale.date.day_full[o2.getDay()];
            case "%M":
              return a2 ? e2.locale.date.month_short[o2.getUTCMonth()] : e2.locale.date.month_short[o2.getMonth()];
            case "%F":
              return a2 ? e2.locale.date.month_full[o2.getUTCMonth()] : e2.locale.date.month_full[o2.getMonth()];
            case "%h":
              return a2 ? e2.date.to_fixed((o2.getUTCHours() + 11) % 12 + 1) : e2.date.to_fixed((o2.getHours() + 11) % 12 + 1);
            case "%g":
              return a2 ? (o2.getUTCHours() + 11) % 12 + 1 : (o2.getHours() + 11) % 12 + 1;
            case "%G":
              return a2 ? o2.getUTCHours() : o2.getHours();
            case "%H":
              return a2 ? e2.date.to_fixed(o2.getUTCHours()) : e2.date.to_fixed(o2.getHours());
            case "%i":
              return a2 ? e2.date.to_fixed(o2.getUTCMinutes()) : e2.date.to_fixed(o2.getMinutes());
            case "%a":
              return a2 ? o2.getUTCHours() > 11 ? "pm" : "am" : o2.getHours() > 11 ? "pm" : "am";
            case "%A":
              return a2 ? o2.getUTCHours() > 11 ? "PM" : "AM" : o2.getHours() > 11 ? "PM" : "AM";
            case "%s":
              return a2 ? e2.date.to_fixed(o2.getUTCSeconds()) : e2.date.to_fixed(o2.getSeconds());
            case "%W":
              return a2 ? e2.date.to_fixed(e2.date.getUTCISOWeek(o2)) : e2.date.to_fixed(e2.date.getISOWeek(o2));
            default:
              return l;
          }
        });
      };
    }(n, s) : (n = n.replace(/%[a-zA-Z]/g, function(_) {
      switch (_) {
        case "%d":
          return '"+this.date.to_fixed(date.getDate())+"';
        case "%m":
          return '"+this.date.to_fixed((date.getMonth()+1))+"';
        case "%j":
          return '"+date.getDate()+"';
        case "%n":
          return '"+(date.getMonth()+1)+"';
        case "%y":
          return '"+this.date.to_fixed(date.getFullYear()%100)+"';
        case "%Y":
          return '"+date.getFullYear()+"';
        case "%D":
          return '"+this.locale.date.day_short[date.getDay()]+"';
        case "%l":
          return '"+this.locale.date.day_full[date.getDay()]+"';
        case "%M":
          return '"+this.locale.date.month_short[date.getMonth()]+"';
        case "%F":
          return '"+this.locale.date.month_full[date.getMonth()]+"';
        case "%h":
          return '"+this.date.to_fixed((date.getHours()+11)%12+1)+"';
        case "%g":
          return '"+((date.getHours()+11)%12+1)+"';
        case "%G":
          return '"+date.getHours()+"';
        case "%H":
          return '"+this.date.to_fixed(date.getHours())+"';
        case "%i":
          return '"+this.date.to_fixed(date.getMinutes())+"';
        case "%a":
          return '"+(date.getHours()>11?"pm":"am")+"';
        case "%A":
          return '"+(date.getHours()>11?"PM":"AM")+"';
        case "%s":
          return '"+this.date.to_fixed(date.getSeconds())+"';
        case "%W":
          return '"+this.date.to_fixed(this.date.getISOWeek(date))+"';
        default:
          return _;
      }
    }), s && (n = n.replace(/date\.get/g, "date.getUTC")), new Function("date", 'return "' + n + '";').bind(e2));
  }, str_to_date: function(n, s, _) {
    var a2 = d() ? t2 : i, o2 = a2(n, s), l = /^[0-9]{4}(\-|\/)[0-9]{2}(\-|\/)[0-9]{2} ?(([0-9]{1,2}:[0-9]{1,2})(:[0-9]{1,2})?)?$/, h = /^[0-9]{2}\/[0-9]{2}\/[0-9]{4} ?(([0-9]{1,2}:[0-9]{2})(:[0-9]{1,2})?)?$/, v = /^[0-9]{2}\-[0-9]{2}\-[0-9]{4} ?(([0-9]{1,2}:[0-9]{1,2})(:[0-9]{1,2})?)?$/, u = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/, f = a2("%Y-%m-%d %H:%i:%s", s), c2 = a2("%m/%d/%Y %H:%i:%s", s), p = a2("%d-%m-%Y %H:%i:%s", s);
    return function(m) {
      if (!_ && !e2.config.parse_exact_format) {
        if (m && m.getISOWeek)
          return new Date(m);
        if (typeof m == "number")
          return new Date(m);
        if (g = m, l.test(String(g)))
          return f(m);
        if (function(y2) {
          return h.test(String(y2));
        }(m))
          return c2(m);
        if (function(y2) {
          return v.test(String(y2));
        }(m))
          return p(m);
        if (function(y2) {
          return u.test(y2);
        }(m))
          return new Date(m);
      }
      var g;
      return o2.call(e2, m);
    };
  }, getISOWeek: function(n) {
    if (!n)
      return false;
    var s = (n = this.date_part(new Date(n))).getDay();
    s === 0 && (s = 7);
    var _ = new Date(n.valueOf());
    _.setDate(n.getDate() + (4 - s));
    var a2 = _.getFullYear(), o2 = Math.round((_.getTime() - new Date(a2, 0, 1).getTime()) / 864e5);
    return 1 + Math.floor(o2 / 7);
  }, getUTCISOWeek: function(n) {
    return this.getISOWeek(this.convert_to_utc(n));
  }, convert_to_utc: function(n) {
    return new Date(n.getUTCFullYear(), n.getUTCMonth(), n.getUTCDate(), n.getUTCHours(), n.getUTCMinutes(), n.getUTCSeconds());
  } };
}
function mt(e2) {
  return function() {
    var i = {};
    for (var t2 in this._events) {
      var r2 = this._events[t2];
      r2.id.toString().indexOf("#") == -1 && (i[r2.id] = r2);
    }
    return i;
  }.bind(e2);
}
function Vt(e2) {
  e2._loaded = {}, e2._load = function(t2, r2) {
    if (t2 = t2 || this._load_url) {
      var d;
      if (t2 += (t2.indexOf("?") == -1 ? "?" : "&") + "timeshift=" + (/* @__PURE__ */ new Date()).getTimezoneOffset(), this.config.prevent_cache && (t2 += "&uid=" + this.uid()), r2 = r2 || this._date, this._load_mode) {
        var n = this.templates.load_format;
        for (r2 = this.date[this._load_mode + "_start"](new Date(r2.valueOf())); r2 > this._min_date; )
          r2 = this.date.add(r2, -1, this._load_mode);
        d = r2;
        for (var s = true; d < this._max_date; )
          d = this.date.add(d, 1, this._load_mode), this._loaded[n(r2)] && s ? r2 = this.date.add(r2, 1, this._load_mode) : s = false;
        var _ = d;
        do
          d = _, _ = this.date.add(d, -1, this._load_mode);
        while (_ > r2 && this._loaded[n(_)]);
        if (d <= r2)
          return false;
        for (e2.ajax.get(t2 + "&from=" + n(r2) + "&to=" + n(d), a2); r2 < d; )
          this._loaded[n(r2)] = true, r2 = this.date.add(r2, 1, this._load_mode);
      } else
        e2.ajax.get(t2, a2);
      return this.callEvent("onXLS", []), this.callEvent("onLoadStart", []), true;
    }
    function a2(o2) {
      e2.on_load(o2), e2.callEvent("onLoadEnd", []);
    }
  }, e2._parsers = {}, function(t2) {
    t2._parsers.xml = { canParse: function(r2, d) {
      if (d.responseXML && d.responseXML.firstChild)
        return true;
      try {
        var n = t2.ajax.parse(d.responseText), s = t2.ajax.xmltop("data", n);
        if (s && s.tagName === "data")
          return true;
      } catch {
      }
      return false;
    }, parse: function(r2) {
      var d;
      if (r2.xmlDoc.responseXML || (r2.xmlDoc.responseXML = t2.ajax.parse(r2.xmlDoc.responseText)), (d = t2.ajax.xmltop("data", r2.xmlDoc)).tagName != "data")
        return null;
      var n = d.getAttribute("dhx_security");
      n && (window.dhtmlx && (window.dhtmlx.security_key = n), t2.security_key = n);
      for (var s = t2.ajax.xpath("//coll_options", r2.xmlDoc), _ = 0; _ < s.length; _++) {
        var a2 = s[_].getAttribute("for"), o2 = t2.serverList[a2];
        o2 || (t2.serverList[a2] = o2 = []), o2.splice(0, o2.length);
        for (var l = t2.ajax.xpath(".//item", s[_]), h = 0; h < l.length; h++) {
          for (var v = l[h].attributes, u = { key: l[h].getAttribute("value"), label: l[h].getAttribute("label") }, f = 0; f < v.length; f++) {
            var c2 = v[f];
            c2.nodeName != "value" && c2.nodeName != "label" && (u[c2.nodeName] = c2.nodeValue);
          }
          o2.push(u);
        }
      }
      s.length && t2.callEvent("onOptionsLoad", []);
      var p = t2.ajax.xpath("//userdata", r2.xmlDoc);
      for (_ = 0; _ < p.length; _++) {
        var m = t2._xmlNodeToJSON(p[_]);
        t2._userdata[m.name] = m.text;
      }
      var g = [];
      for (d = t2.ajax.xpath("//event", r2.xmlDoc), _ = 0; _ < d.length; _++) {
        var y2 = g[_] = t2._xmlNodeToJSON(d[_]);
        t2._init_event(y2);
      }
      return g;
    } };
  }(e2), function(t2) {
    t2.json = t2._parsers.json = { canParse: function(r2) {
      if (r2 && typeof r2 == "object")
        return true;
      if (typeof r2 == "string")
        try {
          var d = JSON.parse(r2);
          return Object.prototype.toString.call(d) === "[object Object]" || Object.prototype.toString.call(d) === "[object Array]";
        } catch {
          return false;
        }
      return false;
    }, parse: function(r2) {
      var d = [];
      typeof r2 == "string" && (r2 = JSON.parse(r2)), Object.prototype.toString.call(r2) === "[object Array]" ? d = r2 : r2 && (r2.events ? d = r2.events : r2.data && (d = r2.data)), d = d || [], r2.dhx_security && (window.dhtmlx && (window.dhtmlx.security_key = r2.dhx_security), t2.security_key = r2.dhx_security);
      var n = r2 && r2.collections ? r2.collections : {}, s = false;
      for (var _ in n)
        if (n.hasOwnProperty(_)) {
          s = true;
          var a2 = n[_], o2 = t2.serverList[_];
          o2 || (t2.serverList[_] = o2 = []), o2.splice(0, o2.length);
          for (var l = 0; l < a2.length; l++) {
            var h = a2[l], v = { key: h.value, label: h.label };
            for (var u in h)
              if (h.hasOwnProperty(u)) {
                if (u == "value" || u == "label")
                  continue;
                v[u] = h[u];
              }
            o2.push(v);
          }
        }
      s && t2.callEvent("onOptionsLoad", []);
      for (var f = [], c2 = 0; c2 < d.length; c2++) {
        var p = d[c2];
        t2._init_event(p), f.push(p);
      }
      return f;
    } };
  }(e2), function(t2) {
    t2.ical = t2._parsers.ical = { canParse: function(r2) {
      return typeof r2 == "string" && new RegExp("^BEGIN:VCALENDAR").test(r2);
    }, parse: function(r2) {
      var d = r2.match(RegExp(this.c_start + "[^\f]*" + this.c_end, ""));
      if (d.length) {
        d[0] = d[0].replace(/[\r\n]+ /g, ""), d[0] = d[0].replace(/[\r\n]+(?=[a-z \t])/g, " "), d[0] = d[0].replace(/;[^:\r\n]*:/g, ":");
        for (var n, s = [], _ = RegExp("(?:" + this.e_start + ")([^\f]*?)(?:" + this.e_end + ")", "g"); (n = _.exec(d)) !== null; ) {
          for (var a2, o2 = {}, l = /[^\r\n]+[\r\n]+/g; (a2 = l.exec(n[1])) !== null; )
            this.parse_param(a2.toString(), o2);
          o2.uid && !o2.id && (o2.id = o2.uid), s.push(o2);
        }
        return s;
      }
    }, parse_param: function(r2, d) {
      var n = r2.indexOf(":");
      if (n != -1) {
        var s = r2.substr(0, n).toLowerCase(), _ = r2.substr(n + 1).replace(/\\,/g, ",").replace(/[\r\n]+$/, "");
        s == "summary" ? s = "text" : s == "dtstart" ? (s = "start_date", _ = this.parse_date(_, 0, 0)) : s == "dtend" && (s = "end_date", _ = this.parse_date(_, 0, 0)), d[s] = _;
      }
    }, parse_date: function(r2, d, n) {
      var s = r2.split("T"), _ = false;
      s[1] && (d = s[1].substr(0, 2), n = s[1].substr(2, 2), _ = s[1][6] == "Z");
      var a2 = s[0].substr(0, 4), o2 = parseInt(s[0].substr(4, 2), 10) - 1, l = s[0].substr(6, 2);
      return t2.config.server_utc || _ ? new Date(Date.UTC(a2, o2, l, d, n)) : new Date(a2, o2, l, d, n);
    }, c_start: "BEGIN:VCALENDAR", e_start: "BEGIN:VEVENT", e_end: "END:VEVENT", c_end: "END:VCALENDAR" };
  }(e2), e2.on_load = function(t2) {
    var r2;
    this.callEvent("onBeforeParse", []);
    var d = false, n = false;
    for (var s in this._parsers) {
      var _ = this._parsers[s];
      if (_.canParse(t2.xmlDoc.responseText, t2.xmlDoc)) {
        try {
          var a2 = t2.xmlDoc.responseText;
          s === "xml" && (a2 = t2), (r2 = _.parse(a2)) || (d = true);
        } catch {
          d = true;
        }
        n = true;
        break;
      }
    }
    if (!n)
      if (this._process && this[this._process])
        try {
          r2 = this[this._process].parse(t2.xmlDoc.responseText);
        } catch {
          d = true;
        }
      else
        d = true;
    (d || t2.xmlDoc.status && t2.xmlDoc.status >= 400) && (this.callEvent("onLoadError", [t2.xmlDoc]), r2 = []), this._process_loading(r2), this.callEvent("onXLE", []), this.callEvent("onParse", []);
  }, e2._process_loading = function(t2) {
    this._loading = true, this._not_render = true;
    for (var r2 = 0; r2 < t2.length; r2++)
      this.callEvent("onEventLoading", [t2[r2]]) && this.addEvent(t2[r2]);
    this._not_render = false, this._render_wait && this.render_view_data(), this._loading = false, this._after_call && this._after_call(), this._after_call = null;
  }, e2._init_event = function(t2) {
    t2.text = t2.text || t2._tagvalue || "", t2.start_date = e2._init_date(t2.start_date), t2.end_date = e2._init_date(t2.end_date);
  }, e2._init_date = function(t2) {
    return t2 ? typeof t2 == "string" ? e2._helpers.parseDate(t2) : new Date(t2) : null;
  };
  const i = mt(e2);
  e2.serialize = function() {
    const t2 = [], r2 = i();
    for (var d in r2) {
      const _ = {};
      var n = r2[d];
      for (var s in n) {
        if (s.charAt(0) == "$" || s.charAt(0) == "_")
          continue;
        let a2;
        const o2 = n[s];
        a2 = e2.utils.isDate(o2) ? e2.defined(e2.templates.xml_format) ? e2.templates.xml_format(o2) : e2.templates.format_date(o2) : o2, _[s] = a2;
      }
      t2.push(_);
    }
    return t2;
  }, e2.parse = function(t2, r2) {
    this._process = r2, this.on_load({ xmlDoc: { responseText: t2 } });
  }, e2.load = function(t2, r2) {
    typeof r2 == "string" && (this._process = r2, r2 = arguments[2]), this._load_url = t2, this._after_call = r2, this._load(t2, this._date);
  }, e2.setLoadMode = function(t2) {
    t2 == "all" && (t2 = ""), this._load_mode = t2;
  }, e2.serverList = function(t2, r2) {
    return r2 ? (this.serverList[t2] = r2.slice(0), this.serverList[t2]) : (this.serverList[t2] = this.serverList[t2] || [], this.serverList[t2]);
  }, e2._userdata = {}, e2._xmlNodeToJSON = function(t2) {
    for (var r2 = {}, d = 0; d < t2.attributes.length; d++)
      r2[t2.attributes[d].name] = t2.attributes[d].value;
    for (d = 0; d < t2.childNodes.length; d++) {
      var n = t2.childNodes[d];
      n.nodeType == 1 && (r2[n.tagName] = n.firstChild ? n.firstChild.nodeValue : "");
    }
    return r2.text || (r2.text = t2.firstChild ? t2.firstChild.nodeValue : ""), r2;
  }, e2.attachEvent("onXLS", function() {
    var t2;
    this.config.show_loading === true && ((t2 = this.config.show_loading = document.createElement("div")).className = "dhx_loading", t2.style.left = Math.round((this._x - 128) / 2) + "px", t2.style.top = Math.round((this._y - 15) / 2) + "px", this._obj.appendChild(t2));
  }), e2.attachEvent("onXLE", function() {
    var t2 = this.config.show_loading;
    t2 && typeof t2 == "object" && (t2.parentNode && t2.parentNode.removeChild(t2), this.config.show_loading = true);
  });
}
function Bt(e2) {
  e2._init_touch_events = function() {
    if ((this.config.touch && (navigator.userAgent.indexOf("Mobile") != -1 || navigator.userAgent.indexOf("iPad") != -1 || navigator.userAgent.indexOf("Android") != -1 || navigator.userAgent.indexOf("Touch") != -1) && !window.MSStream || navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) && (this.xy.scroll_width = 0, this._mobile = true), this.config.touch) {
      var i = true;
      try {
        document.createEvent("TouchEvent");
      } catch {
        i = false;
      }
      i ? this._touch_events(["touchmove", "touchstart", "touchend"], function(t2) {
        return t2.touches && t2.touches.length > 1 ? null : t2.touches[0] ? { target: t2.target, pageX: t2.touches[0].pageX, pageY: t2.touches[0].pageY, clientX: t2.touches[0].clientX, clientY: t2.touches[0].clientY } : t2;
      }, function() {
        return false;
      }) : window.PointerEvent || window.navigator.pointerEnabled ? this._touch_events(["pointermove", "pointerdown", "pointerup"], function(t2) {
        return t2.pointerType == "mouse" ? null : t2;
      }, function(t2) {
        return !t2 || t2.pointerType == "mouse";
      }) : window.navigator.msPointerEnabled && this._touch_events(["MSPointerMove", "MSPointerDown", "MSPointerUp"], function(t2) {
        return t2.pointerType == t2.MSPOINTER_TYPE_MOUSE ? null : t2;
      }, function(t2) {
        return !t2 || t2.pointerType == t2.MSPOINTER_TYPE_MOUSE;
      });
    }
  }, e2._touch_events = function(i, t2, r2) {
    var d, n, s, _, a2, o2, l = 0;
    function h(u, f, c2) {
      e2.event(u, f, function(p) {
        return !!e2._is_lightbox_open() || (r2(p) ? void 0 : c2(p));
      }, { passive: false });
    }
    function v(u) {
      r2(u) || (e2._hide_global_tip(), _ && (e2._on_mouse_up(t2(u)), e2._temp_touch_block = false), e2._drag_id = null, e2._drag_mode = null, e2._drag_pos = null, e2._pointerDragId = null, clearTimeout(s), _ = o2 = false, a2 = true);
    }
    h(document.body, i[0], function(u) {
      if (!r2(u)) {
        var f = t2(u);
        if (f) {
          if (_)
            return function(c2) {
              if (!r2(c2)) {
                var p = e2.getState().drag_mode, m = !!e2.matrix && e2.matrix[e2._mode], g = e2.render_view_data;
                p == "create" && m && (e2.render_view_data = function() {
                  for (var y2 = e2.getState().drag_id, x = e2.getEvent(y2), b = m.y_property, k = e2.getEvents(x.start_date, x.end_date), E = 0; E < k.length; E++)
                    k[E][b] != x[b] && (k.splice(E, 1), E--);
                  x._sorder = k.length - 1, x._count = k.length, this.render_data([x], e2.getState().mode);
                }), e2._on_mouse_move(c2), p == "create" && m && (e2.render_view_data = g), c2.preventDefault && c2.preventDefault(), c2.cancelBubble = true;
              }
            }(f), u.preventDefault && u.preventDefault(), u.cancelBubble = true, e2._update_global_tip(), false;
          n = t2(u), o2 && (n ? (d.target != n.target || Math.abs(d.pageX - n.pageX) > 5 || Math.abs(d.pageY - n.pageY) > 5) && (a2 = true, clearTimeout(s)) : a2 = true);
        }
      }
    }), h(this._els.dhx_cal_data[0], "touchcancel", v), h(this._els.dhx_cal_data[0], "contextmenu", function(u) {
      if (!r2(u))
        return o2 ? (u && u.preventDefault && u.preventDefault(), u.cancelBubble = true, false) : void 0;
    }), h(this._obj, i[1], function(u) {
      var f;
      if (document && document.body && document.body.classList.add("dhx_cal_touch_active"), !r2(u))
        if (e2._pointerDragId = u.pointerId, _ = a2 = false, o2 = true, f = n = t2(u)) {
          var c2 = /* @__PURE__ */ new Date();
          if (!a2 && !_ && c2 - l < 250)
            return e2._click.dhx_cal_data(f), window.setTimeout(function() {
              e2.$destroyed || e2._on_dbl_click(f);
            }, 50), u.preventDefault && u.preventDefault(), u.cancelBubble = true, e2._block_next_stop = true, false;
          if (l = c2, !a2 && !_ && e2.config.touch_drag) {
            var p = e2._locate_event(document.activeElement), m = e2._locate_event(f.target), g = d ? e2._locate_event(d.target) : null;
            if (p && m && p == m && p != g)
              return u.preventDefault && u.preventDefault(), u.cancelBubble = true, e2._ignore_next_click = false, e2._click.dhx_cal_data(f), d = f, false;
            s = setTimeout(function() {
              if (!e2.$destroyed) {
                _ = true;
                var y2 = d.target, x = e2._getClassName(y2);
                y2 && x.indexOf("dhx_body") != -1 && (y2 = y2.previousSibling), e2._on_mouse_down(d, y2), e2._drag_mode && e2._drag_mode != "create" && e2.for_rendered(e2._drag_id, function(b, k) {
                  b.style.display = "none", e2._rendered.splice(k, 1);
                }), e2.config.touch_tip && e2._show_global_tip(), e2.updateEvent(e2._drag_id);
              }
            }, e2.config.touch_drag), d = f;
          }
        } else
          a2 = true;
    }), h(this._els.dhx_cal_data[0], i[2], function(u) {
      if (document && document.body && document.body.classList.remove("dhx_cal_touch_active"), !r2(u))
        return e2.config.touch_swipe_dates && !_ && function(f, c2, p, m) {
          if (!f || !c2)
            return false;
          for (var g = f.target; g && g != e2._obj; )
            g = g.parentNode;
          if (g != e2._obj || e2.matrix && e2.matrix[e2.getState().mode] && e2.matrix[e2.getState().mode].scrollable)
            return false;
          var y2 = Math.abs(f.pageY - c2.pageY), x = Math.abs(f.pageX - c2.pageX);
          return y2 < m && x > p && (!y2 || x / y2 > 3) && (f.pageX > c2.pageX ? e2._click.dhx_cal_next_button() : e2._click.dhx_cal_prev_button(), true);
        }(d, n, 200, 100) && (e2._block_next_stop = true), _ && (e2._ignore_next_click = true, setTimeout(function() {
          e2._ignore_next_click = false;
        }, 100)), v(u), e2._block_next_stop ? (e2._block_next_stop = false, u.preventDefault && u.preventDefault(), u.cancelBubble = true, false) : void 0;
    }), e2.event(document.body, i[2], v);
  }, e2._show_global_tip = function() {
    e2._hide_global_tip();
    var i = e2._global_tip = document.createElement("div");
    i.className = "dhx_global_tip", e2._update_global_tip(1), document.body.appendChild(i);
  }, e2._update_global_tip = function(i) {
    var t2 = e2._global_tip;
    if (t2) {
      var r2 = "";
      if (e2._drag_id && !i) {
        var d = e2.getEvent(e2._drag_id);
        d && (r2 = "<div>" + (d._timed ? e2.templates.event_header(d.start_date, d.end_date, d) : e2.templates.day_date(d.start_date, d.end_date, d)) + "</div>");
      }
      e2._drag_mode == "create" || e2._drag_mode == "new-size" ? t2.innerHTML = (e2.locale.labels.drag_to_create || "Drag to create") + r2 : t2.innerHTML = (e2.locale.labels.drag_to_move || "Drag to move") + r2;
    }
  }, e2._hide_global_tip = function() {
    var i = e2._global_tip;
    i && i.parentNode && (i.parentNode.removeChild(i), e2._global_tip = 0);
  };
}
function Ft(e2) {
  var i, t2;
  function r2() {
    if (e2._is_material_skin())
      return true;
    if (t2 !== void 0)
      return t2;
    var _ = document.createElement("div");
    _.style.position = "absolute", _.style.left = "-9999px", _.style.top = "-9999px", _.innerHTML = "<div class='dhx_cal_container'><div class='dhx_cal_data'><div class='dhx_cal_event'><div class='dhx_body'></div></div><div>", document.body.appendChild(_);
    var a2 = window.getComputedStyle(_.querySelector(".dhx_body")).getPropertyValue("box-sizing");
    document.body.removeChild(_), (t2 = a2 === "border-box") || setTimeout(function() {
      t2 = void 0;
    }, 1e3);
  }
  function d() {
    if (!e2._is_material_skin() && !e2._border_box_events()) {
      var _ = t2;
      t2 = void 0, i = void 0, _ !== r2() && e2.$container && e2.getState().mode && e2.setCurrentView();
    }
  }
  function n(_) {
    var a2 = _.getMinutes();
    return a2 = a2 < 10 ? "0" + a2 : a2, "<span class='dhx_scale_h'>" + _.getHours() + "</span><span class='dhx_scale_m'>&nbsp;" + a2 + "</span>";
  }
  e2._addThemeClass = function() {
    document.documentElement.setAttribute("data-scheduler-theme", e2.skin);
  }, e2._skin_settings = { fix_tab_position: [1, 0], use_select_menu_space: [1, 0], wide_form: [1, 0], hour_size_px: [44, 42], displayed_event_color: ["#ff4a4a", "ffc5ab"], displayed_event_text_color: ["#ffef80", "7e2727"] }, e2._skin_xy = { lightbox_additional_height: [90, 50], nav_height: [59, 22], bar_height: [24, 20] }, e2._is_material_skin = function() {
    return e2.skin ? (e2.skin + "").indexOf("material") > -1 : function() {
      if (i === void 0) {
        var _ = document.createElement("div");
        _.style.position = "absolute", _.style.left = "-9999px", _.style.top = "-9999px", _.innerHTML = "<div class='dhx_cal_container'><div class='dhx_cal_scale_placeholder'></div><div>", document.body.appendChild(_);
        var a2 = window.getComputedStyle(_.querySelector(".dhx_cal_scale_placeholder")).getPropertyValue("position");
        i = a2 === "absolute", setTimeout(function() {
          i = null, _ && _.parentNode && _.parentNode.removeChild(_);
        }, 500);
      }
      return i;
    }();
  }, e2._build_skin_info = function() {
    (function() {
      const u = e2.$container;
      clearInterval(s), u && (s = setInterval(() => {
        const f = getComputedStyle(u).getPropertyValue("--dhx-scheduler-theme");
        f && f !== e2.skin && e2.setSkin(f);
      }, 100));
    })();
    const _ = getComputedStyle(this.$container), a2 = _.getPropertyValue("--dhx-scheduler-theme");
    let o2, l = !!a2, h = {}, v = false;
    if (l) {
      o2 = a2;
      for (let u in e2.xy)
        h[u] = _.getPropertyValue(`--dhx-scheduler-xy-${u}`);
      h.hour_size_px = _.getPropertyValue("--dhx-scheduler-config-hour_size_px"), h.wide_form = _.getPropertyValue("--dhx-scheduler-config-form_wide");
    } else
      o2 = function() {
        for (var u = document.getElementsByTagName("link"), f = 0; f < u.length; f++) {
          var c2 = u[f].href.match("dhtmlxscheduler_([a-z]+).css");
          if (c2)
            return c2[1];
        }
      }(), v = e2._is_material_skin();
    if (e2._theme_info = { theme: o2, cssVarTheme: l, oldMaterialTheme: v, values: h }, e2._theme_info.cssVarTheme) {
      const u = this._theme_info.values;
      for (let f in e2.xy)
        isNaN(parseInt(u[f])) || (e2.xy[f] = parseInt(u[f]));
    }
  }, e2.event(window, "DOMContentLoaded", d), e2.event(window, "load", d), e2._border_box_events = function() {
    return r2();
  }, e2._configure = function(_, a2, o2) {
    for (var l in a2)
      _[l] === void 0 && (_[l] = a2[l][o2]);
  }, e2.setSkin = function(_) {
    this.skin = _, e2._addThemeClass(), e2.$container && (this._skin_init(), this.render());
  };
  let s = null;
  e2.attachEvent("onDestroy", function() {
    clearInterval(s);
  }), e2._skin_init = function() {
    this._build_skin_info(), this.skin || (this.skin = this._theme_info.theme), e2._addThemeClass(), e2.skin === "flat" ? e2.templates.hour_scale = n : e2.templates.hour_scale === n && (e2.templates.hour_scale = e2.date.date_to_str(e2.config.hour_date)), e2.attachEvent("onTemplatesReady", function() {
      var _ = e2.date.date_to_str("%d");
      e2.templates._old_month_day || (e2.templates._old_month_day = e2.templates.month_day);
      var a2 = e2.templates._old_month_day;
      e2.templates.month_day = function(o2) {
        if (this._mode == "month") {
          var l = _(o2);
          return o2.getDate() == 1 && (l = e2.locale.date.month_full[o2.getMonth()] + " " + l), +o2 == +e2.date.date_part(this._currentDate()) && (l = e2.locale.labels.dhx_cal_today_button + " " + l), l;
        }
        return a2.call(this, o2);
      }, e2.config.fix_tab_position && (e2._els.dhx_cal_navline[0].querySelectorAll("[data-tab]").forEach((o2) => {
        switch (o2.getAttribute("data-tab") || o2.getAttribute("name")) {
          case "day":
          case "day_tab":
            o2.classList.add("dhx_cal_tab_first"), o2.classList.add("dhx_cal_tab_segmented");
            break;
          case "week":
          case "week_tab":
            o2.classList.add("dhx_cal_tab_segmented");
            break;
          case "month":
          case "month_tab":
            o2.classList.add("dhx_cal_tab_last"), o2.classList.add("dhx_cal_tab_segmented");
            break;
          default:
            o2.classList.add("dhx_cal_tab_standalone");
        }
      }), function(o2) {
        if (e2.config.header)
          return;
        const l = Array.from(o2.querySelectorAll(".dhx_cal_tab")), h = ["day", "week", "month"].map((u) => l.find((f) => f.getAttribute("data-tab") === u)).filter((u) => u !== void 0);
        let v = l.length > 0 ? l[0] : null;
        h.reverse().forEach((u) => {
          o2.insertBefore(u, v), v = u;
        });
      }(e2._els.dhx_cal_navline[0]));
    }, { once: true });
  };
}
function Jt(e2, i) {
  this.$scheduler = e2, this.$dp = i, this._dataProcessorHandlers = [], this.attach = function() {
    var t2 = this.$dp, r2 = this.$scheduler;
    this._dataProcessorHandlers.push(r2.attachEvent("onEventAdded", function(d) {
      !this._loading && this._validId(d) && t2.setUpdated(d, true, "inserted");
    })), this._dataProcessorHandlers.push(r2.attachEvent("onConfirmedBeforeEventDelete", function(d) {
      if (this._validId(d)) {
        var n = t2.getState(d);
        return n == "inserted" || this._new_event ? (t2.setUpdated(d, false), true) : n != "deleted" && (n == "true_deleted" || (t2.setUpdated(d, true, "deleted"), false));
      }
    })), this._dataProcessorHandlers.push(r2.attachEvent("onEventChanged", function(d) {
      !this._loading && this._validId(d) && t2.setUpdated(d, true, "updated");
    })), this._dataProcessorHandlers.push(r2.attachEvent("onClearAll", function() {
      t2._in_progress = {}, t2._invalid = {}, t2.updatedRows = [], t2._waitMode = 0;
    })), t2.attachEvent("insertCallback", r2._update_callback), t2.attachEvent("updateCallback", r2._update_callback), t2.attachEvent("deleteCallback", function(d, n) {
      r2.getEvent(n) ? (r2.setUserData(n, this.action_param, "true_deleted"), r2.deleteEvent(n)) : r2._add_rec_marker && r2._update_callback(d, n);
    });
  }, this.detach = function() {
    for (var t2 in this._dataProcessorHandlers) {
      var r2 = this._dataProcessorHandlers[t2];
      this.$scheduler.detachEvent(r2);
    }
    this._dataProcessorHandlers = [];
  };
}
function He(e2) {
  return this.serverProcessor = e2, this.action_param = "!nativeeditor_status", this.object = null, this.updatedRows = [], this.autoUpdate = true, this.updateMode = "cell", this._tMode = "GET", this._headers = null, this._payload = null, this.post_delim = "_", this._waitMode = 0, this._in_progress = {}, this._invalid = {}, this.messages = [], this.styles = { updated: "font-weight:bold;", inserted: "font-weight:bold;", deleted: "text-decoration : line-through;", invalid: "background-color:FFE0E0;", invalid_cell: "border-bottom:2px solid red;", error: "color:red;", clear: "font-weight:normal;text-decoration:none;" }, this.enableUTFencoding(true), Ue(this), this;
}
function Wt(e2) {
  var i = "data-dhxbox", t2 = null;
  function r2(m, g) {
    var y2 = m.callback;
    f.hide(m.box), t2 = m.box = null, y2 && y2(g);
  }
  function d(m) {
    if (t2) {
      var g = m.which || m.keyCode, y2 = false;
      if (c2.keyboard) {
        if (g == 13 || g == 32) {
          var x = m.target || m.srcElement;
          _e.getClassName(x).indexOf("scheduler_popup_button") > -1 && x.click ? x.click() : (r2(t2, true), y2 = true);
        }
        g == 27 && (r2(t2, false), y2 = true);
      }
      return y2 ? (m.preventDefault && m.preventDefault(), !(m.cancelBubble = true)) : void 0;
    }
  }
  function n(m) {
    n.cover || (n.cover = document.createElement("div"), e2.event(n.cover, "keydown", d), n.cover.className = "dhx_modal_cover", document.body.appendChild(n.cover)), n.cover.style.display = m ? "inline-block" : "none";
  }
  function s(m, g, y2) {
    var x = e2._waiAria.messageButtonAttrString(m), b = (g || "").toLowerCase().replace(/ /g, "_");
    return `<div ${x} class='scheduler_popup_button dhtmlx_popup_button ${`scheduler_${b}_button dhtmlx_${b}_button`}' data-result='${y2}' result='${y2}' ><div>${m}</div></div>`;
  }
  function _() {
    for (var m = [].slice.apply(arguments, [0]), g = 0; g < m.length; g++)
      if (m[g])
        return m[g];
  }
  function a2(m, g, y2) {
    var x = m.tagName ? m : function(E, D, w) {
      var S = document.createElement("div"), N = ee.uid();
      e2._waiAria.messageModalAttr(S, N), S.className = " scheduler_modal_box dhtmlx_modal_box scheduler-" + E.type + " dhtmlx-" + E.type, S.setAttribute(i, 1);
      var M = "";
      if (E.width && (S.style.width = E.width), E.height && (S.style.height = E.height), E.title && (M += '<div class="scheduler_popup_title dhtmlx_popup_title">' + E.title + "</div>"), M += '<div class="scheduler_popup_text dhtmlx_popup_text" id="' + N + '"><span>' + (E.content ? "" : E.text) + '</span></div><div  class="scheduler_popup_controls dhtmlx_popup_controls">', D && (M += s(_(E.ok, e2.locale.labels.message_ok, "OK"), "ok", true)), w && (M += s(_(E.cancel, e2.locale.labels.message_cancel, "Cancel"), "cancel", false)), E.buttons)
        for (var T = 0; T < E.buttons.length; T++) {
          var A = E.buttons[T];
          M += typeof A == "object" ? s(A.label, A.css || "scheduler_" + A.label.toLowerCase() + "_button dhtmlx_" + A.label.toLowerCase() + "_button", A.value || T) : s(A, A, T);
        }
      if (M += "</div>", S.innerHTML = M, E.content) {
        var H = E.content;
        typeof H == "string" && (H = document.getElementById(H)), H.style.display == "none" && (H.style.display = ""), S.childNodes[E.title ? 1 : 0].appendChild(H);
      }
      return e2.event(S, "click", function($) {
        var j = $.target || $.srcElement;
        if (j.className || (j = j.parentNode), _e.closest(j, ".scheduler_popup_button")) {
          var z = j.getAttribute("data-result");
          r2(E, z = z == "true" || z != "false" && z);
        }
      }), E.box = S, (D || w) && (t2 = E), S;
    }(m, g, y2);
    m.hidden || n(true), document.body.appendChild(x);
    var b = Math.abs(Math.floor(((window.innerWidth || document.documentElement.offsetWidth) - x.offsetWidth) / 2)), k = Math.abs(Math.floor(((window.innerHeight || document.documentElement.offsetHeight) - x.offsetHeight) / 2));
    return m.position == "top" ? x.style.top = "-3px" : x.style.top = k + "px", x.style.left = b + "px", e2.event(x, "keydown", d), f.focus(x), m.hidden && f.hide(x), e2.callEvent("onMessagePopup", [x]), x;
  }
  function o2(m) {
    return a2(m, true, false);
  }
  function l(m) {
    return a2(m, true, true);
  }
  function h(m) {
    return a2(m);
  }
  function v(m, g, y2) {
    return typeof m != "object" && (typeof g == "function" && (y2 = g, g = ""), m = { text: m, type: g, callback: y2 }), m;
  }
  function u(m, g, y2, x, b) {
    return typeof m != "object" && (m = { text: m, type: g, expire: y2, id: x, callback: b }), m.id = m.id || ee.uid(), m.expire = m.expire || c2.expire, m;
  }
  e2.event(document, "keydown", d, true);
  var f = function() {
    var m = v.apply(this, arguments);
    return m.type = m.type || "alert", h(m);
  };
  f.hide = function(m) {
    for (; m && m.getAttribute && !m.getAttribute(i); )
      m = m.parentNode;
    m && (m.parentNode.removeChild(m), n(false), e2.callEvent("onAfterMessagePopup", [m]));
  }, f.focus = function(m) {
    setTimeout(function() {
      var g = _e.getFocusableNodes(m);
      g.length && g[0].focus && g[0].focus();
    }, 1);
  };
  var c2 = function(m, g, y2, x) {
    switch ((m = u.apply(this, arguments)).type = m.type || "info", m.type.split("-")[0]) {
      case "alert":
        return o2(m);
      case "confirm":
        return l(m);
      case "modalbox":
        return h(m);
      default:
        return function(b) {
          c2.area || (c2.area = document.createElement("div"), c2.area.className = "scheduler_message_area dhtmlx_message_area", c2.area.style[c2.position] = "5px", document.body.appendChild(c2.area)), c2.hide(b.id);
          var k = document.createElement("div");
          return k.innerHTML = "<div>" + b.text + "</div>", k.className = "scheduler-info dhtmlx-info scheduler-" + b.type + " dhtmlx-" + b.type, e2.event(k, "click", function(E) {
            b.callback && b.callback.call(this, E), c2.hide(b.id), b = null;
          }), e2._waiAria.messageInfoAttr(k), c2.position == "bottom" && c2.area.firstChild ? c2.area.insertBefore(k, c2.area.firstChild) : c2.area.appendChild(k), b.expire > 0 && (c2.timers[b.id] = window.setTimeout(function() {
            c2 && c2.hide(b.id);
          }, b.expire)), c2.pull[b.id] = k, k = null, b.id;
        }(m);
    }
  };
  c2.seed = (/* @__PURE__ */ new Date()).valueOf(), c2.uid = ee.uid, c2.expire = 4e3, c2.keyboard = true, c2.position = "top", c2.pull = {}, c2.timers = {}, c2.hideAll = function() {
    for (var m in c2.pull)
      c2.hide(m);
  }, c2.hide = function(m) {
    var g = c2.pull[m];
    g && g.parentNode && (window.setTimeout(function() {
      g.parentNode.removeChild(g), g = null;
    }, 2e3), g.className += " hidden", c2.timers[m] && window.clearTimeout(c2.timers[m]), delete c2.pull[m]);
  };
  var p = [];
  return e2.attachEvent("onMessagePopup", function(m) {
    p.push(m);
  }), e2.attachEvent("onAfterMessagePopup", function(m) {
    for (var g = 0; g < p.length; g++)
      p[g] === m && (p.splice(g, 1), g--);
  }), e2.attachEvent("onDestroy", function() {
    n.cover && n.cover.parentNode && n.cover.parentNode.removeChild(n.cover);
    for (var m = 0; m < p.length; m++)
      p[m].parentNode && p[m].parentNode.removeChild(p[m]);
    p = null, c2.area && c2.area.parentNode && c2.area.parentNode.removeChild(c2.area), c2 = null;
  }), { alert: function() {
    var m = v.apply(this, arguments);
    return m.type = m.type || "confirm", o2(m);
  }, confirm: function() {
    var m = v.apply(this, arguments);
    return m.type = m.type || "alert", l(m);
  }, message: c2, modalbox: f };
}
function Sa(e2) {
  const i = { version: "7.1.1" };
  i.$stateProvider = /* @__PURE__ */ function() {
    const a2 = {};
    return { getState: function(o2) {
      if (a2[o2])
        return a2[o2].method();
      {
        const l = {};
        for (const h in a2)
          a2[h].internal || ee.mixin(l, a2[h].method(), true);
        return l;
      }
    }, registerProvider: function(o2, l, h) {
      a2[o2] = { method: l, internal: h };
    }, unregisterProvider: function(o2) {
      delete a2[o2];
    } };
  }(), i.getState = i.$stateProvider.getState, function(a2) {
    var o2 = { agenda: "https://docs.dhtmlx.com/scheduler/agenda_view.html", grid: "https://docs.dhtmlx.com/scheduler/grid_view.html", map: "https://docs.dhtmlx.com/scheduler/map_view.html", unit: "https://docs.dhtmlx.com/scheduler/units_view.html", timeline: "https://docs.dhtmlx.com/scheduler/timeline_view.html", week_agenda: "https://docs.dhtmlx.com/scheduler/weekagenda_view.html", year: "https://docs.dhtmlx.com/scheduler/year_view.html", anythingElse: "https://docs.dhtmlx.com/scheduler/views.html" }, l = { agenda: "ext/dhtmlxscheduler_agenda_view.js", grid: "ext/dhtmlxscheduler_grid_view.js", map: "ext/dhtmlxscheduler_map_view.js", unit: "ext/dhtmlxscheduler_units.js", timeline: "ext/dhtmlxscheduler_timeline.js, ext/dhtmlxscheduler_treetimeline.js, ext/dhtmlxscheduler_daytimeline.js", week_agenda: "ext/dhtmlxscheduler_week_agenda.js", year: "ext/dhtmlxscheduler_year_view.js", limit: "ext/dhtmlxscheduler_limit.js" };
    a2._commonErrorMessages = { unknownView: function(h) {
      var v = l[h] ? "You're probably missing " + l[h] + "." : "";
      return "`" + h + "` view is not defined. \nPlease check parameters you pass to `scheduler.init` or `scheduler.setCurrentView` in your code and ensure you've imported appropriate extensions. \nRelated docs: " + (o2[h] || o2.anythingElse) + `
` + (v ? v + `
` : "");
    }, collapsedContainer: function(h) {
      return `Scheduler container height is set to *100%* but the rendered height is zero and the scheduler is not visible. 
Make sure that the container has some initial height or use different units. For example:
<div id='scheduler_here' class='dhx_cal_container' style='width:100%; height:600px;'> 
`;
    } }, a2.createTimelineView = function() {
      throw new Error("scheduler.createTimelineView is not implemented. Be sure to add the required extension: " + l.timeline + `
Related docs: ` + o2.timeline);
    }, a2.createUnitsView = function() {
      throw new Error("scheduler.createUnitsView is not implemented. Be sure to add the required extension: " + l.unit + `
Related docs: ` + o2.unit);
    }, a2.createGridView = function() {
      throw new Error("scheduler.createGridView is not implemented. Be sure to add the required extension: " + l.grid + `
Related docs: ` + o2.grid);
    }, a2.addMarkedTimespan = function() {
      throw new Error(`scheduler.addMarkedTimespan is not implemented. Be sure to add the required extension: ext/dhtmlxscheduler_limit.js
Related docs: https://docs.dhtmlx.com/scheduler/limits.html`);
    }, a2.renderCalendar = function() {
      throw new Error(`scheduler.renderCalendar is not implemented. Be sure to add the required extension: ext/dhtmlxscheduler_minical.js
https://docs.dhtmlx.com/scheduler/minicalendar.html`);
    }, a2.exportToPNG = function() {
      throw new Error(["scheduler.exportToPNG is not implemented.", "This feature requires an additional module, be sure to check the related doc here https://docs.dhtmlx.com/scheduler/png.html", "Licensing info: https://dhtmlx.com/docs/products/dhtmlxScheduler/export.shtml"].join(`
`));
    }, a2.exportToPDF = function() {
      throw new Error(["scheduler.exportToPDF is not implemented.", "This feature requires an additional module, be sure to check the related doc here https://docs.dhtmlx.com/scheduler/pdf.html", "Licensing info: https://dhtmlx.com/docs/products/dhtmlxScheduler/export.shtml"].join(`
`));
    };
  }(i), zt(i), function(a2) {
    Ue(a2), Ot(a2), a2._detachDomEvent = function(c2, p, m) {
      c2.removeEventListener ? c2.removeEventListener(p, m, false) : c2.detachEvent && c2.detachEvent("on" + p, m);
    }, a2._init_once = function() {
      Lt(a2), a2._init_once = function() {
      };
    };
    const o2 = { render: function(c2) {
      return a2._init_nav_bar(c2);
    } }, l = { render: function(c2) {
      const p = document.createElement("div");
      return p.className = "dhx_cal_header", p;
    } }, h = { render: function(c2) {
      const p = document.createElement("div");
      return p.className = "dhx_cal_data", p;
    } };
    function v(c2) {
      return !!(c2.querySelector(".dhx_cal_header") && c2.querySelector(".dhx_cal_data") && c2.querySelector(".dhx_cal_navline"));
    }
    a2.init = function(c2, p, m) {
      if (!this.$destroyed) {
        if (p = p || a2._currentDate(), m = m || "week", this._obj && this.unset_actions(), this._obj = typeof c2 == "string" ? document.getElementById(c2) : c2, this.$container = this._obj, this.$root = this._obj, !this.$container.offsetHeight && this.$container.offsetWidth && this.$container.style.height === "100%" && window.console.error(a2._commonErrorMessages.collapsedContainer(), this.$container), this.config.wai_aria_attributes && this.config.wai_aria_application_role && this.$container.setAttribute("role", "application"), this.config.header || v(this.$container) || (this.config.header = function(g) {
          const y2 = ["day", "week", "month"];
          if (g.matrix)
            for (const x in g.matrix)
              y2.push(x);
          if (g._props)
            for (const x in g._props)
              y2.push(x);
          if (g._grid && g._grid.names)
            for (const x in g._grid.names)
              y2.push(x);
          return ["map", "agenda", "week_agenda", "year"].forEach(function(x) {
            g[x + "_view"] && y2.push(x);
          }), y2.concat(["date"]).concat(["prev", "today", "next"]);
        }(this), window.console.log(["Required DOM elements are missing from the scheduler container and **scheduler.config.header** is not specified.", "Using a default header configuration: ", "scheduler.config.header = " + JSON.stringify(this.config.header, null, 2), "Check this article for the details: https://docs.dhtmlx.com/scheduler/initialization.html"].join(`
`))), this.config.header)
          this.$container.innerHTML = "", this.$container.classList.add("dhx_cal_container"), this.config.header.height && (this.xy.nav_height = this.config.header.height), this.$container.appendChild(o2.render(this.config.header)), this.$container.appendChild(l.render()), this.$container.appendChild(h.render());
        else if (!v(this.$container))
          throw new Error(["Required DOM elements are missing from the scheduler container.", "Be sure to either specify them manually in the markup: https://docs.dhtmlx.com/scheduler/initialization.html#initializingschedulerviamarkup", "Or to use **scheduler.config.header** setting so they could be created automatically: https://docs.dhtmlx.com/scheduler/initialization.html#initializingschedulerviaheaderconfig"].join(`
`));
        this.config.rtl && (this.$container.className += " dhx_cal_container_rtl"), this._skin_init && a2._skin_init(), a2.date.init(), this._scroll = true, this._els = [], this.get_elements(), this.init_templates(), this.set_actions(), this._init_once(), this._init_touch_events(), this.set_sizes(), a2.callEvent("onSchedulerReady", []), a2.$initialized = true, this.setCurrentView(p, m);
      }
    }, a2.xy = { min_event_height: 20, bar_height: 24, scale_width: 50, scroll_width: 18, scale_height: 20, month_scale_height: 20, menu_width: 25, margin_top: 0, margin_left: 0, editor_width: 140, month_head_height: 22, event_header_height: 14 }, a2.keys = { edit_save: 13, edit_cancel: 27 }, a2.bind = function(c2, p) {
      return c2.bind ? c2.bind(p) : function() {
        return c2.apply(p, arguments);
      };
    }, a2.set_sizes = function() {
      var c2 = this._x = this._obj.clientWidth - this.xy.margin_left, p = this._table_view ? 0 : this.xy.scale_width + this.xy.scroll_width, m = this.$container.querySelector(".dhx_cal_scale_placeholder");
      a2._is_material_skin() ? (m || ((m = document.createElement("div")).className = "dhx_cal_scale_placeholder", this.$container.insertBefore(m, this._els.dhx_cal_header[0])), m.style.display = "block", this.set_xy(m, c2, this.xy.scale_height + 1, 0, this._els.dhx_cal_header[0].offsetTop)) : m && m.parentNode.removeChild(m), this._lightbox && (a2.$container.offsetWidth < 1200 || this._setLbPosition(document.querySelector(".dhx_cal_light"))), this._data_width = c2 - p, this._els.dhx_cal_navline[0].style.width = c2 + "px";
      const g = this._els.dhx_cal_header[0];
      this.set_xy(g, this._data_width, this.xy.scale_height), g.style.left = "", g.style.right = "", this._table_view ? this.config.rtl ? g.style.right = "-1px" : g.style.left = "-1px" : this.config.rtl ? g.style.right = `${this.xy.scale_width}px` : g.style.left = `${this.xy.scale_width}px`;
    }, a2.set_xy = function(c2, p, m, g, y2) {
      function x(k) {
        let E = k;
        return isNaN(Number(E)) || (E = Math.max(0, E) + "px"), E;
      }
      var b = "left";
      p !== void 0 && (c2.style.width = x(p)), m !== void 0 && (c2.style.height = x(m)), arguments.length > 3 && (g !== void 0 && (this.config.rtl && (b = "right"), c2.style[b] = g + "px"), y2 !== void 0 && (c2.style.top = y2 + "px"));
    }, a2.get_elements = function() {
      const c2 = this._obj.getElementsByTagName("DIV");
      for (let p = 0; p < c2.length; p++) {
        let m = a2._getClassName(c2[p]);
        const g = c2[p].getAttribute("data-tab") || c2[p].getAttribute("name") || "";
        m && (m = m.split(" ")[0]), this._els[m] || (this._els[m] = []), this._els[m].push(c2[p]);
        let y2 = a2.locale.labels[g + "_tab"] || a2.locale.labels[g || m];
        typeof y2 != "string" && g && !c2[p].innerHTML && (y2 = g.split("_")[0]), y2 && (this._waiAria.labelAttr(c2[p], y2), c2[p].innerHTML = y2);
      }
    };
    const u = a2._createDomEventScope();
    function f(c2, p) {
      const m = new Date(c2), g = (new Date(p).getTime() - m.getTime()) / 864e5;
      return Math.abs(g);
    }
    a2.unset_actions = function() {
      u.detachAll();
    }, a2.set_actions = function() {
      for (const c2 in this._els)
        if (this._click[c2])
          for (let p = 0; p < this._els[c2].length; p++) {
            const m = this._els[c2][p], g = this._click[c2].bind(m);
            u.attach(m, "click", g);
          }
      u.attach(this._obj, "selectstart", function(c2) {
        return c2.preventDefault(), false;
      }), u.attach(this._obj, "mousemove", function(c2) {
        a2._temp_touch_block || a2._on_mouse_move(c2);
      }), u.attach(this._obj, "mousedown", function(c2) {
        a2._ignore_next_click || a2._on_mouse_down(c2);
      }), u.attach(this._obj, "mouseup", function(c2) {
        a2._ignore_next_click || a2._on_mouse_up(c2);
      }), u.attach(this._obj, "dblclick", function(c2) {
        a2._on_dbl_click(c2);
      }), u.attach(this._obj, "contextmenu", function(c2) {
        return a2.checkEvent("onContextMenu") && c2.preventDefault(), a2.callEvent("onContextMenu", [a2._locate_event(c2.target), c2]);
      });
    }, a2.select = function(c2) {
      this._select_id != c2 && (a2._close_not_saved(), this.editStop(false), this._select_id && this.unselect(), this._select_id = c2, this.updateEvent(c2), this.callEvent("onEventSelected", [c2]));
    }, a2.unselect = function(c2) {
      if (c2 && c2 != this._select_id)
        return;
      const p = this._select_id;
      this._select_id = null, p && this.getEvent(p) && this.updateEvent(p), this.callEvent("onEventUnselected", [p]);
    }, a2.$stateProvider.registerProvider("global", function() {
      return { mode: this._mode, date: new Date(this._date), min_date: new Date(this._min_date), max_date: new Date(this._max_date), editor_id: this._edit_id, lightbox_id: this._lightbox_id, new_event: this._new_event, select_id: this._select_id, expanded: this.expanded, drag_id: this._drag_id, drag_mode: this._drag_mode };
    }.bind(a2)), a2._click = { dhx_cal_data: function(c2) {
      if (a2._ignore_next_click)
        return c2.preventDefault && c2.preventDefault(), c2.cancelBubble = true, a2._ignore_next_click = false, false;
      const p = a2._locate_event(c2.target);
      if (p) {
        if (!a2.callEvent("onClick", [p, c2]) || a2.config.readonly)
          return;
      } else
        a2.callEvent("onEmptyClick", [a2.getActionData(c2).date, c2]);
      if (p && a2.config.select) {
        a2.select(p);
        const m = c2.target.closest(".dhx_menu_icon"), g = a2._getClassName(m);
        g.indexOf("_icon") != -1 && a2._click.buttons[g.split(" ")[1].replace("icon_", "")](p);
      } else
        a2._close_not_saved(), a2.getState().select_id && (/* @__PURE__ */ new Date()).valueOf() - (a2._new_event || 0) > 500 && a2.unselect();
    }, dhx_cal_prev_button: function() {
      a2._click.dhx_cal_next_button(0, -1);
    }, dhx_cal_next_button: function(c2, p) {
      let m = 1;
      a2.config.rtl && (p = -p, m = -m), a2.setCurrentView(a2.date.add(a2.date[a2._mode + "_start"](new Date(a2._date)), p || m, a2._mode));
    }, dhx_cal_today_button: function() {
      a2.callEvent("onBeforeTodayDisplayed", []) && a2.setCurrentView(a2._currentDate());
    }, dhx_cal_tab: function() {
      const c2 = this.getAttribute("data-tab"), p = this.getAttribute("name"), m = c2 || p.substring(0, p.search("_tab"));
      a2.setCurrentView(a2._date, m);
    }, buttons: { delete: function(c2) {
      const p = a2.locale.labels.confirm_deleting;
      a2._dhtmlx_confirm({ message: p, title: a2.locale.labels.title_confirm_deleting, callback: function() {
        a2.deleteEvent(c2);
      }, config: { ok: a2.locale.labels.icon_delete } });
    }, edit: function(c2) {
      a2.edit(c2);
    }, save: function(c2) {
      a2.editStop(true);
    }, details: function(c2) {
      a2.showLightbox(c2);
    }, form: function(c2) {
      a2.showLightbox(c2);
    }, cancel: function(c2) {
      a2.editStop(false);
    } } }, a2._dhtmlx_confirm = function({ message: c2, title: p, callback: m, config: g }) {
      if (!c2)
        return m();
      g = g || {};
      const y2 = { ...g, text: c2 };
      p && (y2.title = p), m && (y2.callback = function(x) {
        x && m();
      }), a2.confirm(y2);
    }, a2.addEventNow = function(c2, p, m) {
      let g = {};
      a2._isObject(c2) && !a2._isDate(c2) && (g = c2, c2 = null);
      const y2 = 6e4 * (this.config.event_duration || this.config.time_step);
      c2 || (c2 = g.start_date || Math.round(a2._currentDate().valueOf() / y2) * y2);
      let x = new Date(c2);
      if (!p) {
        let E = this.config.first_hour;
        E > x.getHours() && (x.setHours(E), c2 = x.valueOf()), p = c2.valueOf() + y2;
      }
      let b = new Date(p);
      x.valueOf() == b.valueOf() && b.setTime(b.valueOf() + y2), g.start_date = g.start_date || x, g.end_date = g.end_date || b, g.text = g.text || this.locale.labels.new_event, g.id = this._drag_id = g.id || this.uid(), this._drag_mode = "new-size", this._loading = true;
      const k = this.addEvent(g);
      return this.callEvent("onEventCreated", [this._drag_id, m]), this._loading = false, this._drag_event = {}, this._on_mouse_up(m), k;
    }, a2._on_dbl_click = function(c2, p) {
      if (p = p || c2.target, this.config.readonly)
        return;
      const m = a2._getClassName(p).split(" ")[0];
      switch (m) {
        case "dhx_scale_holder":
        case "dhx_scale_holder_now":
        case "dhx_month_body":
        case "dhx_wa_day_data":
          if (!a2.config.dblclick_create)
            break;
          this.addEventNow(this.getActionData(c2).date, null, c2);
          break;
        case "dhx_cal_event":
        case "dhx_wa_ev_body":
        case "dhx_agenda_line":
        case "dhx_cal_agenda_event_line":
        case "dhx_grid_event":
        case "dhx_cal_event_line":
        case "dhx_cal_event_clear": {
          const g = this._locate_event(p);
          if (!this.callEvent("onDblClick", [g, c2]))
            return;
          this.config.details_on_dblclick || this._table_view || !this.getEvent(g)._timed || !this.config.select ? this.showLightbox(g) : this.edit(g);
          break;
        }
        case "dhx_time_block":
        case "dhx_cal_container":
          return;
        default: {
          const g = this["dblclick_" + m];
          if (g)
            g.call(this, c2);
          else if (p.parentNode && p != this)
            return a2._on_dbl_click(c2, p.parentNode);
          break;
        }
      }
    }, a2._get_column_index = function(c2) {
      let p = 0;
      if (this._cols) {
        let m = 0, g = 0;
        for (; m + this._cols[g] < c2 && g < this._cols.length; )
          m += this._cols[g], g++;
        if (p = g + (this._cols[g] ? (c2 - m) / this._cols[g] : 0), this._ignores && p >= this._cols.length)
          for (; p >= 1 && this._ignores[Math.floor(p)]; )
            p--;
      }
      return p;
    }, a2._week_indexes_from_pos = function(c2) {
      if (this._cols) {
        const p = this._get_column_index(c2.x);
        return c2.x = Math.min(this._cols.length - 1, Math.max(0, Math.ceil(p) - 1)), c2.y = Math.max(0, Math.ceil(60 * c2.y / (this.config.time_step * this.config.hour_size_px)) - 1) + this.config.first_hour * (60 / this.config.time_step), c2;
      }
      return c2;
    }, a2._mouse_coords = function(c2) {
      let p;
      const m = document.body, g = document.documentElement;
      p = this.$env.isIE || !c2.pageX && !c2.pageY ? { x: c2.clientX + (m.scrollLeft || g.scrollLeft || 0) - m.clientLeft, y: c2.clientY + (m.scrollTop || g.scrollTop || 0) - m.clientTop } : { x: c2.pageX, y: c2.pageY }, this.config.rtl && this._colsS ? (p.x = this.$container.querySelector(".dhx_cal_data").offsetWidth - p.x, p.x += this.$domHelpers.getAbsoluteLeft(this._obj), this._mode !== "month" && (p.x -= this.xy.scale_width)) : p.x -= this.$domHelpers.getAbsoluteLeft(this._obj) + (this._table_view ? 0 : this.xy.scale_width);
      const y2 = this.$container.querySelector(".dhx_cal_data");
      p.y -= this.$domHelpers.getAbsoluteTop(y2) - this._els.dhx_cal_data[0].scrollTop, p.ev = c2;
      const x = this["mouse_" + this._mode];
      if (x)
        p = x.call(this, p);
      else if (this._table_view) {
        const b = this._get_column_index(p.x);
        if (!this._cols || !this._colsS)
          return p;
        let k = 0;
        for (k = 1; k < this._colsS.heights.length && !(this._colsS.heights[k] > p.y); k++)
          ;
        p.y = Math.ceil(24 * (Math.max(0, b) + 7 * Math.max(0, k - 1)) * 60 / this.config.time_step), (a2._drag_mode || this._mode == "month") && (p.y = 24 * (Math.max(0, Math.ceil(b) - 1) + 7 * Math.max(0, k - 1)) * 60 / this.config.time_step), this._drag_mode == "move" && a2._ignores_detected && a2.config.preserve_length && (p._ignores = true, this._drag_event._event_length || (this._drag_event._event_length = this._get_real_event_length(this._drag_event.start_date, this._drag_event.end_date, { x_step: 1, x_unit: "day" }))), p.x = 0;
      } else
        p = this._week_indexes_from_pos(p);
      return p.timestamp = +/* @__PURE__ */ new Date(), p;
    }, a2._close_not_saved = function() {
      if ((/* @__PURE__ */ new Date()).valueOf() - (a2._new_event || 0) > 500 && a2._edit_id) {
        const c2 = a2.locale.labels.confirm_closing;
        a2._dhtmlx_confirm({ message: c2, title: a2.locale.labels.title_confirm_closing, callback: function() {
          a2.editStop(a2.config.positive_closing);
        } }), c2 && (this._drag_id = this._drag_pos = this._drag_mode = null);
      }
    }, a2._correct_shift = function(c2, p) {
      return c2 - 6e4 * (new Date(a2._min_date).getTimezoneOffset() - new Date(c2).getTimezoneOffset()) * (p ? -1 : 1);
    }, a2._is_pos_changed = function(c2, p) {
      function m(g, y2, x) {
        return Math.abs(g - y2) > x;
      }
      return !c2 || !this._drag_pos || !!(this._drag_pos.has_moved || !this._drag_pos.timestamp || p.timestamp - this._drag_pos.timestamp > 100 || m(c2.ev.clientX, p.ev.clientX, 5) || m(c2.ev.clientY, p.ev.clientY, 5));
    }, a2._correct_drag_start_date = function(c2) {
      let p;
      a2.matrix && (p = a2.matrix[a2._mode]), p = p || { x_step: 1, x_unit: "day" }, c2 = new Date(c2);
      let m = 1;
      return (p._start_correction || p._end_correction) && (m = 60 * (p.last_hour || 0) - (60 * c2.getHours() + c2.getMinutes()) || 1), 1 * c2 + (a2._get_fictional_event_length(c2, m, p) - m);
    }, a2._correct_drag_end_date = function(c2, p) {
      let m;
      a2.matrix && (m = a2.matrix[a2._mode]), m = m || { x_step: 1, x_unit: "day" };
      const g = 1 * c2 + a2._get_fictional_event_length(c2, p, m);
      return new Date(1 * g - (a2._get_fictional_event_length(g, -1, m, -1) + 1));
    }, a2._on_mouse_move = function(c2) {
      if (this._drag_mode) {
        var p = this._mouse_coords(c2);
        if (this._is_pos_changed(this._drag_pos, p)) {
          var m, g;
          if (this._edit_id != this._drag_id && this._close_not_saved(), !this._drag_mode)
            return;
          var y2 = null;
          if (this._drag_pos && !this._drag_pos.has_moved && ((y2 = this._drag_pos).has_moved = true), this._drag_pos = p, this._drag_pos.has_moved = true, this._drag_mode == "create") {
            if (y2 && (p = y2), this._close_not_saved(), this.unselect(this._select_id), this._loading = true, m = this._get_date_from_pos(p).valueOf(), !this._drag_start)
              return this.callEvent("onBeforeEventCreated", [c2, this._drag_id]) ? (this._loading = false, void (this._drag_start = m)) : void (this._loading = false);
            g = m, this._drag_start;
            var x = new Date(this._drag_start), b = new Date(g);
            this._mode != "day" && this._mode != "week" || x.getHours() != b.getHours() || x.getMinutes() != b.getMinutes() || (b = new Date(this._drag_start + 1e3)), this._drag_id = this.uid(), this.addEvent(x, b, this.locale.labels.new_event, this._drag_id, p.fields), this.callEvent("onEventCreated", [this._drag_id, c2]), this._loading = false, this._drag_mode = "new-size";
          }
          var k, E = this.config.time_step, D = this.getEvent(this._drag_id);
          if (a2.matrix && (k = a2.matrix[a2._mode]), k = k || { x_step: 1, x_unit: "day" }, this._drag_mode == "move")
            m = this._min_date.valueOf() + 6e4 * (p.y * this.config.time_step + 24 * p.x * 60), !p.custom && this._table_view && (m += 1e3 * this.date.time_part(D.start_date)), !this._table_view && this._dragEventBody && this._drag_event._move_event_shift === void 0 && (this._drag_event._move_event_shift = m - D.start_date), this._drag_event._move_event_shift && (m -= this._drag_event._move_event_shift), m = this._correct_shift(m), p._ignores && this.config.preserve_length && this._table_view && k ? (m = a2._correct_drag_start_date(m), g = a2._correct_drag_end_date(m, this._drag_event._event_length)) : g = D.end_date.valueOf() - (D.start_date.valueOf() - m);
          else {
            if (m = D.start_date.valueOf(), g = D.end_date.valueOf(), this._table_view) {
              var w = this._min_date.valueOf() + p.y * this.config.time_step * 6e4 + (p.custom ? 0 : 864e5);
              if (this._mode == "month")
                if (w = this._correct_shift(w, false), this._drag_from_start) {
                  var S = 864e5;
                  w <= a2.date.date_part(new Date(g + S - 1)).valueOf() && (m = w - S);
                } else
                  g = w;
              else
                this.config.preserve_length ? p.resize_from_start ? m = a2._correct_drag_start_date(w) : g = a2._correct_drag_end_date(w, 0) : p.resize_from_start ? m = w : g = w;
            } else {
              var N = this.date.date_part(new Date(D.end_date.valueOf() - 1)).valueOf(), M = new Date(N), T = this.config.first_hour, A = 60 / E * (this.config.last_hour - T);
              this.config.time_step = 1;
              var H = this._mouse_coords(c2);
              this.config.time_step = E;
              var $ = p.y * E * 6e4, j = Math.min(p.y + 1, A) * E * 6e4, z = 6e4 * H.y;
              g = Math.abs($ - z) > Math.abs(j - z) ? N + j : N + $, g += 6e4 * (new Date(g).getTimezoneOffset() - M.getTimezoneOffset()), this._els.dhx_cal_data[0].style.cursor = "s-resize", this._mode != "week" && this._mode != "day" || (g = this._correct_shift(g));
            }
            if (this._drag_mode == "new-size")
              if (g <= this._drag_start) {
                var W = p.shift || (this._table_view && !p.custom ? 864e5 : 0);
                m = g - (p.shift ? 0 : W), g = this._drag_start + (W || 6e4 * E);
              } else
                m = this._drag_start;
            else
              g <= m && (g = m + 6e4 * E);
          }
          var Y = new Date(g - 1), q = new Date(m);
          if (this._drag_mode == "move" && a2.config.limit_drag_out && (+q < +a2._min_date || +g > +a2._max_date)) {
            if (+D.start_date < +a2._min_date || +D.end_date > +a2._max_date)
              q = new Date(D.start_date), g = new Date(D.end_date);
            else {
              var V = g - q;
              +q < +a2._min_date ? (q = new Date(a2._min_date), p._ignores && this.config.preserve_length && this._table_view ? (q = new Date(a2._correct_drag_start_date(q)), k._start_correction && (q = new Date(q.valueOf() + k._start_correction)), g = new Date(1 * q + this._get_fictional_event_length(q, this._drag_event._event_length, k))) : g = new Date(+q + V)) : (g = new Date(a2._max_date), p._ignores && this.config.preserve_length && this._table_view ? (k._end_correction && (g = new Date(g.valueOf() - k._end_correction)), g = new Date(1 * g - this._get_fictional_event_length(g, 0, k, true)), q = new Date(1 * g - this._get_fictional_event_length(g, this._drag_event._event_length, k, true)), this._ignores_detected && (q = a2.date.add(q, k.x_step, k.x_unit), g = new Date(1 * g - this._get_fictional_event_length(g, 0, k, true)), g = a2.date.add(g, k.x_step, k.x_unit))) : q = new Date(+g - V));
            }
            Y = new Date(g - 1);
          }
          if (!this._table_view && this._dragEventBody && !a2.config.all_timed && (!a2._get_section_view() && p.x != this._get_event_sday({ start_date: new Date(m), end_date: new Date(m) }) || new Date(m).getHours() < this.config.first_hour) && (V = g - q, this._drag_mode == "move" && (S = this._min_date.valueOf() + 24 * p.x * 60 * 6e4, (q = new Date(S)).setHours(this.config.first_hour), g = new Date(q.valueOf() + V), Y = new Date(g - 1))), this._table_view || a2.config.all_timed || !(!a2.getView() && p.x != this._get_event_sday({ start_date: new Date(g), end_date: new Date(g) }) || new Date(g).getHours() >= this.config.last_hour) || (V = g - q, S = this._min_date.valueOf() + 24 * p.x * 60 * 6e4, (g = a2.date.date_part(new Date(S))).setHours(this.config.last_hour), Y = new Date(g - 1), this._drag_mode == "move" && (q = new Date(+g - V))), this._table_view || Y.getDate() == q.getDate() && Y.getHours() < this.config.last_hour || a2._allow_dnd)
            if (D.start_date = q, D.end_date = new Date(g), this.config.update_render) {
              var ve = a2._els.dhx_cal_data[0].scrollTop;
              this.update_view(), a2._els.dhx_cal_data[0].scrollTop = ve;
            } else
              this.updateEvent(this._drag_id);
          this._table_view && this.for_rendered(this._drag_id, function(xe) {
            xe.className += " dhx_in_move dhx_cal_event_drag";
          }), this.callEvent("onEventDrag", [this._drag_id, this._drag_mode, c2]);
        }
      } else if (a2.checkEvent("onMouseMove")) {
        var Ne = this._locate_event(c2.target || c2.srcElement);
        this.callEvent("onMouseMove", [Ne, c2]);
      }
    }, a2._on_mouse_down = function(c2, p) {
      if (c2.button != 2 && !this.config.readonly && !this._drag_mode) {
        p = p || c2.target || c2.srcElement;
        var m = a2._getClassName(p).split(" ")[0];
        switch (this.config.drag_event_body && m == "dhx_body" && p.parentNode && p.parentNode.className.indexOf("dhx_cal_select_menu") === -1 && (m = "dhx_event_move", this._dragEventBody = true), m) {
          case "dhx_cal_event_line":
          case "dhx_cal_event_clear":
            this._table_view && (this._drag_mode = "move");
            break;
          case "dhx_event_move":
          case "dhx_wa_ev_body":
            this._drag_mode = "move";
            break;
          case "dhx_event_resize":
            this._drag_mode = "resize", a2._getClassName(p).indexOf("dhx_event_resize_end") < 0 ? a2._drag_from_start = true : a2._drag_from_start = false;
            break;
          case "dhx_scale_holder":
          case "dhx_scale_holder_now":
          case "dhx_month_body":
          case "dhx_matrix_cell":
          case "dhx_marked_timespan":
            this._drag_mode = "create";
            break;
          case "":
            if (p.parentNode)
              return a2._on_mouse_down(c2, p.parentNode);
            break;
          default:
            if ((!a2.checkEvent("onMouseDown") || a2.callEvent("onMouseDown", [m, c2])) && p.parentNode && p != this && m != "dhx_body")
              return a2._on_mouse_down(c2, p.parentNode);
            this._drag_mode = null, this._drag_id = null;
        }
        if (this._drag_mode) {
          var g = this._locate_event(p);
          if (this.config["drag_" + this._drag_mode] && this.callEvent("onBeforeDrag", [g, this._drag_mode, c2])) {
            if (this._drag_id = g, (this._edit_id != this._drag_id || this._edit_id && this._drag_mode == "create") && this._close_not_saved(), !this._drag_mode)
              return;
            this._drag_event = a2._lame_clone(this.getEvent(this._drag_id) || {}), this._drag_pos = this._mouse_coords(c2);
          } else
            this._drag_mode = this._drag_id = 0;
        }
        this._drag_start = null;
      }
    }, a2._get_private_properties = function(c2) {
      var p = {};
      for (var m in c2)
        m.indexOf("_") === 0 && (p[m] = true);
      return p;
    }, a2._clear_temporary_properties = function(c2, p) {
      var m = this._get_private_properties(c2), g = this._get_private_properties(p);
      for (var y2 in g)
        m[y2] || delete p[y2];
    }, a2._on_mouse_up = function(c2) {
      if (!c2 || c2.button != 2 || !this._mobile) {
        if (this._drag_mode && this._drag_id) {
          this._els.dhx_cal_data[0].style.cursor = "default";
          var p = this._drag_id, m = this._drag_mode, g = !this._drag_pos || this._drag_pos.has_moved;
          delete this._drag_event._move_event_shift;
          var y2 = this.getEvent(this._drag_id);
          if (g && (this._drag_event._dhx_changed || !this._drag_event.start_date || y2.start_date.valueOf() != this._drag_event.start_date.valueOf() || y2.end_date.valueOf() != this._drag_event.end_date.valueOf())) {
            var x = this._drag_mode == "new-size";
            if (this.callEvent("onBeforeEventChanged", [y2, c2, x, this._drag_event]))
              if (this._drag_id = this._drag_mode = null, x && this.config.edit_on_create) {
                if (this.unselect(), this._new_event = /* @__PURE__ */ new Date(), this._table_view || this.config.details_on_create || !this.config.select || !this.isOneDayEvent(this.getEvent(p)))
                  return a2.callEvent("onDragEnd", [p, m, c2]), this.showLightbox(p);
                this._drag_pos = true, this._select_id = this._edit_id = p;
              } else
                this._new_event || this.callEvent(x ? "onEventAdded" : "onEventChanged", [p, this.getEvent(p)]);
            else
              x ? this.deleteEvent(y2.id, true) : (this._drag_event._dhx_changed = false, this._clear_temporary_properties(y2, this._drag_event), a2._lame_copy(y2, this._drag_event), this.updateEvent(y2.id));
          }
          this._drag_pos && (this._drag_pos.has_moved || this._drag_pos === true) && (this._drag_id = this._drag_mode = null, this.render_view_data()), a2.callEvent("onDragEnd", [p, m, c2]);
        }
        this._drag_id = null, this._drag_mode = null, this._drag_pos = null, this._drag_event = null, this._drag_from_start = null;
      }
    }, a2._trigger_dyn_loading = function() {
      return !(!this._load_mode || !this._load() || (this._render_wait = true, 0));
    }, a2.update_view = function() {
      this._reset_ignores(), this._update_nav_bar(this.config.header, this.$container.querySelector(".dhx_cal_navline"));
      var c2 = this[this._mode + "_view"];
      if (c2 ? c2.call(this, true) : this._reset_scale(), this._trigger_dyn_loading())
        return true;
      this.render_view_data();
    }, a2.isViewExists = function(c2) {
      return !!(a2[c2 + "_view"] || a2.date[c2 + "_start"] && a2.templates[c2 + "_date"] && a2.templates[c2 + "_scale_date"]);
    }, a2._set_aria_buttons_attrs = function() {
      for (var c2 = ["dhx_cal_next_button", "dhx_cal_prev_button", "dhx_cal_tab", "dhx_cal_today_button"], p = 0; p < c2.length; p++)
        for (var m = this._els[c2[p]], g = 0; m && g < m.length; g++) {
          var y2 = m[g].getAttribute("data-tab") || m[g].getAttribute("name"), x = this.locale.labels[c2[p]];
          y2 && (x = this.locale.labels[y2 + "_tab"] || this.locale.labels[y2] || x), c2[p] == "dhx_cal_next_button" ? x = this.locale.labels.next : c2[p] == "dhx_cal_prev_button" && (x = this.locale.labels.prev), this._waiAria.headerButtonsAttributes(m[g], x || "");
        }
    }, a2.updateView = function(c2, p) {
      if (!this.$container)
        throw new Error(`The scheduler is not initialized. 
 **scheduler.updateView** or **scheduler.setCurrentView** can be called only after **scheduler.init**`);
      c2 = c2 || this._date, p = p || this._mode;
      var m = "dhx_cal_data";
      this.locale.labels.icon_form || (this.locale.labels.icon_form = this.locale.labels.icon_edit);
      var g = this._obj, y2 = "dhx_scheduler_" + this._mode, x = "dhx_scheduler_" + p;
      this._mode && g.className.indexOf(y2) != -1 ? g.className = g.className.replace(y2, x) : g.className += " " + x;
      var b, k = "dhx_multi_day", E = !(this._mode != p || !this.config.preserve_scroll) && this._els[m][0].scrollTop;
      this._els[k] && this._els[k][0] && (b = this._els[k][0].scrollTop), this[this._mode + "_view"] && p && this._mode != p && this[this._mode + "_view"](false), this._close_not_saved(), this._els[k] && (this._els[k][0].parentNode.removeChild(this._els[k][0]), this._els[k] = null), this._mode = p, this._date = c2, this._table_view = this._mode == "month", this._dy_shift = 0, this.update_view(), this._set_aria_buttons_attrs();
      var D = this._els.dhx_cal_tab;
      if (D)
        for (var w = 0; w < D.length; w++) {
          var S = D[w];
          S.getAttribute("data-tab") == this._mode || S.getAttribute("name") == this._mode + "_tab" ? (S.classList.add("active"), this._waiAria.headerToggleState(S, true)) : (S.classList.remove("active"), this._waiAria.headerToggleState(S, false));
        }
      typeof E == "number" && (this._els[m][0].scrollTop = E), typeof b == "number" && this._els[k] && this._els[k][0] && (this._els[k][0].scrollTop = b);
    }, a2.setCurrentView = function(c2, p) {
      this.callEvent("onBeforeViewChange", [this._mode, this._date, p || this._mode, c2 || this._date]) && (this.updateView(c2, p), this.callEvent("onViewChange", [this._mode, this._date]));
    }, a2.render = function(c2, p) {
      a2.setCurrentView(c2, p);
    }, a2._render_x_header = function(c2, p, m, g, y2) {
      y2 = y2 || 0;
      var x = document.createElement("div");
      x.className = "dhx_scale_bar", this.templates[this._mode + "_scalex_class"] && (x.className += " " + this.templates[this._mode + "_scalex_class"](m));
      var b = this._cols[c2];
      this._mode == "month" && c2 === 0 && this.config.left_border && (x.className += " dhx_scale_bar_border", p += 1), this.set_xy(x, b, this.xy.scale_height - 1, p, y2);
      var k = this.templates[this._mode + "_scale_date"](m, this._mode);
      x.innerHTML = k, this._waiAria.dayHeaderAttr(x, k), g.appendChild(x);
    }, a2._get_columns_num = function(c2, p) {
      var m = 7;
      if (!a2._table_view) {
        var g = a2.date["get_" + a2._mode + "_end"];
        g && (p = g(c2)), m = Math.round((p.valueOf() - c2.valueOf()) / 864e5);
      }
      return m;
    }, a2._get_timeunit_start = function() {
      return this.date[this._mode + "_start"](new Date(this._date.valueOf()));
    }, a2._get_view_end = function() {
      var c2 = this._get_timeunit_start(), p = a2.date.add(c2, 1, this._mode);
      if (!a2._table_view) {
        var m = a2.date["get_" + a2._mode + "_end"];
        m && (p = m(c2));
      }
      return p;
    }, a2._calc_scale_sizes = function(c2, p, m) {
      var g = this.config.rtl, y2 = c2, x = this._get_columns_num(p, m);
      this._process_ignores(p, x, "day", 1);
      for (var b = x - this._ignores_detected, k = 0; k < x; k++)
        this._ignores[k] ? (this._cols[k] = 0, b++) : this._cols[k] = Math.floor(y2 / (b - k)), y2 -= this._cols[k], this._colsS[k] = (this._cols[k - 1] || 0) + (this._colsS[k - 1] || (this._table_view ? 0 : g ? this.xy.scroll_width : this.xy.scale_width));
      this._colsS.col_length = x, this._colsS[x] = this._cols[x - 1] + this._colsS[x - 1] || 0;
    }, a2._set_scale_col_size = function(c2, p, m) {
      var g = this.config;
      this.set_xy(c2, p, g.hour_size_px * (g.last_hour - g.first_hour), m + this.xy.scale_width + 1, 0);
    }, a2._render_scales = function(c2, p) {
      var m = new Date(a2._min_date), g = new Date(a2._max_date), y2 = this.date.date_part(a2._currentDate()), x = parseInt(c2.style.width, 10) - 1, b = new Date(this._min_date), k = this._get_columns_num(m, g);
      this._calc_scale_sizes(x, m, g);
      var E = 0;
      c2.innerHTML = "";
      for (var D = 0; D < k; D++) {
        if (this._ignores[D] || this._render_x_header(D, E, b, c2), !this._table_view) {
          var w = document.createElement("div"), S = "dhx_scale_holder";
          b.valueOf() == y2.valueOf() && (S += " dhx_scale_holder_now"), w.setAttribute("data-column-index", D), this._ignores_detected && this._ignores[D] && (S += " dhx_scale_ignore");
          for (let N = 1 * this.config.first_hour; N < this.config.last_hour; N++) {
            const M = document.createElement("div");
            M.className = "dhx_scale_time_slot dhx_scale_time_slot_hour_start", M.style.height = this.config.hour_size_px / 2 + "px";
            let T = new Date(b.getFullYear(), b.getMonth(), b.getDate(), N, 0);
            M.setAttribute("data-slot-date", this.templates.format_date(T));
            let A = this.templates.time_slot_text(T);
            A && (M.innerHTML = A);
            let H = this.templates.time_slot_class(T);
            H && M.classList.add(H), w.appendChild(M);
            const $ = document.createElement("div");
            $.className = "dhx_scale_time_slot", T = new Date(b.getFullYear(), b.getMonth(), b.getDate(), N, 30), $.setAttribute("data-slot-date", this.templates.format_date(T)), $.style.height = this.config.hour_size_px / 2 + "px", A = this.templates.time_slot_text(T), A && ($.innerHTML = A), H = this.templates.time_slot_class(T), H && $.classList.add(H), w.appendChild($);
          }
          w.className = S + " " + this.templates.week_date_class(b, y2), this._waiAria.dayColumnAttr(w, b), this._set_scale_col_size(w, this._cols[D], E), p.appendChild(w), this.callEvent("onScaleAdd", [w, b]);
        }
        E += this._cols[D], b = this.date.add(b, 1, "day"), b = this.date.day_start(b);
      }
    }, a2._getNavDateElement = function() {
      return this.$container.querySelector(".dhx_cal_date");
    }, a2._reset_scale = function() {
      if (this.templates[this._mode + "_date"]) {
        var c2 = this._els.dhx_cal_header[0], p = this._els.dhx_cal_data[0], m = this.config;
        c2.innerHTML = "", p.innerHTML = "";
        var g, y2, x = (m.readonly || !m.drag_resize ? " dhx_resize_denied" : "") + (m.readonly || !m.drag_move ? " dhx_move_denied" : "");
        p.className = "dhx_cal_data" + x, this._scales = {}, this._cols = [], this._colsS = { height: 0 }, this._dy_shift = 0, this.set_sizes();
        var b = this._get_timeunit_start(), k = a2._get_view_end();
        g = y2 = this._table_view ? a2.date.week_start(b) : b, this._min_date = g;
        var E = this.templates[this._mode + "_date"](b, k, this._mode), D = this._getNavDateElement();
        if (D && (D.innerHTML = E, this._waiAria.navBarDateAttr(D, E)), this._max_date = k, a2._render_scales(c2, p), this._table_view)
          this._reset_month_scale(p, b, y2);
        else if (this._reset_hours_scale(p, b, y2), m.multi_day) {
          var w = "dhx_multi_day";
          this._els[w] && (this._els[w][0].parentNode.removeChild(this._els[w][0]), this._els[w] = null);
          var S = document.createElement("div");
          S.className = w, S.style.visibility = "hidden", S.style.display = "none";
          var N = this._colsS[this._colsS.col_length], M = m.rtl ? this.xy.scale_width : this.xy.scroll_width, T = Math.max(N + M, 0);
          this.set_xy(S, T, 0, 0), p.parentNode.insertBefore(S, p);
          var A = S.cloneNode(true);
          A.className = w + "_icon", A.style.visibility = "hidden", A.style.display = "none", this.set_xy(A, this.xy.scale_width + 1, 0, 0), S.appendChild(A), this._els[w] = [S, A], a2.event(this._els[w][0], "click", this._click.dhx_cal_data);
        }
      }
    }, a2._reset_hours_scale = function(c2, p, m) {
      var g = document.createElement("div");
      g.className = "dhx_scale_holder";
      for (var y2 = new Date(1980, 1, 1, this.config.first_hour, 0, 0), x = 1 * this.config.first_hour; x < this.config.last_hour; x++) {
        var b = document.createElement("div");
        b.className = "dhx_scale_hour", b.style.height = this.config.hour_size_px + "px";
        var k = this.xy.scale_width;
        this.config.left_border && (b.className += " dhx_scale_hour_border"), b.style.width = k + "px";
        var E = a2.templates.hour_scale(y2);
        b.innerHTML = E, this._waiAria.hourScaleAttr(b, E), g.appendChild(b), y2 = this.date.add(y2, 1, "hour");
      }
      c2.appendChild(g), this.config.scroll_hour && (c2.scrollTop = this.config.hour_size_px * (this.config.scroll_hour - this.config.first_hour));
    }, a2._currentDate = function() {
      return a2.config.now_date ? new Date(a2.config.now_date) : /* @__PURE__ */ new Date();
    }, a2._reset_ignores = function() {
      this._ignores = {}, this._ignores_detected = 0;
    }, a2._process_ignores = function(c2, p, m, g, y2) {
      this._reset_ignores();
      var x = a2["ignore_" + this._mode];
      if (x)
        for (var b = new Date(c2), k = 0; k < p; k++)
          x(b) && (this._ignores_detected += 1, this._ignores[k] = true, y2 && p++), b = a2.date.add(b, g, m), a2.date[m + "_start"] && (b = a2.date[m + "_start"](b));
    }, a2._render_month_scale = function(c2, p, m, g) {
      var y2 = a2.date.add(p, 1, "month"), x = new Date(m), b = a2._currentDate();
      this.date.date_part(b), this.date.date_part(m), g = g || Math.ceil(Math.round((y2.valueOf() - m.valueOf()) / 864e5) / 7);
      for (var k = [], E = 0; E <= 7; E++) {
        var D = this._cols[E] || 0;
        isNaN(Number(D)) || (D += "px"), k[E] = D;
      }
      function w(q) {
        var V = a2._colsS.height;
        return a2._colsS.heights[q + 1] !== void 0 && (V = a2._colsS.heights[q + 1] - (a2._colsS.heights[q] || 0)), V;
      }
      var S = 0;
      const N = document.createElement("div");
      for (N.classList.add("dhx_cal_month_table"), E = 0; E < g; E++) {
        var M = document.createElement("div");
        M.classList.add("dhx_cal_month_row"), M.style.height = w(E) + "px", N.appendChild(M);
        for (var T = 0; T < 7; T++) {
          var A = document.createElement("div");
          M.appendChild(A);
          var H = "dhx_cal_month_cell";
          m < p ? H += " dhx_before" : m >= y2 ? H += " dhx_after" : m.valueOf() == b.valueOf() && (H += " dhx_now"), this._ignores_detected && this._ignores[T] && (H += " dhx_scale_ignore"), A.className = H + " " + this.templates.month_date_class(m, b), A.setAttribute("data-cell-date", a2.templates.format_date(m));
          var $ = "dhx_month_body", j = "dhx_month_head";
          if (T === 0 && this.config.left_border && ($ += " dhx_month_body_border", j += " dhx_month_head_border"), this._ignores_detected && this._ignores[T])
            A.appendChild(document.createElement("div")), A.appendChild(document.createElement("div"));
          else {
            A.style.width = k[T], this._waiAria.monthCellAttr(A, m);
            var z = document.createElement("div");
            z.style.height = a2.xy.month_head_height + "px", z.className = j, z.innerHTML = this.templates.month_day(m), A.appendChild(z);
            var W = document.createElement("div");
            W.className = $, A.appendChild(W);
          }
          var Y = m.getDate();
          (m = this.date.add(m, 1, "day")).getDate() - Y > 1 && (m = new Date(m.getFullYear(), m.getMonth(), Y + 1, 12, 0));
        }
        a2._colsS.heights[E] = S, S += w(E);
      }
      return this._min_date = x, this._max_date = m, c2.innerHTML = "", c2.appendChild(N), this._scales = {}, c2.querySelectorAll("[data-cell-date]").forEach((q) => {
        const V = a2.templates.parse_date(q.getAttribute("data-cell-date")), ve = q.querySelector(".dhx_month_body");
        this._scales[+V] = ve, this.callEvent("onScaleAdd", [this._scales[+V], V]);
      }), this._max_date;
    }, a2._reset_month_scale = function(c2, p, m, g) {
      var y2 = a2.date.add(p, 1, "month"), x = a2._currentDate();
      this.date.date_part(x), this.date.date_part(m), g = g || Math.ceil(Math.round((y2.valueOf() - m.valueOf()) / 864e5) / 7);
      var b = Math.floor(c2.clientHeight / g) - this.xy.month_head_height;
      return this._colsS.height = b + this.xy.month_head_height, this._colsS.heights = [], a2._render_month_scale(c2, p, m, g);
    }, a2.getView = function(c2) {
      return c2 || (c2 = a2.getState().mode), a2.matrix && a2.matrix[c2] ? a2.matrix[c2] : a2._props && a2._props[c2] ? a2._props[c2] : null;
    }, a2.getLabel = function(c2, p) {
      for (var m = this.config.lightbox.sections, g = 0; g < m.length; g++)
        if (m[g].map_to == c2) {
          for (var y2 = m[g].options, x = 0; x < y2.length; x++)
            if (y2[x].key == p)
              return y2[x].label;
        }
      return "";
    }, a2.updateCollection = function(c2, p) {
      var m = a2.serverList(c2);
      return !!m && (m.splice(0, m.length), m.push.apply(m, p || []), a2.callEvent("onOptionsLoad", []), a2.resetLightbox(), a2.hideCover(), true);
    }, a2._lame_clone = function(c2, p) {
      var m, g, y2;
      for (p = p || [], m = 0; m < p.length; m += 2)
        if (c2 === p[m])
          return p[m + 1];
      if (c2 && typeof c2 == "object") {
        for (y2 = Object.create(c2), g = [Array, Date, Number, String, Boolean], m = 0; m < g.length; m++)
          c2 instanceof g[m] && (y2 = m ? new g[m](c2) : new g[m]());
        for (m in p.push(c2, y2), c2)
          Object.prototype.hasOwnProperty.apply(c2, [m]) && (y2[m] = a2._lame_clone(c2[m], p));
      }
      return y2 || c2;
    }, a2._lame_copy = function(c2, p) {
      for (var m in p)
        p.hasOwnProperty(m) && (c2[m] = p[m]);
      return c2;
    }, a2._get_date_from_pos = function(c2) {
      var p = this._min_date.valueOf() + 6e4 * (c2.y * this.config.time_step + 24 * (this._table_view ? 0 : c2.x) * 60);
      return new Date(this._correct_shift(p));
    }, a2.getActionData = function(c2) {
      var p = this._mouse_coords(c2);
      return { date: this._get_date_from_pos(p), section: p.section };
    }, a2._focus = function(c2, p) {
      if (c2 && c2.focus)
        if (this._mobile)
          window.setTimeout(function() {
            c2.focus();
          }, 10);
        else
          try {
            p && c2.select && c2.offsetWidth && c2.select(), c2.focus();
          } catch {
          }
    }, a2._get_real_event_length = function(c2, p, m) {
      var g, y2 = p - c2, x = this["ignore_" + this._mode], b = 0;
      m.render ? (b = this._get_date_index(m, c2), g = this._get_date_index(m, p), c2.valueOf() < a2.getState().min_date.valueOf() && (b = -f(c2, a2.getState().min_date)), p.valueOf() > a2.getState().max_date.valueOf() && (g += f(p, a2.getState().max_date))) : g = Math.round(y2 / 60 / 60 / 1e3 / 24);
      for (var k = true; b < g; ) {
        var E = a2.date.add(p, -m.x_step, m.x_unit);
        if (x && x(p) && (!k || k && x(E)))
          y2 -= p - E;
        else {
          let D = 0;
          const w = new Date(Math.max(E.valueOf(), c2.valueOf())), S = p, N = new Date(w.getFullYear(), w.getMonth(), w.getDate(), m.first_hour), M = new Date(w.getFullYear(), w.getMonth(), w.getDate(), m.last_hour || 24), T = new Date(p.getFullYear(), p.getMonth(), p.getDate(), m.first_hour), A = new Date(p.getFullYear(), p.getMonth(), p.getDate(), m.last_hour || 24);
          S.valueOf() > A.valueOf() && (D += S - A), S.valueOf() > T.valueOf() ? D += m._start_correction : D += 60 * S.getHours() * 60 * 1e3 + 60 * S.getMinutes() * 1e3, w.valueOf() < M.valueOf() && (D += m._end_correction), w.valueOf() < N.valueOf() && (D += N.valueOf() - w.valueOf()), y2 -= D, k = false;
        }
        p = E, g--;
      }
      return y2;
    }, a2._get_fictional_event_length = function(c2, p, m, g) {
      var y2 = new Date(c2), x = g ? -1 : 1;
      if (m._start_correction || m._end_correction) {
        var b;
        b = g ? 60 * y2.getHours() + y2.getMinutes() - 60 * (m.first_hour || 0) : 60 * (m.last_hour || 0) - (60 * y2.getHours() + y2.getMinutes());
        var k = 60 * (m.last_hour - m.first_hour), E = Math.ceil((p / 6e4 - b) / k);
        E < 0 && (E = 0), p += E * (1440 - k) * 60 * 1e3;
      }
      var D, w = new Date(1 * c2 + p * x), S = this["ignore_" + this._mode], N = 0;
      for (m.render ? (N = this._get_date_index(m, y2), D = this._get_date_index(m, w)) : D = Math.round(p / 60 / 60 / 1e3 / 24); N * x <= D * x; ) {
        var M = a2.date.add(y2, m.x_step * x, m.x_unit);
        S && S(y2) && (p += (M - y2) * x, D += x), y2 = M, N += x;
      }
      return p;
    }, a2._get_section_view = function() {
      return this.getView();
    }, a2._get_section_property = function() {
      return this.matrix && this.matrix[this._mode] ? this.matrix[this._mode].y_property : this._props && this._props[this._mode] ? this._props[this._mode].map_to : null;
    }, a2._is_initialized = function() {
      var c2 = this.getState();
      return this._obj && c2.date && c2.mode;
    }, a2._is_lightbox_open = function() {
      var c2 = this.getState();
      return c2.lightbox_id !== null && c2.lightbox_id !== void 0;
    };
  }(i), function(a2) {
    (function() {
      var o2 = new RegExp(`<(?:.|
)*?>`, "gm"), l = new RegExp(" +", "gm");
      function h(c2) {
        return (c2 + "").replace(o2, " ").replace(l, " ");
      }
      var v = new RegExp("'", "gm");
      function u(c2) {
        return (c2 + "").replace(v, "&#39;");
      }
      for (var f in a2._waiAria = { getAttributeString: function(c2) {
        var p = [" "];
        for (var m in c2)
          if (typeof c2[m] != "function" && typeof c2[m] != "object") {
            var g = u(h(c2[m]));
            p.push(m + "='" + g + "'");
          }
        return p.push(" "), p.join(" ");
      }, setAttributes: function(c2, p) {
        for (var m in p)
          c2.setAttribute(m, h(p[m]));
        return c2;
      }, labelAttr: function(c2, p) {
        return this.setAttributes(c2, { "aria-label": p });
      }, label: function(c2) {
        return a2._waiAria.getAttributeString({ "aria-label": c2 });
      }, hourScaleAttr: function(c2, p) {
        this.labelAttr(c2, p);
      }, monthCellAttr: function(c2, p) {
        this.labelAttr(c2, a2.templates.day_date(p));
      }, navBarDateAttr: function(c2, p) {
        this.labelAttr(c2, p);
      }, dayHeaderAttr: function(c2, p) {
        this.labelAttr(c2, p);
      }, dayColumnAttr: function(c2, p) {
        this.dayHeaderAttr(c2, a2.templates.day_date(p));
      }, headerButtonsAttributes: function(c2, p) {
        return this.setAttributes(c2, { role: "button", "aria-label": p });
      }, headerToggleState: function(c2, p) {
        return this.setAttributes(c2, { "aria-pressed": p ? "true" : "false" });
      }, getHeaderCellAttr: function(c2) {
        return a2._waiAria.getAttributeString({ "aria-label": c2 });
      }, eventAttr: function(c2, p) {
        this._eventCommonAttr(c2, p);
      }, _eventCommonAttr: function(c2, p) {
        p.setAttribute("aria-label", h(a2.templates.event_text(c2.start_date, c2.end_date, c2))), a2.config.readonly && p.setAttribute("aria-readonly", true), c2.$dataprocessor_class && p.setAttribute("aria-busy", true), p.setAttribute("aria-selected", a2.getState().select_id == c2.id ? "true" : "false");
      }, setEventBarAttr: function(c2, p) {
        this._eventCommonAttr(c2, p);
      }, _getAttributes: function(c2, p) {
        var m = { setAttribute: function(g, y2) {
          this[g] = y2;
        } };
        return c2.apply(this, [p, m]), m;
      }, eventBarAttrString: function(c2) {
        return this.getAttributeString(this._getAttributes(this.setEventBarAttr, c2));
      }, agendaHeadAttrString: function() {
        return this.getAttributeString({ role: "row" });
      }, agendaHeadDateString: function(c2) {
        return this.getAttributeString({ role: "columnheader", "aria-label": c2 });
      }, agendaHeadDescriptionString: function(c2) {
        return this.agendaHeadDateString(c2);
      }, agendaDataAttrString: function() {
        return this.getAttributeString({ role: "grid" });
      }, agendaEventAttrString: function(c2) {
        var p = this._getAttributes(this._eventCommonAttr, c2);
        return p.role = "row", this.getAttributeString(p);
      }, agendaDetailsBtnString: function() {
        return this.getAttributeString({ role: "button", "aria-label": a2.locale.labels.icon_details });
      }, gridAttrString: function() {
        return this.getAttributeString({ role: "grid" });
      }, gridRowAttrString: function(c2) {
        return this.agendaEventAttrString(c2);
      }, gridCellAttrString: function(c2, p, m) {
        return this.getAttributeString({ role: "gridcell", "aria-label": [p.label === void 0 ? p.id : p.label, ": ", m] });
      }, mapAttrString: function() {
        return this.gridAttrString();
      }, mapRowAttrString: function(c2) {
        return this.gridRowAttrString(c2);
      }, mapDetailsBtnString: function() {
        return this.agendaDetailsBtnString();
      }, minicalHeader: function(c2, p) {
        this.setAttributes(c2, { id: p + "", "aria-live": "assertice", "aria-atomic": "true" });
      }, minicalGrid: function(c2, p) {
        this.setAttributes(c2, { "aria-labelledby": p + "", role: "grid" });
      }, minicalRow: function(c2) {
        this.setAttributes(c2, { role: "row" });
      }, minicalDayCell: function(c2, p) {
        var m = p.valueOf() < a2._max_date.valueOf() && p.valueOf() >= a2._min_date.valueOf();
        this.setAttributes(c2, { role: "gridcell", "aria-label": a2.templates.day_date(p), "aria-selected": m ? "true" : "false" });
      }, minicalHeadCell: function(c2) {
        this.setAttributes(c2, { role: "columnheader" });
      }, weekAgendaDayCell: function(c2, p) {
        var m = c2.querySelector(".dhx_wa_scale_bar"), g = c2.querySelector(".dhx_wa_day_data"), y2 = a2.uid() + "";
        this.setAttributes(m, { id: y2 }), this.setAttributes(g, { "aria-labelledby": y2 });
      }, weekAgendaEvent: function(c2, p) {
        this.eventAttr(p, c2);
      }, lightboxHiddenAttr: function(c2) {
        c2.setAttribute("aria-hidden", "true");
      }, lightboxVisibleAttr: function(c2) {
        c2.setAttribute("aria-hidden", "false");
      }, lightboxSectionButtonAttrString: function(c2) {
        return this.getAttributeString({ role: "button", "aria-label": c2, tabindex: "0" });
      }, yearHeader: function(c2, p) {
        this.setAttributes(c2, { id: p + "" });
      }, yearGrid: function(c2, p) {
        this.minicalGrid(c2, p);
      }, yearHeadCell: function(c2) {
        return this.minicalHeadCell(c2);
      }, yearRow: function(c2) {
        return this.minicalRow(c2);
      }, yearDayCell: function(c2) {
        this.setAttributes(c2, { role: "gridcell" });
      }, lightboxAttr: function(c2) {
        c2.setAttribute("role", "dialog"), c2.setAttribute("aria-hidden", "true"), c2.firstChild.setAttribute("role", "heading");
      }, lightboxButtonAttrString: function(c2) {
        return this.getAttributeString({ role: "button", "aria-label": a2.locale.labels[c2], tabindex: "0" });
      }, eventMenuAttrString: function(c2) {
        return this.getAttributeString({ role: "button", "aria-label": a2.locale.labels[c2] });
      }, lightboxHeader: function(c2, p) {
        c2.setAttribute("aria-label", p);
      }, lightboxSelectAttrString: function(c2) {
        var p = "";
        switch (c2) {
          case "%Y":
            p = a2.locale.labels.year;
            break;
          case "%m":
            p = a2.locale.labels.month;
            break;
          case "%d":
            p = a2.locale.labels.day;
            break;
          case "%H:%i":
            p = a2.locale.labels.hour + " " + a2.locale.labels.minute;
        }
        return a2._waiAria.getAttributeString({ "aria-label": p });
      }, messageButtonAttrString: function(c2) {
        return "tabindex='0' role='button' aria-label='" + c2 + "'";
      }, messageInfoAttr: function(c2) {
        c2.setAttribute("role", "alert");
      }, messageModalAttr: function(c2, p) {
        c2.setAttribute("role", "dialog"), p && c2.setAttribute("aria-labelledby", p);
      }, quickInfoAttr: function(c2) {
        c2.setAttribute("role", "dialog");
      }, quickInfoHeaderAttrString: function() {
        return " role='heading' ";
      }, quickInfoHeader: function(c2, p) {
        c2.setAttribute("aria-label", p);
      }, quickInfoButtonAttrString: function(c2) {
        return a2._waiAria.getAttributeString({ role: "button", "aria-label": c2, tabindex: "0" });
      }, tooltipAttr: function(c2) {
        c2.setAttribute("role", "tooltip");
      }, tooltipVisibleAttr: function(c2) {
        c2.setAttribute("aria-hidden", "false");
      }, tooltipHiddenAttr: function(c2) {
        c2.setAttribute("aria-hidden", "true");
      } }, a2._waiAria)
        a2._waiAria[f] = /* @__PURE__ */ function(c2) {
          return function() {
            return a2.config.wai_aria_attributes ? c2.apply(this, arguments) : " ";
          };
        }(a2._waiAria[f]);
    })();
  }(i), i.utils = ee, i.$domHelpers = _e, i.utils.dom = _e, i.uid = ee.uid, i.mixin = ee.mixin, i.defined = ee.defined, i.assert = /* @__PURE__ */ function(a2) {
    return function(o2, l) {
      o2 || a2.config.show_errors && a2.callEvent("onError", [l]) !== false && (a2.message ? a2.message({ type: "error", text: l, expire: -1 }) : console.log(l));
    };
  }(i), i.copy = ee.copy, i._createDatePicker = function(a2, o2) {
    return new Da(i, a2, o2);
  }, i._getFocusableNodes = _e.getFocusableNodes, i._getClassName = _e.getClassName, i._locate_css = _e.locateCss;
  const t2 = Wt(i);
  var r2, d, n;
  i.utils.mixin(i, t2), i.env = i.$env = Yt, i.Promise = window.Promise, function(a2) {
    a2.destructor = function() {
      for (var o2 in a2.callEvent("onDestroy", []), this.clearAll(), this.$container && (this.$container.innerHTML = ""), this._eventRemoveAll && this._eventRemoveAll(), this.resetLightbox && this.resetLightbox(), this._dp && this._dp.destructor && this._dp.destructor(), this.detachAllEvents(), this)
        o2.indexOf("$") === 0 && delete this[o2];
      a2.$destroyed = true;
    };
  }(i), function(a2) {
    function o2(l, h) {
      var v = { method: l };
      if (h.length === 0)
        throw new Error("Arguments list of query is wrong.");
      if (h.length === 1)
        return typeof h[0] == "string" ? (v.url = h[0], v.async = true) : (v.url = h[0].url, v.async = h[0].async || true, v.callback = h[0].callback, v.headers = h[0].headers), h[0].data ? typeof h[0].data != "string" ? v.data = Te(h[0].data) : v.data = h[0].data : v.data = "", v;
      switch (v.url = h[0], l) {
        case "GET":
        case "DELETE":
          v.callback = h[1], v.headers = h[2];
          break;
        case "POST":
        case "PUT":
          h[1] ? typeof h[1] != "string" ? v.data = Te(h[1]) : v.data = h[1] : v.data = "", v.callback = h[2], v.headers = h[3];
      }
      return v;
    }
    a2.Promise = window.Promise, a2.ajax = { cache: true, method: "get", serializeRequestParams: Te, parse: function(l) {
      return typeof l != "string" ? l : (l = l.replace(/^[\s]+/, ""), typeof DOMParser > "u" || a2.$env.isIE ? window.ActiveXObject !== void 0 && ((h = new window.ActiveXObject("Microsoft.XMLDOM")).async = "false", h.loadXML(l)) : h = new DOMParser().parseFromString(l, "text/xml"), h);
      var h;
    }, xmltop: function(l, h, v) {
      if (h.status === void 0 || h.status < 400) {
        var u = h.responseXML ? h.responseXML || h : this.parse(h.responseText || h);
        if (u && u.documentElement !== null && !u.getElementsByTagName("parsererror").length)
          return u.getElementsByTagName(l)[0];
      }
      return v !== -1 && a2.callEvent("onLoadXMLError", ["Incorrect XML", arguments[1], v]), document.createElement("DIV");
    }, xpath: function(l, h) {
      if (h.nodeName || (h = h.responseXML || h), a2.$env.isIE)
        return h.selectNodes(l) || [];
      for (var v, u = [], f = (h.ownerDocument || h).evaluate(l, h, null, XPathResult.ANY_TYPE, null); v = f.iterateNext(); )
        u.push(v);
      return u;
    }, query: function(l) {
      return this._call(l.method || "GET", l.url, l.data || "", l.async || true, l.callback, l.headers);
    }, get: function(l, h, v) {
      var u = o2("GET", arguments);
      return this.query(u);
    }, getSync: function(l, h) {
      var v = o2("GET", arguments);
      return v.async = false, this.query(v);
    }, put: function(l, h, v, u) {
      var f = o2("PUT", arguments);
      return this.query(f);
    }, del: function(l, h, v) {
      var u = o2("DELETE", arguments);
      return this.query(u);
    }, post: function(l, h, v, u) {
      arguments.length == 1 ? h = "" : arguments.length == 2 && typeof h == "function" && (v = h, h = "");
      var f = o2("POST", arguments);
      return this.query(f);
    }, postSync: function(l, h, v) {
      h = h === null ? "" : String(h);
      var u = o2("POST", arguments);
      return u.async = false, this.query(u);
    }, _call: function(l, h, v, u, f, c2) {
      return new a2.Promise(function(p, m) {
        var g = typeof XMLHttpRequest === void 0 || a2.$env.isIE ? new window.ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest(), y2 = navigator.userAgent.match(/AppleWebKit/) !== null && navigator.userAgent.match(/Qt/) !== null && navigator.userAgent.match(/Safari/) !== null;
        if (u && g.addEventListener("readystatechange", function() {
          if (g.readyState == 4 || y2 && g.readyState == 3) {
            if ((g.status != 200 || g.responseText === "") && !a2.callEvent("onAjaxError", [g]))
              return;
            setTimeout(function() {
              typeof f == "function" && f.apply(window, [{ xmlDoc: g, filePath: h }]), p(g), typeof f == "function" && (f = null, g = null);
            }, 0);
          }
        }), l != "GET" || this.cache || (h += (h.indexOf("?") >= 0 ? "&" : "?") + "dhxr" + (/* @__PURE__ */ new Date()).getTime() + "=1"), g.open(l, h, u), c2)
          for (var x in c2)
            g.setRequestHeader(x, c2[x]);
        else
          l.toUpperCase() == "POST" || l == "PUT" || l == "DELETE" ? g.setRequestHeader("Content-Type", "application/x-www-form-urlencoded") : l == "GET" && (v = null);
        if (g.setRequestHeader("X-Requested-With", "XMLHttpRequest"), g.send(v), !u)
          return { xmlDoc: g, filePath: h };
      }.bind(this));
    }, urlSeparator: function(l) {
      return l.indexOf("?") != -1 ? "&" : "?";
    } }, a2.$ajax = a2.ajax;
  }(i), Ut(i), function(a2) {
    a2.config = { default_date: "%j %M %Y", month_date: "%F %Y", load_date: "%Y-%m-%d", week_date: "%l", day_date: "%D %j", hour_date: "%H:%i", month_day: "%d", date_format: "%Y-%m-%d %H:%i", api_date: "%d-%m-%Y %H:%i", parse_exact_format: false, preserve_length: true, time_step: 5, displayed_event_color: "#ff4a4a", displayed_event_text_color: "#ffef80", wide_form: 0, day_column_padding: 8, use_select_menu_space: true, fix_tab_position: true, start_on_monday: true, first_hour: 0, last_hour: 24, readonly: false, drag_resize: true, drag_move: true, drag_create: true, drag_event_body: true, dblclick_create: true, details_on_dblclick: true, edit_on_create: true, details_on_create: true, header: null, hour_size_px: 44, resize_month_events: false, resize_month_timed: false, responsive_lightbox: false, separate_short_events: true, rtl: false, cascade_event_display: false, cascade_event_count: 4, cascade_event_margin: 30, multi_day: true, multi_day_height_limit: 200, drag_lightbox: true, preserve_scroll: true, select: true, undo_deleted: true, server_utc: false, touch: true, touch_tip: true, touch_drag: 500, touch_swipe_dates: false, quick_info_detached: true, positive_closing: false, drag_highlight: true, limit_drag_out: false, icons_edit: ["icon_save", "icon_cancel"], icons_select: ["icon_details", "icon_edit", "icon_delete"], buttons_left: ["dhx_save_btn", "dhx_cancel_btn"], buttons_right: ["dhx_delete_btn"], lightbox: { sections: [{ name: "description", map_to: "text", type: "textarea", focus: true }, { name: "time", height: 72, type: "time", map_to: "auto" }] }, highlight_displayed_event: true, left_border: false, ajax_error: "alert", delay_render: 0, timeline_swap_resize: true, wai_aria_attributes: true, wai_aria_application_role: true, csp: "auto", event_attribute: "data-event-id", show_errors: true }, a2.config.buttons_left.$initial = a2.config.buttons_left.join(), a2.config.buttons_right.$initial = a2.config.buttons_right.join(), a2._helpers = { parseDate: function(o2) {
      return (a2.templates.xml_date || a2.templates.parse_date)(o2);
    }, formatDate: function(o2) {
      return (a2.templates.xml_format || a2.templates.format_date)(o2);
    } }, a2.templates = {}, a2.init_templates = function() {
      var o2 = a2.date.date_to_str, l = a2.config;
      (function(h, v) {
        for (var u in v)
          h[u] || (h[u] = v[u]);
      })(a2.templates, { day_date: o2(l.default_date), month_date: o2(l.month_date), week_date: function(h, v) {
        return l.rtl ? a2.templates.day_date(a2.date.add(v, -1, "day")) + " &ndash; " + a2.templates.day_date(h) : a2.templates.day_date(h) + " &ndash; " + a2.templates.day_date(a2.date.add(v, -1, "day"));
      }, day_scale_date: o2(l.default_date), time_slot_text: function(h) {
        return "";
      }, time_slot_class: function(h) {
        return "";
      }, month_scale_date: o2(l.week_date), week_scale_date: o2(l.day_date), hour_scale: o2(l.hour_date), time_picker: o2(l.hour_date), event_date: o2(l.hour_date), month_day: o2(l.month_day), load_format: o2(l.load_date), format_date: o2(l.date_format, l.server_utc), parse_date: a2.date.str_to_date(l.date_format, l.server_utc), api_date: a2.date.str_to_date(l.api_date, false, false), event_header: function(h, v, u) {
        return u._mode === "small" || u._mode === "smallest" ? a2.templates.event_date(h) : a2.templates.event_date(h) + " - " + a2.templates.event_date(v);
      }, event_text: function(h, v, u) {
        return u.text;
      }, event_class: function(h, v, u) {
        return "";
      }, month_date_class: function(h) {
        return "";
      }, week_date_class: function(h) {
        return "";
      }, event_bar_date: function(h, v, u) {
        return a2.templates.event_date(h);
      }, event_bar_text: function(h, v, u) {
        return u.text;
      }, month_events_link: function(h, v) {
        return "<a>View more(" + v + " events)</a>";
      }, drag_marker_class: function(h, v, u) {
        return "";
      }, drag_marker_content: function(h, v, u) {
        return "";
      }, tooltip_date_format: a2.date.date_to_str("%Y-%m-%d %H:%i"), tooltip_text: function(h, v, u) {
        return "<b>Event:</b> " + u.text + "<br/><b>Start date:</b> " + a2.templates.tooltip_date_format(h) + "<br/><b>End date:</b> " + a2.templates.tooltip_date_format(v);
      }, calendar_month: o2("%F %Y"), calendar_scale_date: o2("%D"), calendar_date: o2("%d"), calendar_time: o2("%d-%m-%Y") }), this.callEvent("onTemplatesReady", []);
    };
  }(i), function(a2) {
    a2._events = {}, a2.clearAll = function() {
      this._events = {}, this._loaded = {}, this._edit_id = null, this._select_id = null, this._drag_id = null, this._drag_mode = null, this._drag_pos = null, this._new_event = null, this.clear_view(), this.callEvent("onClearAll", []);
    }, a2.addEvent = function(o2, l, h, v, u) {
      if (!arguments.length)
        return this.addEventNow();
      var f = o2;
      arguments.length != 1 && ((f = u || {}).start_date = o2, f.end_date = l, f.text = h, f.id = v), f.id = f.id || a2.uid(), f.text = f.text || "", typeof f.start_date == "string" && (f.start_date = this.templates.api_date(f.start_date)), typeof f.end_date == "string" && (f.end_date = this.templates.api_date(f.end_date));
      var c2 = 6e4 * (this.config.event_duration || this.config.time_step);
      f.start_date.valueOf() == f.end_date.valueOf() && f.end_date.setTime(f.end_date.valueOf() + c2), f.start_date.setMilliseconds(0), f.end_date.setMilliseconds(0), f._timed = this.isOneDayEvent(f);
      var p = !this._events[f.id];
      return this._events[f.id] = f, this.event_updated(f), this._loading || this.callEvent(p ? "onEventAdded" : "onEventChanged", [f.id, f]), f.id;
    }, a2.deleteEvent = function(o2, l) {
      var h = this._events[o2];
      (l || this.callEvent("onBeforeEventDelete", [o2, h]) && this.callEvent("onConfirmedBeforeEventDelete", [o2, h])) && (h && (a2.getState().select_id == o2 && a2.unselect(), delete this._events[o2], this.event_updated(h), this._drag_id == h.id && (this._drag_id = null, this._drag_mode = null, this._drag_pos = null)), this.callEvent("onEventDeleted", [o2, h]));
    }, a2.getEvent = function(o2) {
      return this._events[o2];
    }, a2.setEvent = function(o2, l) {
      l.id || (l.id = o2), this._events[o2] = l;
    }, a2.for_rendered = function(o2, l) {
      for (var h = this._rendered.length - 1; h >= 0; h--)
        this._rendered[h].getAttribute(this.config.event_attribute) == o2 && l(this._rendered[h], h);
    }, a2.changeEventId = function(o2, l) {
      if (o2 != l) {
        var h = this._events[o2];
        h && (h.id = l, this._events[l] = h, delete this._events[o2]), this.for_rendered(o2, function(v) {
          v.setAttribute("event_id", l), v.setAttribute(a2.config.event_attribute, l);
        }), this._select_id == o2 && (this._select_id = l), this._edit_id == o2 && (this._edit_id = l), this.callEvent("onEventIdChange", [o2, l]);
      }
    }, function() {
      for (var o2 = ["text", "Text", "start_date", "StartDate", "end_date", "EndDate"], l = function(u) {
        return function(f) {
          return a2.getEvent(f)[u];
        };
      }, h = function(u) {
        return function(f, c2) {
          var p = a2.getEvent(f);
          p[u] = c2, p._changed = true, p._timed = this.isOneDayEvent(p), a2.event_updated(p, true);
        };
      }, v = 0; v < o2.length; v += 2)
        a2["getEvent" + o2[v + 1]] = l(o2[v]), a2["setEvent" + o2[v + 1]] = h(o2[v]);
    }(), a2.event_updated = function(o2, l) {
      this.is_visible_events(o2) ? this.render_view_data() : this.clear_event(o2.id);
    }, a2.is_visible_events = function(o2) {
      if (!this._min_date || !this._max_date)
        return false;
      if (o2.start_date.valueOf() < this._max_date.valueOf() && this._min_date.valueOf() < o2.end_date.valueOf()) {
        var l = o2.start_date.getHours(), h = o2.end_date.getHours() + o2.end_date.getMinutes() / 60, v = this.config.last_hour, u = this.config.first_hour;
        return !(!this._table_view && (h > v || h <= u) && (l >= v || l < u) && !((o2.end_date.valueOf() - o2.start_date.valueOf()) / 36e5 > 24 - (this.config.last_hour - this.config.first_hour) || l < v && h > u));
      }
      return false;
    }, a2.isOneDayEvent = function(o2) {
      var l = new Date(o2.end_date.valueOf() - 1);
      return o2.start_date.getFullYear() === l.getFullYear() && o2.start_date.getMonth() === l.getMonth() && o2.start_date.getDate() === l.getDate() && o2.end_date.valueOf() - o2.start_date.valueOf() < 864e5;
    }, a2.get_visible_events = function(o2) {
      var l = [];
      for (var h in this._events)
        this.is_visible_events(this._events[h]) && (o2 && !this._events[h]._timed || this.filter_event(h, this._events[h]) && l.push(this._events[h]));
      return l;
    }, a2.filter_event = function(o2, l) {
      var h = this["filter_" + this._mode];
      return !h || h(o2, l);
    }, a2._is_main_area_event = function(o2) {
      return !!o2._timed;
    }, a2.render_view_data = function(o2, l) {
      var h = false;
      if (!o2) {
        if (h = true, this._not_render)
          return void (this._render_wait = true);
        this._render_wait = false, this.clear_view(), o2 = this.get_visible_events(!(this._table_view || this.config.multi_day));
      }
      for (var v = 0, u = o2.length; v < u; v++)
        this._recalculate_timed(o2[v]);
      if (this.config.multi_day && !this._table_view) {
        var f = [], c2 = [];
        for (v = 0; v < o2.length; v++)
          this._is_main_area_event(o2[v]) ? f.push(o2[v]) : c2.push(o2[v]);
        if (!this._els.dhx_multi_day) {
          var p = a2._commonErrorMessages.unknownView(this._mode);
          throw new Error(p);
        }
        this._rendered_location = this._els.dhx_multi_day[0], this._table_view = true, this.render_data(c2, l), this._table_view = false, this._rendered_location = this._els.dhx_cal_data[0], this._table_view = false, this.render_data(f, l);
      } else {
        var m = document.createDocumentFragment(), g = this._els.dhx_cal_data[0];
        this._rendered_location = m, this.render_data(o2, l), g.appendChild(m), this._rendered_location = g;
      }
      h && this.callEvent("onDataRender", []);
    }, a2._view_month_day = function(o2) {
      var l = a2.getActionData(o2).date;
      a2.callEvent("onViewMoreClick", [l]) && a2.setCurrentView(l, "day");
    }, a2._render_month_link = function(o2) {
      for (var l = this._rendered_location, h = this._lame_clone(o2), v = o2._sday; v < o2._eday; v++) {
        h._sday = v, h._eday = v + 1;
        var u = a2.date, f = a2._min_date;
        f = u.add(f, h._sweek, "week"), f = u.add(f, h._sday, "day");
        var c2 = a2.getEvents(f, u.add(f, 1, "day")).length, p = this._get_event_bar_pos(h), m = p.x2 - p.x, g = document.createElement("div");
        a2.event(g, "click", function(y2) {
          a2._view_month_day(y2);
        }), g.className = "dhx_month_link", g.style.top = p.y + "px", g.style.left = p.x + "px", g.style.width = m + "px", g.innerHTML = a2.templates.month_events_link(f, c2), this._rendered.push(g), l.appendChild(g);
      }
    }, a2._recalculate_timed = function(o2) {
      var l;
      o2 && (l = typeof o2 != "object" ? this._events[o2] : o2) && (l._timed = a2.isOneDayEvent(l));
    }, a2.attachEvent("onEventChanged", a2._recalculate_timed), a2.attachEvent("onEventAdded", a2._recalculate_timed), a2.render_data = function(o2, l) {
      o2 = this._pre_render_events(o2, l);
      for (var h = {}, v = 0; v < o2.length; v++)
        if (this._table_view)
          if (a2._mode != "month")
            this.render_event_bar(o2[v]);
          else {
            var u = a2.config.max_month_events;
            u !== 1 * u || o2[v]._sorder < u ? this.render_event_bar(o2[v]) : u !== void 0 && o2[v]._sorder == u && a2._render_month_link(o2[v]);
          }
        else {
          var f = o2[v], c2 = a2.locate_holder(f._sday);
          if (!c2)
            continue;
          h[f._sday] || (h[f._sday] = { real: c2, buffer: document.createDocumentFragment(), width: c2.clientWidth });
          var p = h[f._sday];
          this.render_event(f, p.buffer, p.width);
        }
      for (var v in h)
        (p = h[v]).real && p.buffer && p.real.appendChild(p.buffer);
    }, a2._get_first_visible_cell = function(o2) {
      for (var l = 0; l < o2.length; l++)
        if ((o2[l].className || "").indexOf("dhx_scale_ignore") == -1)
          return o2[l];
      return o2[0];
    }, a2._pre_render_events = function(o2, l) {
      var h = this.xy.bar_height, v = this._colsS.heights, u = this._colsS.heights = [0, 0, 0, 0, 0, 0, 0], f = this._els.dhx_cal_data[0];
      if (o2 = this._table_view ? this._pre_render_events_table(o2, l) : this._pre_render_events_line(o2, l), this._table_view)
        if (l)
          this._colsS.heights = v;
        else {
          var c2 = f.querySelectorAll(".dhx_cal_month_row");
          if (c2.length) {
            for (var p = 0; p < c2.length; p++) {
              u[p]++;
              var m = c2[p].querySelectorAll(".dhx_cal_month_cell"), g = this._colsS.height - this.xy.month_head_height;
              if (u[p] * h > g) {
                var y2 = g;
                1 * this.config.max_month_events !== this.config.max_month_events || u[p] <= this.config.max_month_events ? y2 = u[p] * h : (this.config.max_month_events + 1) * h > g && (y2 = (this.config.max_month_events + 1) * h), c2[p].style.height = y2 + this.xy.month_head_height + "px";
              }
              u[p] = (u[p - 1] || 0) + a2._get_first_visible_cell(m).offsetHeight;
            }
            u.unshift(0);
            const M = this.$container.querySelector(".dhx_cal_data");
            if (M.offsetHeight < M.scrollHeight && !a2._colsS.scroll_fix && a2.xy.scroll_width) {
              var x = a2._colsS, b = x[x.col_length], k = x.heights.slice();
              b -= a2.xy.scroll_width || 0, this._calc_scale_sizes(b, this._min_date, this._max_date), a2._colsS.heights = k, this.set_xy(this._els.dhx_cal_header[0], b), a2._render_scales(this._els.dhx_cal_header[0]), a2._render_month_scale(this._els.dhx_cal_data[0], this._get_timeunit_start(), this._min_date), x.scroll_fix = true;
            }
          } else if (o2.length || this._els.dhx_multi_day[0].style.visibility != "visible" || (u[0] = -1), o2.length || u[0] == -1) {
            var E = (u[0] + 1) * h + 4, D = E, w = E + "px";
            this.config.multi_day_height_limit && (w = (D = Math.min(E, this.config.multi_day_height_limit)) + "px");
            var S = this._els.dhx_multi_day[0];
            S.style.height = w, S.style.visibility = u[0] == -1 ? "hidden" : "visible", S.style.display = u[0] == -1 ? "none" : "";
            var N = this._els.dhx_multi_day[1];
            N.style.height = w, N.style.visibility = u[0] == -1 ? "hidden" : "visible", N.style.display = u[0] == -1 ? "none" : "", N.className = u[0] ? "dhx_multi_day_icon" : "dhx_multi_day_icon_small", this._dy_shift = (u[0] + 1) * h, this.config.multi_day_height_limit && (this._dy_shift = Math.min(this.config.multi_day_height_limit, this._dy_shift)), u[0] = 0, D != E && (S.style.overflowY = "auto", N.style.position = "fixed", N.style.top = "", N.style.left = "");
          }
        }
      return o2;
    }, a2._get_event_sday = function(o2) {
      var l = this.date.day_start(new Date(o2.start_date));
      return Math.round((l.valueOf() - this._min_date.valueOf()) / 864e5);
    }, a2._get_event_mapped_end_date = function(o2) {
      var l = o2.end_date;
      if (this.config.separate_short_events) {
        var h = (o2.end_date - o2.start_date) / 6e4;
        h < this._min_mapped_duration && (l = this.date.add(l, this._min_mapped_duration - h, "minute"));
      }
      return l;
    }, a2._pre_render_events_line = function(o2, l) {
      o2.sort(function(N, M) {
        return N.start_date.valueOf() == M.start_date.valueOf() ? N.id > M.id ? 1 : -1 : N.start_date > M.start_date ? 1 : -1;
      });
      var h = [], v = [];
      this._min_mapped_duration = Math.floor(60 * this.xy.min_event_height / this.config.hour_size_px);
      for (var u = 0; u < o2.length; u++) {
        var f = o2[u], c2 = f.start_date, p = f.end_date, m = c2.getHours(), g = p.getHours();
        if (f._sday = this._get_event_sday(f), this._ignores[f._sday])
          o2.splice(u, 1), u--;
        else {
          if (h[f._sday] || (h[f._sday] = []), !l) {
            f._inner = false;
            for (var y2 = h[f._sday]; y2.length; ) {
              var x = y2[y2.length - 1];
              if (!(this._get_event_mapped_end_date(x).valueOf() <= f.start_date.valueOf()))
                break;
              y2.splice(y2.length - 1, 1);
            }
            for (var b = y2.length, k = false, E = 0; E < y2.length; E++)
              if (x = y2[E], this._get_event_mapped_end_date(x).valueOf() <= f.start_date.valueOf()) {
                k = true, f._sorder = x._sorder, b = E, f._inner = true;
                break;
              }
            if (y2.length && (y2[y2.length - 1]._inner = true), !k)
              if (y2.length)
                if (y2.length <= y2[y2.length - 1]._sorder) {
                  if (y2[y2.length - 1]._sorder)
                    for (E = 0; E < y2.length; E++) {
                      for (var D = false, w = 0; w < y2.length; w++)
                        if (y2[w]._sorder == E) {
                          D = true;
                          break;
                        }
                      if (!D) {
                        f._sorder = E;
                        break;
                      }
                    }
                  else
                    f._sorder = 0;
                  f._inner = true;
                } else {
                  var S = y2[0]._sorder;
                  for (E = 1; E < y2.length; E++)
                    y2[E]._sorder > S && (S = y2[E]._sorder);
                  f._sorder = S + 1, f._inner = false;
                }
              else
                f._sorder = 0;
            y2.splice(b, b == y2.length ? 0 : 1, f), y2.length > (y2.max_count || 0) ? (y2.max_count = y2.length, f._count = y2.length) : f._count = f._count ? f._count : 1;
          }
          (m < this.config.first_hour || g >= this.config.last_hour) && (v.push(f), o2[u] = f = this._copy_event(f), m < this.config.first_hour && (f.start_date.setHours(this.config.first_hour), f.start_date.setMinutes(0)), g >= this.config.last_hour && (f.end_date.setMinutes(0), f.end_date.setHours(this.config.last_hour)), f.start_date > f.end_date || m == this.config.last_hour) && (o2.splice(u, 1), u--);
        }
      }
      if (!l) {
        for (u = 0; u < o2.length; u++)
          o2[u]._count = h[o2[u]._sday].max_count;
        for (u = 0; u < v.length; u++)
          v[u]._count = h[v[u]._sday].max_count;
      }
      return o2;
    }, a2._time_order = function(o2) {
      o2.sort(function(l, h) {
        return l.start_date.valueOf() == h.start_date.valueOf() ? l._timed && !h._timed ? 1 : !l._timed && h._timed ? -1 : l.id > h.id ? 1 : -1 : l.start_date > h.start_date ? 1 : -1;
      });
    }, a2._is_any_multiday_cell_visible = function(o2, l, h) {
      var v = this._cols.length, u = false, f = o2, c2 = true, p = new Date(l);
      for (a2.date.day_start(new Date(l)).valueOf() != l.valueOf() && (p = a2.date.day_start(p), p = a2.date.add(p, 1, "day")); f < p; ) {
        c2 = false;
        var m = this.locate_holder_day(f, false, h) % v;
        if (!this._ignores[m]) {
          u = true;
          break;
        }
        f = a2.date.add(f, 1, "day");
      }
      return c2 || u;
    }, a2._pre_render_events_table = function(o2, l) {
      this._time_order(o2);
      for (var h, v = [], u = [[], [], [], [], [], [], []], f = this._colsS.heights, c2 = this._cols.length, p = {}, m = 0; m < o2.length; m++) {
        var g = o2[m], y2 = g.id;
        p[y2] || (p[y2] = { first_chunk: true, last_chunk: true });
        var x = p[y2], b = h || g.start_date, k = g.end_date;
        b < this._min_date && (x.first_chunk = false, b = this._min_date), k > this._max_date && (x.last_chunk = false, k = this._max_date);
        var E = this.locate_holder_day(b, false, g);
        if (g._sday = E % c2, !this._ignores[g._sday] || !g._timed) {
          var D = this.locate_holder_day(k, true, g) || c2;
          if (g._eday = D % c2 || c2, g._length = D - E, g._sweek = Math.floor((this._correct_shift(b.valueOf(), 1) - this._min_date.valueOf()) / (864e5 * c2)), a2._is_any_multiday_cell_visible(b, k, g)) {
            var w, S = u[g._sweek];
            for (w = 0; w < S.length && !(S[w]._eday <= g._sday); w++)
              ;
            if (g._sorder && l || (g._sorder = w), g._sday + g._length <= c2)
              h = null, v.push(g), S[w] = g, f[g._sweek] = S.length - 1, g._first_chunk = x.first_chunk, g._last_chunk = x.last_chunk;
            else {
              var N = this._copy_event(g);
              N.id = g.id, N._length = c2 - g._sday, N._eday = c2, N._sday = g._sday, N._sweek = g._sweek, N._sorder = g._sorder, N.end_date = this.date.add(b, N._length, "day"), N._first_chunk = x.first_chunk, x.first_chunk && (x.first_chunk = false), v.push(N), S[w] = N, h = N.end_date, f[g._sweek] = S.length - 1, m--;
            }
          } else
            h = null;
        }
      }
      return v;
    }, a2._copy_dummy = function() {
      var o2 = new Date(this.start_date), l = new Date(this.end_date);
      this.start_date = o2, this.end_date = l;
    }, a2._copy_event = function(o2) {
      return this._copy_dummy.prototype = o2, new this._copy_dummy();
    }, a2._rendered = [], a2.clear_view = function() {
      for (var o2 = 0; o2 < this._rendered.length; o2++) {
        var l = this._rendered[o2];
        l.parentNode && l.parentNode.removeChild(l);
      }
      this._rendered = [];
    }, a2.updateEvent = function(o2) {
      var l = this.getEvent(o2);
      this.clear_event(o2), l && this.is_visible_events(l) && this.filter_event(o2, l) && (this._table_view || this.config.multi_day || l._timed) && (this.config.update_render ? this.render_view_data() : this.getState().mode != "month" || this.getState().drag_id || this.isOneDayEvent(l) ? this.render_view_data([l], true) : this.render_view_data());
    }, a2.clear_event = function(o2) {
      this.for_rendered(o2, function(l, h) {
        l.parentNode && l.parentNode.removeChild(l), a2._rendered.splice(h, 1);
      });
    }, a2._y_from_date = function(o2) {
      var l = 60 * o2.getHours() + o2.getMinutes();
      return Math.round((60 * l * 1e3 - 60 * this.config.first_hour * 60 * 1e3) * this.config.hour_size_px / 36e5) % (24 * this.config.hour_size_px);
    }, a2._calc_event_y = function(o2, l) {
      l = l || 0;
      var h = 60 * o2.start_date.getHours() + o2.start_date.getMinutes(), v = 60 * o2.end_date.getHours() + o2.end_date.getMinutes() || 60 * a2.config.last_hour;
      return { top: this._y_from_date(o2.start_date), height: Math.max(l, (v - h) * this.config.hour_size_px / 60) };
    }, a2.render_event = function(o2, l, h) {
      var v = a2.xy.menu_width, u = this.config.use_select_menu_space ? 0 : v;
      if (!(o2._sday < 0)) {
        var f = a2.locate_holder(o2._sday);
        if (f) {
          l = l || f;
          var c2 = this._calc_event_y(o2, a2.xy.min_event_height), p = c2.top, m = c2.height, g = o2._count || 1, y2 = o2._sorder || 0;
          h = h || f.clientWidth, this.config.day_column_padding && (h -= this.config.day_column_padding);
          var x = Math.floor((h - u) / g), b = y2 * x + 1;
          if (o2._inner || (x *= g - y2), this.config.cascade_event_display) {
            var k = this.config.cascade_event_count, E = this.config.cascade_event_margin;
            b = y2 % k * E;
            var D = o2._inner ? (g - y2 - 1) % k * E / 2 : 0;
            x = Math.floor(h - u - b - D);
          }
          o2._mode = m < 30 ? "smallest" : m < 42 ? "small" : null;
          var w = this._render_v_bar(o2, u + b, p, x, m, o2._text_style, a2.templates.event_header(o2.start_date, o2.end_date, o2), a2.templates.event_text(o2.start_date, o2.end_date, o2));
          if (o2._mode === "smallest" ? w.classList.add("dhx_cal_event--xsmall") : o2._mode === "small" && w.classList.add("dhx_cal_event--small"), this._waiAria.eventAttr(o2, w), this._rendered.push(w), l.appendChild(w), b = b + parseInt(this.config.rtl ? f.style.right : f.style.left, 10) + u, this._edit_id == o2.id) {
            w.style.zIndex = 1, x = Math.max(x, a2.xy.editor_width), (w = document.createElement("div")).setAttribute("event_id", o2.id), w.setAttribute(this.config.event_attribute, o2.id), this._waiAria.eventAttr(o2, w), w.className = "dhx_cal_event dhx_cal_editor", this.config.rtl && b++, this.set_xy(w, x, m, b, p), o2.color && w.style.setProperty("--dhx-scheduler-event-background", o2.color);
            var S = a2.templates.event_class(o2.start_date, o2.end_date, o2);
            S && (w.className += " " + S);
            var N = document.createElement("div");
            N.style.cssText += "overflow:hidden;height:100%", w.appendChild(N), this._els.dhx_cal_data[0].appendChild(w), this._rendered.push(w), N.innerHTML = "<textarea class='dhx_cal_editor'>" + o2.text + "</textarea>", this._editor = N.querySelector("textarea"), a2.event(this._editor, "keydown", function(j) {
              if (j.shiftKey)
                return true;
              var z = j.keyCode;
              z == a2.keys.edit_save && a2.editStop(true), z == a2.keys.edit_cancel && a2.editStop(false), z != a2.keys.edit_save && z != a2.keys.edit_cancel || j.preventDefault && j.preventDefault();
            }), a2.event(this._editor, "selectstart", function(j) {
              return j.cancelBubble = true, true;
            }), a2._focus(this._editor, true), this._els.dhx_cal_data[0].scrollLeft = 0;
          }
          if (this.xy.menu_width !== 0 && this._select_id == o2.id) {
            this.config.cascade_event_display && this._drag_mode && (w.style.zIndex = 1);
            for (var M, T = this.config["icons_" + (this._edit_id == o2.id ? "edit" : "select")], A = "", H = 0; H < T.length; H++) {
              const j = T[H];
              M = this._waiAria.eventMenuAttrString(j), A += `<div class='dhx_menu_icon ${j}' title='${this.locale.labels[j]}' ${M}></div>`;
            }
            var $ = this._render_v_bar(o2, b - v - 1, p, v, null, "", "<div class='dhx_menu_head'></div>", A, true);
            o2.color && $.style.setProperty("--dhx-scheduler-event-background", o2.color), o2.textColor && $.style.setProperty("--dhx-scheduler-event-color", o2.textColor), this._els.dhx_cal_data[0].appendChild($), this._rendered.push($);
          }
          this.config.drag_highlight && this._drag_id == o2.id && this.highlightEventPosition(o2);
        }
      }
    }, a2._render_v_bar = function(o2, l, h, v, u, f, c2, p, m) {
      var g = document.createElement("div"), y2 = o2.id, x = m ? "dhx_cal_event dhx_cal_select_menu" : "dhx_cal_event", b = a2.getState();
      b.drag_id == o2.id && (x += " dhx_cal_event_drag"), b.select_id == o2.id && (x += " dhx_cal_event_selected");
      var k = a2.templates.event_class(o2.start_date, o2.end_date, o2);
      k && (x = x + " " + k), this.config.cascade_event_display && (x += " dhx_cal_event_cascade");
      var E = v - 1, D = `<div event_id="${y2}" ${this.config.event_attribute}="${y2}" class="${x}"
				style="position:absolute; top:${h}px; ${this.config.rtl ? "right:" : "left:"}${l}px; width:${E}px; height:${u}px; ${f || ""}" 
				data-bar-start="${o2.start_date.valueOf()}" data-bar-end="${o2.end_date.valueOf()}">
				</div>`;
      g.innerHTML = D;
      var w = g.cloneNode(true).firstChild;
      if (!m && a2.renderEvent(w, o2, v, u, c2, p))
        return o2.color && w.style.setProperty("--dhx-scheduler-event-background", o2.color), o2.textColor && w.style.setProperty("--dhx-scheduler-event-color", o2.textColor), w;
      w = g.firstChild, o2.color && w.style.setProperty("--dhx-scheduler-event-background", o2.color), o2.textColor && w.style.setProperty("--dhx-scheduler-event-color", o2.textColor);
      var S = '<div class="dhx_event_move dhx_header" >&nbsp;</div>';
      S += '<div class="dhx_event_move dhx_title">' + c2 + "</div>", S += '<div class="dhx_body">' + p + "</div>";
      var N = "dhx_event_resize dhx_footer";
      return (m || o2._drag_resize === false) && (N = "dhx_resize_denied " + N), S += '<div class="' + N + '" style=" width:' + (m ? " margin-top:-1px;" : "") + '" ></div>', w.innerHTML = S, w;
    }, a2.renderEvent = function() {
      return false;
    }, a2.locate_holder = function(o2) {
      return this._mode == "day" ? this._els.dhx_cal_data[0].firstChild : this._els.dhx_cal_data[0].childNodes[o2];
    }, a2.locate_holder_day = function(o2, l) {
      var h = Math.floor((this._correct_shift(o2, 1) - this._min_date) / 864e5);
      return l && this.date.time_part(o2) && h++, h;
    }, a2._get_dnd_order = function(o2, l, h) {
      if (!this._drag_event)
        return o2;
      this._drag_event._orig_sorder ? o2 = this._drag_event._orig_sorder : this._drag_event._orig_sorder = o2;
      for (var v = l * o2; v + l > h; )
        o2--, v -= l;
      return Math.max(o2, 0);
    }, a2._get_event_bar_pos = function(o2) {
      var l = this.config.rtl, h = this._colsS, v = h[o2._sday], u = h[o2._eday];
      l && (v = h[h.col_length] - h[o2._eday] + h[0], u = h[h.col_length] - h[o2._sday] + h[0]), u == v && (u = h[o2._eday + 1]);
      var f = this.xy.bar_height, c2 = o2._sorder;
      if (o2.id == this._drag_id) {
        var p = h.heights[o2._sweek + 1] - h.heights[o2._sweek] - this.xy.month_head_height;
        c2 = a2._get_dnd_order(c2, f, p);
      }
      var m = c2 * f;
      return { x: v, x2: u, y: h.heights[o2._sweek] + (h.height ? this.xy.month_scale_height + 2 : 2) + m };
    }, a2.render_event_bar = function(o2) {
      var l = this._rendered_location, h = this._get_event_bar_pos(o2), v = h.y, u = h.x, f = h.x2, c2 = "";
      if (f) {
        var p = a2.config.resize_month_events && this._mode == "month" && (!o2._timed || a2.config.resize_month_timed), m = document.createElement("div"), g = o2.hasOwnProperty("_first_chunk") && o2._first_chunk, y2 = o2.hasOwnProperty("_last_chunk") && o2._last_chunk, x = p && (o2._timed || g), b = p && (o2._timed || y2), k = true, E = "dhx_cal_event_clear";
        o2._timed && !p || (k = false, E = "dhx_cal_event_line"), g && (E += " dhx_cal_event_line_start"), y2 && (E += " dhx_cal_event_line_end"), x && (c2 += "<div class='dhx_event_resize dhx_event_resize_start'></div>"), b && (c2 += "<div class='dhx_event_resize dhx_event_resize_end'></div>");
        var D = a2.templates.event_class(o2.start_date, o2.end_date, o2);
        D && (E += " " + D);
        var w = o2.color ? "--dhx-scheduler-event-background:" + o2.color + ";" : "", S = o2.textColor ? "--dhx-scheduler-event-color:" + o2.textColor + ";" : "", N = ["position:absolute", "top:" + v + "px", "left:" + u + "px", "width:" + (f - u - (k ? 1 : 0)) + "px", "height:" + (this.xy.bar_height - 2) + "px", S, w, o2._text_style || ""].join(";"), M = "<div event_id='" + o2.id + "' " + this.config.event_attribute + "='" + o2.id + "' class='" + E + "' style='" + N + "'" + this._waiAria.eventBarAttrString(o2) + ">";
        p && (M += c2), a2.getState().mode == "month" && (o2 = a2.getEvent(o2.id)), o2._timed && (M += `<span class='dhx_cal_event_clear_date'>${a2.templates.event_bar_date(o2.start_date, o2.end_date, o2)}</span>`), M += "<div class='dhx_cal_event_line_content'>", M += a2.templates.event_bar_text(o2.start_date, o2.end_date, o2) + "</div>", M += "</div>", M += "</div>", m.innerHTML = M, this._rendered.push(m.firstChild), l.appendChild(m.firstChild);
      }
    }, a2._locate_event = function(o2) {
      for (var l = null; o2 && !l && o2.getAttribute; )
        l = o2.getAttribute(this.config.event_attribute), o2 = o2.parentNode;
      return l;
    }, a2.edit = function(o2) {
      this._edit_id != o2 && (this.editStop(false, o2), this._edit_id = o2, this.updateEvent(o2));
    }, a2.editStop = function(o2, l) {
      if (!l || this._edit_id != l) {
        var h = this.getEvent(this._edit_id);
        h && (o2 && (h.text = this._editor.value), this._edit_id = null, this._editor = null, this.updateEvent(h.id), this._edit_stop_event(h, o2));
      }
    }, a2._edit_stop_event = function(o2, l) {
      this._new_event ? (l ? this.callEvent("onEventAdded", [o2.id, o2]) : o2 && this.deleteEvent(o2.id, true), this._new_event = null) : l && this.callEvent("onEventChanged", [o2.id, o2]);
    }, a2.getEvents = function(o2, l) {
      var h = [];
      for (var v in this._events) {
        var u = this._events[v];
        u && (!o2 && !l || u.start_date < l && u.end_date > o2) && h.push(u);
      }
      return h;
    }, a2.getRenderedEvent = function(o2) {
      if (o2) {
        for (var l = a2._rendered, h = 0; h < l.length; h++) {
          var v = l[h];
          if (v.getAttribute(a2.config.event_attribute) == o2)
            return v;
        }
        return null;
      }
    }, a2.showEvent = function(o2, l) {
      o2 && typeof o2 == "object" && (l = o2.mode, y2 = o2.section, o2 = o2.section);
      var h = typeof o2 == "number" || typeof o2 == "string" ? a2.getEvent(o2) : o2;
      if (l = l || a2._mode, h && (!this.checkEvent("onBeforeEventDisplay") || this.callEvent("onBeforeEventDisplay", [h, l]))) {
        var v = a2.config.scroll_hour;
        a2.config.scroll_hour = h.start_date.getHours();
        var u = a2.config.preserve_scroll;
        a2.config.preserve_scroll = false;
        var f = h.color, c2 = h.textColor;
        if (a2.config.highlight_displayed_event && (h.color = a2.config.displayed_event_color, h.textColor = a2.config.displayed_event_text_color), a2.setCurrentView(new Date(h.start_date), l), a2.config.scroll_hour = v, a2.config.preserve_scroll = u, a2.matrix && a2.matrix[l]) {
          var p = a2.getView(), m = p.y_property, g = a2.getEvent(h.id);
          if (g) {
            if (!y2) {
              var y2 = g[m];
              Array.isArray(y2) ? y2 = y2[0] : typeof y2 == "string" && a2.config.section_delimiter && y2.indexOf(a2.config.section_delimiter) > -1 && (y2 = y2.split(a2.config.section_delimiter)[0]);
            }
            var x = p.getSectionTop(y2), b = p.posFromDate(g.start_date), k = a2.$container.querySelector(".dhx_timeline_data_wrapper");
            if (b -= (k.offsetWidth - p.dx) / 2, x = x - k.offsetHeight / 2 + p.dy / 2, p._smartRenderingEnabled())
              var E = p.attachEvent("onScroll", function() {
                D(), p.detachEvent(E);
              });
            p.scrollTo({ left: b, top: x }), p._smartRenderingEnabled() || D();
          }
        } else
          D();
        a2.callEvent("onAfterEventDisplay", [h, l]);
      }
      function D() {
        h.color = f, h.textColor = c2;
      }
    };
  }(i), function(a2) {
    a2._append_drag_marker = function(o2) {
      if (!o2.parentNode) {
        var l = a2._els.dhx_cal_data[0].lastChild, h = a2._getClassName(l);
        h.indexOf("dhx_scale_holder") < 0 && l.previousSibling && (l = l.previousSibling), h = a2._getClassName(l), l && h.indexOf("dhx_scale_holder") === 0 && l.appendChild(o2);
      }
    }, a2._update_marker_position = function(o2, l) {
      var h = a2._calc_event_y(l, 0);
      o2.style.top = h.top + "px", o2.style.height = h.height + "px";
    }, a2.highlightEventPosition = function(o2) {
      var l = document.createElement("div");
      l.setAttribute("event_id", o2.id), l.setAttribute(this.config.event_attribute, o2.id), this._rendered.push(l), this._update_marker_position(l, o2);
      var h = this.templates.drag_marker_class(o2.start_date, o2.end_date, o2), v = this.templates.drag_marker_content(o2.start_date, o2.end_date, o2);
      l.className = "dhx_drag_marker", h && (l.className += " " + h), v && (l.innerHTML = v), this._append_drag_marker(l);
    };
  }(i), Vt(i), function(a2) {
    function o2() {
      const l = a2.config.csp === true, h = !!window.Sfdc || !!window.$A || window.Aura || "$shadowResolver$" in document.body;
      return l || h ? a2.$root : document.body;
    }
    a2._lightbox_controls = {}, a2.formSection = function(l) {
      for (var h = this.config.lightbox.sections, v = 0; v < h.length && h[v].name != l; v++)
        ;
      if (v === h.length)
        return null;
      var u = h[v];
      a2._lightbox || a2.getLightbox();
      var f = a2._lightbox.querySelector(`#${u.id}`), c2 = f.nextSibling, p = { section: u, header: f, node: c2, getValue: function(g) {
        return a2.form_blocks[u.type].get_value(c2, g || {}, u);
      }, setValue: function(g, y2) {
        return a2.form_blocks[u.type].set_value(c2, g, y2 || {}, u);
      } }, m = a2._lightbox_controls["get_" + u.type + "_control"];
      return m ? m(p) : p;
    }, a2._lightbox_controls.get_template_control = function(l) {
      return l.control = l.node, l;
    }, a2._lightbox_controls.get_select_control = function(l) {
      return l.control = l.node.getElementsByTagName("select")[0], l;
    }, a2._lightbox_controls.get_textarea_control = function(l) {
      return l.control = l.node.getElementsByTagName("textarea")[0], l;
    }, a2._lightbox_controls.get_time_control = function(l) {
      return l.control = l.node.getElementsByTagName("select"), l;
    }, a2._lightbox_controls.defaults = { template: { height: 30 }, textarea: { height: 200 }, select: { height: 23 }, time: { height: 20 } }, a2.form_blocks = { template: { render: function(l) {
      return "<div class='dhx_cal_ltext dhx_cal_template' ></div>";
    }, set_value: function(l, h, v, u) {
      l.innerHTML = h || "";
    }, get_value: function(l, h, v) {
      return l.innerHTML || "";
    }, focus: function(l) {
    } }, textarea: { render: function(l) {
      return `<div class='dhx_cal_ltext'><textarea ${l.placeholder ? `placeholder='${l.placeholder}'` : ""}></textarea></div>`;
    }, set_value: function(l, h, v) {
      a2.form_blocks.textarea._get_input(l).value = h || "";
    }, get_value: function(l, h) {
      return a2.form_blocks.textarea._get_input(l).value;
    }, focus: function(l) {
      var h = a2.form_blocks.textarea._get_input(l);
      a2._focus(h, true);
    }, _get_input: function(l) {
      return l.getElementsByTagName("textarea")[0];
    } }, select: { render: function(l) {
      for (var h = "<div class='dhx_cal_ltext dhx_cal_select'><select style='width:100%;'>", v = 0; v < l.options.length; v++)
        h += "<option value='" + l.options[v].key + "'>" + l.options[v].label + "</option>";
      return h + "</select></div>";
    }, set_value: function(l, h, v, u) {
      var f = l.firstChild;
      !f._dhx_onchange && u.onchange && (a2.event(f, "change", u.onchange), f._dhx_onchange = true), h === void 0 && (h = (f.options[0] || {}).value), f.value = h || "";
    }, get_value: function(l, h) {
      return l.firstChild.value;
    }, focus: function(l) {
      var h = l.firstChild;
      a2._focus(h, true);
    } }, time: { render: function(l) {
      l.time_format || (l.time_format = ["%H:%i", "%d", "%m", "%Y"]), l._time_format_order = {};
      var h = l.time_format, v = a2.config, u = a2.date.date_part(a2._currentDate()), f = 1440, c2 = 0;
      a2.config.limit_time_select && (f = 60 * v.last_hour + 1, c2 = 60 * v.first_hour, u.setHours(v.first_hour));
      for (var p = "", m = 0; m < h.length; m++) {
        var g = h[m];
        m > 0 && (p += " ");
        var y2 = "", x = "";
        switch (g) {
          case "%Y":
            var b, k, E;
            y2 = "dhx_lightbox_year_select", l._time_format_order[3] = m, l.year_range && (isNaN(l.year_range) ? l.year_range.push && (k = l.year_range[0], E = l.year_range[1]) : b = l.year_range), b = b || 10;
            var D = D || Math.floor(b / 2);
            k = k || u.getFullYear() - D, E = E || k + b;
            for (var w = k; w < E; w++)
              x += "<option value='" + w + "'>" + w + "</option>";
            break;
          case "%m":
            for (y2 = "dhx_lightbox_month_select", l._time_format_order[2] = m, w = 0; w < 12; w++)
              x += "<option value='" + w + "'>" + this.locale.date.month_full[w] + "</option>";
            break;
          case "%d":
            for (y2 = "dhx_lightbox_day_select", l._time_format_order[1] = m, w = 1; w < 32; w++)
              x += "<option value='" + w + "'>" + w + "</option>";
            break;
          case "%H:%i":
            y2 = "dhx_lightbox_time_select", l._time_format_order[0] = m, w = c2;
            var S = u.getDate();
            for (l._time_values = []; w < f; )
              x += "<option value='" + w + "'>" + this.templates.time_picker(u) + "</option>", l._time_values.push(w), u.setTime(u.valueOf() + 60 * this.config.time_step * 1e3), w = 24 * (u.getDate() != S ? 1 : 0) * 60 + 60 * u.getHours() + u.getMinutes();
        }
        if (x) {
          var N = a2._waiAria.lightboxSelectAttrString(g);
          p += "<select class='" + y2 + "' " + (l.readonly ? "disabled='disabled'" : "") + N + ">" + x + "</select> ";
        }
      }
      return "<div class='dhx_section_time'>" + p + "<span style='font-weight:normal; font-size:10pt;' class='dhx_section_time_spacer'> &nbsp;&ndash;&nbsp; </span>" + p + "</div>";
    }, set_value: function(l, h, v, u) {
      var f, c2, p = a2.config, m = l.getElementsByTagName("select"), g = u._time_format_order;
      if (p.full_day) {
        if (!l._full_day) {
          var y2 = "<label class='dhx_fullday'><input type='checkbox' name='full_day' value='true'> " + a2.locale.labels.full_day + "&nbsp;</label></input>";
          a2.config.wide_form || (y2 = l.previousSibling.innerHTML + y2), l.previousSibling.innerHTML = y2, l._full_day = true;
        }
        var x = l.previousSibling.getElementsByTagName("input")[0];
        x.checked = a2.date.time_part(v.start_date) === 0 && a2.date.time_part(v.end_date) === 0, m[g[0]].disabled = x.checked, m[g[0] + m.length / 2].disabled = x.checked, x.$_eventAttached || (x.$_eventAttached = true, a2.event(x, "click", function() {
          if (x.checked) {
            var D = {};
            a2.form_blocks.time.get_value(l, D, u), f = a2.date.date_part(D.start_date), (+(c2 = a2.date.date_part(D.end_date)) == +f || +c2 >= +f && (v.end_date.getHours() !== 0 || v.end_date.getMinutes() !== 0)) && (c2 = a2.date.add(c2, 1, "day"));
          } else
            f = null, c2 = null;
          m[g[0]].disabled = x.checked, m[g[0] + m.length / 2].disabled = x.checked, E(m, 0, f || v.start_date), E(m, 4, c2 || v.end_date);
        }));
      }
      if (p.auto_end_date && p.event_duration)
        for (var b = function() {
          p.auto_end_date && p.event_duration && (f = new Date(m[g[3]].value, m[g[2]].value, m[g[1]].value, 0, m[g[0]].value), c2 = new Date(f.getTime() + 60 * a2.config.event_duration * 1e3), E(m, 4, c2));
        }, k = 0; k < 4; k++)
          m[k].$_eventAttached || (m[k].$_eventAttached = true, a2.event(m[k], "change", b));
      function E(D, w, S) {
        for (var N = u._time_values, M = 60 * S.getHours() + S.getMinutes(), T = M, A = false, H = 0; H < N.length; H++) {
          var $ = N[H];
          if ($ === M) {
            A = true;
            break;
          }
          $ < M && (T = $);
        }
        D[w + g[0]].value = A ? M : T, A || T || (D[w + g[0]].selectedIndex = -1), D[w + g[1]].value = S.getDate(), D[w + g[2]].value = S.getMonth(), D[w + g[3]].value = S.getFullYear();
      }
      E(m, 0, v.start_date), E(m, 4, v.end_date);
    }, get_value: function(l, h, v) {
      var u = l.getElementsByTagName("select"), f = v._time_format_order;
      if (h.start_date = new Date(u[f[3]].value, u[f[2]].value, u[f[1]].value, 0, u[f[0]].value), h.end_date = new Date(u[f[3] + 4].value, u[f[2] + 4].value, u[f[1] + 4].value, 0, u[f[0] + 4].value), !u[f[3]].value || !u[f[3] + 4].value) {
        var c2 = a2.getEvent(a2._lightbox_id);
        c2 && (h.start_date = c2.start_date, h.end_date = c2.end_date);
      }
      return h.end_date <= h.start_date && (h.end_date = a2.date.add(h.start_date, a2.config.time_step, "minute")), { start_date: new Date(h.start_date), end_date: new Date(h.end_date) };
    }, focus: function(l) {
      a2._focus(l.getElementsByTagName("select")[0]);
    } } }, a2._setLbPosition = function(l) {
      l && (l.style.top = Math.max(o2().offsetHeight / 2 - l.offsetHeight / 2, 0) + "px", l.style.left = Math.max(o2().offsetWidth / 2 - l.offsetWidth / 2, 0) + "px");
    }, a2.showCover = function(l) {
      l && (l.style.display = "block", this._setLbPosition(l)), a2.config.responsive_lightbox && (document.documentElement.classList.add("dhx_cal_overflow_container"), o2().classList.add("dhx_cal_overflow_container")), this.show_cover(), this._cover.style.display = "";
    }, a2.showLightbox = function(l) {
      if (l)
        if (this.callEvent("onBeforeLightbox", [l])) {
          this.showCover(h);
          var h = this.getLightbox();
          this._setLbPosition(h), this._fill_lightbox(l, h), this._waiAria.lightboxVisibleAttr(h), this.callEvent("onLightbox", [l]);
        } else
          this._new_event && (this._new_event = null);
    }, a2._fill_lightbox = function(l, h) {
      var v = this.getEvent(l), u = h.getElementsByTagName("span"), f = [];
      if (a2.templates.lightbox_header) {
        f.push("");
        var c2 = a2.templates.lightbox_header(v.start_date, v.end_date, v);
        f.push(c2), u[1].innerHTML = "", u[2].innerHTML = c2;
      } else {
        var p = this.templates.event_header(v.start_date, v.end_date, v), m = (this.templates.event_bar_text(v.start_date, v.end_date, v) || "").substr(0, 70);
        f.push(p), f.push(m), u[1].innerHTML = p, u[2].innerHTML = m;
      }
      this._waiAria.lightboxHeader(h, f.join(" "));
      for (var g = this.config.lightbox.sections, y2 = 0; y2 < g.length; y2++) {
        var x = g[y2], b = a2._get_lightbox_section_node(x), k = this.form_blocks[x.type], E = v[x.map_to] !== void 0 ? v[x.map_to] : x.default_value;
        k.set_value.call(this, b, E, v, x), g[y2].focus && k.focus.call(this, b);
      }
      a2._lightbox_id = l;
    }, a2._get_lightbox_section_node = function(l) {
      return a2._lightbox.querySelector(`#${l.id}`).nextSibling;
    }, a2._lightbox_out = function(l) {
      for (var h = this.config.lightbox.sections, v = 0; v < h.length; v++) {
        var u = a2._lightbox.querySelector(`#${h[v].id}`);
        u = u && u.nextSibling;
        var f = this.form_blocks[h[v].type].get_value.call(this, u, l, h[v]);
        h[v].map_to != "auto" && (l[h[v].map_to] = f);
      }
      return l;
    }, a2._empty_lightbox = function(l) {
      var h = a2._lightbox_id, v = this.getEvent(h);
      this._lame_copy(v, l), this.setEvent(v.id, v), this._edit_stop_event(v, true), this.render_view_data();
    }, a2.hide_lightbox = function(l) {
      a2.endLightbox(false, this.getLightbox());
    }, a2.hideCover = function(l) {
      l && (l.style.display = "none"), this.hide_cover(), a2.config.responsive_lightbox && (document.documentElement.classList.remove("dhx_cal_overflow_container"), o2().classList.remove("dhx_cal_overflow_container"));
    }, a2.hide_cover = function() {
      this._cover && this._cover.parentNode.removeChild(this._cover), this._cover = null;
    }, a2.show_cover = function() {
      this._cover || (this._cover = document.createElement("div"), this._cover.className = "dhx_cal_cover", this._cover.style.display = "none", a2.event(this._cover, "mousemove", a2._move_while_dnd), a2.event(this._cover, "mouseup", a2._finish_dnd), o2().appendChild(this._cover));
    }, a2.save_lightbox = function() {
      var l = this._lightbox_out({}, this._lame_copy(this.getEvent(this._lightbox_id)));
      this.checkEvent("onEventSave") && !this.callEvent("onEventSave", [this._lightbox_id, l, this._new_event]) || (this._empty_lightbox(l), this.hide_lightbox());
    }, a2.startLightbox = function(l, h) {
      this._lightbox_id = l, this._custom_lightbox = true, this._temp_lightbox = this._lightbox, this._lightbox = h, this.showCover(h);
    }, a2.endLightbox = function(l, h) {
      h = h || a2.getLightbox();
      var v = a2.getEvent(this._lightbox_id);
      v && this._edit_stop_event(v, l), l && a2.render_view_data(), this.hideCover(h), this._custom_lightbox && (this._lightbox = this._temp_lightbox, this._custom_lightbox = false), this._temp_lightbox = this._lightbox_id = null, this._waiAria.lightboxHiddenAttr(h), this.resetLightbox(), this.callEvent("onAfterLightbox", []);
    }, a2.resetLightbox = function() {
      a2._lightbox && !a2._custom_lightbox && a2._lightbox.parentNode.removeChild(a2._lightbox), a2._lightbox = null;
    }, a2.cancel_lightbox = function() {
      this._lightbox_id && this.callEvent("onEventCancel", [this._lightbox_id, !!this._new_event]), this.hide_lightbox();
    }, a2.hideLightbox = a2.cancel_lightbox, a2._init_lightbox_events = function() {
      if (this.getLightbox().$_eventAttached)
        return;
      const l = this.getLightbox();
      l.$_eventAttached = true, a2.event(l, "click", function(h) {
        h.target.closest(".dhx_cal_ltitle_close_btn") && a2.cancel_lightbox();
        const v = a2.$domHelpers.closest(h.target, ".dhx_btn_set");
        if (!v) {
          const c2 = a2.$domHelpers.closest(h.target, ".dhx_custom_button[data-section-index]");
          if (c2) {
            const p = Number(c2.getAttribute("data-section-index"));
            a2.form_blocks[a2.config.lightbox.sections[p].type].button_click(a2.$domHelpers.closest(c2, ".dhx_cal_lsection"), c2, h);
          }
          return;
        }
        const u = v ? v.getAttribute("data-action") : null;
        switch (u) {
          case "dhx_save_btn":
          case "save":
            if (a2.config.readonly_active)
              return;
            a2.save_lightbox();
            break;
          case "dhx_delete_btn":
          case "delete":
            if (a2.config.readonly_active)
              return;
            var f = a2.locale.labels.confirm_deleting;
            a2._dhtmlx_confirm({ message: f, title: a2.locale.labels.title_confirm_deleting, callback: function() {
              a2.deleteEvent(a2._lightbox_id), a2._new_event = null, a2.hide_lightbox();
            }, config: { ok: a2.locale.labels.icon_delete } });
            break;
          case "dhx_cancel_btn":
          case "cancel":
            a2.cancel_lightbox();
            break;
          default:
            a2.callEvent("onLightboxButton", [u, v, h]);
        }
      }), a2.event(l, "keydown", function(h) {
        var v = h || window.event, u = h.target || h.srcElement, f = u.querySelector("[dhx_button]");
        switch (f || (f = u.parentNode.querySelector(".dhx_custom_button, .dhx_readonly")), (h || v).keyCode) {
          case 32:
            if ((h || v).shiftKey)
              return;
            f && f.click && f.click();
            break;
          case a2.keys.edit_save:
            if ((h || v).shiftKey)
              return;
            if (f && f.click)
              f.click();
            else {
              if (a2.config.readonly_active)
                return;
              a2.save_lightbox();
            }
            break;
          case a2.keys.edit_cancel:
            a2.cancel_lightbox();
        }
      });
    }, a2.setLightboxSize = function() {
    }, a2._init_dnd_events = function() {
      a2.event(o2(), "mousemove", a2._move_while_dnd), a2.event(o2(), "mouseup", a2._finish_dnd), a2._init_dnd_events = function() {
      };
    }, a2._move_while_dnd = function(l) {
      if (a2._dnd_start_lb) {
        document.dhx_unselectable || (o2().classList.add("dhx_unselectable"), document.dhx_unselectable = true);
        var h = a2.getLightbox(), v = [l.pageX, l.pageY];
        h.style.top = a2._lb_start[1] + v[1] - a2._dnd_start_lb[1] + "px", h.style.left = a2._lb_start[0] + v[0] - a2._dnd_start_lb[0] + "px";
      }
    }, a2._ready_to_dnd = function(l) {
      var h = a2.getLightbox();
      a2._lb_start = [h.offsetLeft, h.offsetTop], a2._dnd_start_lb = [l.pageX, l.pageY];
    }, a2._finish_dnd = function() {
      a2._lb_start && (a2._lb_start = a2._dnd_start_lb = false, o2().classList.remove("dhx_unselectable"), document.dhx_unselectable = false);
    }, a2.getLightbox = function() {
      if (!this._lightbox) {
        var l = document.createElement("div");
        l.className = "dhx_cal_light", a2.config.wide_form && (l.className += " dhx_cal_light_wide"), a2.form_blocks.recurring && (l.className += " dhx_cal_light_rec"), a2.config.rtl && (l.className += " dhx_cal_light_rtl"), a2.config.responsive_lightbox && (l.className += " dhx_cal_light_responsive"), l.style.visibility = "hidden";
        var h = this._lightbox_template, v = this.config.buttons_left;
        h += "<div class='dhx_cal_lcontrols'>";
        for (var u = 0; u < v.length; u++)
          h += "<div " + this._waiAria.lightboxButtonAttrString(v[u]) + " data-action='" + v[u] + "' class='dhx_btn_set dhx_" + (a2.config.rtl ? "right" : "left") + "_btn_set " + v[u] + "_set'><div class='dhx_btn_inner " + v[u] + "'></div><div>" + a2.locale.labels[v[u]] + "</div></div>";
        v = this.config.buttons_right;
        var f = a2.config.rtl;
        for (u = 0; u < v.length; u++)
          h += "<div class='dhx_cal_lcontrols_push_right'></div>", h += "<div " + this._waiAria.lightboxButtonAttrString(v[u]) + " data-action='" + v[u] + "' class='dhx_btn_set dhx_" + (f ? "left" : "right") + "_btn_set " + v[u] + "_set'><div class='dhx_btn_inner " + v[u] + "'></div><div>" + a2.locale.labels[v[u]] + "</div></div>";
        h += "</div>", h += "</div>", l.innerHTML = h, a2.config.drag_lightbox && (a2.event(l.firstChild, "mousedown", a2._ready_to_dnd), a2.event(l.firstChild, "selectstart", function(b) {
          return b.preventDefault(), false;
        }), l.firstChild.style.cursor = "move", a2._init_dnd_events()), this._waiAria.lightboxAttr(l), this.show_cover(), this._cover.insertBefore(l, this._cover.firstChild), this._lightbox = l;
        var c2 = this.config.lightbox.sections;
        for (h = "", u = 0; u < c2.length; u++) {
          var p = this.form_blocks[c2[u].type];
          if (p) {
            c2[u].id = "area_" + this.uid();
            var m = "";
            c2[u].button && (m = "<div " + a2._waiAria.lightboxSectionButtonAttrString(this.locale.labels["button_" + c2[u].button]) + " class='dhx_custom_button' data-section-index='" + u + "' index='" + u + "'><div class='dhx_custom_button_" + c2[u].button + "'></div><div>" + this.locale.labels["button_" + c2[u].button] + "</div></div>"), this.config.wide_form && (h += "<div class='dhx_wrap_section'>");
            var g = this.locale.labels["section_" + c2[u].name];
            typeof g != "string" && (g = c2[u].name), h += "<div id='" + c2[u].id + "' class='dhx_cal_lsection dhx_cal_lsection_" + c2[u].name + "'>" + m + "<label>" + g + "</label></div>" + p.render.call(this, c2[u]), h += "</div>";
          }
        }
        var y2 = l.getElementsByTagName("div");
        for (u = 0; u < y2.length; u++) {
          var x = y2[u];
          if (a2._getClassName(x) == "dhx_cal_larea") {
            x.innerHTML = h;
            break;
          }
        }
        a2._bindLightboxLabels(c2), this.setLightboxSize(), this._init_lightbox_events(this), l.style.visibility = "visible";
      }
      return this._lightbox;
    }, a2._bindLightboxLabels = function(l) {
      for (var h = 0; h < l.length; h++) {
        var v = l[h];
        if (v.id && a2._lightbox.querySelector(`#${v.id}`)) {
          for (var u = a2._lightbox.querySelector(`#${v.id}`).querySelector("label"), f = a2._get_lightbox_section_node(v); f && !f.querySelector; )
            f = f.nextSibling;
          var c2 = true;
          if (f) {
            var p = f.querySelector("input, select, textarea");
            p && (v.inputId = p.id || "input_" + a2.uid(), p.id || (p.id = v.inputId), u.setAttribute("for", v.inputId), c2 = false);
          }
          c2 && a2.form_blocks[v.type].focus && a2.event(u, "click", /* @__PURE__ */ function(m) {
            return function() {
              var g = a2.form_blocks[m.type], y2 = a2._get_lightbox_section_node(m);
              g && g.focus && g.focus.call(a2, y2);
            };
          }(v));
        }
      }
    }, a2.attachEvent("onEventIdChange", function(l, h) {
      this._lightbox_id == l && (this._lightbox_id = h);
    }), a2._lightbox_template = `<div class='dhx_cal_ltitle'><div class="dhx_cal_ltitle_descr"><span class='dhx_mark'>&nbsp;</span><span class='dhx_time'></span><span class='dhx_title'></span>
</div>
<div class="dhx_cal_ltitle_controls">
<a class="dhx_cal_ltitle_close_btn scheduler_icon close"></a>
</div></div><div class='dhx_cal_larea'></div>`;
  }(i), Bt(i), function(a2) {
    a2.getRootView = function() {
      return { view: { render: function() {
        return { tag: "div", type: 1, attrs: { style: "width:100%;height:100%;" }, hooks: { didInsert: function() {
          a2.setCurrentView();
        } }, body: [{ el: this.el, type: 1 }] };
      }, init: function() {
        var o2 = document.createElement("DIV");
        o2.id = "scheduler_" + a2.uid(), o2.style.width = "100%", o2.style.height = "100%", o2.classList.add("dhx_cal_container"), o2.cmp = "grid", o2.innerHTML = '<div class="dhx_cal_navline"><div class="dhx_cal_prev_button"></div><div class="dhx_cal_next_button"></div><div class="dhx_cal_today_button"></div><div class="dhx_cal_date"></div><div class="dhx_cal_tab" data-tab="day"></div><div class="dhx_cal_tab" data-tab="week"></div><div class="dhx_cal_tab" data-tab="month"></div></div><div class="dhx_cal_header"></div><div class="dhx_cal_data"></div>', a2.init(o2), this.el = o2;
      } }, type: 4 };
    };
  }(i), Ft(i), window.jQuery && (r2 = window.jQuery, d = 0, n = [], r2.fn.dhx_scheduler = function(a2) {
    if (typeof a2 != "string") {
      var o2 = [];
      return this.each(function() {
        if (this && this.getAttribute)
          if (this.getAttribute("dhxscheduler"))
            o2.push(window[this.getAttribute("dhxscheduler")]);
          else {
            var l = "scheduler";
            d && (l = "scheduler" + (d + 1), window[l] = Scheduler.getSchedulerInstance());
            var h = window[l];
            for (var v in this.setAttribute("dhxscheduler", l), a2)
              v != "data" && (h.config[v] = a2[v]);
            this.getElementsByTagName("div").length || (this.innerHTML = '<div class="dhx_cal_navline"><div class="dhx_cal_prev_button"></div><div class="dhx_cal_next_button"></div><div class="dhx_cal_today_button"></div><div class="dhx_cal_date"></div><div class="dhx_cal_tab" name="day_tab" data-tab="day" style="right:204px;"></div><div class="dhx_cal_tab" name="week_tab" data-tab="week" style="right:140px;"></div><div class="dhx_cal_tab" name="month_tab" data-tab="month" style="right:76px;"></div></div><div class="dhx_cal_header"></div><div class="dhx_cal_data"></div>', this.className += " dhx_cal_container"), h.init(this, h.config.date, h.config.mode), a2.data && h.parse(a2.data), o2.push(h), d++;
          }
      }), o2.length === 1 ? o2[0] : o2;
    }
    if (n[a2])
      return n[a2].apply(this, []);
    r2.error("Method " + a2 + " does not exist on jQuery.dhx_scheduler");
  }), function(a2) {
    (function() {
      var o2 = a2.setCurrentView, l = a2.updateView, h = null, v = null, u = function(p, m) {
        var g = this;
        oe.clearTimeout(v), oe.clearTimeout(h);
        var y2 = g._date, x = g._mode;
        c2(this, p, m), v = setTimeout(function() {
          a2.$destroyed || (g.callEvent("onBeforeViewChange", [x, y2, m || g._mode, p || g._date]) ? (l.call(g, p, m), g.callEvent("onViewChange", [g._mode, g._date]), oe.clearTimeout(h), v = 0) : c2(g, y2, x));
        }, a2.config.delay_render);
      }, f = function(p, m) {
        var g = this, y2 = arguments;
        c2(this, p, m), oe.clearTimeout(h), h = setTimeout(function() {
          a2.$destroyed || v || l.apply(g, y2);
        }, a2.config.delay_render);
      };
      function c2(p, m, g) {
        m && (p._date = m), g && (p._mode = g);
      }
      a2.attachEvent("onSchedulerReady", function() {
        a2.config.delay_render ? (a2.setCurrentView = u, a2.updateView = f) : (a2.setCurrentView = o2, a2.updateView = l);
      });
    })();
  }(i), function(a2) {
    a2.createDataProcessor = function(o2) {
      var l, h;
      o2 instanceof Function ? l = o2 : o2.hasOwnProperty("router") ? l = o2.router : o2.hasOwnProperty("event") && (l = o2), h = l ? "CUSTOM" : o2.mode || "REST-JSON";
      var v = new He(o2.url);
      return v.init(a2), v.setTransactionMode({ mode: h, router: l }, o2.batchUpdate), v;
    }, a2.DataProcessor = He;
  }(i), function(a2) {
    a2.attachEvent("onSchedulerReady", function() {
      typeof dhtmlxError < "u" && window.dhtmlxError.catchError("LoadXML", function(o2, l, h) {
        var v = h[0].responseText;
        switch (a2.config.ajax_error) {
          case "alert":
            oe.alert(v);
            break;
          case "console":
            oe.console.log(v);
        }
      });
    });
  }(i);
  const s = new ha({ en: na, ar: Kt2, be: Gt, ca: Xt, cn: Zt, cs: Qt, da: ea, de: ta, el: aa, es: ra, fi: ia, fr: oa, he: sa, hu: da, id: _a, it: la, jp: ca, nb: ua, nl: fa, no: pa, pl: ma, pt: va, ro: ga, ru: ya, si: ba, sk: xa, sv: ka, tr: wa, ua: Ea });
  i.i18n = { addLocale: s.addLocale, setLocale: function(a2) {
    if (typeof a2 == "string") {
      var o2 = s.getLocale(a2);
      o2 || (o2 = s.getLocale("en")), i.locale = o2;
    } else if (a2)
      if (i.locale)
        for (var l in a2)
          a2[l] && typeof a2[l] == "object" ? (i.locale[l] || (i.locale[l] = {}), i.mixin(i.locale[l], a2[l], true)) : i.locale[l] = a2[l];
      else
        i.locale = a2;
    var h = i.locale.labels;
    h.dhx_save_btn = h.icon_save, h.dhx_cancel_btn = h.icon_cancel, h.dhx_delete_btn = h.icon_delete, i.$container && i.get_elements();
  }, getLocale: s.getLocale }, i.i18n.setLocale("en"), At(i), i.ext = {};
  const _ = {};
  return i.plugins = function(a2) {
    (function(l, h, v) {
      const u = [];
      for (const f in l)
        if (l[f]) {
          const c2 = f.toLowerCase();
          h[c2] && h[c2].forEach(function(p) {
            const m = p.toLowerCase();
            l[m] || u.push(m);
          }), u.push(c2);
        }
      return u.sort(function(f, c2) {
        const p = v[f] || 0, m = v[c2] || 0;
        return p > m ? 1 : p < m ? -1 : 0;
      }), u;
    })(a2, { treetimeline: ["timeline"], daytimeline: ["timeline"], outerdrag: ["legacy"] }, { legacy: 1, limit: 1, timeline: 2, daytimeline: 3, treetimeline: 3, outerdrag: 6 }).forEach(function(l) {
      if (!_[l]) {
        const h = e2.getExtension(l);
        if (!h)
          throw new Error("unknown plugin " + l);
        h(i), _[l] = true;
      }
    });
  }, i;
}
function Ma(e2) {
  (function() {
    var i = [];
    function t2() {
      return !!i.length;
    }
    function r2(_) {
      setTimeout(function() {
        if (e2.$destroyed)
          return true;
        t2() || function(a2, o2) {
          for (; a2 && a2 != o2; )
            a2 = a2.parentNode;
          return a2 == o2;
        }(document.activeElement, e2.$container) || e2.focus();
      }, 1);
    }
    function d(_) {
      var a2 = (_ = _ || window.event).currentTarget;
      a2 == i[i.length - 1] && e2.$keyboardNavigation.trapFocus(a2, _);
    }
    if (e2.attachEvent("onLightbox", function() {
      var _;
      _ = e2.getLightbox(), e2.eventRemove(_, "keydown", d), e2.event(_, "keydown", d), i.push(_);
    }), e2.attachEvent("onAfterLightbox", function() {
      var _ = i.pop();
      _ && e2.eventRemove(_, "keydown", d), r2();
    }), e2.attachEvent("onAfterQuickInfo", function() {
      r2();
    }), !e2._keyNavMessagePopup) {
      e2._keyNavMessagePopup = true;
      var n = null, s = null;
      const _ = [];
      e2.attachEvent("onMessagePopup", function(a2) {
        for (n = document.activeElement, s = n; s && e2._getClassName(s).indexOf("dhx_cal_data") < 0; )
          s = s.parentNode;
        s && (s = s.parentNode), e2.eventRemove(a2, "keydown", d), e2.event(a2, "keydown", d), _.push(a2);
      }), e2.attachEvent("onAfterMessagePopup", function() {
        var a2 = _.pop();
        a2 && e2.eventRemove(a2, "keydown", d), setTimeout(function() {
          if (e2.$destroyed)
            return true;
          for (var o2 = document.activeElement; o2 && e2._getClassName(o2).indexOf("dhx_cal_light") < 0; )
            o2 = o2.parentNode;
          o2 || (n && n.parentNode ? n.focus() : s && s.parentNode && s.focus(), n = null, s = null);
        }, 1);
      });
    }
    e2.$keyboardNavigation.isModal = t2;
  })();
}
function Ta(e2) {
  e2._temp_key_scope = function() {
    e2.config.key_nav = true, e2.$keyboardNavigation._pasteDate = null, e2.$keyboardNavigation._pasteSection = null;
    var i = null, t2 = {};
    function r2(s) {
      s = s || window.event, t2.x = s.clientX, t2.y = s.clientY;
    }
    function d() {
      for (var s, _, a2 = document.elementFromPoint(t2.x, t2.y); a2 && a2 != e2._obj; )
        a2 = a2.parentNode;
      return s = a2 == e2._obj, _ = e2.$keyboardNavigation.dispatcher.isEnabled(), s || _;
    }
    function n(s) {
      return e2._lame_copy({}, s);
    }
    document.body ? e2.event(document.body, "mousemove", r2) : e2.event(window, "load", function() {
      e2.event(document.body, "mousemove", r2);
    }), e2.attachEvent("onMouseMove", function(s, _) {
      var a2 = e2.getState();
      if (a2.mode && a2.min_date) {
        var o2 = e2.getActionData(_);
        e2.$keyboardNavigation._pasteDate = o2.date, e2.$keyboardNavigation._pasteSection = o2.section;
      }
    }), e2._make_pasted_event = function(s) {
      var _ = e2.$keyboardNavigation._pasteDate, a2 = e2.$keyboardNavigation._pasteSection, o2 = s.end_date - s.start_date, l = n(s);
      if (function(v) {
        delete v.rec_type, delete v.rec_pattern, delete v.event_pid, delete v.event_length;
      }(l), l.start_date = new Date(_), l.end_date = new Date(l.start_date.valueOf() + o2), a2) {
        var h = e2._get_section_property();
        e2.config.multisection ? l[h] = s[h] : l[h] = a2;
      }
      return l;
    }, e2._do_paste = function(s, _, a2) {
      e2.callEvent("onBeforeEventPasted", [s, _, a2]) !== false && (e2.addEvent(_), e2.callEvent("onEventPasted", [s, _, a2]));
    }, e2._is_key_nav_active = function() {
      return !(!this._is_initialized() || this._is_lightbox_open() || !this.config.key_nav);
    }, e2.event(document, "keydown", function(s) {
      (s.ctrlKey || s.metaKey) && s.keyCode == 86 && e2._buffer_event && !e2.$keyboardNavigation.dispatcher.isEnabled() && (e2.$keyboardNavigation.dispatcher.isActive = d());
    }), e2._key_nav_copy_paste = function(s) {
      if (!e2._is_key_nav_active())
        return true;
      if (s.keyCode == 37 || s.keyCode == 39) {
        s.cancelBubble = true;
        var _ = e2.date.add(e2._date, s.keyCode == 37 ? -1 : 1, e2._mode);
        return e2.setCurrentView(_), true;
      }
      var a2, o2 = (a2 = e2.$keyboardNavigation.dispatcher.getActiveNode()) && a2.eventId ? a2.eventId : e2._select_id;
      if ((s.ctrlKey || s.metaKey) && s.keyCode == 67)
        return o2 && (e2._buffer_event = n(e2.getEvent(o2)), i = true, e2.callEvent("onEventCopied", [e2.getEvent(o2)])), true;
      if ((s.ctrlKey || s.metaKey) && s.keyCode == 88 && o2) {
        i = false;
        var l = e2._buffer_event = n(e2.getEvent(o2));
        e2.updateEvent(l.id), e2.callEvent("onEventCut", [l]);
      }
      if ((s.ctrlKey || s.metaKey) && s.keyCode == 86 && d()) {
        if (l = (l = e2._buffer_event ? e2.getEvent(e2._buffer_event.id) : e2._buffer_event) || e2._buffer_event) {
          var h = e2._make_pasted_event(l);
          i ? (h.id = e2.uid(), e2._do_paste(i, h, l)) : e2.callEvent("onBeforeEventChanged", [h, s, false, l]) && (e2._do_paste(i, h, l), i = true);
        }
        return true;
      }
    };
  }, e2._temp_key_scope();
}
function Aa(e2) {
  e2.$keyboardNavigation.attachSchedulerHandlers = function() {
    var i, t2 = e2.$keyboardNavigation.dispatcher, r2 = function(a2) {
      if (e2.config.key_nav)
        return t2.keyDownHandler(a2);
    }, d = function() {
      t2.keepScrollPosition(function() {
        t2.focusGlobalNode();
      });
    };
    e2.attachEvent("onDataRender", function() {
      e2.config.key_nav && t2.isEnabled() && !e2.getState().editor_id && (clearTimeout(i), i = setTimeout(function() {
        if (e2.$destroyed)
          return true;
        t2.isEnabled() || t2.enable(), n();
      }));
    });
    var n = function() {
      if (t2.isEnabled()) {
        var a2 = t2.getActiveNode();
        a2 && (a2.isValid() || (a2 = a2.fallback()), !a2 || a2 instanceof e2.$keyboardNavigation.MinicalButton || a2 instanceof e2.$keyboardNavigation.MinicalCell || t2.keepScrollPosition(function() {
          a2.focus(true);
        }));
      }
    };
    function s(a2) {
      if (!e2.config.key_nav)
        return true;
      const o2 = e2.getView();
      let l = false;
      if (e2.getState().mode === "month")
        l = e2.$keyboardNavigation.isChildOf(a2.target || a2.srcElement, e2.$container.querySelector(".dhx_cal_month_table"));
      else if (o2 && o2.layout === "timeline")
        l = e2.$keyboardNavigation.isChildOf(a2.target || a2.srcElement, e2.$container.querySelector(".dhx_timeline_data_col"));
      else {
        const u = e2.$container.querySelectorAll(".dhx_scale_holder");
        l = Array.from(u).some((f) => f === a2.target.parentNode);
      }
      var h, v = e2.getActionData(a2);
      e2._locate_event(a2.target || a2.srcElement) ? h = new e2.$keyboardNavigation.Event(e2._locate_event(a2.target || a2.srcElement)) : l && (h = new e2.$keyboardNavigation.TimeSlot(), v.date && l && (h = h.nextSlot(new e2.$keyboardNavigation.TimeSlot(v.date, null, v.section)))), h && (t2.isEnabled() ? v.date && l && t2.delay(function() {
        t2.setActiveNode(h);
      }) : t2.activeNode = h);
    }
    e2.attachEvent("onSchedulerReady", function() {
      var a2 = e2.$container;
      e2.eventRemove(document, "keydown", r2), e2.eventRemove(a2, "mousedown", s), e2.eventRemove(a2, "focus", d), e2.config.key_nav ? (e2.event(document, "keydown", r2), e2.event(a2, "mousedown", s), e2.event(a2, "focus", d), a2.setAttribute("tabindex", "0")) : a2.removeAttribute("tabindex");
    });
    var _ = e2.updateEvent;
    e2.updateEvent = function(a2) {
      var o2 = _.apply(this, arguments);
      if (e2.config.key_nav && t2.isEnabled() && e2.getState().select_id == a2) {
        var l = new e2.$keyboardNavigation.Event(a2);
        e2.getState().lightbox_id || function(h) {
          if (e2.config.key_nav && t2.isEnabled()) {
            var v = h, u = new e2.$keyboardNavigation.Event(v.eventId);
            if (!u.isValid()) {
              var f = u.start || v.start, c2 = u.end || v.end, p = u.section || v.section;
              (u = new e2.$keyboardNavigation.TimeSlot(f, c2, p)).isValid() || (u = new e2.$keyboardNavigation.TimeSlot());
            }
            t2.setActiveNode(u);
            var m = t2.getActiveNode();
            m && m.getNode && document.activeElement != m.getNode() && t2.focusNode(t2.getActiveNode());
          }
        }(l);
      }
      return o2;
    }, e2.attachEvent("onEventDeleted", function(a2) {
      return e2.config.key_nav && t2.isEnabled() && t2.getActiveNode().eventId == a2 && t2.setActiveNode(new e2.$keyboardNavigation.TimeSlot()), true;
    }), e2.attachEvent("onClearAll", function() {
      if (!e2.config.key_nav)
        return true;
      t2.isEnabled() && t2.getActiveNode() instanceof e2.$keyboardNavigation.Event && t2.setActiveNode(new e2.$keyboardNavigation.TimeSlot());
    });
  };
}
function ue(e2, i, t2) {
  t2 === void 0 && (t2 = " ");
  var r2 = String(e2);
  return i >>= 0, r2.length > i ? String(r2) : ((i -= r2.length) > t2.length && (t2 += I(t2, i / t2.length)), t2.slice(0, i) + String(r2));
}
function Fe(e2, i) {
  if (typeof i != "function" && i !== null)
    throw new TypeError("Class extends value " + String(i) + " is not a constructor or null");
  function t2() {
    this.constructor = e2;
  }
  je(e2, i), e2.prototype = i === null ? Object.create(i) : (t2.prototype = i.prototype, new t2());
}
function O(e2, i, t2) {
  if (t2 || arguments.length === 2)
    for (var r2, d = 0, n = i.length; d < n; d++)
      !r2 && d in i || (r2 || (r2 = Array.prototype.slice.call(i, 0, d)), r2[d] = i[d]);
  return e2.concat(r2 || Array.prototype.slice.call(i));
}
function wt(e2, i) {
  i === void 0 && (i = ke);
  var t2 = {}, r2 = new Pa(i.tokens);
  return r2.start(e2) ? (function() {
    r2.expect("every");
    var l = r2.acceptNumber();
    if (l && (t2.interval = parseInt(l[0], 10)), r2.isDone())
      throw new Error("Unexpected end");
    switch (r2.symbol) {
      case "day(s)":
        t2.freq = C.DAILY, r2.nextSymbol() && (n(), o2());
        break;
      case "weekday(s)":
        t2.freq = C.WEEKLY, t2.byweekday = [C.MO, C.TU, C.WE, C.TH, C.FR], r2.nextSymbol(), n(), o2();
        break;
      case "week(s)":
        t2.freq = C.WEEKLY, r2.nextSymbol() && (d(), n(), o2());
        break;
      case "hour(s)":
        t2.freq = C.HOURLY, r2.nextSymbol() && (d(), o2());
        break;
      case "minute(s)":
        t2.freq = C.MINUTELY, r2.nextSymbol() && (d(), o2());
        break;
      case "month(s)":
        t2.freq = C.MONTHLY, r2.nextSymbol() && (d(), o2());
        break;
      case "year(s)":
        t2.freq = C.YEARLY, r2.nextSymbol() && (d(), o2());
        break;
      case "monday":
      case "tuesday":
      case "wednesday":
      case "thursday":
      case "friday":
      case "saturday":
      case "sunday":
        t2.freq = C.WEEKLY;
        var h = r2.symbol.substr(0, 2).toUpperCase();
        if (t2.byweekday = [C[h]], !r2.nextSymbol())
          return;
        for (; r2.accept("comma"); ) {
          if (r2.isDone())
            throw new Error("Unexpected end");
          var v = _();
          if (!v)
            throw new Error("Unexpected symbol " + r2.symbol + ", expected weekday");
          t2.byweekday.push(C[v]), r2.nextSymbol();
        }
        n(), function() {
          r2.accept("on"), r2.accept("the");
          var f = a2();
          if (f)
            for (t2.bymonthday = [f], r2.nextSymbol(); r2.accept("comma"); ) {
              if (!(f = a2()))
                throw new Error("Unexpected symbol " + r2.symbol + "; expected monthday");
              t2.bymonthday.push(f), r2.nextSymbol();
            }
        }(), o2();
        break;
      case "january":
      case "february":
      case "march":
      case "april":
      case "may":
      case "june":
      case "july":
      case "august":
      case "september":
      case "october":
      case "november":
      case "december":
        if (t2.freq = C.YEARLY, t2.bymonth = [s()], !r2.nextSymbol())
          return;
        for (; r2.accept("comma"); ) {
          if (r2.isDone())
            throw new Error("Unexpected end");
          var u = s();
          if (!u)
            throw new Error("Unexpected symbol " + r2.symbol + ", expected month");
          t2.bymonth.push(u), r2.nextSymbol();
        }
        d(), o2();
        break;
      default:
        throw new Error("Unknown symbol");
    }
  }(), t2) : null;
  function d() {
    var l = r2.accept("on"), h = r2.accept("the");
    if (l || h)
      do {
        var v = a2(), u = _(), f = s();
        if (v)
          u ? (r2.nextSymbol(), t2.byweekday || (t2.byweekday = []), t2.byweekday.push(C[u].nth(v))) : (t2.bymonthday || (t2.bymonthday = []), t2.bymonthday.push(v), r2.accept("day(s)"));
        else if (u)
          r2.nextSymbol(), t2.byweekday || (t2.byweekday = []), t2.byweekday.push(C[u]);
        else if (r2.symbol === "weekday(s)")
          r2.nextSymbol(), t2.byweekday || (t2.byweekday = [C.MO, C.TU, C.WE, C.TH, C.FR]);
        else if (r2.symbol === "week(s)") {
          r2.nextSymbol();
          var c2 = r2.acceptNumber();
          if (!c2)
            throw new Error("Unexpected symbol " + r2.symbol + ", expected week number");
          for (t2.byweekno = [parseInt(c2[0], 10)]; r2.accept("comma"); ) {
            if (!(c2 = r2.acceptNumber()))
              throw new Error("Unexpected symbol " + r2.symbol + "; expected monthday");
            t2.byweekno.push(parseInt(c2[0], 10));
          }
        } else {
          if (!f)
            return;
          r2.nextSymbol(), t2.bymonth || (t2.bymonth = []), t2.bymonth.push(f);
        }
      } while (r2.accept("comma") || r2.accept("the") || r2.accept("on"));
  }
  function n() {
    if (r2.accept("at"))
      do {
        var l = r2.acceptNumber();
        if (!l)
          throw new Error("Unexpected symbol " + r2.symbol + ", expected hour");
        for (t2.byhour = [parseInt(l[0], 10)]; r2.accept("comma"); ) {
          if (!(l = r2.acceptNumber()))
            throw new Error("Unexpected symbol " + r2.symbol + "; expected hour");
          t2.byhour.push(parseInt(l[0], 10));
        }
      } while (r2.accept("comma") || r2.accept("at"));
  }
  function s() {
    switch (r2.symbol) {
      case "january":
        return 1;
      case "february":
        return 2;
      case "march":
        return 3;
      case "april":
        return 4;
      case "may":
        return 5;
      case "june":
        return 6;
      case "july":
        return 7;
      case "august":
        return 8;
      case "september":
        return 9;
      case "october":
        return 10;
      case "november":
        return 11;
      case "december":
        return 12;
      default:
        return false;
    }
  }
  function _() {
    switch (r2.symbol) {
      case "monday":
      case "tuesday":
      case "wednesday":
      case "thursday":
      case "friday":
      case "saturday":
      case "sunday":
        return r2.symbol.substr(0, 2).toUpperCase();
      default:
        return false;
    }
  }
  function a2() {
    switch (r2.symbol) {
      case "last":
        return r2.nextSymbol(), -1;
      case "first":
        return r2.nextSymbol(), 1;
      case "second":
        return r2.nextSymbol(), r2.accept("last") ? -2 : 2;
      case "third":
        return r2.nextSymbol(), r2.accept("last") ? -3 : 3;
      case "nth":
        var l = parseInt(r2.value[1], 10);
        if (l < -366 || l > 366)
          throw new Error("Nth out of range: " + l);
        return r2.nextSymbol(), r2.accept("last") ? -l : l;
      default:
        return false;
    }
  }
  function o2() {
    if (r2.symbol === "until") {
      var l = Date.parse(r2.text);
      if (!l)
        throw new Error("Cannot parse until date:" + r2.text);
      t2.until = new Date(l);
    } else
      r2.accept("for") && (t2.count = parseInt(r2.value[0], 10), r2.expect("number"));
  }
}
function Ce(e2) {
  return e2 < P.HOURLY;
}
function Et(e2) {
  for (var i = [], t2 = 0, r2 = Object.keys(e2); t2 < r2.length; t2++) {
    var d = r2[t2];
    R(un, d) || i.push(d), bt2(e2[d]) && !ye(e2[d]) && i.push(d);
  }
  if (i.length)
    throw new Error("Invalid options: " + i.join(", "));
  return X({}, e2);
}
function Va(e2) {
  var i = X(X({}, Je), Et(e2));
  if (U(i.byeaster) && (i.freq = C.YEARLY), !U(i.freq) || !C.FREQUENCIES[i.freq])
    throw new Error("Invalid frequency: ".concat(i.freq, " ").concat(e2.freq));
  if (i.dtstart || (i.dtstart = new Date((/* @__PURE__ */ new Date()).setMilliseconds(0))), U(i.wkst) ? te(i.wkst) || (i.wkst = i.wkst.weekday) : i.wkst = C.MO.weekday, U(i.bysetpos)) {
    te(i.bysetpos) && (i.bysetpos = [i.bysetpos]);
    for (var t2 = 0; t2 < i.bysetpos.length; t2++)
      if ((n = i.bysetpos[t2]) === 0 || !(n >= -366 && n <= 366))
        throw new Error("bysetpos must be between 1 and 366, or between -366 and -1");
  }
  if (!(i.byweekno || B(i.byweekno) || B(i.byyearday) || i.bymonthday || B(i.bymonthday) || U(i.byweekday) || U(i.byeaster)))
    switch (i.freq) {
      case C.YEARLY:
        i.bymonth || (i.bymonth = i.dtstart.getUTCMonth() + 1), i.bymonthday = i.dtstart.getUTCDate();
        break;
      case C.MONTHLY:
        i.bymonthday = i.dtstart.getUTCDate();
        break;
      case C.WEEKLY:
        i.byweekday = [me(i.dtstart)];
    }
  if (U(i.bymonth) && !G(i.bymonth) && (i.bymonth = [i.bymonth]), U(i.byyearday) && !G(i.byyearday) && te(i.byyearday) && (i.byyearday = [i.byyearday]), U(i.bymonthday))
    if (G(i.bymonthday)) {
      var r2 = [], d = [];
      for (t2 = 0; t2 < i.bymonthday.length; t2++) {
        var n;
        (n = i.bymonthday[t2]) > 0 ? r2.push(n) : n < 0 && d.push(n);
      }
      i.bymonthday = r2, i.bynmonthday = d;
    } else
      i.bymonthday < 0 ? (i.bynmonthday = [i.bymonthday], i.bymonthday = []) : (i.bynmonthday = [], i.bymonthday = [i.bymonthday]);
  else
    i.bymonthday = [], i.bynmonthday = [];
  if (U(i.byweekno) && !G(i.byweekno) && (i.byweekno = [i.byweekno]), U(i.byweekday))
    if (te(i.byweekday))
      i.byweekday = [i.byweekday], i.bynweekday = null;
    else if (Ge(i.byweekday))
      i.byweekday = [K.fromStr(i.byweekday).weekday], i.bynweekday = null;
    else if (i.byweekday instanceof K)
      !i.byweekday.n || i.freq > C.MONTHLY ? (i.byweekday = [i.byweekday.weekday], i.bynweekday = null) : (i.bynweekday = [[i.byweekday.weekday, i.byweekday.n]], i.byweekday = null);
    else {
      var s = [], _ = [];
      for (t2 = 0; t2 < i.byweekday.length; t2++) {
        var a2 = i.byweekday[t2];
        te(a2) ? s.push(a2) : Ge(a2) ? s.push(K.fromStr(a2).weekday) : !a2.n || i.freq > C.MONTHLY ? s.push(a2.weekday) : _.push([a2.weekday, a2.n]);
      }
      i.byweekday = B(s) ? s : null, i.bynweekday = B(_) ? _ : null;
    }
  else
    i.bynweekday = null;
  return U(i.byhour) ? te(i.byhour) && (i.byhour = [i.byhour]) : i.byhour = i.freq < C.HOURLY ? [i.dtstart.getUTCHours()] : null, U(i.byminute) ? te(i.byminute) && (i.byminute = [i.byminute]) : i.byminute = i.freq < C.MINUTELY ? [i.dtstart.getUTCMinutes()] : null, U(i.bysecond) ? te(i.bysecond) && (i.bysecond = [i.bysecond]) : i.bysecond = i.freq < C.SECONDLY ? [i.dtstart.getUTCSeconds()] : null, { parsedOptions: i };
}
function Ie(e2) {
  var i = e2.split(`
`).map(Ba).filter(function(t2) {
    return t2 !== null;
  });
  return X(X({}, i[0]), i[1]);
}
function Ee(e2) {
  var i = {}, t2 = /DTSTART(?:;TZID=([^:=]+?))?(?::|=)([^;\s]+)/i.exec(e2);
  if (!t2)
    return i;
  var r2 = t2[1], d = t2[2];
  return r2 && (i.tzid = r2), i.dtstart = Be(d), i;
}
function Ba(e2) {
  if (!(e2 = e2.replace(/^\s+|\s+$/, "")).length)
    return null;
  var i = /^([A-Z]+?)[:;]/.exec(e2.toUpperCase());
  if (!i)
    return at(e2);
  var t2 = i[1];
  switch (t2.toUpperCase()) {
    case "RRULE":
    case "EXRULE":
      return at(e2);
    case "DTSTART":
      return Ee(e2);
    default:
      throw new Error("Unsupported RFC prop ".concat(t2, " in ").concat(e2));
  }
}
function at(e2) {
  var i = Ee(e2.replace(/^RRULE:/i, ""));
  return e2.replace(/^(?:RRULE|EXRULE):/i, "").split(";").forEach(function(t2) {
    var r2 = t2.split("="), d = r2[0], n = r2[1];
    switch (d.toUpperCase()) {
      case "FREQ":
        i.freq = P[n.toUpperCase()];
        break;
      case "WKST":
        i.wkst = Q[n.toUpperCase()];
        break;
      case "COUNT":
      case "INTERVAL":
      case "BYSETPOS":
      case "BYMONTH":
      case "BYMONTHDAY":
      case "BYYEARDAY":
      case "BYWEEKNO":
      case "BYHOUR":
      case "BYMINUTE":
      case "BYSECOND":
        var s = function(o2) {
          return o2.indexOf(",") !== -1 ? o2.split(",").map(nt) : nt(o2);
        }(n), _ = d.toLowerCase();
        i[_] = s;
        break;
      case "BYWEEKDAY":
      case "BYDAY":
        i.byweekday = function(o2) {
          var l = o2.split(",");
          return l.map(function(h) {
            if (h.length === 2)
              return Q[h];
            var v = h.match(/^([+-]?\d{1,2})([A-Z]{2})$/);
            if (!v || v.length < 3)
              throw new SyntaxError("Invalid weekday string: ".concat(h));
            var u = Number(v[1]), f = v[2], c2 = Q[f].weekday;
            return new K(c2, u);
          });
        }(n);
        break;
      case "DTSTART":
      case "TZID":
        var a2 = Ee(e2);
        i.tzid = a2.tzid, i.dtstart = a2.dtstart;
        break;
      case "UNTIL":
        i.until = Be(n);
        break;
      case "BYEASTER":
        i.byeaster = Number(n);
        break;
      default:
        throw new Error("Unknown RRULE property '" + d + "'");
    }
  }), i;
}
function nt(e2) {
  return /^[+-]?\d+$/.test(e2) ? Number(e2) : e2;
}
function Pe(e2) {
  for (var i, t2 = [], r2 = "", d = Object.keys(e2), n = Object.keys(Je), s = 0; s < d.length; s++)
    if (d[s] !== "tzid" && R(n, d[s])) {
      var _ = d[s].toUpperCase(), a2 = e2[d[s]], o2 = "";
      if (U(a2) && (!G(a2) || a2.length)) {
        switch (_) {
          case "FREQ":
            o2 = C.FREQUENCIES[e2.freq];
            break;
          case "WKST":
            o2 = te(a2) ? new K(a2).toString() : a2.toString();
            break;
          case "BYWEEKDAY":
            _ = "BYDAY", o2 = (i = a2, G(i) ? i : [i]).map(function(f) {
              return f instanceof K ? f : G(f) ? new K(f[0], f[1]) : new K(f);
            }).toString();
            break;
          case "DTSTART":
            r2 = Fa(a2, e2.tzid);
            break;
          case "UNTIL":
            o2 = Ve(a2, !e2.tzid);
            break;
          default:
            if (G(a2)) {
              for (var l = [], h = 0; h < a2.length; h++)
                l[h] = String(a2[h]);
              o2 = l.toString();
            } else
              o2 = String(a2);
        }
        o2 && t2.push([_, o2]);
      }
    }
  var v = t2.map(function(f) {
    var c2 = f[0], p = f[1];
    return "".concat(c2, "=").concat(p.toString());
  }).join(";"), u = "";
  return v !== "" && (u = "RRULE:".concat(v)), [r2, u].filter(function(f) {
    return !!f;
  }).join(`
`);
}
function Fa(e2, i) {
  return e2 ? "DTSTART" + new De(new Date(e2), i).toString() : "";
}
function Ja(e2, i) {
  return Array.isArray(e2) ? !!Array.isArray(i) && e2.length === i.length && e2.every(function(t2, r2) {
    return t2.getTime() === i[r2].getTime();
  }) : e2 instanceof Date ? i instanceof Date && e2.getTime() === i.getTime() : e2 === i;
}
function dn(e2, i) {
  var t2, r2, d = he(e2, 1, 1), n = ge(e2) ? 366 : 365, s = ge(e2 + 1) ? 366 : 365, _ = ze(d), a2 = me(d), o2 = X(X({ yearlen: n, nextyearlen: s, yearordinal: _, yearweekday: a2 }, function(E) {
    var D = ge(E) ? 366 : 365, w = he(E, 1, 1), S = me(w);
    return D === 365 ? { mmask: Ka, mdaymask: en, nmdaymask: rn, wdaymask: rt.slice(S), mrange: sn } : { mmask: Ga, mdaymask: Qa, nmdaymask: nn, wdaymask: rt.slice(S), mrange: on };
  }(e2)), { wnomask: null });
  if (ae(i.byweekno))
    return o2;
  o2.wnomask = I(0, n + 7);
  var l = t2 = Z(7 - a2 + i.wkst, 7);
  l >= 4 ? (l = 0, r2 = o2.yearlen + Z(a2 - i.wkst, 7)) : r2 = n - l;
  for (var h = Math.floor(r2 / 7), v = Z(r2, 7), u = Math.floor(h + v / 4), f = 0; f < i.byweekno.length; f++) {
    var c2 = i.byweekno[f];
    if (c2 < 0 && (c2 += u + 1), c2 > 0 && c2 <= u) {
      var p = void 0;
      c2 > 1 ? (p = l + 7 * (c2 - 1), l !== t2 && (p -= 7 - t2)) : p = l;
      for (var m = 0; m < 7 && (o2.wnomask[p] = 1, p++, o2.wdaymask[p] !== i.wkst); m++)
        ;
    }
  }
  if (R(i.byweekno, 1) && (p = l + 7 * u, l !== t2 && (p -= 7 - t2), p < n))
    for (f = 0; f < 7 && (o2.wnomask[p] = 1, p += 1, o2.wdaymask[p] !== i.wkst); f++)
      ;
  if (l) {
    var g = void 0;
    if (R(i.byweekno, -1))
      g = -1;
    else {
      var y2 = me(he(e2 - 1, 1, 1)), x = Z(7 - y2.valueOf() + i.wkst, 7), b = ge(e2 - 1) ? 366 : 365, k = void 0;
      x >= 4 ? (x = 0, k = b + Z(y2 - i.wkst, 7)) : k = n - l, g = Math.floor(52 + Z(k, 7) / 4);
    }
    if (R(i.byweekno, g))
      for (p = 0; p < l; p++)
        o2.wnomask[p] = 1;
  }
  return o2;
}
function ln(e2, i, t2, r2, d, n) {
  for (var s = [], _ = 0; _ < e2.length; _++) {
    var a2 = void 0, o2 = void 0, l = e2[_];
    l < 0 ? (a2 = Math.floor(l / i.length), o2 = Z(l, i.length)) : (a2 = Math.floor((l - 1) / i.length), o2 = Z(l - 1, i.length));
    for (var h = [], v = t2; v < r2; v++) {
      var u = n[v];
      U(u) && h.push(u);
    }
    var f = void 0;
    f = a2 < 0 ? h.slice(a2)[0] : h[a2];
    var c2 = i[o2], p = xt(d.yearordinal + f), m = kt(p, c2);
    R(s, m) || s.push(m);
  }
  return be(s), s;
}
function Dt2(e2, i) {
  var t2 = i.dtstart, r2 = i.freq, d = i.interval, n = i.until, s = i.bysetpos, _ = i.count;
  if (_ === 0 || d === 0)
    return re(e2);
  var a2 = Ua.fromDate(t2), o2 = new _n(i);
  o2.rebuild(a2.year, a2.month);
  for (var l = function(D, w, S) {
    var N = S.freq, M = S.byhour, T = S.byminute, A = S.bysecond;
    return Ce(N) ? function(H) {
      var $ = H.dtstart.getTime() % 1e3;
      if (!Ce(H.freq))
        return [];
      var j = [];
      return H.byhour.forEach(function(z) {
        H.byminute.forEach(function(W) {
          H.bysecond.forEach(function(Y) {
            j.push(new we(z, W, Y, $));
          });
        });
      }), j;
    }(S) : N >= C.HOURLY && B(M) && !R(M, w.hour) || N >= C.MINUTELY && B(T) && !R(T, w.minute) || N >= C.SECONDLY && B(A) && !R(A, w.second) ? [] : D.gettimeset(N)(w.hour, w.minute, w.second, w.millisecond);
  }(o2, a2, i); ; ) {
    var h = o2.getdayset(r2)(a2.year, a2.month, a2.day), v = h[0], u = h[1], f = h[2], c2 = hn(v, u, f, o2, i);
    if (B(s))
      for (var p = ln(s, l, u, f, o2, v), m = 0; m < p.length; m++) {
        var g = p[m];
        if (n && g > n)
          return re(e2);
        if (g >= t2) {
          var y2 = it(g, i);
          if (!e2.accept(y2) || _ && !--_)
            return re(e2);
        }
      }
    else
      for (m = u; m < f; m++) {
        var x = v[m];
        if (U(x))
          for (var b = xt(o2.yearordinal + x), k = 0; k < l.length; k++) {
            var E = l[k];
            if (g = kt(b, E), n && g > n || g >= t2 && (y2 = it(g, i), !e2.accept(y2) || _ && !--_))
              return re(e2);
          }
      }
    if (i.interval === 0 || (a2.add(i, c2), a2.year > gt))
      return re(e2);
    Ce(r2) || (l = o2.gettimeset(r2)(a2.hour, a2.minute, a2.second, 0)), o2.rebuild(a2.year, a2.month);
  }
}
function cn(e2, i, t2) {
  var r2 = t2.bymonth, d = t2.byweekno, n = t2.byweekday, s = t2.byeaster, _ = t2.bymonthday, a2 = t2.bynmonthday, o2 = t2.byyearday;
  return B(r2) && !R(r2, e2.mmask[i]) || B(d) && !e2.wnomask[i] || B(n) && !R(n, e2.wdaymask[i]) || B(e2.nwdaymask) && !e2.nwdaymask[i] || s !== null && !R(e2.eastermask, i) || (B(_) || B(a2)) && !R(_, e2.mdaymask[i]) && !R(a2, e2.nmdaymask[i]) || B(o2) && (i < e2.yearlen && !R(o2, i + 1) && !R(o2, -e2.yearlen + i) || i >= e2.yearlen && !R(o2, i + 1 - e2.yearlen) && !R(o2, -e2.nextyearlen + i - e2.yearlen));
}
function it(e2, i) {
  return new De(e2, i.tzid).rezonedDate();
}
function re(e2) {
  return e2.getValue();
}
function hn(e2, i, t2, r2, d) {
  for (var n = false, s = i; s < t2; s++) {
    var _ = e2[s];
    (n = cn(r2, _, d)) && (e2[_] = null);
  }
  return n;
}
function fn(e2, i) {
  var t2 = [], r2 = [], d = [], n = [], s = Ee(e2), _ = s.dtstart, a2 = s.tzid, o2 = function(l, h) {
    if (h === void 0 && (h = false), l = l && l.trim(), !l)
      throw new Error("Invalid empty string");
    if (!h)
      return l.split(/\s/);
    for (var v = l.split(`
`), u = 0; u < v.length; ) {
      var f = v[u] = v[u].replace(/\s+$/g, "");
      f ? u > 0 && f[0] === " " ? (v[u - 1] += f.slice(1), v.splice(u, 1)) : u += 1 : v.splice(u, 1);
    }
    return v;
  }(e2, i.unfold);
  return o2.forEach(function(l) {
    var h;
    if (l) {
      var v = function(m) {
        var g = function(k) {
          if (k.indexOf(":") === -1)
            return { name: "RRULE", value: k };
          var E = Ha(k, ":", 1), D = E[0], w = E[1];
          return { name: D, value: w };
        }(m), y2 = g.name, x = g.value, b = y2.split(";");
        if (!b)
          throw new Error("empty property name");
        return { name: b[0].toUpperCase(), parms: b.slice(1), value: x };
      }(l), u = v.name, f = v.parms, c2 = v.value;
      switch (u.toUpperCase()) {
        case "RRULE":
          if (f.length)
            throw new Error("unsupported RRULE parm: ".concat(f.join(",")));
          t2.push(Ie(l));
          break;
        case "RDATE":
          var p = ((h = /RDATE(?:;TZID=([^:=]+))?/i.exec(l)) !== null && h !== void 0 ? h : [])[1];
          p && !a2 && (a2 = p), r2 = r2.concat(st(c2, f));
          break;
        case "EXRULE":
          if (f.length)
            throw new Error("unsupported EXRULE parm: ".concat(f.join(",")));
          d.push(Ie(c2));
          break;
        case "EXDATE":
          n = n.concat(st(c2, f));
          break;
        case "DTSTART":
          break;
        default:
          throw new Error("unsupported property: " + u);
      }
    }
  }), { dtstart: _, tzid: a2, rrulevals: t2, rdatevals: r2, exrulevals: d, exdatevals: n };
}
function Se(e2, i) {
  return i === void 0 && (i = {}), function(t2, r2) {
    var d = fn(t2, r2), n = d.rrulevals, s = d.rdatevals, _ = d.exrulevals, a2 = d.exdatevals, o2 = d.dtstart, l = d.tzid, h = r2.cache === false;
    if (r2.compatible && (r2.forceset = true, r2.unfold = true), r2.forceset || n.length > 1 || s.length || _.length || a2.length) {
      var v = new pn(h);
      return v.dtstart(o2), v.tzid(l || void 0), n.forEach(function(f) {
        v.rrule(new C(Oe(f, o2, l), h));
      }), s.forEach(function(f) {
        v.rdate(f);
      }), _.forEach(function(f) {
        v.exrule(new C(Oe(f, o2, l), h));
      }), a2.forEach(function(f) {
        v.exdate(f);
      }), r2.compatible && r2.dtstart && v.rdate(o2), v;
    }
    var u = n[0] || {};
    return new C(Oe(u, u.dtstart || r2.dtstart || o2, u.tzid || r2.tzid || l), h);
  }(e2, function(t2) {
    var r2 = [], d = Object.keys(t2), n = Object.keys(ot);
    if (d.forEach(function(s) {
      R(n, s) || r2.push(s);
    }), r2.length)
      throw new Error("Invalid options: " + r2.join(", "));
    return X(X({}, ot), t2);
  }(i));
}
function Oe(e2, i, t2) {
  return X(X({}, e2), { dtstart: i, tzid: t2 });
}
function st(e2, i) {
  return function(t2) {
    t2.forEach(function(r2) {
      if (!/(VALUE=DATE(-TIME)?)|(TZID=)/.test(r2))
        throw new Error("unsupported RDATE/EXDATE parm: " + r2);
    });
  }(i), e2.split(",").map(function(t2) {
    return Be(t2);
  });
}
function dt(e2) {
  var i = this;
  return function(t2) {
    if (t2 !== void 0 && (i["_".concat(e2)] = t2), i["_".concat(e2)] !== void 0)
      return i["_".concat(e2)];
    for (var r2 = 0; r2 < i._rrule.length; r2++) {
      var d = i._rrule[r2].origOptions[e2];
      if (d)
        return d;
    }
  };
}
function _t(e2, i) {
  if (!(e2 instanceof C))
    throw new TypeError(String(e2) + " is not RRule instance");
  R(i.map(String), String(e2)) || i.push(e2);
}
function lt(e2, i) {
  if (!(e2 instanceof Date))
    throw new TypeError(String(e2) + " is not Date instance");
  R(i.map(Number), Number(e2)) || (i.push(e2), be(i));
}
function ct(e2, i, t2) {
  var r2 = !t2 || t2.toUpperCase() === "UTC", d = r2 ? "".concat(e2, ":") : "".concat(e2, ";TZID=").concat(t2, ":"), n = i.map(function(s) {
    return Ve(s.valueOf(), r2);
  }).join(",");
  return "".concat(d).concat(n);
}
var oe, Ct2, ee, Ht, $t, We, _e, Le, Rt, se, Yt, Kt2, Gt, Xt, Zt, Qt, ea, ta, aa, na, ra, ia, oa, sa, da, _a, la, ca, ha, ua, fa, pa, ma, va, ga, ya, ba, xa, ka, wa, Ea, Da, Na, de, Ca, Oa, La, $e, K, U, te, Ge, G, ne, I, Ha, Z, Ae, ae, B, R, he, $a, vt, gt, yt, za, ge, bt2, ye, ze, xt, qa, me, Xe, kt, qe, Ze, be, Ve, Be, Qe, pe, je, X, P, et, ke, tt, ja, Ia, ie, Pa, Ra, fe, Ya, we, Ua, De, Wa, Ka, Ga, Xa, Za, le, F, Qa, en, tn, an, ce, J, nn, rn, on, sn, rt, _n, Q, Je, un, C, ot, pn, mn, vn, gn, Re, Ye, ht;
var init_dhtmlxscheduler_es = __esm({
  "node_modules/dhtmlx-scheduler/codebase/dhtmlxscheduler.es.js"() {
    oe = typeof window < "u" ? window : global;
    Ct2 = Date.now();
    ee = { uid: function() {
      return Ct2++;
    }, mixin: function(e2, i, t2) {
      for (var r2 in i)
        (e2[r2] === void 0 || t2) && (e2[r2] = i[r2]);
      return e2;
    }, copy: function e(i) {
      var t2, r2, d;
      if (i && typeof i == "object")
        switch (true) {
          case Me(i):
            r2 = new Date(i);
            break;
          case (d = i, Array.isArray ? Array.isArray(d) : d && d.length !== void 0 && d.pop && d.push):
            for (r2 = new Array(i.length), t2 = 0; t2 < i.length; t2++)
              r2[t2] = e(i[t2]);
            break;
          case function(n) {
            return n && typeof n == "object" && Function.prototype.toString.call(n.constructor) === "function String() { [native code] }";
          }(i):
            r2 = new String(i);
            break;
          case function(n) {
            return n && typeof n == "object" && Function.prototype.toString.call(n.constructor) === "function Number() { [native code] }";
          }(i):
            r2 = new Number(i);
            break;
          case function(n) {
            return n && typeof n == "object" && Function.prototype.toString.call(n.constructor) === "function Boolean() { [native code] }";
          }(i):
            r2 = new Boolean(i);
            break;
          default:
            for (t2 in r2 = {}, i) {
              const n = typeof i[t2];
              n === "string" || n === "number" || n === "boolean" ? r2[t2] = i[t2] : Me(i[t2]) ? r2[t2] = new Date(i[t2]) : Object.prototype.hasOwnProperty.apply(i, [t2]) && (r2[t2] = e(i[t2]));
            }
        }
      return r2 || i;
    }, defined: function(e2) {
      return e2 !== void 0;
    }, isDate: Me, delay: function(e2, i) {
      var t2, r2 = function() {
        r2.$cancelTimeout(), r2.$pending = true;
        var d = Array.prototype.slice.call(arguments);
        t2 = setTimeout(function() {
          e2.apply(this, d), r2.$pending = false;
        }, i);
      };
      return r2.$pending = false, r2.$cancelTimeout = function() {
        clearTimeout(t2), r2.$pending = false;
      }, r2.$execute = function() {
        var d = Array.prototype.slice.call(arguments);
        e2.apply(this, d), r2.$cancelTimeout();
      }, r2;
    } };
    Ht = class {
      constructor() {
        this._silent_mode = false, this.listeners = {};
      }
      _silentStart() {
        this._silent_mode = true;
      }
      _silentEnd() {
        this._silent_mode = false;
      }
    };
    $t = function(e2) {
      let i = {}, t2 = 0;
      const r2 = function() {
        let d = true;
        for (const n in i) {
          const s = i[n].apply(e2, arguments);
          d = d && s;
        }
        return d;
      };
      return r2.addEvent = function(d, n) {
        if (typeof d == "function") {
          let s;
          if (n && n.id ? s = n.id : (s = t2, t2++), n && n.once) {
            const _ = d;
            d = function() {
              _(), r2.removeEvent(s);
            };
          }
          return i[s] = d, s;
        }
        return false;
      }, r2.removeEvent = function(d) {
        delete i[d];
      }, r2.clear = function() {
        i = {};
      }, r2;
    };
    We = { event: function(e2, i, t2) {
      e2.addEventListener ? e2.addEventListener(i, t2, false) : e2.attachEvent && e2.attachEvent("on" + i, t2);
    }, eventRemove: function(e2, i, t2) {
      e2.removeEventListener ? e2.removeEventListener(i, t2, false) : e2.detachEvent && e2.detachEvent("on" + i, t2);
    } };
    _e = { getAbsoluteLeft: function(e2) {
      return this.getOffset(e2).left;
    }, getAbsoluteTop: function(e2) {
      return this.getOffset(e2).top;
    }, getOffsetSum: function(e2) {
      for (var i = 0, t2 = 0; e2; )
        i += parseInt(e2.offsetTop), t2 += parseInt(e2.offsetLeft), e2 = e2.offsetParent;
      return { top: i, left: t2 };
    }, getOffsetRect: function(e2) {
      var i = e2.getBoundingClientRect(), t2 = 0, r2 = 0;
      if (/Mobi/.test(navigator.userAgent)) {
        var d = document.createElement("div");
        d.style.position = "absolute", d.style.left = "0px", d.style.top = "0px", d.style.width = "1px", d.style.height = "1px", document.body.appendChild(d);
        var n = d.getBoundingClientRect();
        t2 = i.top - n.top, r2 = i.left - n.left, d.parentNode.removeChild(d);
      } else {
        var s = document.body, _ = document.documentElement, a2 = window.pageYOffset || _.scrollTop || s.scrollTop, o2 = window.pageXOffset || _.scrollLeft || s.scrollLeft, l = _.clientTop || s.clientTop || 0, h = _.clientLeft || s.clientLeft || 0;
        t2 = i.top + a2 - l, r2 = i.left + o2 - h;
      }
      return { top: Math.round(t2), left: Math.round(r2) };
    }, getOffset: function(e2) {
      return e2.getBoundingClientRect ? this.getOffsetRect(e2) : this.getOffsetSum(e2);
    }, closest: function(e2, i) {
      return e2 && i ? Le(e2, i) : null;
    }, insertAfter: function(e2, i) {
      i.nextSibling ? i.parentNode.insertBefore(e2, i.nextSibling) : i.parentNode.appendChild(e2);
    }, remove: function(e2) {
      e2 && e2.parentNode && e2.parentNode.removeChild(e2);
    }, isChildOf: function(e2, i) {
      return i.contains(e2);
    }, getFocusableNodes: function(e2) {
      for (var i = e2.querySelectorAll(["a[href]", "area[href]", "input", "select", "textarea", "button", "iframe", "object", "embed", "[tabindex]", "[contenteditable]"].join(", ")), t2 = Array.prototype.slice.call(i, 0), r2 = 0; r2 < t2.length; r2++)
        t2[r2].$position = r2;
      for (t2.sort(function(n, s) {
        return n.tabIndex === 0 && s.tabIndex !== 0 ? 1 : n.tabIndex !== 0 && s.tabIndex === 0 ? -1 : n.tabIndex === s.tabIndex ? n.$position - s.$position : n.tabIndex < s.tabIndex ? -1 : 1;
      }), r2 = 0; r2 < t2.length; r2++) {
        var d = t2[r2];
        (jt(d) || Pt(d) || It(d)) && qt(d) || (t2.splice(r2, 1), r2--);
      }
      return t2;
    }, getClassName: ut, locateCss: ft, getRootNode: Ke, hasShadowParent: function(e2) {
      return !!Ke(e2);
    }, isShadowDomSupported: pt, getActiveElement: function() {
      var e2 = document.activeElement;
      return e2.shadowRoot && (e2 = e2.shadowRoot.activeElement), e2 === document.body && document.getSelection && (e2 = document.getSelection().focusNode || document.body), e2;
    }, getRelativeEventPosition: function(e2, i) {
      var t2 = document.documentElement, r2 = function(d) {
        var n = 0, s = 0, _ = 0, a2 = 0;
        if (d.getBoundingClientRect) {
          var o2 = d.getBoundingClientRect(), l = document.body, h = document.documentElement || document.body.parentNode || document.body, v = window.pageYOffset || h.scrollTop || l.scrollTop, u = window.pageXOffset || h.scrollLeft || l.scrollLeft, f = h.clientTop || l.clientTop || 0, c2 = h.clientLeft || l.clientLeft || 0;
          n = o2.top + v - f, s = o2.left + u - c2, _ = document.body.offsetWidth - o2.right, a2 = document.body.offsetHeight - o2.bottom;
        } else {
          for (; d; )
            n += parseInt(d.offsetTop, 10), s += parseInt(d.offsetLeft, 10), d = d.offsetParent;
          _ = document.body.offsetWidth - d.offsetWidth - s, a2 = document.body.offsetHeight - d.offsetHeight - n;
        }
        return { y: Math.round(n), x: Math.round(s), width: d.offsetWidth, height: d.offsetHeight, right: Math.round(_), bottom: Math.round(a2) };
      }(i);
      return { x: e2.clientX - t2.clientLeft - r2.x + i.scrollLeft, y: e2.clientY - t2.clientTop - r2.y + i.scrollTop };
    }, getTargetNode: function(e2) {
      var i;
      return e2.tagName ? i = e2 : (i = (e2 = e2 || window.event).target || e2.srcElement).shadowRoot && e2.composedPath && (i = e2.composedPath()[0]), i;
    }, getNodePosition: function(e2) {
      var i = 0, t2 = 0, r2 = 0, d = 0;
      if (e2.getBoundingClientRect) {
        var n = e2.getBoundingClientRect(), s = document.body, _ = document.documentElement || document.body.parentNode || document.body, a2 = window.pageYOffset || _.scrollTop || s.scrollTop, o2 = window.pageXOffset || _.scrollLeft || s.scrollLeft, l = _.clientTop || s.clientTop || 0, h = _.clientLeft || s.clientLeft || 0;
        i = n.top + a2 - l, t2 = n.left + o2 - h, r2 = document.body.offsetWidth - n.right, d = document.body.offsetHeight - n.bottom;
      } else {
        for (; e2; )
          i += parseInt(e2.offsetTop, 10), t2 += parseInt(e2.offsetLeft, 10), e2 = e2.offsetParent;
        r2 = document.body.offsetWidth - e2.offsetWidth - t2, d = document.body.offsetHeight - e2.offsetHeight - i;
      }
      return { y: Math.round(i), x: Math.round(t2), width: e2.offsetWidth, height: e2.offsetHeight, right: Math.round(r2), bottom: Math.round(d) };
    } };
    if (Element.prototype.closest)
      Le = function(e2, i) {
        return e2.closest(i);
      };
    else {
      Rt = Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
      Le = function(e2, i) {
        var t2 = e2;
        do {
          if (Rt.call(t2, i))
            return t2;
          t2 = t2.parentElement || t2.parentNode;
        } while (t2 !== null && t2.nodeType === 1);
        return null;
      };
    }
    se = typeof window < "u";
    Yt = { isIE: se && (navigator.userAgent.indexOf("MSIE") >= 0 || navigator.userAgent.indexOf("Trident") >= 0), isOpera: se && navigator.userAgent.indexOf("Opera") >= 0, isChrome: se && navigator.userAgent.indexOf("Chrome") >= 0, isKHTML: se && (navigator.userAgent.indexOf("Safari") >= 0 || navigator.userAgent.indexOf("Konqueror") >= 0), isFF: se && navigator.userAgent.indexOf("Firefox") >= 0, isIPad: se && navigator.userAgent.search(/iPad/gi) >= 0, isEdge: se && navigator.userAgent.indexOf("Edge") != -1, isNode: !se || typeof navigator > "u" };
    He.prototype = { setTransactionMode: function(e2, i) {
      typeof e2 == "object" ? (this._tMode = e2.mode || this._tMode, e2.headers !== void 0 && (this._headers = e2.headers), e2.payload !== void 0 && (this._payload = e2.payload), this._tSend = !!i) : (this._tMode = e2, this._tSend = i), this._tMode == "REST" && (this._tSend = false, this._endnm = true), this._tMode === "JSON" || this._tMode === "REST-JSON" ? (this._tSend = false, this._endnm = true, this._serializeAsJson = true, this._headers = this._headers || {}, this._headers["Content-Type"] = "application/json") : this._headers && !this._headers["Content-Type"] && (this._headers["Content-Type"] = "application/x-www-form-urlencoded"), this._tMode === "CUSTOM" && (this._tSend = false, this._endnm = true, this._router = e2.router);
    }, escape: function(e2) {
      return this._utf ? encodeURIComponent(e2) : escape(e2);
    }, enableUTFencoding: function(e2) {
      this._utf = !!e2;
    }, setDataColumns: function(e2) {
      this._columns = typeof e2 == "string" ? e2.split(",") : e2;
    }, getSyncState: function() {
      return !this.updatedRows.length;
    }, enableDataNames: function(e2) {
      this._endnm = !!e2;
    }, enablePartialDataSend: function(e2) {
      this._changed = !!e2;
    }, setUpdateMode: function(e2, i) {
      this.autoUpdate = e2 == "cell", this.updateMode = e2, this.dnd = i;
    }, ignore: function(e2, i) {
      this._silent_mode = true, e2.call(i || window), this._silent_mode = false;
    }, setUpdated: function(e2, i, t2) {
      if (!this._silent_mode) {
        var r2 = this.findRow(e2);
        t2 = t2 || "updated";
        var d = this.$scheduler.getUserData(e2, this.action_param);
        d && t2 == "updated" && (t2 = d), i ? (this.set_invalid(e2, false), this.updatedRows[r2] = e2, this.$scheduler.setUserData(e2, this.action_param, t2), this._in_progress[e2] && (this._in_progress[e2] = "wait")) : this.is_invalid(e2) || (this.updatedRows.splice(r2, 1), this.$scheduler.setUserData(e2, this.action_param, "")), this.markRow(e2, i, t2), i && this.autoUpdate && this.sendData(e2);
      }
    }, markRow: function(e2, i, t2) {
      var r2 = "", d = this.is_invalid(e2);
      if (d && (r2 = this.styles[d], i = true), this.callEvent("onRowMark", [e2, i, t2, d]) && (r2 = this.styles[i ? t2 : "clear"] + r2, this.$scheduler[this._methods[0]](e2, r2), d && d.details)) {
        r2 += this.styles[d + "_cell"];
        for (var n = 0; n < d.details.length; n++)
          d.details[n] && this.$scheduler[this._methods[1]](e2, n, r2);
      }
    }, getActionByState: function(e2) {
      return e2 === "inserted" ? "create" : e2 === "updated" ? "update" : e2 === "deleted" ? "delete" : "update";
    }, getState: function(e2) {
      return this.$scheduler.getUserData(e2, this.action_param);
    }, is_invalid: function(e2) {
      return this._invalid[e2];
    }, set_invalid: function(e2, i, t2) {
      t2 && (i = { value: i, details: t2, toString: function() {
        return this.value.toString();
      } }), this._invalid[e2] = i;
    }, checkBeforeUpdate: function(e2) {
      return true;
    }, sendData: function(e2) {
      return this.$scheduler.editStop && this.$scheduler.editStop(), e2 === void 0 || this._tSend ? this.sendAllData() : !this._in_progress[e2] && (this.messages = [], !(!this.checkBeforeUpdate(e2) && this.callEvent("onValidationError", [e2, this.messages])) && void this._beforeSendData(this._getRowData(e2), e2));
    }, _beforeSendData: function(e2, i) {
      if (!this.callEvent("onBeforeUpdate", [i, this.getState(i), e2]))
        return false;
      this._sendData(e2, i);
    }, serialize: function(e2, i) {
      if (this._serializeAsJson)
        return this._serializeAsJSON(e2);
      if (typeof e2 == "string")
        return e2;
      if (i !== void 0)
        return this.serialize_one(e2, "");
      var t2 = [], r2 = [];
      for (var d in e2)
        e2.hasOwnProperty(d) && (t2.push(this.serialize_one(e2[d], d + this.post_delim)), r2.push(d));
      return t2.push("ids=" + this.escape(r2.join(","))), this.$scheduler.security_key && t2.push("dhx_security=" + this.$scheduler.security_key), t2.join("&");
    }, serialize_one: function(e2, i) {
      if (typeof e2 == "string")
        return e2;
      var t2 = [], r2 = "";
      for (var d in e2)
        if (e2.hasOwnProperty(d)) {
          if ((d == "id" || d == this.action_param) && this._tMode == "REST")
            continue;
          r2 = typeof e2[d] == "string" || typeof e2[d] == "number" ? e2[d] : JSON.stringify(e2[d]), t2.push(this.escape((i || "") + d) + "=" + this.escape(r2));
        }
      return t2.join("&");
    }, _applyPayload: function(e2) {
      var i = this.$scheduler.ajax;
      if (this._payload)
        for (var t2 in this._payload)
          e2 = e2 + i.urlSeparator(e2) + this.escape(t2) + "=" + this.escape(this._payload[t2]);
      return e2;
    }, _sendData: function(e2, i) {
      if (e2) {
        if (!this.callEvent("onBeforeDataSending", i ? [i, this.getState(i), e2] : [null, null, e2]))
          return false;
        i && (this._in_progress[i] = (/* @__PURE__ */ new Date()).valueOf());
        var t2 = this, r2 = this.$scheduler.ajax;
        if (this._tMode !== "CUSTOM") {
          var d, n = { callback: function(f) {
            var c2 = [];
            if (i)
              c2.push(i);
            else if (e2)
              for (var p in e2)
                c2.push(p);
            return t2.afterUpdate(t2, f, c2);
          }, headers: t2._headers }, s = this.serverProcessor + (this._user ? r2.urlSeparator(this.serverProcessor) + ["dhx_user=" + this._user, "dhx_version=" + this.$scheduler.getUserData(0, "version")].join("&") : ""), _ = this._applyPayload(s);
          switch (this._tMode) {
            case "GET":
              d = this._cleanupArgumentsBeforeSend(e2), n.url = _ + r2.urlSeparator(_) + this.serialize(d, i), n.method = "GET";
              break;
            case "POST":
              d = this._cleanupArgumentsBeforeSend(e2), n.url = _, n.method = "POST", n.data = this.serialize(d, i);
              break;
            case "JSON":
              d = {};
              var a2 = this._cleanupItemBeforeSend(e2);
              for (var o2 in a2)
                o2 !== this.action_param && o2 !== "id" && o2 !== "gr_id" && (d[o2] = a2[o2]);
              n.url = _, n.method = "POST", n.data = JSON.stringify({ id: i, action: e2[this.action_param], data: d });
              break;
            case "REST":
            case "REST-JSON":
              switch (_ = s.replace(/(&|\?)editing=true/, ""), d = "", this.getState(i)) {
                case "inserted":
                  n.method = "POST", n.data = this.serialize(e2, i);
                  break;
                case "deleted":
                  n.method = "DELETE", _ = _ + (_.slice(-1) === "/" ? "" : "/") + i;
                  break;
                default:
                  n.method = "PUT", n.data = this.serialize(e2, i), _ = _ + (_.slice(-1) === "/" ? "" : "/") + i;
              }
              n.url = this._applyPayload(_);
          }
          return this._waitMode++, r2.query(n);
        }
        {
          var l = this.getState(i), h = this.getActionByState(l), v = function(c2) {
            var p = l;
            if (c2 && c2.responseText && c2.setRequestHeader) {
              c2.status !== 200 && (p = "error");
              try {
                c2 = JSON.parse(c2.responseText);
              } catch {
              }
            }
            p = p || "updated";
            var m = i, g = i;
            c2 && (p = c2.action || p, m = c2.sid || m, g = c2.id || c2.tid || g), t2.afterUpdateCallback(m, g, p, c2);
          };
          const f = "event";
          var u;
          if (this._router instanceof Function)
            u = this._router(f, h, e2, i);
          else
            switch (l) {
              case "inserted":
                u = this._router[f].create(e2);
                break;
              case "deleted":
                u = this._router[f].delete(i);
                break;
              default:
                u = this._router[f].update(e2, i);
            }
          if (u) {
            if (!u.then && u.id === void 0 && u.tid === void 0 && u.action === void 0)
              throw new Error("Incorrect router return value. A Promise or a response object is expected");
            u.then ? u.then(v).catch(function(c2) {
              c2 && c2.action ? v(c2) : v({ action: "error", value: c2 });
            }) : v(u);
          } else
            v(null);
        }
      }
    }, sendAllData: function() {
      if (this.updatedRows.length && this.updateMode !== "off") {
        this.messages = [];
        var e2 = true;
        if (this._forEachUpdatedRow(function(i) {
          e2 = e2 && this.checkBeforeUpdate(i);
        }), !e2 && !this.callEvent("onValidationError", ["", this.messages]))
          return false;
        this._tSend ? this._sendData(this._getAllData()) : this._forEachUpdatedRow(function(i) {
          if (!this._in_progress[i]) {
            if (this.is_invalid(i))
              return;
            this._beforeSendData(this._getRowData(i), i);
          }
        });
      }
    }, _getAllData: function(e2) {
      var i = {}, t2 = false;
      return this._forEachUpdatedRow(function(r2) {
        if (!this._in_progress[r2] && !this.is_invalid(r2)) {
          var d = this._getRowData(r2);
          this.callEvent("onBeforeUpdate", [r2, this.getState(r2), d]) && (i[r2] = d, t2 = true, this._in_progress[r2] = (/* @__PURE__ */ new Date()).valueOf());
        }
      }), t2 ? i : null;
    }, findRow: function(e2) {
      var i = 0;
      for (i = 0; i < this.updatedRows.length && e2 != this.updatedRows[i]; i++)
        ;
      return i;
    }, defineAction: function(e2, i) {
      this._uActions || (this._uActions = {}), this._uActions[e2] = i;
    }, afterUpdateCallback: function(e2, i, t2, r2) {
      if (this.$scheduler) {
        var d = e2, n = t2 !== "error" && t2 !== "invalid";
        if (n || this.set_invalid(e2, t2), this._uActions && this._uActions[t2] && !this._uActions[t2](r2))
          return delete this._in_progress[d];
        this._in_progress[d] !== "wait" && this.setUpdated(e2, false);
        var s = e2;
        switch (t2) {
          case "inserted":
          case "insert":
            i != e2 && (this.setUpdated(e2, false), this.$scheduler[this._methods[2]](e2, i), e2 = i);
            break;
          case "delete":
          case "deleted":
            return this.$scheduler.setUserData(e2, this.action_param, "true_deleted"), this.$scheduler[this._methods[3]](e2, i), delete this._in_progress[d], this.callEvent("onAfterUpdate", [e2, t2, i, r2]);
        }
        this._in_progress[d] !== "wait" ? (n && this.$scheduler.setUserData(e2, this.action_param, ""), delete this._in_progress[d]) : (delete this._in_progress[d], this.setUpdated(i, true, this.$scheduler.getUserData(e2, this.action_param))), this.callEvent("onAfterUpdate", [s, t2, i, r2]);
      }
    }, _errorResponse: function(e2, i) {
      return this.$scheduler && this.$scheduler.callEvent && this.$scheduler.callEvent("onSaveError", [i, e2.xmlDoc]), this.cleanUpdate(i);
    }, _setDefaultTransactionMode: function() {
      this.serverProcessor && (this.setTransactionMode("POST", true), this.serverProcessor += (this.serverProcessor.indexOf("?") !== -1 ? "&" : "?") + "editing=true", this._serverProcessor = this.serverProcessor);
    }, afterUpdate: function(e2, i, t2) {
      var r2 = this.$scheduler.ajax;
      if (i.xmlDoc.status === 200) {
        var d;
        try {
          d = JSON.parse(i.xmlDoc.responseText);
        } catch {
          i.xmlDoc.responseText.length || (d = {});
        }
        if (d) {
          var n = d.action || this.getState(t2) || "updated", s = d.sid || t2[0], _ = d.tid || t2[0];
          return e2.afterUpdateCallback(s, _, n, d), void e2.finalizeUpdate();
        }
        var a2 = r2.xmltop("data", i.xmlDoc);
        if (!a2)
          return this._errorResponse(i, t2);
        var o2 = r2.xpath("//data/action", a2);
        if (!o2.length)
          return this._errorResponse(i, t2);
        for (var l = 0; l < o2.length; l++) {
          var h = o2[l];
          n = h.getAttribute("type"), s = h.getAttribute("sid"), _ = h.getAttribute("tid"), e2.afterUpdateCallback(s, _, n, h);
        }
        e2.finalizeUpdate();
      } else
        this._errorResponse(i, t2);
    }, cleanUpdate: function(e2) {
      if (e2)
        for (var i = 0; i < e2.length; i++)
          delete this._in_progress[e2[i]];
    }, finalizeUpdate: function() {
      this._waitMode && this._waitMode--, this.callEvent("onAfterUpdateFinish", []), this.updatedRows.length || this.callEvent("onFullSync", []);
    }, init: function(e2) {
      if (!this._initialized) {
        this.$scheduler = e2, this.$scheduler._dp_init && this.$scheduler._dp_init(this), this._setDefaultTransactionMode(), this._methods = this._methods || ["_set_event_text_style", "", "_dp_change_event_id", "_dp_hook_delete"], function(t2, r2) {
          t2._validId = function(d) {
            return !this._is_virtual_event || !this._is_virtual_event(d);
          }, t2.setUserData = function(d, n, s) {
            if (d) {
              var _ = this.getEvent(d);
              _ && (_[n] = s);
            } else
              this._userdata[n] = s;
          }, t2.getUserData = function(d, n) {
            if (d) {
              var s = this.getEvent(d);
              return s ? s[n] : null;
            }
            return this._userdata[n];
          }, t2._set_event_text_style = function(d, n) {
            if (t2.getEvent(d)) {
              this.for_rendered(d, function(_) {
                _.style.cssText += ";" + n;
              });
              var s = this.getEvent(d);
              s._text_style = n, this.event_updated(s);
            }
          }, t2._update_callback = function(d, n) {
            var s = t2._xmlNodeToJSON(d.firstChild);
            s.rec_type == "none" && (s.rec_pattern = "none"), s.text = s.text || s._tagvalue, s.start_date = t2._helpers.parseDate(s.start_date), s.end_date = t2._helpers.parseDate(s.end_date), t2.addEvent(s), t2._add_rec_marker && t2.setCurrentView();
          }, t2._dp_change_event_id = function(d, n) {
            t2.getEvent(d) && t2.changeEventId(d, n);
          }, t2._dp_hook_delete = function(d, n) {
            if (t2.getEvent(d))
              return n && d != n && (this.getUserData(d, r2.action_param) == "true_deleted" && this.setUserData(d, r2.action_param, "updated"), this.changeEventId(d, n)), this.deleteEvent(n, true);
          }, t2.setDp = function() {
            this._dp = r2;
          }, t2.setDp();
        }(this.$scheduler, this);
        var i = new Jt(this.$scheduler, this);
        i.attach(), this.attachEvent("onDestroy", function() {
          delete this._getRowData, delete this.$scheduler._dp, delete this.$scheduler._dataprocessor, delete this.$scheduler._set_event_text_style, delete this.$scheduler._dp_change_event_id, delete this.$scheduler._dp_hook_delete, delete this.$scheduler, i.detach();
        }), this.$scheduler.callEvent("onDataProcessorReady", [this]), this._initialized = true, e2._dataprocessor = this;
      }
    }, setOnAfterUpdate: function(e2) {
      this.attachEvent("onAfterUpdate", e2);
    }, setOnBeforeUpdateHandler: function(e2) {
      this.attachEvent("onBeforeDataSending", e2);
    }, setAutoUpdate: function(e2, i) {
      e2 = e2 || 2e3, this._user = i || (/* @__PURE__ */ new Date()).valueOf(), this._need_update = false, this._update_busy = false, this.attachEvent("onAfterUpdate", function(d, n, s, _) {
        this.afterAutoUpdate(d, n, s, _);
      }), this.attachEvent("onFullSync", function() {
        this.fullSync();
      });
      var t2 = this;
      let r2 = oe.setInterval(function() {
        t2.loadUpdate();
      }, e2);
      this.attachEvent("onDestroy", function() {
        clearInterval(r2);
      });
    }, afterAutoUpdate: function(e2, i, t2, r2) {
      return i != "collision" || (this._need_update = true, false);
    }, fullSync: function() {
      return this._need_update && (this._need_update = false, this.loadUpdate()), true;
    }, getUpdates: function(e2, i) {
      var t2 = this.$scheduler.ajax;
      if (this._update_busy)
        return false;
      this._update_busy = true, t2.get(e2, i);
    }, _getXmlNodeValue: function(e2) {
      return e2.firstChild ? e2.firstChild.nodeValue : "";
    }, loadUpdate: function() {
      var e2 = this, i = this.$scheduler.ajax, t2 = this.$scheduler.getUserData(0, "version"), r2 = this.serverProcessor + i.urlSeparator(this.serverProcessor) + ["dhx_user=" + this._user, "dhx_version=" + t2].join("&");
      r2 = r2.replace("editing=true&", ""), this.getUpdates(r2, function(d) {
        var n = i.xpath("//userdata", d);
        e2.$scheduler.setUserData(0, "version", e2._getXmlNodeValue(n[0]));
        var s = i.xpath("//update", d);
        if (s.length) {
          e2._silent_mode = true;
          for (var _ = 0; _ < s.length; _++) {
            var a2 = s[_].getAttribute("status"), o2 = s[_].getAttribute("id"), l = s[_].getAttribute("parent");
            switch (a2) {
              case "inserted":
                this.callEvent("insertCallback", [s[_], o2, l]);
                break;
              case "updated":
                this.callEvent("updateCallback", [s[_], o2, l]);
                break;
              case "deleted":
                this.callEvent("deleteCallback", [s[_], o2, l]);
            }
          }
          e2._silent_mode = false;
        }
        e2._update_busy = false, e2 = null;
      });
    }, destructor: function() {
      this.callEvent("onDestroy", []), this.detachAllEvents(), this.updatedRows = [], this._in_progress = {}, this._invalid = {}, this._headers = null, this._payload = null, delete this._initialized;
    }, url: function(e2) {
      this.serverProcessor = this._serverProcessor = e2;
    }, _serializeAsJSON: function(e2) {
      if (typeof e2 == "string")
        return e2;
      var i = this.$scheduler.utils.copy(e2);
      return this._tMode === "REST-JSON" && (delete i.id, delete i[this.action_param]), JSON.stringify(i);
    }, _cleanupArgumentsBeforeSend: function(e2) {
      var i;
      if (e2[this.action_param] === void 0)
        for (var t2 in i = {}, e2)
          i[t2] = this._cleanupArgumentsBeforeSend(e2[t2]);
      else
        i = this._cleanupItemBeforeSend(e2);
      return i;
    }, _cleanupItemBeforeSend: function(e2) {
      var i = null;
      return e2 && (e2[this.action_param] === "deleted" ? ((i = {}).id = e2.id, i[this.action_param] = e2[this.action_param]) : i = e2), i;
    }, _forEachUpdatedRow: function(e2) {
      for (var i = this.updatedRows.slice(), t2 = 0; t2 < i.length; t2++) {
        var r2 = i[t2];
        this.$scheduler.getUserData(r2, this.action_param) && e2.call(this, r2);
      }
    }, _prepareItemForJson(e2) {
      const i = {}, t2 = this.$scheduler, r2 = t2.utils.copy(e2);
      for (let d in r2) {
        let n = r2[d];
        d.indexOf("_") !== 0 && (n ? n.getUTCFullYear ? i[d] = t2._helpers.formatDate(n) : i[d] = typeof n == "object" ? this._prepareItemForJson(n) : n : n !== void 0 && (i[d] = n));
      }
      return i[this.action_param] = t2.getUserData(e2.id, this.action_param), i;
    }, _prepareItemForForm(e2) {
      const i = {}, t2 = this.$scheduler, r2 = t2.utils.copy(e2);
      for (var d in r2) {
        let n = r2[d];
        d.indexOf("_") !== 0 && (n ? n.getUTCFullYear ? i[d] = t2._helpers.formatDate(n) : i[d] = typeof n == "object" ? this._prepareItemForForm(n) : n : i[d] = "");
      }
      return i[this.action_param] = t2.getUserData(e2.id, this.action_param), i;
    }, _prepareDataItem: function(e2) {
      return this._serializeAsJson ? this._prepareItemForJson(e2) : this._prepareItemForForm(e2);
    }, _getRowData: function(e2) {
      var i = this.$scheduler.getEvent(e2);
      return i || (i = { id: e2 }), this._prepareDataItem(i);
    } };
    Kt2 = { date: { month_full: ["\u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u062B\u0627\u0646\u064A", "\u0634\u0628\u0627\u0637", "\u0622\u0630\u0627\u0631", "\u0646\u064A\u0633\u0627\u0646", "\u0623\u064A\u0627\u0631", "\u062D\u0632\u064A\u0631\u0627\u0646", "\u062A\u0645\u0648\u0632", "\u0622\u0628", "\u0623\u064A\u0644\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646 \u0627\u0644\u0623\u0648\u0644", "\u062A\u0634\u0631\u064A\u0646 \u0627\u0644\u062B\u0627\u0646\u064A", "\u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u0623\u0648\u0644"], month_short: ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], day_full: ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0623\u062B\u0646\u064A\u0646", "\u0623\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0623\u0644\u062D\u0645\u064A\u0633", "\u0623\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"], day_short: ["\u0627\u062D\u062F", "\u0627\u062B\u0646\u064A\u0646", "\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0631\u0628\u0639\u0627\u0621", "\u062E\u0645\u064A\u0633", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"] }, labels: { dhx_cal_today_button: "\u0627\u0644\u064A\u0648\u0645", day_tab: "\u064A\u0648\u0645", week_tab: "\u0623\u0633\u0628\u0648\u0639", month_tab: "\u0634\u0647\u0631", new_event: "\u062D\u062F\u062B \u062C\u062F\u064A\u062F", icon_save: "\u0627\u062E\u0632\u0646", icon_cancel: "\u0627\u0644\u063A\u0627\u0621", icon_details: "\u062A\u0641\u0627\u0635\u064A\u0644", icon_edit: "\u062A\u062D\u0631\u064A\u0631", icon_delete: "\u062D\u0630\u0641", confirm_closing: "\u0627\u0644\u062A\u063A\u064A\u064A\u0631\u0627\u062A \u0633\u0648\u0641 \u062A\u0636\u064A\u0639, \u0647\u0644 \u0627\u0646\u062A \u0645\u062A\u0623\u0643\u062F\u061F", confirm_deleting: "\u0627\u0644\u062D\u062F\u062B \u0633\u064A\u062A\u0645 \u062D\u0630\u0641\u0647\u0627 \u0646\u0647\u0627\u0626\u064A\u0627 \u060C \u0647\u0644 \u0623\u0646\u062A \u0645\u062A\u0623\u0643\u062F\u061F", section_description: "\u0627\u0644\u0648\u0635\u0641", section_time: "\u0627\u0644\u0641\u062A\u0631\u0629 \u0627\u0644\u0632\u0645\u0646\u064A\u0629", full_day: "\u0637\u0648\u0627\u0644 \u0627\u0644\u064A\u0648\u0645", confirm_recurring: "\u0647\u0644 \u062A\u0631\u064A\u062F \u062A\u062D\u0631\u064A\u0631 \u0645\u062C\u0645\u0648\u0639\u0629 \u0643\u0627\u0645\u0644\u0629 \u0645\u0646 \u0627\u0644\u0623\u062D\u062F\u0627\u062B \u0627\u0644\u0645\u062A\u0643\u0631\u0631\u0629\u061F", section_recurring: "\u062A\u0643\u0631\u0627\u0631 \u0627\u0644\u062D\u062F\u062B", button_recurring: "\u062A\u0639\u0637\u064A\u0644", button_recurring_open: "\u062A\u0645\u0643\u064A\u0646", button_edit_series: "\u062A\u062D\u0631\u064A\u0631 \u0633\u0644\u0633\u0644\u0629", button_edit_occurrence: "\u062A\u0639\u062F\u064A\u0644 \u0646\u0633\u062E\u0629", grid_tab: "\u062C\u062F\u0648\u0644", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "\u064A\u0648\u0645\u064A", repeat_radio_week: "\u0623\u0633\u0628\u0648\u0639\u064A", repeat_radio_month: "\u0634\u0647\u0631\u064A", repeat_radio_year: "\u0633\u0646\u0648\u064A", repeat_radio_day_type: "\u0643\u0644", repeat_text_day_count: "\u064A\u0648\u0645", repeat_radio_day_type2: "\u0643\u0644 \u064A\u0648\u0645 \u0639\u0645\u0644", repeat_week: " \u062A\u0643\u0631\u0627\u0631 \u0643\u0644", repeat_text_week_count: "\u0623\u0633\u0628\u0648\u0639 \u0641\u064A \u0627\u0644\u0623\u064A\u0627\u0645 \u0627\u0644\u062A\u0627\u0644\u064A\u0629:", repeat_radio_month_type: "\u062A\u0643\u0631\u0627\u0631", repeat_radio_month_start: "\u0641\u064A", repeat_text_month_day: "\u064A\u0648\u0645 \u0643\u0644", repeat_text_month_count: "\u0634\u0647\u0631", repeat_text_month_count2_before: "\u0643\u0644", repeat_text_month_count2_after: "\u0634\u0647\u0631", repeat_year_label: "\u0641\u064A", select_year_day2: "\u0645\u0646", repeat_text_year_day: "\u064A\u0648\u0645", select_year_month: "\u0634\u0647\u0631", repeat_radio_end: "\u0628\u062F\u0648\u0646 \u062A\u0627\u0631\u064A\u062E \u0627\u0646\u062A\u0647\u0627\u0621", repeat_text_occurences_count: "\u062A\u0643\u0631\u0627\u0631\u0627\u062A", repeat_radio_end2: "\u0628\u0639\u062F", repeat_radio_end3: "\u064A\u0646\u062A\u0647\u064A \u0641\u064A", repeat_never: "\u0623\u0628\u062F\u0627\u064B", repeat_daily: "\u0643\u0644 \u064A\u0648\u0645", repeat_workdays: "\u0643\u0644 \u064A\u0648\u0645 \u0639\u0645\u0644", repeat_weekly: "\u0643\u0644 \u0623\u0633\u0628\u0648\u0639", repeat_monthly: "\u0643\u0644 \u0634\u0647\u0631", repeat_yearly: "\u0643\u0644 \u0633\u0646\u0629", repeat_custom: "\u062A\u062E\u0635\u064A\u0635", repeat_freq_day: "\u064A\u0648\u0645", repeat_freq_week: "\u0623\u0633\u0628\u0648\u0639", repeat_freq_month: "\u0634\u0647\u0631", repeat_freq_year: "\u0633\u0646\u0629", repeat_on_date: "\u0641\u064A \u0627\u0644\u062A\u0627\u0631\u064A\u062E", repeat_ends: "\u064A\u0646\u062A\u0647\u064A", month_for_recurring: ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"], day_for_recurring: ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0625\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"] } };
    Gt = { date: { month_full: ["\u0421\u0442\u0443\u0434\u0437\u0435\u043D\u044C", "\u041B\u044E\u0442\u044B", "\u0421\u0430\u043A\u0430\u0432\u0456\u043A", "\u041A\u0440\u0430\u0441\u0430\u0432\u0456\u043A", "Ma\u0439", "\u0427\u044D\u0440\u0432\u0435\u043D\u044C", "\u041B\u0456\u043F\u0435\u043D\u044C", "\u0416\u043D\u0456\u0432\u0435\u043D\u044C", "\u0412\u0435\u0440\u0430\u0441\u0435\u043D\u044C", "\u041A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A", "\u041B\u0456\u0441\u0442\u0430\u043F\u0430\u0434", "\u0421\u043D\u0435\u0436\u0430\u043D\u044C"], month_short: ["\u0421\u0442\u0443\u0434\u0437", "\u041B\u044E\u0442", "\u0421\u0430\u043A", "\u041A\u0440\u0430\u0441", "Ma\u0439", "\u0427\u044D\u0440", "\u041B\u0456\u043F", "\u0416\u043D\u0456\u0432", "\u0412\u0435\u0440", "\u041A\u0430\u0441\u0442", "\u041B\u0456\u0441\u0442", "\u0421\u043D\u0435\u0436"], day_full: ["\u041D\u044F\u0434\u0437\u0435\u043B\u044F", "\u041F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A", "\u0410\u045E\u0442\u043E\u0440\u0430\u043A", "\u0421\u0435\u0440\u0430\u0434\u0430", "\u0427\u0430\u0446\u0432\u0435\u0440", "\u041F\u044F\u0442\u043D\u0456\u0446\u0430", "\u0421\u0443\u0431\u043E\u0442\u0430"], day_short: ["\u041D\u0434", "\u041F\u043D", "\u0410\u045E\u0442", "\u0421\u0440", "\u0427\u0446\u0432", "\u041F\u0442", "\u0421\u0431"] }, labels: { dhx_cal_today_button: "\u0421\u0451\u043D\u043D\u044F", day_tab: "\u0414\u0437\u0435\u043D\u044C", week_tab: "\u0422\u044B\u0434\u0437\u0435\u043D\u044C", month_tab: "\u041C\u0435\u0441\u044F\u0446", new_event: "\u041D\u043E\u0432\u0430\u044F \u043F\u0430\u0434\u0437\u0435\u044F", icon_save: "\u0417\u0430\u0445\u0430\u0432\u0430\u0446\u044C", icon_cancel: "\u0410\u0434\u043C\u044F\u043D\u0456\u0446\u044C", icon_details: "\u0414\u044D\u0442\u0430\u043B\u0456", icon_edit: "\u0417\u043C\u044F\u043D\u0456\u0446\u044C", icon_delete: "\u0412\u044B\u0434\u0430\u043B\u0456\u0446\u044C", confirm_closing: "", confirm_deleting: "\u041F\u0430\u0434\u0437\u0435\u044F \u0431\u0443\u0434\u0437\u0435 \u0432\u044B\u0434\u0430\u043B\u0435\u043D\u0430 \u043D\u0435\u0437\u0432\u0430\u0440\u043E\u0442\u043D\u0430, \u043F\u0440\u0430\u0446\u044F\u0433\u043D\u0443\u0446\u044C?", section_description: "\u0410\u043F\u0456\u0441\u0430\u043D\u043D\u0435", section_time: "\u041F\u0435\u0440\u044B\u044F\u0434 \u0447\u0430\u0441\u0443", full_day: "\u0423\u0432\u0435\u0441\u044C \u0434\u0437\u0435\u043D\u044C", confirm_recurring: "\u0412\u044B \u0445\u043E\u0447\u0430\u0446\u0435 \u0437\u043C\u044F\u043D\u0456\u0446\u044C \u0443\u0441\u044E \u0441\u0435\u0440\u044B\u044E \u043F\u0430\u045E\u0442\u0430\u0440\u0430\u043B\u044C\u043D\u044B\u0445 \u043F\u0430\u0434\u0437\u0435\u0439?", section_recurring: "\u041F\u0430\u045E\u0442\u0430\u0440\u044D\u043D\u043D\u0435", button_recurring: "\u0410\u0434\u043A\u043B\u044E\u0447\u0430\u043D\u0430", button_recurring_open: "\u0423\u043A\u043B\u044E\u0447\u0430\u043D\u0430", button_edit_series: "\u0420\u044D\u0434\u0430\u0433\u0430\u0432\u0430\u0446\u044C \u0441\u0435\u0440\u044B\u044E", button_edit_occurrence: "\u0420\u044D\u0434\u0430\u0433\u0430\u0432\u0430\u0446\u044C \u0430\u0441\u043E\u0431\u043D\u0456\u043A", agenda_tab: "\u0421\u043F\u0456\u0441", date: "\u0414\u0430\u0442\u0430", description: "\u0410\u043F\u0456\u0441\u0430\u043D\u043D\u0435", year_tab: "\u0413\u043E\u0434", week_agenda_tab: "\u0421\u043F\u0456\u0441", grid_tab: "\u0421\u043Fic", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "\u0414\u0437\u0435\u043D\u044C", repeat_radio_week: "\u0422\u044B\u0434\u0437\u0435\u043D\u044C", repeat_radio_month: "\u041C\u0435\u0441\u044F\u0446", repeat_radio_year: "\u0413\u043E\u0434", repeat_radio_day_type: "\u041A\u043E\u0436\u043D\u044B", repeat_text_day_count: "\u0434\u0437\u0435\u043D\u044C", repeat_radio_day_type2: "\u041A\u043E\u0436\u043D\u044B \u043F\u0440\u0430\u0446\u043E\u045E\u043D\u044B \u0434\u0437\u0435\u043D\u044C", repeat_week: " \u041F\u0430\u045E\u0442\u0430\u0440\u0430\u0446\u044C \u043A\u043E\u0436\u043D\u044B", repeat_text_week_count: "\u0442\u044B\u0434\u0437\u0435\u043D\u044C", repeat_radio_month_type: "\u041F\u0430\u045E\u0442\u0430\u0440\u0430\u0446\u044C", repeat_radio_month_start: "", repeat_text_month_day: " \u0447\u044B\u0441\u043B\u0430 \u043A\u043E\u0436\u043D\u0430\u0433\u0430", repeat_text_month_count: "\u043C\u0435\u0441\u044F\u0446\u0443", repeat_text_month_count2_before: "\u043A\u043E\u0436\u043D\u044B ", repeat_text_month_count2_after: "\u043C\u0435\u0441\u044F\u0446", repeat_year_label: "", select_year_day2: "", repeat_text_year_day: "\u0434\u0437\u0435\u043D\u044C", select_year_month: "", repeat_radio_end: "\u0411\u0435\u0437 \u0434\u0430\u0442\u044B \u0437\u0430\u043A\u0430\u043D\u0447\u044D\u043D\u043D\u044F", repeat_text_occurences_count: "\u043F\u0430\u045E\u0442\u043E\u0440\u0430\u045E", repeat_radio_end2: "", repeat_radio_end3: "\u0414\u0430 ", repeat_never: "\u041D\u0456\u043A\u043E\u043B\u0456", repeat_daily: "\u041A\u043E\u0436\u043D\u044B \u0434\u0437\u0435\u043D\u044C", repeat_workdays: "\u041A\u043E\u0436\u043D\u044B \u043F\u0440\u0430\u0446\u043E\u045E\u043D\u044B \u0434\u0437\u0435\u043D\u044C", repeat_weekly: "\u041A\u043E\u0436\u043D\u044B \u0442\u044B\u0434\u0437\u0435\u043D\u044C", repeat_monthly: "\u041A\u043E\u0436\u043D\u044B \u043C\u0435\u0441\u044F\u0446", repeat_yearly: "\u041A\u043E\u0436\u043D\u044B \u0433\u043E\u0434", repeat_custom: "\u041D\u0430\u043B\u0430\u0434\u0436\u0432\u0430\u043B\u044C\u043D\u044B", repeat_freq_day: "\u0414\u0437\u0435\u043D\u044C", repeat_freq_week: "\u0422\u044B\u0434\u0437\u0435\u043D\u044C", repeat_freq_month: "\u041C\u0435\u0441\u044F\u0446", repeat_freq_year: "\u0413\u043E\u0434", repeat_on_date: "\u041D\u0430 \u0434\u0430\u0442\u0443", repeat_ends: "\u0417\u0430\u043A\u0430\u043D\u0447\u0432\u0430\u0435\u0446\u0446\u0430", month_for_recurring: ["\u0421\u0442\u0443\u0434\u0437\u0435\u043D\u044F", "\u041B\u044E\u0442\u0430\u0433\u0430", "\u0421\u0430\u043A\u0430\u0432\u0456\u043A\u0430", "\u041A\u0440\u0430\u0441\u0430\u0432\u0456\u043A\u0430", "\u041C\u0430\u044F", "\u0427\u044D\u0440\u0432\u0435\u043D\u044F", "\u041B\u0456\u043Fe\u043D\u044F", "\u0416\u043D\u0456\u045E\u043D\u044F", "\u0412\u0435\u0440\u0430\u0441\u043D\u044F", "\u041A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A\u0430", "\u041B\u0456\u0441\u0442\u0430\u043F\u0430\u0434\u0430", "\u0421\u043D\u0435\u0436\u043D\u044F"], day_for_recurring: ["\u041D\u044F\u0434\u0437\u0435\u043B\u044E", "\u041F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A", "\u0410\u045E\u0442\u043E\u0440\u0430\u043A", "\u0421\u0435\u0440\u0430\u0434\u0443", "\u0427\u0430\u0446\u0432\u0435\u0440", "\u041F\u044F\u0442\u043D\u0456\u0446\u0443", "\u0421\u0443\u0431\u043E\u0442\u0443"] } };
    Xt = { date: { month_full: ["Gener", "Febrer", "Mar\xE7", "Abril", "Maig", "Juny", "Juliol", "Agost", "Setembre", "Octubre", "Novembre", "Desembre"], month_short: ["Gen", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Des"], day_full: ["Diumenge", "Dilluns", "Dimarts", "Dimecres", "Dijous", "Divendres", "Dissabte"], day_short: ["Dg", "Dl", "Dm", "Dc", "Dj", "Dv", "Ds"] }, labels: { dhx_cal_today_button: "Hui", day_tab: "Dia", week_tab: "Setmana", month_tab: "Mes", new_event: "Nou esdeveniment", icon_save: "Guardar", icon_cancel: "Cancel\xB7lar", icon_details: "Detalls", icon_edit: "Editar", icon_delete: "Esborrar", confirm_closing: "", confirm_deleting: "L'esdeveniment s'esborrar\xE0 definitivament, continuar ?", section_description: "Descripci\xF3", section_time: "Periode de temps", full_day: "Tot el dia", confirm_recurring: "\xBFDesitja modificar el conjunt d'esdeveniments repetits?", section_recurring: "Repeteixca l'esdeveniment", button_recurring: "Impedit", button_recurring_open: "Perm\xE9s", button_edit_series: "Edit s\xE8rie", button_edit_occurrence: "Edita Inst\xE0ncia", agenda_tab: "Agenda", date: "Data", description: "Descripci\xF3", year_tab: "Any", week_agenda_tab: "Agenda", grid_tab: "Taula", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Diari", repeat_radio_week: "Setmanal", repeat_radio_month: "Mensual", repeat_radio_year: "Anual", repeat_radio_day_type: "Cada", repeat_text_day_count: "dia", repeat_radio_day_type2: "Cada dia laborable", repeat_week: " Repetir cada", repeat_text_week_count: "setmana els dies seg\xFCents:", repeat_radio_month_type: "Repetir", repeat_radio_month_start: "El", repeat_text_month_day: "dia cada", repeat_text_month_count: "mes", repeat_text_month_count2_before: "cada", repeat_text_month_count2_after: "mes", repeat_year_label: "El", select_year_day2: "de", repeat_text_year_day: "dia", select_year_month: "mes", repeat_radio_end: "Sense data de finalitzaci\xF3", repeat_text_occurences_count: "ocurr\xE8ncies", repeat_radio_end2: "Despr\xE9s", repeat_radio_end3: "Finalitzar el", repeat_never: "Mai", repeat_daily: "Cada dia", repeat_workdays: "Cada dia laborable", repeat_weekly: "Cada setmana", repeat_monthly: "Cada mes", repeat_yearly: "Cada any", repeat_custom: "Personalitzat", repeat_freq_day: "Dia", repeat_freq_week: "Setmana", repeat_freq_month: "Mes", repeat_freq_year: "Any", repeat_on_date: "En la data", repeat_ends: "Finalitza", month_for_recurring: ["Gener", "Febrer", "Mar\xE7", "Abril", "Maig", "Juny", "Juliol", "Agost", "Setembre", "Octubre", "Novembre", "Desembre"], day_for_recurring: ["Diumenge", "Dilluns", "Dimarts", "Dimecres", "Dijous", "Divendres", "Dissabte"] } };
    Zt = { date: { month_full: ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"], month_short: ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"], day_full: ["\u661F\u671F\u65E5", "\u661F\u671F\u4E00", "\u661F\u671F\u4E8C", "\u661F\u671F\u4E09", "\u661F\u671F\u56DB", "\u661F\u671F\u4E94", "\u661F\u671F\u516D"], day_short: ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"] }, labels: { dhx_cal_today_button: "\u4ECA\u5929", day_tab: "\u65E5", week_tab: "\u5468", month_tab: "\u6708", new_event: "\u65B0\u5EFA\u65E5\u7A0B", icon_save: "\u4FDD\u5B58", icon_cancel: "\u5173\u95ED", icon_details: "\u8BE6\u7EC6", icon_edit: "\u7F16\u8F91", icon_delete: "\u5220\u9664", confirm_closing: "\u8BF7\u786E\u8BA4\u662F\u5426\u64A4\u9500\u4FEE\u6539!", confirm_deleting: "\u662F\u5426\u5220\u9664\u65E5\u7A0B?", section_description: "\u63CF\u8FF0", section_time: "\u65F6\u95F4\u8303\u56F4", full_day: "\u6574\u5929", confirm_recurring: "\u8BF7\u786E\u8BA4\u662F\u5426\u5C06\u65E5\u7A0B\u8BBE\u4E3A\u91CD\u590D\u6A21\u5F0F?", section_recurring: "\u91CD\u590D\u5468\u671F", button_recurring: "\u7981\u7528", button_recurring_open: "\u542F\u7528", button_edit_series: "\u7F16\u8F91\u7CFB\u5217", button_edit_occurrence: "\u7F16\u8F91\u5B9E\u4F8B", agenda_tab: "\u8BAE\u7A0B", date: "\u65E5\u671F", description: "\u8BF4\u660E", year_tab: "\u4ECA\u5E74", week_agenda_tab: "\u8BAE\u7A0B", grid_tab: "\u7535\u7F51", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "\u6309\u5929", repeat_radio_week: "\u6309\u5468", repeat_radio_month: "\u6309\u6708", repeat_radio_year: "\u6309\u5E74", repeat_radio_day_type: "\u6BCF", repeat_text_day_count: "\u5929", repeat_radio_day_type2: "\u6BCF\u4E2A\u5DE5\u4F5C\u65E5", repeat_week: " \u91CD\u590D \u6BCF", repeat_text_week_count: "\u661F\u671F\u7684:", repeat_radio_month_type: "\u91CD\u590D", repeat_radio_month_start: "\u5728", repeat_text_month_day: "\u65E5 \u6BCF", repeat_text_month_count: "\u6708", repeat_text_month_count2_before: "\u6BCF", repeat_text_month_count2_after: "\u6708", repeat_year_label: "\u5728", select_year_day2: "\u7684", repeat_text_year_day: "\u65E5", select_year_month: "\u6708", repeat_radio_end: "\u65E0\u7ED3\u675F\u65E5\u671F", repeat_text_occurences_count: "\u6B21\u7ED3\u675F", repeat_radio_end2: "\u91CD\u590D", repeat_radio_end3: "\u7ED3\u675F\u4E8E", repeat_never: "\u4ECE\u4E0D", repeat_daily: "\u6BCF\u5929", repeat_workdays: "\u6BCF\u4E2A\u5DE5\u4F5C\u65E5", repeat_weekly: "\u6BCF\u5468", repeat_monthly: "\u6BCF\u6708", repeat_yearly: "\u6BCF\u5E74", repeat_custom: "\u81EA\u5B9A\u4E49", repeat_freq_day: "\u5929", repeat_freq_week: "\u5468", repeat_freq_month: "\u6708", repeat_freq_year: "\u5E74", repeat_on_date: "\u5728\u65E5\u671F", repeat_ends: "\u7ED3\u675F", month_for_recurring: ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"], day_for_recurring: ["\u661F\u671F\u65E5", "\u661F\u671F\u4E00", "\u661F\u671F\u4E8C", "\u661F\u671F\u4E09", "\u661F\u671F\u56DB", "\u661F\u671F\u4E94", "\u661F\u671F\u516D"] } };
    Qt = { date: { month_full: ["Leden", "\xDAnor", "B\u0159ezen", "Duben", "Kv\u011Bten", "\u010Cerven", "\u010Cervenec", "Srpen", "Z\xE1\u0159\xED", "\u0158\xEDjen", "Listopad", "Prosinec"], month_short: ["Led", "\xDAn", "B\u0159e", "Dub", "Kv\u011B", "\u010Cer", "\u010Cec", "Srp", "Z\xE1\u0159\xED", "\u0158\xEDj", "List", "Pro"], day_full: ["Ned\u011Ble", "Pond\u011Bl\xED", "\xDAter\xFD", "St\u0159eda", "\u010Ctvrtek", "P\xE1tek", "Sobota"], day_short: ["Ne", "Po", "\xDAt", "St", "\u010Ct", "P\xE1", "So"] }, labels: { dhx_cal_today_button: "Dnes", day_tab: "Den", week_tab: "T\xFDden", month_tab: "M\u011Bs\xEDc", new_event: "Nov\xE1 ud\xE1lost", icon_save: "Ulo\u017Eit", icon_cancel: "Zp\u011Bt", icon_details: "Detail", icon_edit: "Edituj", icon_delete: "Smazat", confirm_closing: "", confirm_deleting: "Ud\xE1lost bude trvale smaz\xE1na, opravdu?", section_description: "Pozn\xE1mky", section_time: "Doba platnosti", confirm_recurring: "P\u0159ejete si upravit celou \u0159adu opakovan\xFDch ud\xE1lost\xED?", section_recurring: "Opakov\xE1n\xED ud\xE1losti", button_recurring: "Vypnuto", button_recurring_open: "Zapnuto", button_edit_series: "Edit series", button_edit_occurrence: "Upravit instance", agenda_tab: "Program", date: "Datum", description: "Pozn\xE1mka", year_tab: "Rok", full_day: "Full day", week_agenda_tab: "Program", grid_tab: "M\u0159\xED\u017Eka", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Denn\u011B", repeat_radio_week: "T\xFDdn\u011B", repeat_radio_month: "M\u011Bs\xED\u010Dn\u011B", repeat_radio_year: "Ro\u010Dn\u011B", repeat_radio_day_type: "ka\u017Ed\xFD", repeat_text_day_count: "Den", repeat_radio_day_type2: "pracovn\xED dny", repeat_week: "Opakuje ka\u017Ed\xFDch", repeat_text_week_count: "T\xFDdn\u016F na:", repeat_radio_month_type: "u ka\u017Ed\xE9ho", repeat_radio_month_start: "na", repeat_text_month_day: "Den ka\u017Ed\xE9ho", repeat_text_month_count: "M\u011Bs\xEDc", repeat_text_month_count2_before: "ka\u017Ed\xFD", repeat_text_month_count2_after: "M\u011Bs\xEDc", repeat_year_label: "na", select_year_day2: "v", repeat_text_year_day: "Den v", select_year_month: "", repeat_radio_end: "bez data ukon\u010Den\xED", repeat_text_occurences_count: "Ud\xE1losti", repeat_radio_end2: "po", repeat_radio_end3: "Konec", repeat_never: "Nikdy", repeat_daily: "Ka\u017Ed\xFD den", repeat_workdays: "Ka\u017Ed\xFD pracovn\xED den", repeat_weekly: "Ka\u017Ed\xFD t\xFDden", repeat_monthly: "Ka\u017Ed\xFD m\u011Bs\xEDc", repeat_yearly: "Ka\u017Ed\xFD rok", repeat_custom: "Vlastn\xED", repeat_freq_day: "Den", repeat_freq_week: "T\xFDden", repeat_freq_month: "M\u011Bs\xEDc", repeat_freq_year: "Rok", repeat_on_date: "Na datum", repeat_ends: "Kon\u010D\xED", month_for_recurring: ["Leden", "\xDAnor", "B\u0159ezen", "Duben", "Kv\u011Bten", "\u010Cerven", "\u010Cervenec", "Srpen", "Z\xE1\u0159\xED", "\u0158\xEDjen", "Listopad", "Prosinec"], day_for_recurring: ["Ned\u011Ble ", "Pond\u011Bl\xED", "\xDAter\xFD", "St\u0159eda", "\u010Ctvrtek", "P\xE1tek", "Sobota"] } };
    ea = { date: { month_full: ["Januar", "Februar", "Marts", "April", "Maj", "Juni", "Juli", "August", "September", "Oktober", "November", "December"], month_short: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"], day_full: ["S\xF8ndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "L\xF8rdag"], day_short: ["S\xF8n", "Man", "Tir", "Ons", "Tor", "Fre", "L\xF8r"] }, labels: { dhx_cal_today_button: "Idag", day_tab: "Dag", week_tab: "Uge", month_tab: "M\xE5ned", new_event: "Ny begivenhed", icon_save: "Gem", icon_cancel: "Fortryd", icon_details: "Detaljer", icon_edit: "Tilret", icon_delete: "Slet", confirm_closing: "Dine rettelser vil g\xE5 tabt.. Er dy sikker?", confirm_deleting: "Bigivenheden vil blive slettet permanent. Er du sikker?", section_description: "Beskrivelse", section_time: "Tidsperiode", confirm_recurring: "Vil du tilrette hele serien af gentagne begivenheder?", section_recurring: "Gentag begivenhed", button_recurring: "Frakoblet", button_recurring_open: "Tilkoblet", button_edit_series: "Rediger serien", button_edit_occurrence: "Rediger en kopi", agenda_tab: "Dagsorden", date: "Dato", description: "Beskrivelse", year_tab: "\xC5r", week_agenda_tab: "Dagsorden", grid_tab: "Grid", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Daglig", repeat_radio_week: "Ugenlig", repeat_radio_month: "M\xE5nedlig", repeat_radio_year: "\xC5rlig", repeat_radio_day_type: "Hver", repeat_text_day_count: "dag", repeat_radio_day_type2: "P\xE5 hver arbejdsdag", repeat_week: " Gentager sig hver", repeat_text_week_count: "uge p\xE5 f\xF8lgende dage:", repeat_radio_month_type: "Hver den", repeat_radio_month_start: "Den", repeat_text_month_day: " i hver", repeat_text_month_count: "m\xE5ned", repeat_text_month_count2_before: "hver", repeat_text_month_count2_after: "m\xE5ned", repeat_year_label: "Den", select_year_day2: "i", repeat_text_year_day: "dag i", select_year_month: "", repeat_radio_end: "Ingen slutdato", repeat_text_occurences_count: "gentagelse", repeat_radio_end2: "Efter", repeat_radio_end3: "Slut", repeat_never: "Aldrig", repeat_daily: "Hver dag", repeat_workdays: "Hver hverdag", repeat_weekly: "Hver uge", repeat_monthly: "Hver m\xE5ned", repeat_yearly: "Hvert \xE5r", repeat_custom: "Brugerdefineret", repeat_freq_day: "Dag", repeat_freq_week: "Uge", repeat_freq_month: "M\xE5ned", repeat_freq_year: "\xC5r", repeat_on_date: "P\xE5 dato", repeat_ends: "Slutter", month_for_recurring: ["Januar", "Februar", "M\xE4rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"], day_for_recurring: ["S\xF8ndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "L\xF8rdag"] } };
    ta = { date: { month_full: [" Januar", " Februar", " M\xE4rz ", " April", " Mai", " Juni", " Juli", " August", " September ", " Oktober", " November ", " Dezember"], month_short: ["Jan", "Feb", "M\xE4r", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"], day_full: ["Sonntag", "Montag", "Dienstag", " Mittwoch", " Donnerstag", "Freitag", "Samstag"], day_short: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"] }, labels: { dhx_cal_today_button: "Heute", day_tab: "Tag", week_tab: "Woche", month_tab: "Monat", new_event: "neuer Eintrag", icon_save: "Speichern", icon_cancel: "Abbrechen", icon_details: "Details", icon_edit: "\xC4ndern", icon_delete: "L\xF6schen", confirm_closing: "", confirm_deleting: "Der Eintrag wird gel\xF6scht", section_description: "Beschreibung", section_time: "Zeitspanne", full_day: "Ganzer Tag", confirm_recurring: "Wollen Sie alle Eintr\xE4ge bearbeiten oder nur diesen einzelnen Eintrag?", section_recurring: "Wiederholung", button_recurring: "Aus", button_recurring_open: "An", button_edit_series: "Bearbeiten Sie die Serie", button_edit_occurrence: "Bearbeiten Sie eine Kopie", agenda_tab: "Agenda", date: "Datum", description: "Beschreibung", year_tab: "Jahre", week_agenda_tab: "Agenda", grid_tab: "Grid", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "T\xE4glich", repeat_radio_week: "W\xF6chentlich", repeat_radio_month: "Monatlich", repeat_radio_year: "J\xE4hrlich", repeat_radio_day_type: "jeden", repeat_text_day_count: "Tag", repeat_radio_day_type2: "an jedem Arbeitstag", repeat_week: " Wiederholt sich jede", repeat_text_week_count: "Woche am:", repeat_radio_month_type: "an jedem", repeat_radio_month_start: "am", repeat_text_month_day: "Tag eines jeden", repeat_text_month_count: "Monats", repeat_text_month_count2_before: "jeden", repeat_text_month_count2_after: "Monats", repeat_year_label: "am", select_year_day2: "im", repeat_text_year_day: "Tag im", select_year_month: "", repeat_radio_end: "kein Enddatum", repeat_text_occurences_count: "Ereignissen", repeat_radio_end3: "Schlu\xDF", repeat_radio_end2: "nach", repeat_never: "Nie", repeat_daily: "Jeden Tag", repeat_workdays: "Jeden Werktag", repeat_weekly: "Jede Woche", repeat_monthly: "Jeden Monat", repeat_yearly: "Jedes Jahr", repeat_custom: "Benutzerdefiniert", repeat_freq_day: "Tag", repeat_freq_week: "Woche", repeat_freq_month: "Monat", repeat_freq_year: "Jahr", repeat_on_date: "Am Datum", repeat_ends: "Endet", month_for_recurring: ["Januar", "Februar", "M\xE4rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"], day_for_recurring: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"] } };
    aa = { date: { month_full: ["\u0399\u03B1\u03BD\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2", "\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2", "\u039C\u03AC\u03C1\u03C4\u03B9\u03BF\u03C2", "\u0391\u03C0\u03C1\u03AF\u03BB\u03B9\u03BF\u03C2", "\u039C\u03AC\u03CA\u03BF\u03C2", "\u0399\u03BF\u03CD\u03BD\u03B9\u03BF\u03C2", "\u0399\u03BF\u03CD\u03BB\u03B9\u03BF\u03C2", "\u0391\u03CD\u03B3\u03BF\u03C5\u03C3\u03C4\u03BF\u03C2", "\u03A3\u03B5\u03C0\u03C4\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2", "\u039F\u03BA\u03C4\u03CE\u03B2\u03C1\u03B9\u03BF\u03C2", "\u039D\u03BF\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2", "\u0394\u03B5\u03BA\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2"], month_short: ["\u0399\u0391\u039D", "\u03A6\u0395\u0392", "\u039C\u0391\u03A1", "\u0391\u03A0\u03A1", "\u039C\u0391\u0399", "\u0399\u039F\u03A5\u039D", "\u0399\u039F\u03A5\u039B", "\u0391\u03A5\u0393", "\u03A3\u0395\u03A0", "\u039F\u039A\u03A4", "\u039D\u039F\u0395", "\u0394\u0395\u039A"], day_full: ["\u039A\u03C5\u03C1\u03B9\u03B1\u03BA\u03AE", "\u0394\u03B5\u03C5\u03C4\u03AD\u03C1\u03B1", "\u03A4\u03C1\u03AF\u03C4\u03B7", "\u03A4\u03B5\u03C4\u03AC\u03C1\u03C4\u03B7", "\u03A0\u03AD\u03BC\u03C0\u03C4\u03B7", "\u03A0\u03B1\u03C1\u03B1\u03C3\u03BA\u03B5\u03C5\u03AE", "\u03A3\u03AC\u03B2\u03B2\u03B1\u03C4\u03BF"], day_short: ["\u039A\u03A5", "\u0394\u0395", "\u03A4\u03A1", "\u03A4\u0395", "\u03A0\u0395", "\u03A0\u0391", "\u03A3\u0391"] }, labels: { dhx_cal_today_button: "\u03A3\u03AE\u03BC\u03B5\u03C1\u03B1", day_tab: "\u0397\u03BC\u03AD\u03C1\u03B1", week_tab: "\u0395\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B1", month_tab: "\u039C\u03AE\u03BD\u03B1\u03C2", new_event: "\u039D\u03AD\u03BF \u03AD\u03C1\u03B3\u03BF", icon_save: "\u0391\u03C0\u03BF\u03B8\u03AE\u03BA\u03B5\u03C5\u03C3\u03B7", icon_cancel: "\u0386\u03BA\u03C5\u03C1\u03BF", icon_details: "\u039B\u03B5\u03C0\u03C4\u03BF\u03BC\u03AD\u03C1\u03B5\u03B9\u03B5\u03C2", icon_edit: "\u0395\u03C0\u03B5\u03BE\u03B5\u03C1\u03B3\u03B1\u03C3\u03AF\u03B1", icon_delete: "\u0394\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03AE", confirm_closing: "", confirm_deleting: "\u03A4\u03BF \u03AD\u03C1\u03B3\u03BF \u03B8\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03B5\u03AF \u03BF\u03C1\u03B9\u03C3\u03C4\u03B9\u03BA\u03AC. \u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03C3\u03C5\u03BD\u03B5\u03C7\u03AF\u03C3\u03B5\u03C4\u03B5;", section_description: "\u03A0\u03B5\u03C1\u03B9\u03B3\u03C1\u03B1\u03C6\u03AE", section_time: "\u03A7\u03C1\u03BF\u03BD\u03B9\u03BA\u03AE \u03C0\u03B5\u03C1\u03AF\u03BF\u03B4\u03BF\u03C2", full_day: "\u03A0\u03BB\u03AE\u03C1\u03B7\u03C2 \u0397\u03BC\u03AD\u03C1\u03B1", confirm_recurring: "\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03B5\u03C0\u03B5\u03BE\u03B5\u03C1\u03B3\u03B1\u03C3\u03B8\u03B5\u03AF\u03C4\u03B5 \u03BF\u03BB\u03CC\u03BA\u03BB\u03B7\u03C1\u03B7 \u03C4\u03B7\u03BD \u03BF\u03BC\u03AC\u03B4\u03B1 \u03C4\u03C9\u03BD \u03B5\u03C0\u03B1\u03BD\u03B1\u03BB\u03B1\u03BC\u03B2\u03B1\u03BD\u03CC\u03BC\u03B5\u03BD\u03C9\u03BD \u03AD\u03C1\u03B3\u03C9\u03BD;", section_recurring: "\u0395\u03C0\u03B1\u03BD\u03B1\u03BB\u03B1\u03BC\u03B2\u03B1\u03BD\u03CC\u03BC\u03B5\u03BD\u03BF \u03AD\u03C1\u03B3\u03BF", button_recurring: "\u0391\u03BD\u03B5\u03BD\u03B5\u03C1\u03B3\u03CC", button_recurring_open: "\u0395\u03BD\u03B5\u03C1\u03B3\u03CC", button_edit_series: "\u0395\u03C0\u03B5\u03BE\u03B5\u03C1\u03B3\u03B1\u03C3\u03C4\u03B5\u03AF\u03C4\u03B5 \u03C4\u03B7 \u03C3\u03B5\u03B9\u03C1\u03AC", button_edit_occurrence: "\u0395\u03C0\u03B5\u03BE\u03B5\u03C1\u03B3\u03B1\u03C3\u03AF\u03B1 \u03AD\u03BD\u03B1 \u03B1\u03BD\u03C4\u03AF\u03B3\u03C1\u03B1\u03C6\u03BF", agenda_tab: "\u0397\u03BC\u03B5\u03C1\u03AE\u03C3\u03B9\u03B1 \u0394\u03B9\u03AC\u03C4\u03B1\u03BE\u03B7", date: "\u0397\u03BC\u03B5\u03C1\u03BF\u03BC\u03B7\u03BD\u03AF\u03B1", description: "\u03A0\u03B5\u03C1\u03B9\u03B3\u03C1\u03B1\u03C6\u03AE", year_tab: "\u0388\u03C4\u03BF\u03C2", week_agenda_tab: "\u0397\u03BC\u03B5\u03C1\u03AE\u03C3\u03B9\u03B1 \u0394\u03B9\u03AC\u03C4\u03B1\u03BE\u03B7", grid_tab: "\u03A0\u03BB\u03AD\u03B3\u03BC\u03B1", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "\u0397\u03BC\u03B5\u03C1\u03B7\u03C3\u03AF\u03C9\u03C2", repeat_radio_week: "\u0395\u03B2\u03B4\u03BF\u03BC\u03B1\u03B4\u03B9\u03B1\u03AF\u03C9\u03C2", repeat_radio_month: "\u039C\u03B7\u03BD\u03B9\u03B1\u03AF\u03C9\u03C2", repeat_radio_year: "\u0395\u03C4\u03B7\u03C3\u03AF\u03C9\u03C2", repeat_radio_day_type: "\u039A\u03AC\u03B8\u03B5", repeat_text_day_count: "\u03B7\u03BC\u03AD\u03C1\u03B1", repeat_radio_day_type2: "\u039A\u03AC\u03B8\u03B5 \u03B5\u03C1\u03B3\u03AC\u03C3\u03B9\u03BC\u03B7", repeat_week: " \u0395\u03C0\u03B1\u03BD\u03AC\u03BB\u03B7\u03C8\u03B7 \u03BA\u03AC\u03B8\u03B5", repeat_text_week_count: "\u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B1 \u03C4\u03B9\u03C2 \u03B5\u03C0\u03CC\u03BC\u03B5\u03BD\u03B5\u03C2 \u03B7\u03BC\u03AD\u03C1\u03B5\u03C2:", repeat_radio_month_type: "\u0395\u03C0\u03B1\u03BD\u03AC\u03BB\u03B7\u03C8\u03B7", repeat_radio_month_start: "\u03A4\u03B7\u03BD", repeat_text_month_day: "\u03B7\u03BC\u03AD\u03C1\u03B1 \u03BA\u03AC\u03B8\u03B5", repeat_text_month_count: "\u03BC\u03AE\u03BD\u03B1", repeat_text_month_count2_before: "\u03BA\u03AC\u03B8\u03B5", repeat_text_month_count2_after: "\u03BC\u03AE\u03BD\u03B1", repeat_year_label: "\u03A4\u03B7\u03BD", select_year_day2: "\u03C4\u03BF\u03C5", repeat_text_year_day: "\u03B7\u03BC\u03AD\u03C1\u03B1", select_year_month: "\u03BC\u03AE\u03BD\u03B1", repeat_radio_end: "\u03A7\u03C9\u03C1\u03AF\u03C2 \u03B7\u03BC\u03B5\u03C1\u03BF\u03BC\u03B7\u03BD\u03AF\u03B1 \u03BB\u03AE\u03BE\u03B5\u03C9\u03C2", repeat_text_occurences_count: "\u03B5\u03C0\u03B1\u03BD\u03B1\u03BB\u03AE\u03C8\u03B5\u03B9\u03C2", repeat_radio_end3: "\u039B\u03AE\u03B3\u03B5\u03B9 \u03C4\u03B7\u03BD", repeat_radio_end2: "\u039C\u03B5\u03C4\u03AC \u03B1\u03C0\u03CC", repeat_never: "\u03A0\u03BF\u03C4\u03AD", repeat_daily: "\u039A\u03AC\u03B8\u03B5 \u03BC\u03AD\u03C1\u03B1", repeat_workdays: "\u039A\u03AC\u03B8\u03B5 \u03B5\u03C1\u03B3\u03AC\u03C3\u03B9\u03BC\u03B7 \u03BC\u03AD\u03C1\u03B1", repeat_weekly: "\u039A\u03AC\u03B8\u03B5 \u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B1", repeat_monthly: "\u039A\u03AC\u03B8\u03B5 \u03BC\u03AE\u03BD\u03B1", repeat_yearly: "\u039A\u03AC\u03B8\u03B5 \u03C7\u03C1\u03CC\u03BD\u03BF", repeat_custom: "\u03A0\u03C1\u03BF\u03C3\u03B1\u03C1\u03BC\u03BF\u03C3\u03BC\u03AD\u03BD\u03BF", repeat_freq_day: "\u0397\u03BC\u03AD\u03C1\u03B1", repeat_freq_week: "\u0395\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B1", repeat_freq_month: "\u039C\u03AE\u03BD\u03B1\u03C2", repeat_freq_year: "\u03A7\u03C1\u03CC\u03BD\u03BF\u03C2", repeat_on_date: "\u03A3\u03B5 \u03B7\u03BC\u03B5\u03C1\u03BF\u03BC\u03B7\u03BD\u03AF\u03B1", repeat_ends: "\u039B\u03AE\u03B3\u03B5\u03B9", month_for_recurring: ["\u0399\u03B1\u03BD\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2", "\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2", "\u039C\u03AC\u03C1\u03C4\u03B9\u03BF\u03C2", "\u0391\u03C0\u03C1\u03AF\u03BB\u03B9\u03BF\u03C2", "\u039C\u03AC\u03CA\u03BF\u03C2", "\u0399\u03BF\u03CD\u03BD\u03B9\u03BF\u03C2", "\u0399\u03BF\u03CD\u03BB\u03B9\u03BF\u03C2", "\u0391\u03CD\u03B3\u03BF\u03C5\u03C3\u03C4\u03BF\u03C2", "\u03A3\u03B5\u03C0\u03C4\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2", "\u039F\u03BA\u03C4\u03CE\u03B2\u03C1\u03B9\u03BF\u03C2", "\u039D\u03BF\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2", "\u0394\u03B5\u03BA\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2"], day_for_recurring: ["\u039A\u03C5\u03C1\u03B9\u03B1\u03BA\u03AE", "\u0394\u03B5\u03C5\u03C4\u03AD\u03C1\u03B1", "\u03A4\u03C1\u03AF\u03C4\u03B7", "\u03A4\u03B5\u03C4\u03AC\u03C1\u03C4\u03B7", "\u03A0\u03AD\u03BC\u03C0\u03C4\u03B7", "\u03A0\u03B1\u03C1\u03B1\u03C3\u03BA\u03B5\u03C5\u03AE", "\u03A3\u03AC\u03B2\u03B2\u03B1\u03C4\u03BF"] } };
    na = { date: { month_full: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], month_short: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], day_full: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], day_short: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"] }, labels: { dhx_cal_today_button: "Today", day_tab: "Day", week_tab: "Week", month_tab: "Month", new_event: "New event", icon_save: "Save", icon_cancel: "Cancel", icon_details: "Details", icon_edit: "Edit", icon_delete: "Delete", confirm_closing: "", confirm_deleting: "Event will be deleted permanently, are you sure?", section_description: "Description", section_time: "Time period", full_day: "Full day", confirm_recurring: "Do you want to edit the whole set of repeated events?", section_recurring: "Repeat event", button_recurring: "Disabled", button_recurring_open: "Enabled", button_edit_series: "Edit series", button_edit_occurrence: "Edit occurrence", agenda_tab: "Agenda", date: "Date", description: "Description", year_tab: "Year", week_agenda_tab: "Agenda", grid_tab: "Grid", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Daily", repeat_radio_week: "Weekly", repeat_radio_month: "Monthly", repeat_radio_year: "Yearly", repeat_radio_day_type: "Every", repeat_text_day_count: "day", repeat_radio_day_type2: "Every workday", repeat_week: " Repeat every", repeat_text_week_count: "week next days:", repeat_radio_month_type: "Repeat", repeat_radio_month_start: "On", repeat_text_month_day: "day every", repeat_text_month_count: "month", repeat_text_month_count2_before: "every", repeat_text_month_count2_after: "month", repeat_year_label: "On", select_year_day2: "of", repeat_text_year_day: "day", select_year_month: "month", repeat_radio_end: "No end date", repeat_text_occurences_count: "occurrences", repeat_radio_end2: "After", repeat_radio_end3: "End by", repeat_never: "Never", repeat_daily: "Every day", repeat_workdays: "Every weekday", repeat_weekly: "Every week", repeat_monthly: "Every month", repeat_yearly: "Every year", repeat_custom: "Custom", repeat_freq_day: "Day", repeat_freq_week: "Week", repeat_freq_month: "Month", repeat_freq_year: "Year", repeat_on_date: "On date", repeat_ends: "Ends", month_for_recurring: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], day_for_recurring: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] } };
    ra = { date: { month_full: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"], month_short: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"], day_full: ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"], day_short: ["Dom", "Lun", "Mar", "Mi\xE9", "Jue", "Vie", "S\xE1b"] }, labels: { dhx_cal_today_button: "Hoy", day_tab: "D\xEDa", week_tab: "Semana", month_tab: "Mes", new_event: "Nuevo evento", icon_save: "Guardar", icon_cancel: "Cancelar", icon_details: "Detalles", icon_edit: "Editar", icon_delete: "Eliminar", confirm_closing: "", confirm_deleting: "El evento se borrar\xE1 definitivamente, \xBFcontinuar?", section_description: "Descripci\xF3n", section_time: "Per\xEDodo", full_day: "Todo el d\xEDa", confirm_recurring: "\xBFDesea modificar el conjunto de eventos repetidos?", section_recurring: "Repita el evento", button_recurring: "Impedido", button_recurring_open: "Permitido", button_edit_series: "Editar la serie", button_edit_occurrence: "Editar este evento", agenda_tab: "D\xEDa", date: "Fecha", description: "Descripci\xF3n", year_tab: "A\xF1o", week_agenda_tab: "D\xEDa", grid_tab: "Reja", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Diariamente", repeat_radio_week: "Semanalmente", repeat_radio_month: "Mensualmente", repeat_radio_year: "Anualmente", repeat_radio_day_type: "Cada", repeat_text_day_count: "dia", repeat_radio_day_type2: "Cada jornada de trabajo", repeat_week: " Repetir cada", repeat_text_week_count: "semana:", repeat_radio_month_type: "Repita", repeat_radio_month_start: "El", repeat_text_month_day: "dia cada ", repeat_text_month_count: "mes", repeat_text_month_count2_before: "cada", repeat_text_month_count2_after: "mes", repeat_year_label: "El", select_year_day2: "del", repeat_text_year_day: "dia", select_year_month: "mes", repeat_radio_end: "Sin fecha de finalizaci\xF3n", repeat_text_occurences_count: "ocurrencias", repeat_radio_end3: "Fin", repeat_radio_end2: "Despu\xE9s de", repeat_never: "Nunca", repeat_daily: "Cada d\xEDa", repeat_workdays: "Cada d\xEDa laborable", repeat_weekly: "Cada semana", repeat_monthly: "Cada mes", repeat_yearly: "Cada a\xF1o", repeat_custom: "Personalizado", repeat_freq_day: "D\xEDa", repeat_freq_week: "Semana", repeat_freq_month: "Mes", repeat_freq_year: "A\xF1o", repeat_on_date: "En la fecha", repeat_ends: "Termina", month_for_recurring: ["Enero", "Febrero", "\u041C\u0430rzo", "\u0410bril", "Mayo", "Junio", "Julio", "\u0410gosto", "Setiembre", "Octubre", "Noviembre", "Diciembre"], day_for_recurring: ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jeuves", "Viernes", "Sabado"] } };
    ia = { date: { month_full: ["Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kes&auml;kuu", "Hein&auml;kuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu"], month_short: ["Tam", "Hel", "Maa", "Huh", "Tou", "Kes", "Hei", "Elo", "Syy", "Lok", "Mar", "Jou"], day_full: ["Sunnuntai", "Maanantai", "Tiistai", "Keskiviikko", "Torstai", "Perjantai", "Lauantai"], day_short: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"] }, labels: { dhx_cal_today_button: "T\xE4n\xE4\xE4n", day_tab: "P\xE4iv\xE4", week_tab: "Viikko", month_tab: "Kuukausi", new_event: "Uusi tapahtuma", icon_save: "Tallenna", icon_cancel: "Peru", icon_details: "Tiedot", icon_edit: "Muokkaa", icon_delete: "Poista", confirm_closing: "", confirm_deleting: "Haluatko varmasti poistaa tapahtuman?", section_description: "Kuvaus", section_time: "Aikajakso", full_day: "Koko p\xE4iv\xE4", confirm_recurring: "Haluatko varmasti muokata toistuvan tapahtuman kaikkia jaksoja?", section_recurring: "Toista tapahtuma", button_recurring: "Ei k&auml;yt&ouml;ss&auml;", button_recurring_open: "K&auml;yt&ouml;ss&auml;", button_edit_series: "Muokkaa sarja", button_edit_occurrence: "Muokkaa kopio", agenda_tab: "Esityslista", date: "P\xE4iv\xE4m\xE4\xE4r\xE4", description: "Kuvaus", year_tab: "Vuoden", week_agenda_tab: "Esityslista", grid_tab: "Ritil\xE4", drag_to_create: "Luo uusi vet\xE4m\xE4ll\xE4", drag_to_move: "Siirr\xE4 vet\xE4m\xE4ll\xE4", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "P&auml;ivitt&auml;in", repeat_radio_week: "Viikoittain", repeat_radio_month: "Kuukausittain", repeat_radio_year: "Vuosittain", repeat_radio_day_type: "Joka", repeat_text_day_count: "p&auml;iv&auml;", repeat_radio_day_type2: "Joka arkip&auml;iv&auml;", repeat_week: "Toista joka", repeat_text_week_count: "viikko n&auml;in&auml; p&auml;ivin&auml;:", repeat_radio_month_type: "Toista", repeat_radio_month_start: "", repeat_text_month_day: "p&auml;iv&auml;n&auml; joka", repeat_text_month_count: "kuukausi", repeat_text_month_count2_before: "joka", repeat_text_month_count2_after: "kuukausi", repeat_year_label: "", select_year_day2: "", repeat_text_year_day: "p&auml;iv&auml;", select_year_month: "kuukausi", repeat_radio_end: "Ei loppumisaikaa", repeat_text_occurences_count: "Toiston j&auml;lkeen", repeat_radio_end3: "Loppuu", repeat_radio_end2: "", repeat_never: "Ei koskaan", repeat_daily: "Joka p\xE4iv\xE4", repeat_workdays: "Joka arkip\xE4iv\xE4", repeat_weekly: "Joka viikko", repeat_monthly: "Joka kuukausi", repeat_yearly: "Joka vuosi", repeat_custom: "Mukautettu", repeat_freq_day: "P\xE4iv\xE4", repeat_freq_week: "Viikko", repeat_freq_month: "Kuukausi", repeat_freq_year: "Vuosi", repeat_on_date: "Tiettyn\xE4 p\xE4iv\xE4n\xE4", repeat_ends: "P\xE4\xE4ttyy", month_for_recurring: ["Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kes&auml;kuu", "Hein&auml;kuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu"], day_for_recurring: ["Sunnuntai", "Maanantai", "Tiistai", "Keskiviikko", "Torstai", "Perjantai", "Lauantai"] } };
    oa = { date: { month_full: ["Janvier", "F\xE9vrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Ao\xFBt", "Septembre", "Octobre", "Novembre", "D\xE9cembre"], month_short: ["Jan", "F\xE9v", "Mar", "Avr", "Mai", "Juin", "Juil", "Ao\xFB", "Sep", "Oct", "Nov", "D\xE9c"], day_full: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"], day_short: ["Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam"] }, labels: { dhx_cal_today_button: "Aujourd'hui", day_tab: "Jour", week_tab: "Semaine", month_tab: "Mois", new_event: "Nouvel \xE9v\xE9nement", icon_save: "Enregistrer", icon_cancel: "Annuler", icon_details: "D\xE9tails", icon_edit: "Modifier", icon_delete: "Effacer", confirm_closing: "", confirm_deleting: "L'\xE9v\xE9nement sera effac\xE9 sans appel, \xEAtes-vous s\xFBr ?", section_description: "Description", section_time: "P\xE9riode", full_day: "Journ\xE9e compl\xE8te", confirm_recurring: "Voulez-vous \xE9diter toute une s\xE9rie d'\xE9v\xE8nements r\xE9p\xE9t\xE9s?", section_recurring: "P\xE9riodicit\xE9", button_recurring: "D\xE9sactiv\xE9", button_recurring_open: "Activ\xE9", button_edit_series: "Modifier la s\xE9rie", button_edit_occurrence: "Modifier une copie", agenda_tab: "Jour", date: "Date", description: "Description", year_tab: "Ann\xE9e", week_agenda_tab: "Jour", grid_tab: "Grille", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Quotidienne", repeat_radio_week: "Hebdomadaire", repeat_radio_month: "Mensuelle", repeat_radio_year: "Annuelle", repeat_radio_day_type: "Chaque", repeat_text_day_count: "jour", repeat_radio_day_type2: "Chaque journ\xE9e de travail", repeat_week: " R\xE9p\xE9ter toutes les", repeat_text_week_count: "semaine:", repeat_radio_month_type: "R\xE9p\xE9ter", repeat_radio_month_start: "Le", repeat_text_month_day: "jour chaque", repeat_text_month_count: "mois", repeat_text_month_count2_before: "chaque", repeat_text_month_count2_after: "mois", repeat_year_label: "Le", select_year_day2: "du", repeat_text_year_day: "jour", select_year_month: "mois", repeat_radio_end: "Pas de date d&quot;ach\xE8vement", repeat_text_occurences_count: "occurrences", repeat_radio_end3: "Fin", repeat_radio_end2: "Apr\xE8s", repeat_never: "Jamais", repeat_daily: "Chaque jour", repeat_workdays: "Chaque jour ouvrable", repeat_weekly: "Chaque semaine", repeat_monthly: "Chaque mois", repeat_yearly: "Chaque ann\xE9e", repeat_custom: "Personnalis\xE9", repeat_freq_day: "Jour", repeat_freq_week: "Semaine", repeat_freq_month: "Mois", repeat_freq_year: "Ann\xE9e", repeat_on_date: "\xC0 la date", repeat_ends: "Se termine", month_for_recurring: ["Janvier", "F\xE9vrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Ao\xFBt", "Septembre", "Octobre", "Novembre", "D\xE9cembre"], day_for_recurring: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"] } };
    sa = { date: { month_full: ["\u05D9\u05E0\u05D5\u05D0\u05E8", "\u05E4\u05D1\u05E8\u05D5\u05D0\u05E8", "\u05DE\u05E8\u05E5", "\u05D0\u05E4\u05E8\u05D9\u05DC", "\u05DE\u05D0\u05D9", "\u05D9\u05D5\u05E0\u05D9", "\u05D9\u05D5\u05DC\u05D9", "\u05D0\u05D5\u05D2\u05D5\u05E1\u05D8", "\u05E1\u05E4\u05D8\u05DE\u05D1\u05E8", "\u05D0\u05D5\u05E7\u05D8\u05D5\u05D1\u05E8", "\u05E0\u05D5\u05D1\u05DE\u05D1\u05E8", "\u05D3\u05E6\u05DE\u05D1\u05E8"], month_short: ["\u05D9\u05E0\u05D5", "\u05E4\u05D1\u05E8", "\u05DE\u05E8\u05E5", "\u05D0\u05E4\u05E8", "\u05DE\u05D0\u05D9", "\u05D9\u05D5\u05E0", "\u05D9\u05D5\u05DC", "\u05D0\u05D5\u05D2", "\u05E1\u05E4\u05D8", "\u05D0\u05D5\u05E7", "\u05E0\u05D5\u05D1", "\u05D3\u05E6\u05DE"], day_full: ["\u05E8\u05D0\u05E9\u05D5\u05DF", "\u05E9\u05E0\u05D9", "\u05E9\u05DC\u05D9\u05E9\u05D9", "\u05E8\u05D1\u05D9\u05E2\u05D9", "\u05D7\u05DE\u05D9\u05E9\u05D9", "\u05E9\u05D9\u05E9\u05D9", "\u05E9\u05D1\u05EA"], day_short: ["\u05D0", "\u05D1", "\u05D2", "\u05D3", "\u05D4", "\u05D5", "\u05E9"] }, labels: { dhx_cal_today_button: "\u05D4\u05D9\u05D5\u05DD", day_tab: "\u05D9\u05D5\u05DD", week_tab: "\u05E9\u05D1\u05D5\u05E2", month_tab: "\u05D7\u05D5\u05D3\u05E9", new_event: "\u05D0\u05E8\u05D5\u05E2 \u05D7\u05D3\u05E9", icon_save: "\u05E9\u05DE\u05D5\u05E8", icon_cancel: "\u05D1\u05D8\u05DC", icon_details: "\u05E4\u05E8\u05D8\u05D9\u05DD", icon_edit: "\u05E2\u05E8\u05D5\u05DA", icon_delete: "\u05DE\u05D7\u05E7", confirm_closing: "", confirm_deleting: "\u05D0\u05E8\u05D5\u05E2 \u05D9\u05DE\u05D7\u05E7 \u05E1\u05D5\u05E4\u05D9\u05EA.\u05DC\u05D4\u05DE\u05E9\u05D9\u05DA?", section_description: "\u05EA\u05D9\u05D0\u05D5\u05E8", section_time: "\u05EA\u05E7\u05D5\u05E4\u05D4", confirm_recurring: "\u05D4\u05D0\u05DD \u05D1\u05E8\u05E6\u05D5\u05E0\u05DA \u05DC\u05E9\u05E0\u05D5\u05EA \u05DB\u05DC \u05E1\u05D3\u05E8\u05EA \u05D0\u05E8\u05D5\u05E2\u05D9\u05DD \u05DE\u05EA\u05DE\u05E9\u05DB\u05D9\u05DD?", section_recurring: "\u05DC\u05D4\u05E2\u05EA\u05D9\u05E7 \u05D0\u05E8\u05D5\u05E2", button_recurring: "\u05DC\u05D0 \u05E4\u05E2\u05D9\u05DC", button_recurring_open: "\u05E4\u05E2\u05D9\u05DC", full_day: "\u05D9\u05D5\u05DD \u05E9\u05DC\u05DD", button_edit_series: "\u05E2\u05E8\u05D5\u05DA \u05D0\u05EA \u05D4\u05E1\u05D3\u05E8\u05D4", button_edit_occurrence: "\u05E2\u05E8\u05D9\u05DB\u05EA \u05E2\u05D5\u05EA\u05E7", agenda_tab: "\u05E1\u05D3\u05E8 \u05D9\u05D5\u05DD", date: "\u05EA\u05D0\u05E8\u05D9\u05DA", description: "\u05EA\u05D9\u05D0\u05D5\u05E8", year_tab: "\u05DC\u05E9\u05E0\u05D4", week_agenda_tab: "\u05E1\u05D3\u05E8 \u05D9\u05D5\u05DD", grid_tab: "\u05E1\u05D5\u05E8\u05D2", drag_to_create: "Drag to create", drag_to_move: "\u05D2\u05E8\u05D5\u05E8 \u05DB\u05D3\u05D9 \u05DC\u05D4\u05D6\u05D9\u05D6", message_ok: "OK", message_cancel: "\u05D1\u05D8\u05DC", next: "\u05D4\u05D1\u05D0", prev: "\u05D4\u05E7\u05D5\u05D3\u05DD", year: "\u05E9\u05E0\u05D4", month: "\u05D7\u05D5\u05D3\u05E9", day: "\u05D9\u05D5\u05DD", hour: "\u05E9\u05E2\u05D4", minute: "\u05D3\u05E7\u05D4", repeat_radio_day: "\u05D9\u05D5\u05DE\u05D9", repeat_radio_week: "\u05E9\u05D1\u05D5\u05E2\u05D9", repeat_radio_month: "\u05D7\u05D5\u05D3\u05E9\u05D9", repeat_radio_year: "\u05E9\u05E0\u05EA\u05D9", repeat_radio_day_type: "\u05D7\u05D6\u05D5\u05E8 \u05DB\u05DC", repeat_text_day_count: "\u05D9\u05DE\u05D9\u05DD", repeat_radio_day_type2: "\u05D7\u05D6\u05D5\u05E8 \u05DB\u05DC \u05D9\u05D5\u05DD \u05E2\u05D1\u05D5\u05D3\u05D4", repeat_week: " \u05D7\u05D6\u05D5\u05E8 \u05DB\u05DC", repeat_text_week_count: "\u05E9\u05D1\u05D5\u05E2 \u05DC\u05E4\u05D9 \u05D9\u05DE\u05D9\u05DD:", repeat_radio_month_type: "\u05D7\u05D6\u05D5\u05E8 \u05DB\u05DC", repeat_radio_month_start: "\u05DB\u05DC", repeat_text_month_day: "\u05D9\u05DE\u05D9\u05DD \u05DB\u05DC", repeat_text_month_count: "\u05D7\u05D5\u05D3\u05E9\u05D9\u05DD", repeat_text_month_count2_before: "\u05D7\u05D6\u05D5\u05E8 \u05DB\u05DC", repeat_text_month_count2_after: "\u05D7\u05D5\u05D3\u05E9", repeat_year_label: "\u05DB\u05DC", select_year_day2: "\u05D1\u05D7\u05D5\u05D3\u05E9", repeat_text_year_day: "\u05D9\u05DE\u05D9\u05DD", select_year_month: "\u05D7\u05D5\u05D3\u05E9", repeat_radio_end: "\u05DC\u05E2\u05D5\u05DC\u05DD \u05DC\u05D0 \u05DE\u05E1\u05EA\u05D9\u05D9\u05DD", repeat_text_occurences_count: "\u05D0\u05D9\u05E8\u05D5\u05E2\u05D9\u05DD", repeat_radio_end3: "\u05DE\u05E1\u05EA\u05D9\u05D9\u05DD \u05D1", repeat_radio_end2: "\u05D0\u05D7\u05E8\u05D9", repeat_never: "\u05D0\u05E3 \u05E4\u05E2\u05DD", repeat_daily: "\u05DB\u05DC \u05D9\u05D5\u05DD", repeat_workdays: "\u05DB\u05DC \u05D9\u05D5\u05DD \u05E2\u05D1\u05D5\u05D3\u05D4", repeat_weekly: "\u05DB\u05DC \u05E9\u05D1\u05D5\u05E2", repeat_monthly: "\u05DB\u05DC \u05D7\u05D5\u05D3\u05E9", repeat_yearly: "\u05DB\u05DC \u05E9\u05E0\u05D4", repeat_custom: "\u05DE\u05D5\u05EA\u05D0\u05DD \u05D0\u05D9\u05E9\u05D9\u05EA", repeat_freq_day: "\u05D9\u05D5\u05DD", repeat_freq_week: "\u05E9\u05D1\u05D5\u05E2", repeat_freq_month: "\u05D7\u05D5\u05D3\u05E9", repeat_freq_year: "\u05E9\u05E0\u05D4", repeat_on_date: "\u05D1\u05EA\u05D0\u05E8\u05D9\u05DA", repeat_ends: "\u05DE\u05E1\u05EA\u05D9\u05D9\u05DD", month_for_recurring: ["\u05D9\u05E0\u05D5\u05D0\u05E8", "\u05E4\u05D1\u05E8\u05D5\u05D0\u05E8", "\u05DE\u05E8\u05E5", "\u05D0\u05E4\u05E8\u05D9\u05DC", "\u05DE\u05D0\u05D9", "\u05D9\u05D5\u05E0\u05D9", "\u05D9\u05D5\u05DC\u05D9", "\u05D0\u05D5\u05D2\u05D5\u05E1\u05D8", "\u05E1\u05E4\u05D8\u05DE\u05D1\u05E8", "\u05D0\u05D5\u05E7\u05D8\u05D5\u05D1\u05E8", "\u05E0\u05D5\u05D1\u05DE\u05D1\u05E8", "\u05D3\u05E6\u05DE\u05D1\u05E8"], day_for_recurring: ["\u05E8\u05D0\u05E9\u05D5\u05DF", "\u05E9\u05E0\u05D9", "\u05E9\u05DC\u05D9\u05E9\u05D9", "\u05E8\u05D1\u05D9\u05E2\u05D9", "\u05D7\u05DE\u05D9\u05E9\u05D9", "\u05E9\u05D9\u05E9\u05D9", "\u05E9\u05D1\u05EA"] } };
    da = { date: { month_full: ["Janu\xE1r", "Febru\xE1r", "M\xE1rcius", "\xC1prilis", "M\xE1jus", "J\xFAnius", "J\xFAlius", "Augusztus", "Szeptember", "Okt\xF3ber", "November", "December"], month_short: ["Jan", "Feb", "M\xE1r", "\xC1pr", "M\xE1j", "J\xFAn", "J\xFAl", "Aug", "Sep", "Okt", "Nov", "Dec"], day_full: ["Vas\xE1rnap", "H\xE9tf\xF5", "Kedd", "Szerda", "Cs\xFCt\xF6rt\xF6k", "P\xE9ntek", "szombat"], day_short: ["Va", "H\xE9", "Ke", "Sze", "Cs\xFC", "P\xE9", "Szo"] }, labels: { dhx_cal_today_button: "Ma", day_tab: "Nap", week_tab: "H\xE9t", month_tab: "H\xF3nap", new_event: "\xDAj esem\xE9ny", icon_save: "Ment\xE9s", icon_cancel: "M\xE9gse", icon_details: "R\xE9szletek", icon_edit: "Szerkeszt\xE9s", icon_delete: "T\xF6rl\xE9s", confirm_closing: "", confirm_deleting: "Az esem\xE9ny t\xF6r\xF6lve lesz, biztosan folytatja?", section_description: "Le\xEDr\xE1s", section_time: "Id\xF5szak", full_day: "Egesz napos", confirm_recurring: "Biztosan szerkeszteni akarod az \xF6sszes ism\xE9tl\xF5d\xF5 esem\xE9ny be\xE1ll\xEDt\xE1s\xE1t?", section_recurring: "Esem\xE9ny ism\xE9tl\xE9se", button_recurring: "Tilt\xE1s", button_recurring_open: "Enged\xE9lyez\xE9s", button_edit_series: "Edit series", button_edit_occurrence: "Szerkeszt\xE9s b\xEDr\xF3s\xE1g", agenda_tab: "Napirend", date: "D\xE1tum", description: "Le\xEDr\xE1s", year_tab: "\xC9v", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Napi", repeat_radio_week: "Heti", repeat_radio_month: "Havi", repeat_radio_year: "\xC9ves", repeat_radio_day_type: "Minden", repeat_text_day_count: "nap", repeat_radio_day_type2: "Minden munkanap", repeat_week: " Ism\xE9telje meg minden", repeat_text_week_count: "h\xE9ten a k\xF6vetkez\u0151 napokon:", repeat_radio_month_type: "Ism\xE9tl\xE9s", repeat_radio_month_start: "Ekkor", repeat_text_month_day: "nap minden", repeat_text_month_count: "h\xF3napban", repeat_text_month_count2_before: "minden", repeat_text_month_count2_after: "h\xF3napban", repeat_year_label: "Ekkor", select_year_day2: "-\xE1n/-\xE9n", repeat_text_year_day: "nap", select_year_month: "h\xF3nap", repeat_radio_end: "Nincs befejez\xE9si d\xE1tum", repeat_text_occurences_count: "esem\xE9ny", repeat_radio_end2: "Ut\xE1n", repeat_radio_end3: "Befejez\u0151 d\xE1tum", repeat_never: "Soha", repeat_daily: "Minden nap", repeat_workdays: "Minden munkanap", repeat_weekly: "Minden h\xE9ten", repeat_monthly: "Minden h\xF3napban", repeat_yearly: "Minden \xE9vben", repeat_custom: "Egyedi", repeat_freq_day: "Nap", repeat_freq_week: "H\xE9t", repeat_freq_month: "H\xF3nap", repeat_freq_year: "\xC9v", repeat_on_date: "D\xE1tum szerint", repeat_ends: "Befejez\u0151dik", month_for_recurring: ["Janu\xE1r", "Febru\xE1r", "M\xE1rcius", "\xC1prilis", "M\xE1jus", "J\xFAnius", "J\xFAlius", "Augusztus", "Szeptember", "Okt\xF3ber", "November", "December"], day_for_recurring: ["Vas\xE1rnap", "H\xE9tf\u0151", "Kedd", "Szerda", "Cs\xFCt\xF6rt\xF6k", "P\xE9ntek", "Szombat"] } };
    _a = { date: { month_full: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"], month_short: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Ags", "Sep", "Okt", "Nov", "Des"], day_full: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"], day_short: ["Ming", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"] }, labels: { dhx_cal_today_button: "Hari Ini", day_tab: "Hari", week_tab: "Minggu", month_tab: "Bulan", new_event: "Acara Baru", icon_save: "Simpan", icon_cancel: "Batal", icon_details: "Detail", icon_edit: "Edit", icon_delete: "Hapus", confirm_closing: "", confirm_deleting: "Acara akan dihapus", section_description: "Keterangan", section_time: "Periode", full_day: "Hari penuh", confirm_recurring: "Apakah acara ini akan berulang?", section_recurring: "Acara Rutin", button_recurring: "Tidak Difungsikan", button_recurring_open: "Difungsikan", button_edit_series: "Mengedit seri", button_edit_occurrence: "Mengedit salinan", agenda_tab: "Agenda", date: "Tanggal", description: "Keterangan", year_tab: "Tahun", week_agenda_tab: "Agenda", grid_tab: "Tabel", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Harian", repeat_radio_week: "Mingguan", repeat_radio_month: "Bulanan", repeat_radio_year: "Tahunan", repeat_radio_day_type: "Setiap", repeat_text_day_count: "hari", repeat_radio_day_type2: "Setiap hari kerja", repeat_week: " Ulangi setiap", repeat_text_week_count: "minggu pada hari berikut:", repeat_radio_month_type: "Ulangi", repeat_radio_month_start: "Pada", repeat_text_month_day: "hari setiap", repeat_text_month_count: "bulan", repeat_text_month_count2_before: "setiap", repeat_text_month_count2_after: "bulan", repeat_year_label: "Pada", select_year_day2: "dari", repeat_text_year_day: "hari", select_year_month: "bulan", repeat_radio_end: "Tanpa tanggal akhir", repeat_text_occurences_count: "kejadian", repeat_radio_end2: "Setelah", repeat_radio_end3: "Berakhir pada", repeat_never: "Tidak pernah", repeat_daily: "Setiap hari", repeat_workdays: "Setiap hari kerja", repeat_weekly: "Setiap minggu", repeat_monthly: "Setiap bulan", repeat_yearly: "Setiap tahun", repeat_custom: "Kustom", repeat_freq_day: "Hari", repeat_freq_week: "Minggu", repeat_freq_month: "Bulan", repeat_freq_year: "Tahun", repeat_on_date: "Pada tanggal", repeat_ends: "Berakhir", month_for_recurring: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"], day_for_recurring: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"] } };
    la = { date: { month_full: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"], month_short: ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"], day_full: ["Domenica", "Luned\xEC", "Marted\xEC", "Mercoled\xEC", "Gioved\xEC", "Venerd\xEC", "Sabato"], day_short: ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"] }, labels: { dhx_cal_today_button: "Oggi", day_tab: "Giorno", week_tab: "Settimana", month_tab: "Mese", new_event: "Nuovo evento", icon_save: "Salva", icon_cancel: "Chiudi", icon_details: "Dettagli", icon_edit: "Modifica", icon_delete: "Elimina", confirm_closing: "", confirm_deleting: "L'evento sar\xE0 eliminato, siete sicuri?", section_description: "Descrizione", section_time: "Periodo di tempo", full_day: "Intera giornata", confirm_recurring: "Vuoi modificare l'intera serie di eventi?", section_recurring: "Ripetere l'evento", button_recurring: "Disattivato", button_recurring_open: "Attivato", button_edit_series: "Modificare la serie", button_edit_occurrence: "Modificare una copia", agenda_tab: "Agenda", date: "Data", description: "Descrizione", year_tab: "Anno", week_agenda_tab: "Agenda", grid_tab: "Griglia", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Quotidiano", repeat_radio_week: "Settimanale", repeat_radio_month: "Mensile", repeat_radio_year: "Annuale", repeat_radio_day_type: "Ogni", repeat_text_day_count: "giorno", repeat_radio_day_type2: "Ogni giornata lavorativa", repeat_week: " Ripetere ogni", repeat_text_week_count: "settimana:", repeat_radio_month_type: "Ripetere", repeat_radio_month_start: "Il", repeat_text_month_day: "giorno ogni", repeat_text_month_count: "mese", repeat_text_month_count2_before: "ogni", repeat_text_month_count2_after: "mese", repeat_year_label: "Il", select_year_day2: "del", repeat_text_year_day: "giorno", select_year_month: "mese", repeat_radio_end: "Senza data finale", repeat_text_occurences_count: "occorenze", repeat_radio_end3: "Fine", repeat_radio_end2: "Dopo", repeat_never: "Mai", repeat_daily: "Ogni giorno", repeat_workdays: "Ogni giorno feriale", repeat_weekly: "Ogni settimana", repeat_monthly: "Ogni mese", repeat_yearly: "Ogni anno", repeat_custom: "Personalizzato", repeat_freq_day: "Giorno", repeat_freq_week: "Settimana", repeat_freq_month: "Mese", repeat_freq_year: "Anno", repeat_on_date: "Alla data", repeat_ends: "Finisce", month_for_recurring: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Jiugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"], day_for_recurring: ["Domenica", "Luned\xEC", "Marted\xEC", "Mercoled\xEC", "Joved\xEC", "Venerd\xEC", "Sabato"] } };
    ca = { date: { month_full: ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"], month_short: ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"], day_full: ["\u65E5\u66DC\u65E5", "\u6708\u66DC\u65E5", "\u706B\u66DC\u65E5", "\u6C34\u66DC\u65E5", "\u6728\u66DC\u65E5", "\u91D1\u66DC\u65E5", "\u571F\u66DC\u65E5"], day_short: ["\u65E5", "\u6708", "\u706B", "\u6C34", "\u6728", "\u91D1", "\u571F"] }, labels: { dhx_cal_today_button: "\u4ECA\u65E5", day_tab: "\u65E5", week_tab: "\u9031", month_tab: "\u6708", new_event: "\u65B0\u30A4\u30D9\u30F3\u30C8", icon_save: "\u4FDD\u5B58", icon_cancel: "\u30AD\u30E3\u30F3\u30BB\u30EB", icon_details: "\u8A73\u7D30", icon_edit: "\u7DE8\u96C6", icon_delete: "\u524A\u9664", confirm_closing: "", confirm_deleting: "\u30A4\u30D9\u30F3\u30C8\u5B8C\u5168\u306B\u524A\u9664\u3055\u308C\u307E\u3059\u3001\u5B9C\u3057\u3044\u3067\u3059\u304B\uFF1F", section_description: "\u30C7\u30B9\u30AF\u30EA\u30D7\u30B7\u30E7\u30F3", section_time: "\u671F\u9593", confirm_recurring: "\u7E70\u308A\u8FD4\u3055\u308C\u3066\u3044\u308B\u30A4\u30D9\u30F3\u30C8\u3092\u5168\u3066\u7DE8\u96C6\u3057\u307E\u3059\u304B\uFF1F", section_recurring: "\u30A4\u30D9\u30F3\u30C8\u3092\u7E70\u308A\u8FD4\u3059", button_recurring: "\u7121\u52B9", button_recurring_open: "\u6709\u52B9", full_day: "\u7D42\u65E5", button_edit_series: "\u30B7\u30EA\u30FC\u30BA\u3092\u7DE8\u96C6\u3057\u307E\u3059", button_edit_occurrence: "\u30B3\u30D4\u30FC\u3092\u7DE8\u96C6", agenda_tab: "\u8B70\u984C\u306F", date: "\u65E5\u4ED8", description: "\u8AAC\u660E", year_tab: "\u4ECA\u5E74", week_agenda_tab: "\u8B70\u984C\u306F", grid_tab: "\u30B0\u30EA\u30C3\u30C9", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "\u6BCE\u65E5", repeat_radio_week: "\u6BCE\u9031", repeat_radio_month: "\u6BCE\u6708", repeat_radio_year: "\u6BCE\u5E74", repeat_radio_day_type: "\u6BCE", repeat_text_day_count: "\u65E5", repeat_radio_day_type2: "\u6BCE\u55B6\u696D\u65E5", repeat_week: " \u7E70\u308A\u8FD4\u3057\u6BCE", repeat_text_week_count: "\u9031 \u6B21\u306E\u65E5:", repeat_radio_month_type: "\u7E70\u308A\u8FD4\u3057", repeat_radio_month_start: "\u30AA\u30F3", repeat_text_month_day: "\u65E5\u6BCE", repeat_text_month_count: "\u6708", repeat_text_month_count2_before: "\u6BCE", repeat_text_month_count2_after: "\u6708", repeat_year_label: "\u30AA\u30F3", select_year_day2: "\u306E", repeat_text_year_day: "\u65E5", select_year_month: "\u6708", repeat_radio_end: "\u7D42\u4E86\u65E5\u306A\u3057", repeat_text_occurences_count: "\u56DE\u6570", repeat_radio_end2: "\u5F8C", repeat_radio_end3: "\u7D42\u4E86\u65E5\u307E\u3067", repeat_never: "\u6C7A\u3057\u3066", repeat_daily: "\u6BCE\u65E5", repeat_workdays: "\u6BCE\u55B6\u696D\u65E5", repeat_weekly: "\u6BCE\u9031", repeat_monthly: "\u6BCE\u6708", repeat_yearly: "\u6BCE\u5E74", repeat_custom: "\u30AB\u30B9\u30BF\u30E0", repeat_freq_day: "\u65E5", repeat_freq_week: "\u9031", repeat_freq_month: "\u6708", repeat_freq_year: "\u5E74", repeat_on_date: "\u65E5\u306B\u3061", repeat_ends: "\u7D42\u4E86", month_for_recurring: ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"], day_for_recurring: ["\u65E5\u66DC\u65E5", "\u6708\u66DC\u65E5", "\u706B\u66DC\u65E5", "\u6C34\u66DC\u65E5", "\u6728\u66DC\u65E5", "\u91D1\u66DC\u65E5", "\u571F\u66DC\u65E5"] } };
    ha = class {
      constructor(i) {
        this._locales = {};
        for (const t2 in i)
          this._locales[t2] = i[t2];
      }
      addLocale(i, t2) {
        this._locales[i] = t2;
      }
      getLocale(i) {
        return this._locales[i];
      }
    };
    ua = { date: { month_full: ["Januar", "Februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"], month_short: ["Jan", "Feb", "Mar", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"], day_full: ["S\xF8ndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "L\xF8rdag"], day_short: ["S\xF8n", "Mon", "Tir", "Ons", "Tor", "Fre", "L\xF8r"] }, labels: { dhx_cal_today_button: "I dag", day_tab: "Dag", week_tab: "Uke", month_tab: "M\xE5ned", new_event: "Ny hendelse", icon_save: "Lagre", icon_cancel: "Avbryt", icon_details: "Detaljer", icon_edit: "Rediger", icon_delete: "Slett", confirm_closing: "", confirm_deleting: "Hendelsen vil bli slettet permanent. Er du sikker?", section_description: "Beskrivelse", section_time: "Tidsperiode", confirm_recurring: "Vil du forandre hele dette settet av repeterende hendelser?", section_recurring: "Repeter hendelsen", button_recurring: "Av", button_recurring_open: "P\xE5", button_edit_series: "Rediger serien", button_edit_occurrence: "Redigere en kopi", agenda_tab: "Agenda", date: "Dato", description: "Beskrivelse", year_tab: "\xC5r", week_agenda_tab: "Agenda", grid_tab: "Grid", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Daglig", repeat_radio_week: "Ukentlig", repeat_radio_month: "M\xE5nedlig", repeat_radio_year: "\xC5rlig", repeat_radio_day_type: "Hver", repeat_text_day_count: "dag", repeat_radio_day_type2: "Alle hverdager", repeat_week: " Gjentas hver", repeat_text_week_count: "uke p\xE5:", repeat_radio_month_type: "P\xE5 hver", repeat_radio_month_start: "P\xE5", repeat_text_month_day: "dag hver", repeat_text_month_count: "m\xE5ned", repeat_text_month_count2_before: "hver", repeat_text_month_count2_after: "m\xE5ned", repeat_year_label: "p\xE5", select_year_day2: "i", repeat_text_year_day: "dag i", select_year_month: "", repeat_radio_end: "Ingen sluttdato", repeat_text_occurences_count: "forekomst", repeat_radio_end3: "Stop den", repeat_radio_end2: "Etter", repeat_never: "Aldri", repeat_daily: "Hver dag", repeat_workdays: "Hver ukedag", repeat_weekly: "Hver uke", repeat_monthly: "Hver m\xE5ned", repeat_yearly: "Hvert \xE5r", repeat_custom: "Tilpasset", repeat_freq_day: "Dag", repeat_freq_week: "Uke", repeat_freq_month: "M\xE5ned", repeat_freq_year: "\xC5r", repeat_on_date: "P\xE5 dato", repeat_ends: "Slutter", month_for_recurring: ["Januar", "Februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"], day_for_recurring: ["Sondag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "L\xF8rdag"] } };
    fa = { date: { month_full: ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"], month_short: ["Jan", "Feb", "mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"], day_full: ["Zondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag"], day_short: ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"] }, labels: { dhx_cal_today_button: "Vandaag", day_tab: "Dag", week_tab: "Week", month_tab: "Maand", new_event: "Nieuw item", icon_save: "Opslaan", icon_cancel: "Annuleren", icon_details: "Details", icon_edit: "Bewerken", icon_delete: "Verwijderen", confirm_closing: "", confirm_deleting: "Item zal permanent worden verwijderd, doorgaan?", section_description: "Beschrijving", section_time: "Tijd periode", full_day: "Hele dag", confirm_recurring: "Wilt u alle terugkerende items bijwerken?", section_recurring: "Item herhalen", button_recurring: "Uit", button_recurring_open: "Aan", button_edit_series: "Bewerk de serie", button_edit_occurrence: "Bewerk een kopie", agenda_tab: "Agenda", date: "Datum", description: "Omschrijving", year_tab: "Jaar", week_agenda_tab: "Agenda", grid_tab: "Tabel", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Dagelijks", repeat_radio_week: "Wekelijks", repeat_radio_month: "Maandelijks", repeat_radio_year: "Jaarlijks", repeat_radio_day_type: "Elke", repeat_text_day_count: "dag(en)", repeat_radio_day_type2: "Elke werkdag", repeat_week: " Herhaal elke", repeat_text_week_count: "week op de volgende dagen:", repeat_radio_month_type: "Herhaal", repeat_radio_month_start: "Op", repeat_text_month_day: "dag iedere", repeat_text_month_count: "maanden", repeat_text_month_count2_before: "iedere", repeat_text_month_count2_after: "maanden", repeat_year_label: "Op", select_year_day2: "van", repeat_text_year_day: "dag", select_year_month: "maand", repeat_radio_end: "Geen eind datum", repeat_text_occurences_count: "keren", repeat_radio_end3: "Eindigd per", repeat_radio_end2: "Na", repeat_never: "Nooit", repeat_daily: "Elke dag", repeat_workdays: "Elke werkdag", repeat_weekly: "Elke week", repeat_monthly: "Elke maand", repeat_yearly: "Elk jaar", repeat_custom: "Aangepast", repeat_freq_day: "Dag", repeat_freq_week: "Week", repeat_freq_month: "Maand", repeat_freq_year: "Jaar", repeat_on_date: "Op datum", repeat_ends: "Eindigt", month_for_recurring: ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"], day_for_recurring: ["Zondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag"] } };
    pa = { date: { month_full: ["Januar", "Februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"], month_short: ["Jan", "Feb", "Mar", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"], day_full: ["S\xF8ndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "L\xF8rdag"], day_short: ["S\xF8n", "Man", "Tir", "Ons", "Tor", "Fre", "L\xF8r"] }, labels: { dhx_cal_today_button: "Idag", day_tab: "Dag", week_tab: "Uke", month_tab: "M\xE5ned", new_event: "Ny", icon_save: "Lagre", icon_cancel: "Avbryt", icon_details: "Detaljer", icon_edit: "Endre", icon_delete: "Slett", confirm_closing: "Endringer blir ikke lagret, er du sikker?", confirm_deleting: "Oppf\xF8ringen vil bli slettet, er du sikker?", section_description: "Beskrivelse", section_time: "Tidsperiode", full_day: "Full dag", confirm_recurring: "Vil du endre hele settet med repeterende oppf\xF8ringer?", section_recurring: "Repeterende oppf\xF8ring", button_recurring: "Ikke aktiv", button_recurring_open: "Aktiv", button_edit_series: "Rediger serien", button_edit_occurrence: "Redigere en kopi", agenda_tab: "Agenda", date: "Dato", description: "Beskrivelse", year_tab: "\xC5r", week_agenda_tab: "Agenda", grid_tab: "Grid", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Daglig", repeat_radio_week: "Ukentlig", repeat_radio_month: "M\xE5nedlig", repeat_radio_year: "\xC5rlig", repeat_radio_day_type: "Hver", repeat_text_day_count: "dag", repeat_radio_day_type2: "Hver arbeidsdag", repeat_week: " Gjenta hver", repeat_text_week_count: "uke neste dager:", repeat_radio_month_type: "Gjenta", repeat_radio_month_start: "P\xE5", repeat_text_month_day: "dag hver", repeat_text_month_count: "m\xE5ned", repeat_text_month_count2_before: "hver", repeat_text_month_count2_after: "m\xE5ned", repeat_year_label: "P\xE5", select_year_day2: "av", repeat_text_year_day: "dag", select_year_month: "m\xE5ned", repeat_radio_end: "Ingen sluttdato", repeat_text_occurences_count: "forekomster", repeat_radio_end2: "Etter", repeat_radio_end3: "Slutt innen", repeat_never: "Aldri", repeat_daily: "Hver dag", repeat_workdays: "Hver ukedag", repeat_weekly: "Hver uke", repeat_monthly: "Hver m\xE5ned", repeat_yearly: "Hvert \xE5r", repeat_custom: "Tilpasset", repeat_freq_day: "Dag", repeat_freq_week: "Uke", repeat_freq_month: "M\xE5ned", repeat_freq_year: "\xC5r", repeat_on_date: "P\xE5 dato", repeat_ends: "Slutter", month_for_recurring: ["Januar", "Februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"], day_for_recurring: ["S\xF8ndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "L\xF8rdag"] } };
    ma = { date: { month_full: ["Stycze\u0144", "Luty", "Marzec", "Kwiecie\u0144", "Maj", "Czerwiec", "Lipiec", "Sierpie\u0144", "Wrzesie\u0144", "Pa\u017Adziernik", "Listopad", "Grudzie\u0144"], month_short: ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Pa\u017A", "Lis", "Gru"], day_full: ["Niedziela", "Poniedzia\u0142ek", "Wtorek", "\u015Aroda", "Czwartek", "Pi\u0105tek", "Sobota"], day_short: ["Nie", "Pon", "Wto", "\u015Aro", "Czw", "Pi\u0105", "Sob"] }, labels: { dhx_cal_today_button: "Dzi\u015B", day_tab: "Dzie\u0144", week_tab: "Tydzie\u0144", month_tab: "Miesi\u0105c", new_event: "Nowe zdarzenie", icon_save: "Zapisz", icon_cancel: "Anuluj", icon_details: "Szczeg\xF3\u0142y", icon_edit: "Edytuj", icon_delete: "Usu\u0144", confirm_closing: "", confirm_deleting: "Zdarzenie zostanie usuni\u0119te na zawsze, kontynuowa\u0107?", section_description: "Opis", section_time: "Okres czasu", full_day: "Ca\u0142y dzie\u0144", confirm_recurring: "Czy chcesz edytowa\u0107 ca\u0142y zbi\xF3r powtarzaj\u0105cych si\u0119 zdarze\u0144?", section_recurring: "Powt\xF3rz zdarzenie", button_recurring: "Nieaktywne", button_recurring_open: "Aktywne", button_edit_series: "Edytuj seri\u0119", button_edit_occurrence: "Edytuj kopi\u0119", agenda_tab: "Agenda", date: "Data", description: "Opis", year_tab: "Rok", week_agenda_tab: "Agenda", grid_tab: "Tabela", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Codziennie", repeat_radio_week: "Co tydzie", repeat_radio_month: "Co miesic", repeat_radio_year: "Co rok", repeat_radio_day_type: "Kadego", repeat_text_day_count: "dnia", repeat_radio_day_type2: "Kadego dnia roboczego", repeat_week: " Powtarzaj kadego", repeat_text_week_count: "tygodnia w dni:", repeat_radio_month_type: "Powtrz", repeat_radio_month_start: "W", repeat_text_month_day: "dnia kadego", repeat_text_month_count: "miesica", repeat_text_month_count2_before: "kadego", repeat_text_month_count2_after: "miesica", repeat_year_label: "W", select_year_day2: "miesica", repeat_text_year_day: "dnia miesica", select_year_month: "", repeat_radio_end: "Bez daty kocowej", repeat_text_occurences_count: "wystpieniu/ach", repeat_radio_end3: "Zakocz w", repeat_radio_end2: "Po", repeat_never: "Nigdy", repeat_daily: "Codziennie", repeat_workdays: "Ka\u017Cdy dzie\u0144 roboczy", repeat_weekly: "Co tydzie\u0144", repeat_monthly: "Co miesi\u0105c", repeat_yearly: "Co rok", repeat_custom: "Niestandardowy", repeat_freq_day: "Dzie\u0144", repeat_freq_week: "Tydzie\u0144", repeat_freq_month: "Miesi\u0105c", repeat_freq_year: "Rok", repeat_on_date: "W dniu", repeat_ends: "Ko\u0144czy si\u0119", month_for_recurring: ["Stycznia", "Lutego", "Marca", "Kwietnia", "Maja", "Czerwca", "Lipca", "Sierpnia", "Wrzenia", "Padziernka", "Listopada", "Grudnia"], day_for_recurring: ["Niedziela", "Poniedziaek", "Wtorek", "roda", "Czwartek", "Pitek", "Sobota"] } };
    va = { date: { month_full: ["Janeiro", "Fevereiro", "Mar\xE7o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], month_short: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"], day_full: ["Domingo", "Segunda", "Ter\xE7a", "Quarta", "Quinta", "Sexta", "S\xE1bado"], day_short: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"] }, labels: { dhx_cal_today_button: "Hoje", day_tab: "Dia", week_tab: "Semana", month_tab: "M\xEAs", new_event: "Novo evento", icon_save: "Salvar", icon_cancel: "Cancelar", icon_details: "Detalhes", icon_edit: "Editar", icon_delete: "Deletar", confirm_closing: "", confirm_deleting: "Tem certeza que deseja excluir?", section_description: "Descri\xE7\xE3o", section_time: "Per\xEDodo de tempo", full_day: "Dia inteiro", confirm_recurring: "Deseja editar todos esses eventos repetidos?", section_recurring: "Repetir evento", button_recurring: "Desabilitar", button_recurring_open: "Habilitar", button_edit_series: "Editar a s\xE9rie", button_edit_occurrence: "Editar uma c\xF3pia", agenda_tab: "Dia", date: "Data", description: "Descri\xE7\xE3o", year_tab: "Ano", week_agenda_tab: "Dia", grid_tab: "Grade", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Di\xE1rio", repeat_radio_week: "Semanal", repeat_radio_month: "Mensal", repeat_radio_year: "Anual", repeat_radio_day_type: "Cada", repeat_text_day_count: "dia(s)", repeat_radio_day_type2: "Cada trabalho di\xE1rio", repeat_week: " Repita cada", repeat_text_week_count: "semana:", repeat_radio_month_type: "Repetir", repeat_radio_month_start: "Em", repeat_text_month_day: "todo dia", repeat_text_month_count: "m\xEAs", repeat_text_month_count2_before: "todo", repeat_text_month_count2_after: "m\xEAs", repeat_year_label: "Em", select_year_day2: "of", repeat_text_year_day: "dia", select_year_month: "m\xEAs", repeat_radio_end: "Sem data final", repeat_text_occurences_count: "ocorr\xEAncias", repeat_radio_end3: "Fim", repeat_radio_end2: "Depois", repeat_never: "Nunca", repeat_daily: "Todos os dias", repeat_workdays: "Todos os dias \xFAteis", repeat_weekly: "Toda semana", repeat_monthly: "Todo m\xEAs", repeat_yearly: "Todo ano", repeat_custom: "Personalizado", repeat_freq_day: "Dia", repeat_freq_week: "Semana", repeat_freq_month: "M\xEAs", repeat_freq_year: "Ano", repeat_on_date: "Na data", repeat_ends: "Termina", month_for_recurring: ["Janeiro", "Fevereiro", "Mar\xE7o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], day_for_recurring: ["Domingo", "Segunda", "Ter\xE7a", "Quarta", "Quinta", "Sexta", "S\xE1bado"] } };
    ga = { date: { month_full: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "November", "December"], month_short: ["Ian", "Feb", "Mar", "Apr", "Mai", "Iun", "Iul", "Aug", "Sep", "Oct", "Nov", "Dec"], day_full: ["Duminica", "Luni", "Marti", "Miercuri", "Joi", "Vineri", "Sambata"], day_short: ["Du", "Lu", "Ma", "Mi", "Jo", "Vi", "Sa"] }, labels: { dhx_cal_today_button: "Astazi", day_tab: "Zi", week_tab: "Saptamana", month_tab: "Luna", new_event: "Eveniment nou", icon_save: "Salveaza", icon_cancel: "Anuleaza", icon_details: "Detalii", icon_edit: "Editeaza", icon_delete: "Sterge", confirm_closing: "Schimbarile nu vor fi salvate, esti sigur?", confirm_deleting: "Evenimentul va fi sters permanent, esti sigur?", section_description: "Descriere", section_time: "Interval", full_day: "Toata ziua", confirm_recurring: "Vrei sa editezi toata seria de evenimente repetate?", section_recurring: "Repetare", button_recurring: "Dezactivata", button_recurring_open: "Activata", button_edit_series: "Editeaza serie", button_edit_occurrence: "Editeaza doar intrare", agenda_tab: "Agenda", date: "Data", description: "Descriere", year_tab: "An", week_agenda_tab: "Agenda", grid_tab: "Lista", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Zilnic", repeat_radio_week: "Saptamanal", repeat_radio_month: "Lunar", repeat_radio_year: "Anual", repeat_radio_day_type: "La fiecare", repeat_text_day_count: "zi(le)", repeat_radio_day_type2: "Fiecare zi lucratoare", repeat_week: " Repeta la fiecare", repeat_text_week_count: "saptamana in urmatoarele zile:", repeat_radio_month_type: "Repeta in", repeat_radio_month_start: "In a", repeat_text_month_day: "zi la fiecare", repeat_text_month_count: "luni", repeat_text_month_count2_before: "la fiecare", repeat_text_month_count2_after: "luni", repeat_year_label: "In", select_year_day2: "a lunii", repeat_text_year_day: "zi a lunii", select_year_month: "", repeat_radio_end: "Fara data de sfarsit", repeat_text_occurences_count: "evenimente", repeat_radio_end3: "La data", repeat_radio_end2: "Dupa", repeat_never: "Niciodat\u0103", repeat_daily: "\xCEn fiecare zi", repeat_workdays: "\xCEn fiecare zi lucr\u0103toare", repeat_weekly: "\xCEn fiecare s\u0103pt\u0103m\xE2n\u0103", repeat_monthly: "\xCEn fiecare lun\u0103", repeat_yearly: "\xCEn fiecare an", repeat_custom: "Personalizat", repeat_freq_day: "Zi", repeat_freq_week: "S\u0103pt\u0103m\xE2n\u0103", repeat_freq_month: "Lun\u0103", repeat_freq_year: "An", repeat_on_date: "La data", repeat_ends: "Se termin\u0103", month_for_recurring: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"], day_for_recurring: ["Duminica", "Luni", "Marti", "Miercuri", "Joi", "Vineri", "Sambata"] } };
    ya = { date: { month_full: ["\u042F\u043D\u0432\u0430\u0440\u044C", "\u0424\u0435\u0432\u0440\u0430\u043B\u044C", "\u041C\u0430\u0440\u0442", "\u0410\u043F\u0440\u0435\u043B\u044C", "Ma\u0439", "\u0418\u044E\u043D\u044C", "\u0418\u044E\u043B\u044C", "\u0410\u0432\u0433\u0443\u0441\u0442", "\u0421\u0435\u043D\u0442\u044F\u0431\u0440\u044C", "O\u043A\u0442\u044F\u0431\u0440\u044C", "\u041D\u043E\u044F\u0431\u0440\u044C", "\u0414\u0435\u043A\u0430\u0431\u0440\u044C"], month_short: ["\u042F\u043D\u0432", "\u0424\u0435\u0432", "Ma\u0440", "A\u043F\u0440", "Ma\u0439", "\u0418\u044E\u043D", "\u0418\u044E\u043B", "A\u0432\u0433", "\u0421\u0435\u043D", "\u041E\u043A\u0442", "\u041D\u043E\u044F", "\u0414\u0435\u043A"], day_full: ["\u0412\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435", "\u041F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A", "\u0412\u0442\u043E\u0440\u043D\u0438\u043A", "\u0421\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0435\u0440\u0433", "\u041F\u044F\u0442\u043D\u0438\u0446\u0430", "\u0421\u0443\u0431\u0431\u043E\u0442\u0430"], day_short: ["\u0412\u0441", "\u041F\u043D", "\u0412\u0442", "\u0421\u0440", "\u0427\u0442", "\u041F\u0442", "\u0421\u0431"] }, labels: { dhx_cal_today_button: "\u0421\u0435\u0433\u043E\u0434\u043D\u044F", day_tab: "\u0414\u0435\u043D\u044C", week_tab: "\u041D\u0435\u0434\u0435\u043B\u044F", month_tab: "\u041C\u0435\u0441\u044F\u0446", new_event: "\u041D\u043E\u0432\u043E\u0435 \u0441\u043E\u0431\u044B\u0442\u0438\u0435", icon_save: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C", icon_cancel: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C", icon_details: "\u0414\u0435\u0442\u0430\u043B\u0438", icon_edit: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C", icon_delete: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C", confirm_closing: "", confirm_deleting: "\u0421\u043E\u0431\u044B\u0442\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043B\u0435\u043D\u043E \u0431\u0435\u0437\u0432\u043E\u0437\u0432\u0440\u0430\u0442\u043D\u043E, \u043F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C?", section_description: "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435", section_time: "\u041F\u0435\u0440\u0438\u043E\u0434 \u0432\u0440\u0435\u043C\u0435\u043D\u0438", full_day: "\u0412\u0435\u0441\u044C \u0434\u0435\u043D\u044C", confirm_recurring: "\u0412\u044B \u0445\u043E\u0442\u0438\u0442\u0435 \u0438\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0432\u0441\u044E \u0441\u0435\u0440\u0438\u044E \u043F\u043E\u0432\u0442\u043E\u0440\u044F\u044E\u0449\u0438\u0445\u0441\u044F \u0441\u043E\u0431\u044B\u0442\u0438\u0439?", section_recurring: "\u041F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0435", button_recurring: "\u041E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u043E", button_recurring_open: "\u0412\u043A\u043B\u044E\u0447\u0435\u043D\u043E", button_edit_series: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0435\u0440\u0438\u044E", button_edit_occurrence: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u044D\u043A\u0437\u0435\u043C\u043F\u043B\u044F\u0440", agenda_tab: "\u0421\u043F\u0438\u0441\u043E\u043A", date: "\u0414\u0430\u0442\u0430", description: "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435", year_tab: "\u0413\u043E\u0434", week_agenda_tab: "\u0421\u043F\u0438\u0441\u043E\u043A", grid_tab: "\u0422\u0430\u0431\u043B\u0438\u0446\u0430", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "\u0414\u0435\u043D\u044C", repeat_radio_week: "\u041D\u0435\u0434\u0435\u043B\u044F", repeat_radio_month: "\u041C\u0435\u0441\u044F\u0446", repeat_radio_year: "\u0413\u043E\u0434", repeat_radio_day_type: "\u041A\u0430\u0436\u0434\u044B\u0439", repeat_text_day_count: "\u0434\u0435\u043D\u044C", repeat_radio_day_type2: "\u041A\u0430\u0436\u0434\u044B\u0439 \u0440\u0430\u0431\u043E\u0447\u0438\u0439 \u0434\u0435\u043D\u044C", repeat_week: " \u041F\u043E\u0432\u0442\u043E\u0440\u044F\u0442\u044C \u043A\u0430\u0436\u0434\u0443\u044E", repeat_text_week_count: "\u043D\u0435\u0434\u0435\u043B\u044E , \u0432:", repeat_radio_month_type: "\u041F\u043E\u0432\u0442\u043E\u0440\u044F\u0442\u044C", repeat_radio_month_start: "", repeat_text_month_day: " \u0447\u0438\u0441\u043B\u0430 \u043A\u0430\u0436\u0434\u044B\u0439 ", repeat_text_month_count: "\u043C\u0435\u0441\u044F\u0446", repeat_text_month_count2_before: "\u043A\u0430\u0436\u0434\u044B\u0439 ", repeat_text_month_count2_after: "\u043C\u0435\u0441\u044F\u0446", repeat_year_label: "", select_year_day2: "", repeat_text_year_day: "\u0434\u0435\u043D\u044C", select_year_month: "", repeat_radio_end: "\u0411\u0435\u0437 \u0434\u0430\u0442\u044B \u043E\u043A\u043E\u043D\u0447\u0430\u043D\u0438\u044F", repeat_text_occurences_count: "\u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0439", repeat_radio_end3: "\u0414\u043E ", repeat_radio_end2: "", repeat_never: "\u041D\u0438\u043A\u043E\u0433\u0434\u0430", repeat_daily: "\u041A\u0430\u0436\u0434\u044B\u0439 \u0434\u0435\u043D\u044C", repeat_workdays: "\u041A\u0430\u0436\u0434\u044B\u0439 \u0431\u0443\u0434\u043D\u0438\u0439 \u0434\u0435\u043D\u044C", repeat_weekly: "\u041A\u0430\u0436\u0434\u0443\u044E \u043D\u0435\u0434\u0435\u043B\u044E", repeat_monthly: "\u041A\u0430\u0436\u0434\u044B\u0439 \u043C\u0435\u0441\u044F\u0446", repeat_yearly: "\u041A\u0430\u0436\u0434\u044B\u0439 \u0433\u043E\u0434", repeat_custom: "\u041D\u0430\u0441\u0442\u0440\u043E\u0438\u0442\u044C", repeat_freq_day: "\u0414\u0435\u043D\u044C", repeat_freq_week: "\u041D\u0435\u0434\u0435\u043B\u044F", repeat_freq_month: "\u041C\u0435\u0441\u044F\u0446", repeat_freq_year: "\u0413\u043E\u0434", repeat_on_date: "\u0412 \u0434\u0430\u0442\u0443", repeat_ends: "\u0417\u0430\u043A\u0430\u043D\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044F", month_for_recurring: ["\u042F\u043D\u0432\u0430\u0440\u044F", "\u0424\u0435\u0432\u0440\u0430\u043B\u044F", "\u041C\u0430\u0440\u0442\u0430", "\u0410\u043F\u0440\u0435\u043B\u044F", "\u041C\u0430\u044F", "\u0418\u044E\u043D\u044F", "\u0418\u044E\u043B\u044F", "\u0410\u0432\u0433\u0443\u0441\u0442\u0430", "\u0421\u0435\u043D\u0442\u044F\u0431\u0440\u044F", "\u041E\u043A\u0442\u044F\u0431\u0440\u044F", "\u041D\u043E\u044F\u0431\u0440\u044F", "\u0414\u0435\u043A\u0430\u0431\u0440\u044F"], day_for_recurring: ["\u0412\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435", "\u041F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A", "\u0412\u0442\u043E\u0440\u043D\u0438\u043A", "\u0421\u0440\u0435\u0434\u0443", "\u0427\u0435\u0442\u0432\u0435\u0440\u0433", "\u041F\u044F\u0442\u043D\u0438\u0446\u0443", "\u0421\u0443\u0431\u0431\u043E\u0442\u0443"] } };
    ba = { date: { month_full: ["Januar", "Februar", "Marec", "April", "Maj", "Junij", "Julij", "Avgust", "September", "Oktober", "November", "December"], month_short: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"], day_full: ["Nedelja", "Ponedeljek", "Torek", "Sreda", "\u010Cetrtek", "Petek", "Sobota"], day_short: ["Ned", "Pon", "Tor", "Sre", "\u010Cet", "Pet", "Sob"] }, labels: { dhx_cal_today_button: "Danes", day_tab: "Dan", week_tab: "Teden", month_tab: "Mesec", new_event: "Nov dogodek", icon_save: "Shrani", icon_cancel: "Prekli\u010Di", icon_details: "Podrobnosti", icon_edit: "Uredi", icon_delete: "Izbri\u0161i", confirm_closing: "", confirm_deleting: "Dogodek bo izbrisan. \u017Delite nadaljevati?", section_description: "Opis", section_time: "\u010Casovni okvir", full_day: "Ves dan", confirm_recurring: "\u017Delite urediti celoten set ponavljajo\u010Dih dogodkov?", section_recurring: "Ponovi dogodek", button_recurring: "Onemogo\u010Deno", button_recurring_open: "Omogo\u010Deno", button_edit_series: "Edit series", button_edit_occurrence: "Edit occurrence", agenda_tab: "Zadeva", date: "Datum", description: "Opis", year_tab: "Leto", week_agenda_tab: "Zadeva", grid_tab: "Miza", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Dnevno", repeat_radio_week: "Tedensko", repeat_radio_month: "Mese\u010Dno", repeat_radio_year: "Letno", repeat_radio_day_type: "Vsak", repeat_text_day_count: "dan", repeat_radio_day_type2: "Vsak delovni dan", repeat_week: " Ponavljaj vsak", repeat_text_week_count: "teden na naslednje dni:", repeat_radio_month_type: "Ponavljaj", repeat_radio_month_start: "Na", repeat_text_month_day: "dan vsak", repeat_text_month_count: "mesec", repeat_text_month_count2_before: "vsak", repeat_text_month_count2_after: "mesec", repeat_year_label: "Na", select_year_day2: "od", repeat_text_year_day: "dan", select_year_month: "mesec", repeat_radio_end: "Brez kon\u010Dnega datuma", repeat_text_occurences_count: "pojavitve", repeat_radio_end2: "Po", repeat_radio_end3: "Kon\u010Daj do", repeat_never: "Nikoli", repeat_daily: "Vsak dan", repeat_workdays: "Vsak delovni dan", repeat_weekly: "Vsak teden", repeat_monthly: "Vsak mesec", repeat_yearly: "Vsako leto", repeat_custom: "Po meri", repeat_freq_day: "Dan", repeat_freq_week: "Teden", repeat_freq_month: "Mesec", repeat_freq_year: "Leto", repeat_on_date: "Na datum", repeat_ends: "Kon\u010Da se", month_for_recurring: ["Januar", "Februar", "Marec", "April", "Maj", "Junij", "Julij", "Avgust", "September", "Oktober", "November", "December"], day_for_recurring: ["Nedelja", "Ponedeljek", "Torek", "Sreda", "\u010Cetrtek", "Petek", "Sobota"] } };
    xa = { date: { month_full: ["Janu\xE1r", "Febru\xE1r", "Marec", "Apr\xEDl", "M\xE1j", "J\xFAn", "J\xFAl", "August", "September", "Okt\xF3ber", "November", "December"], month_short: ["Jan", "Feb", "Mar", "Apr", "M\xE1j", "J\xFAn", "J\xFAl", "Aug", "Sept", "Okt", "Nov", "Dec"], day_full: ["Nede\u013Ea", "Pondelok", "Utorok", "Streda", "\u0160tvrtok", "Piatok", "Sobota"], day_short: ["Ne", "Po", "Ut", "St", "\u0160t", "Pi", "So"] }, labels: { dhx_cal_today_button: "Dnes", day_tab: "De\u0148", week_tab: "T\xFD\u017Ede\u0148", month_tab: "Mesiac", new_event: "Nov\xE1 udalos\u0165", icon_save: "Ulo\u017Ei\u0165", icon_cancel: "Sp\xE4\u0165", icon_details: "Detail", icon_edit: "Edituj", icon_delete: "Zmaza\u0165", confirm_closing: "Va\u0161e zmeny nebud\xFA ulo\u017Een\xE9. Skuto\u010Dne?", confirm_deleting: "Udalos\u0165 bude natrvalo vymazan\xE1. Skuto\u010Dne?", section_description: "Pozn\xE1mky", section_time: "Doba platnosti", confirm_recurring: "Prajete si upravi\u0165 cel\xFA radu opakovan\xFDch udalost\xED?", section_recurring: "Opakovanie udalosti", button_recurring: "Vypnut\xE9", button_recurring_open: "Zapnut\xE9", button_edit_series: "Upravi\u0165 opakovania", button_edit_occurrence: "Upravi\u0165 in\u0161tancie", agenda_tab: "Program", date: "D\xE1tum", description: "Pozn\xE1mka", year_tab: "Rok", full_day: "Cel\xFD de\u0148", week_agenda_tab: "Program", grid_tab: "Mrie\u017Eka", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Denne", repeat_radio_week: "T\xFD\u017Edenne", repeat_radio_month: "Mesa\xE8ne", repeat_radio_year: "Ro\xE8ne", repeat_radio_day_type: "Ka\u017Ed\xFD", repeat_text_day_count: "de\xF2", repeat_radio_day_type2: "Ka\u017Ed\xFD prac. de\xF2", repeat_week: "Opakova ka\u017Ed\xFD", repeat_text_week_count: "t\xFD\u017Ede\xF2 v d\xF2och:", repeat_radio_month_type: "Opakova", repeat_radio_month_start: "On", repeat_text_month_day: "de\xF2 ka\u017Ed\xFD", repeat_text_month_count: "mesiac", repeat_text_month_count2_before: "ka\u017Ed\xFD", repeat_text_month_count2_after: "mesiac", repeat_year_label: "On", select_year_day2: "po\xE8as", repeat_text_year_day: "de\xF2", select_year_month: "mesiac", repeat_radio_end: "Bez d\xE1tumu ukon\xE8enia", repeat_text_occurences_count: "udalostiach", repeat_radio_end3: "Ukon\xE8i", repeat_radio_end2: "Po", repeat_never: "Nikdy", repeat_daily: "Ka\u017Ed\xFD de\u0148", repeat_workdays: "Ka\u017Ed\xFD pracovn\xFD de\u0148", repeat_weekly: "Ka\u017Ed\xFD t\xFD\u017Ede\u0148", repeat_monthly: "Ka\u017Ed\xFD mesiac", repeat_yearly: "Ka\u017Ed\xFD rok", repeat_custom: "Vlastn\xE9", repeat_freq_day: "De\u0148", repeat_freq_week: "T\xFD\u017Ede\u0148", repeat_freq_month: "Mesiac", repeat_freq_year: "Rok", repeat_on_date: "Na d\xE1tum", repeat_ends: "Koniec", month_for_recurring: ["Janu\xE1r", "Febru\xE1r", "Marec", "Apr\xEDl", "M\xE1j", "J\xFAn", "J\xFAl", "August", "September", "Okt\xF3ber", "November", "December"], day_for_recurring: ["Nede\xBEa", "Pondelok", "Utorok", "Streda", "\u0160tvrtok", "Piatok", "Sobota"] } };
    ka = { date: { month_full: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"], month_short: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"], day_full: ["S\xF6ndag", "M\xE5ndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "L\xF6rdag"], day_short: ["S\xF6n", "M\xE5n", "Tis", "Ons", "Tor", "Fre", "L\xF6r"] }, labels: { dhx_cal_today_button: "Idag", day_tab: "Dag", week_tab: "Vecka", month_tab: "M\xE5nad", new_event: "Ny h\xE4ndelse", icon_save: "Spara", icon_cancel: "\xC5ngra", icon_details: "Detaljer", icon_edit: "\xC4ndra", icon_delete: "Ta bort", confirm_closing: "", confirm_deleting: "\xC4r du s\xE4ker p\xE5 att du vill ta bort h\xE4ndelsen permanent?", section_description: "Beskrivning", section_time: "Tid", full_day: "Hela dagen", confirm_recurring: "Vill du redigera hela serien med repeterande h\xE4ndelser?", section_recurring: "Upprepa h\xE4ndelse", button_recurring: "Inaktiverat", button_recurring_open: "Aktiverat", button_edit_series: "Redigera serien", button_edit_occurrence: "Redigera en kopia", agenda_tab: "Dagordning", date: "Datum", description: "Beskrivning", year_tab: "\xC5r", week_agenda_tab: "Dagordning", grid_tab: "Galler", drag_to_create: "Dra f\xF6r att skapa ny", drag_to_move: "Dra f\xF6r att flytta", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "Dagligen", repeat_radio_week: "Veckovis", repeat_radio_month: "M\xE5nadsvis", repeat_radio_year: "\xC5rligen", repeat_radio_day_type: "Var", repeat_text_day_count: "dag", repeat_radio_day_type2: "Varje arbetsdag", repeat_week: " Upprepa var", repeat_text_week_count: "vecka dessa dagar:", repeat_radio_month_type: "Upprepa", repeat_radio_month_start: "Den", repeat_text_month_day: "dagen var", repeat_text_month_count: "m\xE5nad", repeat_text_month_count2_before: "var", repeat_text_month_count2_after: "m\xE5nad", repeat_year_label: "Den", select_year_day2: "i", repeat_text_year_day: "dag i", select_year_month: "m\xE5nad", repeat_radio_end: "Inget slutdatum", repeat_text_occurences_count: "upprepningar", repeat_radio_end3: "Sluta efter", repeat_radio_end2: "Efter", repeat_never: "Aldrig", repeat_daily: "Varje dag", repeat_workdays: "Varje vardag", repeat_weekly: "Varje vecka", repeat_monthly: "Varje m\xE5nad", repeat_yearly: "Varje \xE5r", repeat_custom: "Anpassad", repeat_freq_day: "Dag", repeat_freq_week: "Vecka", repeat_freq_month: "M\xE5nad", repeat_freq_year: "\xC5r", repeat_on_date: "P\xE5 datum", repeat_ends: "Slutar", month_for_recurring: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"], day_for_recurring: ["S\xF6ndag", "M\xE5ndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "L\xF6rdag"] } };
    wa = { date: { month_full: ["Ocak", "\xDEubat", "Mart", "Nisan", "May\xFDs", "Haziran", "Temmuz", "A\xF0ustos", "Eyl\xFCl", "Ekim", "Kas\xFDm", "Aral\xFDk"], month_short: ["Oca", "\xDEub", "Mar", "Nis", "May", "Haz", "Tem", "A\xF0u", "Eyl", "Eki", "Kas", "Ara"], day_full: ["Pazar", "Pazartes,", "Sal\xFD", "\xC7ar\xFEamba", "Per\xFEembe", "Cuma", "Cumartesi"], day_short: ["Paz", "Pts", "Sal", "\xC7ar", "Per", "Cum", "Cts"] }, labels: { dhx_cal_today_button: "Bug\xFCn", day_tab: "G\xFCn", week_tab: "Hafta", month_tab: "Ay", new_event: "Uygun", icon_save: "Kaydet", icon_cancel: "\xDDptal", icon_details: "Detaylar", icon_edit: "D\xFCzenle", icon_delete: "Sil", confirm_closing: "", confirm_deleting: "Etkinlik silinecek, devam?", section_description: "A\xE7\xFDklama", section_time: "Zaman aral\xFD\xF0\xFD", full_day: "Tam g\xFCn", confirm_recurring: "T\xFCm tekrar eden etkinlikler silinecek, devam?", section_recurring: "Etkinli\xF0i tekrarla", button_recurring: "Pasif", button_recurring_open: "Aktif", button_edit_series: "Dizi d\xFCzenleme", button_edit_occurrence: "Bir kopyas\u0131n\u0131 d\xFCzenleyin", agenda_tab: "Ajanda", date: "Tarih", description: "A\xE7\xFDklama", year_tab: "Y\xFDl", week_agenda_tab: "Ajanda", grid_tab: "Izgara", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "G\xFCnl\xFCk", repeat_radio_week: "Haftal\u0131k", repeat_radio_month: "Ayl\u0131k", repeat_radio_year: "Y\u0131ll\u0131k", repeat_radio_day_type: "Her", repeat_text_day_count: "g\xFCn", repeat_radio_day_type2: "Her i\u015F g\xFCn\xFC", repeat_week: " Tekrar her", repeat_text_week_count: "hafta \u015Fu g\xFCnlerde:", repeat_radio_month_type: "Tekrar et", repeat_radio_month_start: "Tarihinde", repeat_text_month_day: "g\xFCn her", repeat_text_month_count: "ay", repeat_text_month_count2_before: "her", repeat_text_month_count2_after: "ay", repeat_year_label: "Tarihinde", select_year_day2: "ay\u0131n", repeat_text_year_day: "g\xFCn\xFC", select_year_month: "ay", repeat_radio_end: "Biti\u015F tarihi yok", repeat_text_occurences_count: "olay", repeat_radio_end2: "Sonra", repeat_radio_end3: "Tarihinde bitir", repeat_never: "Asla", repeat_daily: "Her g\xFCn", repeat_workdays: "Her i\u015F g\xFCn\xFC", repeat_weekly: "Her hafta", repeat_monthly: "Her ay", repeat_yearly: "Her y\u0131l", repeat_custom: "\xD6zel", repeat_freq_day: "G\xFCn", repeat_freq_week: "Hafta", repeat_freq_month: "Ay", repeat_freq_year: "Y\u0131l", repeat_on_date: "Tarihinde", repeat_ends: "Biter", month_for_recurring: ["Ocak", "\u015Eubat", "Mart", "Nisan", "May\u0131s", "Haziran", "Temmuz", "A\u011Fustos", "Eyl\xFCl", "Ekim", "Kas\u0131m", "Aral\u0131k"], day_for_recurring: ["Pazar", "Pazartesi", "Sal\u0131", "\xC7ar\u015Famba", "Per\u015Fembe", "Cuma", "Cumartesi"] } };
    Ea = { date: { month_full: ["\u0421\u0456\u0447\u0435\u043D\u044C", "\u041B\u044E\u0442\u0438\u0439", "\u0411\u0435\u0440\u0435\u0437\u0435\u043D\u044C", "\u041A\u0432\u0456\u0442\u0435\u043D\u044C", "\u0422\u0440\u0430\u0432\u0435\u043D\u044C", "\u0427\u0435\u0440\u0432\u0435\u043D\u044C", "\u041B\u0438\u043F\u0435\u043D\u044C", "\u0421\u0435\u0440\u043F\u0435\u043D\u044C", "\u0412\u0435\u0440\u0435\u0441\u0435\u043D\u044C", "\u0416\u043E\u0432\u0442\u0435\u043D\u044C", "\u041B\u0438\u0441\u0442\u043E\u043F\u0430\u0434", "\u0413\u0440\u0443\u0434\u0435\u043D\u044C"], month_short: ["\u0421\u0456\u0447", "\u041B\u044E\u0442", "\u0411\u0435\u0440", "\u041A\u0432\u0456", "\u0422\u0440\u0430", "\u0427\u0435\u0440", "\u041B\u0438\u043F", "\u0421\u0435\u0440", "\u0412\u0435\u0440", "\u0416\u043E\u0432", "\u041B\u0438\u0441", "\u0413\u0440\u0443"], day_full: ["\u041D\u0435\u0434\u0456\u043B\u044F", "\u041F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A", "\u0412\u0456\u0432\u0442\u043E\u0440\u043E\u043A", "\u0421\u0435\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0435\u0440", "\u041F'\u044F\u0442\u043D\u0438\u0446\u044F", "\u0421\u0443\u0431\u043E\u0442\u0430"], day_short: ["\u041D\u0435\u0434", "\u041F\u043E\u043D", "\u0412\u0456\u0432", "\u0421\u0435\u0440", "\u0427\u0435\u0442", "\u041F\u0442\u043D", "\u0421\u0443\u0431"] }, labels: { dhx_cal_today_button: "\u0421\u044C\u043E\u0433\u043E\u0434\u043D\u0456", day_tab: "\u0414\u0435\u043D\u044C", week_tab: "\u0422\u0438\u0436\u0434\u0435\u043D\u044C", month_tab: "\u041C\u0456\u0441\u044F\u0446\u044C", new_event: "\u041D\u043E\u0432\u0430 \u043F\u043E\u0434\u0456\u044F", icon_save: "\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438", icon_cancel: "\u0412\u0456\u0434\u043C\u0456\u043D\u0430", icon_details: "\u0414\u0435\u0442\u0430\u043B\u0456", icon_edit: "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438", icon_delete: "\u0412\u0438\u043B\u0443\u0447\u0438\u0442\u0438", confirm_closing: "", confirm_deleting: "\u041F\u043E\u0434\u0456\u044F \u0432\u0438\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u044F \u043D\u0430\u0437\u0430\u0432\u0436\u0434\u0438. \u0412\u0438 \u0432\u043F\u0435\u0432\u043D\u0435\u043D\u0456?", section_description: "\u041E\u043F\u0438\u0441", section_time: "\u0427\u0430\u0441\u043E\u0432\u0438\u0439 \u043F\u0440\u043E\u043C\u0456\u0436\u043E\u043A", full_day: "\u0412\u0435\u0441\u044C \u0434\u0435\u043D\u044C", confirm_recurring: "\u0425\u043E\u0447\u0435\u0442\u0435 \u0440\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438 \u0432\u0435\u0441\u044C \u043F\u0435\u0440\u0435\u043B\u0456\u043A \u043F\u043E\u0432\u0442\u043E\u0440\u044E\u0432\u0430\u043D\u0438\u0445 \u043F\u043E\u0434\u0456\u0439?", section_recurring: "\u041F\u043E\u0432\u0442\u043E\u0440\u044E\u0432\u0430\u043D\u0430 \u043F\u043E\u0434\u0456\u044F", button_recurring: "\u0412\u0456\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u043E", button_recurring_open: "\u0412\u043A\u043B\u044E\u0447\u0435\u043D\u043E", button_edit_series: "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438 \u0441\u0435\u0440\u0456\u044E", button_edit_occurrence: "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438 \u043F\u0440\u0438\u043C\u0456\u0440\u043D\u0438\u043A", agenda_tab: "\u041F\u0435\u0440\u0435\u043B\u0456\u043A", date: "\u0414\u0430\u0442\u0430", description: "\u041E\u043F\u0438\u0441", year_tab: "\u0420\u0456\u043A", week_agenda_tab: "\u041F\u0435\u0440\u0435\u043B\u0456\u043A", grid_tab: "\u0422\u0430\u0431\u043B\u0438\u0446\u044F", drag_to_create: "Drag to create", drag_to_move: "Drag to move", message_ok: "OK", message_cancel: "Cancel", next: "Next", prev: "Previous", year: "Year", month: "Month", day: "Day", hour: "Hour", minute: "Minute", repeat_radio_day: "\u0414\u0435\u043D\u044C", repeat_radio_week: "\u0422\u0438\u0436\u0434\u0435\u043D\u044C", repeat_radio_month: "\u041C\u0456\u0441\u044F\u0446\u044C", repeat_radio_year: "\u0420\u0456\u043A", repeat_radio_day_type: "\u041A\u043E\u0436\u043D\u0438\u0439", repeat_text_day_count: "\u0434\u0435\u043D\u044C", repeat_radio_day_type2: "\u041A\u043E\u0436\u043D\u0438\u0439 \u0440\u043E\u0431\u043E\u0447\u0438\u0439 \u0434\u0435\u043D\u044C", repeat_week: " \u041F\u043E\u0432\u0442\u043E\u0440\u044E\u0432\u0430\u0442\u0438 \u043A\u043E\u0436\u0435\u043D", repeat_text_week_count: "\u0442\u0438\u0436\u0434\u0435\u043D\u044C , \u043F\u043E:", repeat_radio_month_type: "\u041F\u043E\u0432\u0442\u043E\u0440\u044E\u0432\u0430\u0442\u0438", repeat_radio_month_start: "", repeat_text_month_day: " \u0447\u0438\u0441\u043B\u0430 \u043A\u043E\u0436\u043D\u0438\u0439 ", repeat_text_month_count: "\u043C\u0456\u0441\u044F\u0446\u044C", repeat_text_month_count2_before: "\u043A\u043E\u0436\u0435\u043D ", repeat_text_month_count2_after: "\u043C\u0456\u0441\u044F\u0446\u044C", repeat_year_label: "", select_year_day2: "", repeat_text_year_day: "\u0434\u0435\u043D\u044C", select_year_month: "", repeat_radio_end: "\u0411\u0435\u0437 \u0434\u0430\u0442\u0438 \u0437\u0430\u043A\u0456\u043D\u0447\u0435\u043D\u043D\u044F", repeat_text_occurences_count: "\u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u044C", repeat_radio_end3: "\u0414\u043E ", repeat_radio_end2: "", repeat_never: "\u041D\u0456\u043A\u043E\u043B\u0438", repeat_daily: "\u0429\u043E\u0434\u043D\u044F", repeat_workdays: "\u0429\u043E\u0434\u043D\u044F \u0432 \u0440\u043E\u0431\u043E\u0447\u0456 \u0434\u043D\u0456", repeat_weekly: "\u0429\u043E\u0442\u0438\u0436\u043D\u044F", repeat_monthly: "\u0429\u043E\u043C\u0456\u0441\u044F\u0446\u044F", repeat_yearly: "\u0429\u043E\u0440\u043E\u043A\u0443", repeat_custom: "\u041D\u0430\u043B\u0430\u0448\u0442\u043E\u0432\u0430\u043D\u0435", repeat_freq_day: "\u0414\u0435\u043D\u044C", repeat_freq_week: "\u0422\u0438\u0436\u0434\u0435\u043D\u044C", repeat_freq_month: "\u041C\u0456\u0441\u044F\u0446\u044C", repeat_freq_year: "\u0420\u0456\u043A", repeat_on_date: "\u041D\u0430 \u0434\u0430\u0442\u0443", repeat_ends: "\u0417\u0430\u043A\u0456\u043D\u0447\u0443\u0454\u0442\u044C\u0441\u044F", month_for_recurring: ["\u0441\u0456\u0447\u043D\u044F", "\u043B\u044E\u0442\u043E\u0433\u043E", "\u0431\u0435\u0440\u0435\u0437\u043D\u044F", "\u043A\u0432\u0456\u0442\u043D\u044F", "\u0442\u0440\u0430\u0432\u043D\u044F", "\u0447\u0435\u0440\u0432\u043D\u044F", "\u043B\u0438\u043F\u043D\u044F", "\u0441\u0435\u0440\u043F\u043D\u044F", "\u0432\u0435\u0440\u0435\u0441\u043D\u044F", "\u0436\u043E\u0432\u0442\u043D\u044F", "\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434\u0430", "\u0433\u0440\u0443\u0434\u043D\u044F"], day_for_recurring: ["\u041D\u0435\u0434\u0456\u043B\u044F\u043C", "\u041F\u043E\u043D\u0435\u0434\u0456\u043B\u043A\u0430\u043C", "\u0412\u0456\u0432\u0442\u043E\u0440\u043A\u0430\u043C", "\u0421\u0435\u0440\u0435\u0434\u0430\u043C", "\u0427\u0435\u0442\u0432\u0435\u0440\u0433\u0430\u043C", "\u041F'\u044F\u0442\u043D\u0438\u0446\u044F\u043C", "\u0421\u0443\u0431\u043E\u0442\u0430\u043C"] } };
    Da = class {
      constructor(i, t2, r2 = {}) {
        this.state = { date: /* @__PURE__ */ new Date(), modes: ["days", "months", "years"], currentRange: [], eventDates: [], currentModeIndex: 0, ...r2 }, this.container = null, this.element = null, this.onStateChangeHandlers = [], this.scheduler = i, this._domEvents = i._createDomEventScope(), this.state = this.getState(), Ue(this), t2 && (this.container = t2, this.render(this.container)), this.onStateChange((d, n) => {
          this.callEvent("onStateChange", [n, d]);
        });
      }
      getState() {
        return { ...this.state, mode: this.state.modes[this.state.currentModeIndex] };
      }
      setState(i) {
        const t2 = { ...this.state };
        i.mode && (i.currentModeIndex = this.state.modes.indexOf(i.mode)), this.state = { ...this.state, ...i }, this._notifyStateChange(t2, this.state), this.container && this.render(this.container);
      }
      onStateChange(i) {
        return this.onStateChangeHandlers.push(i), () => {
          const t2 = this.onStateChangeHandlers.indexOf(i);
          t2 !== -1 && this.onStateChangeHandlers.splice(t2, 1);
        };
      }
      _notifyStateChange(i, t2) {
        this.onStateChangeHandlers.forEach((r2) => r2(i, t2));
      }
      _adjustDate(i) {
        const { mode: t2, date: r2 } = this.getState(), d = new Date(r2);
        t2 === "days" ? d.setMonth(r2.getMonth() + i) : t2 === "months" ? d.setFullYear(r2.getFullYear() + i) : d.setFullYear(r2.getFullYear() + 10 * i), this.setState({ date: d });
      }
      _toggleMode() {
        const i = (this.state.currentModeIndex + 1) % this.state.modes.length;
        this.setState({ currentModeIndex: i });
      }
      _renderCalendarHeader(i) {
        const { mode: t2, date: r2 } = this.getState(), d = document.createElement("div");
        d.classList.add("dhx_cal_datepicker_header");
        const n = document.createElement("button");
        n.classList.add("dhx_cal_datepicker_arrow", "scheduler_icon", "arrow_left"), d.appendChild(n);
        const s = document.createElement("div");
        if (s.classList.add("dhx_cal_datepicker_title"), t2 === "days")
          s.innerText = r2.toLocaleString("default", { month: "long" }) + " " + r2.getFullYear();
        else if (t2 === "months")
          s.innerText = r2.getFullYear();
        else {
          const a2 = 10 * Math.floor(r2.getFullYear() / 10);
          s.innerText = `${a2} - ${a2 + 9}`;
        }
        this._domEvents.attach(s, "click", this._toggleMode.bind(this)), d.appendChild(s);
        const _ = document.createElement("button");
        _.classList.add("dhx_cal_datepicker_arrow", "scheduler_icon", "arrow_right"), d.appendChild(_), i.appendChild(d), this._domEvents.attach(n, "click", this._adjustDate.bind(this, -1)), this._domEvents.attach(_, "click", this._adjustDate.bind(this, 1));
      }
      render(i) {
        this._domEvents.detachAll(), this.container = i || this.container, this.container.innerHTML = "", this.element || (this.element = document.createElement("div"), this.element.classList.add("dhx_cal_datepicker")), this.element.innerHTML = "", this.container.appendChild(this.element), this._renderCalendarHeader(this.element);
        const t2 = document.createElement("div");
        t2.classList.add("dhx_cal_datepicker_data"), this.element.appendChild(t2);
        const { mode: r2 } = this.getState();
        r2 === "days" ? this._renderDayGrid(t2) : r2 === "months" ? this._renderMonthGrid(t2) : this._renderYearGrid(t2);
      }
      _renderDayGridHeader(i) {
        const { date: t2 } = this.getState(), r2 = this.scheduler;
        let d = r2.date.week_start(new Date(t2));
        const n = r2.date.add(r2.date.week_start(new Date(t2)), 1, "week");
        i.classList.add("dhx_cal_datepicker_days");
        const s = r2.date.date_to_str("%D");
        for (; d.valueOf() < n.valueOf(); ) {
          const _ = s(d), a2 = document.createElement("div");
          a2.setAttribute("data-day", d.getDay()), a2.classList.add("dhx_cal_datepicker_dayname"), a2.innerText = _, i.appendChild(a2), d = r2.date.add(d, 1, "day");
        }
      }
      _weeksBetween(i, t2) {
        const r2 = this.scheduler;
        let d = 0, n = new Date(i);
        for (; n.valueOf() < t2.valueOf(); )
          d += 1, n = r2.date.week_start(r2.date.add(n, 1, "week"));
        return d;
      }
      _renderDayGrid(i) {
        const { date: t2, currentRange: r2, eventDates: d, minWeeks: n } = this.getState();
        let s = r2[0], _ = r2[1];
        const a2 = d.reduce((y2, x) => (y2[this.scheduler.date.day_start(new Date(x)).valueOf()] = true, y2), {}), o2 = document.createElement("div");
        this._renderDayGridHeader(o2), i.appendChild(o2);
        const l = this.scheduler, h = l.date.week_start(l.date.month_start(new Date(t2))), v = l.date.month_start(new Date(t2)), u = l.date.add(l.date.month_start(new Date(t2)), 1, "month");
        let f = l.date.add(l.date.month_start(new Date(t2)), 1, "month");
        const c2 = l.date.date_part(l._currentDate());
        f.getDay() !== 0 && (f = l.date.add(l.date.week_start(f), 1, "week"));
        let p = this._weeksBetween(h, f);
        n && p < n && (f = l.date.add(f, n - p, "week"));
        let m = h;
        const g = document.createElement("div");
        for (g.classList.add("dhx_cal_datepicker_days"), this._domEvents.attach(g, "click", (y2) => {
          const x = y2.target.closest("[data-cell-date]"), b = new Date(x.getAttribute("data-cell-date"));
          this.callEvent("onDateClick", [b, y2]);
        }); m.valueOf() < f.valueOf(); ) {
          const y2 = document.createElement("div");
          y2.setAttribute("data-cell-date", l.templates.format_date(m)), y2.setAttribute("data-day", m.getDay()), y2.innerHTML = m.getDate(), m.valueOf() < v.valueOf() ? y2.classList.add("dhx_before") : m.valueOf() >= u.valueOf() && y2.classList.add("dhx_after"), m.getDay() !== 0 && m.getDay() !== 6 || y2.classList.add("dhx_cal_datepicker_weekend"), m.valueOf() == c2.valueOf() && y2.classList.add("dhx_now"), s && _ && m.valueOf() >= s.valueOf() && m.valueOf() < _.valueOf() && y2.classList.add("dhx_cal_datepicker_current"), a2[m.valueOf()] && y2.classList.add("dhx_cal_datepicker_event"), y2.classList.add("dhx_cal_datepicker_date"), g.appendChild(y2), m = l.date.add(m, 1, "day");
        }
        i.appendChild(g);
      }
      _renderMonthGrid(i) {
        const { date: t2 } = this.getState(), r2 = document.createElement("div");
        r2.classList.add("dhx_cal_datepicker_months");
        const d = [];
        for (let a2 = 0; a2 < 12; a2++)
          d.push(new Date(t2.getFullYear(), a2, 1));
        const n = this.scheduler.date.date_to_str("%M");
        d.forEach((a2) => {
          const o2 = document.createElement("div");
          o2.classList.add("dhx_cal_datepicker_month"), t2.getMonth() === a2.getMonth() && o2.classList.add("dhx_cal_datepicker_current"), o2.setAttribute("data-month", a2.getMonth()), o2.innerHTML = n(a2), this._domEvents.attach(o2, "click", () => {
            const l = new Date(a2);
            this.setState({ date: l, mode: "days" });
          }), r2.appendChild(o2);
        }), i.appendChild(r2);
        const s = document.createElement("div");
        s.classList.add("dhx_cal_datepicker_done");
        const _ = document.createElement("button");
        _.innerText = "Done", _.classList.add("dhx_cal_datepicker_done_btn"), this._domEvents.attach(_, "click", () => {
          this.setState({ mode: "days" });
        }), s.appendChild(_), i.appendChild(s);
      }
      _renderYearGrid(i) {
        const { date: t2 } = this.getState(), r2 = 10 * Math.floor(t2.getFullYear() / 10), d = document.createElement("div");
        d.classList.add("dhx_cal_datepicker_years");
        for (let _ = r2 - 1; _ <= r2 + 10; _++) {
          const a2 = document.createElement("div");
          a2.innerText = _, a2.classList.add("dhx_cal_datepicker_year"), a2.setAttribute("data-year", _), t2.getFullYear() === _ && a2.classList.add("dhx_cal_datepicker_current"), this._domEvents.attach(a2, "click", () => {
            this.setState({ date: new Date(_, t2.getMonth(), 1), mode: "months" });
          }), d.appendChild(a2);
        }
        i.appendChild(d);
        const n = document.createElement("div");
        n.classList.add("dhx_cal_datepicker_done");
        const s = document.createElement("button");
        s.innerText = "Done", s.classList.add("dhx_cal_datepicker_done_btn"), this._domEvents.attach(s, "click", () => {
          this.setState({ mode: "months" });
        }), n.appendChild(s), i.appendChild(n);
      }
      destructor() {
        this.onStateChangeHandlers = [], this.element && (this.element.innerHTML = "", this.element.remove()), this._domEvents.detachAll(), this.callEvent("onDestroy", []), this.detachAllEvents(), this.scheduler = null;
      }
    };
    Na = class {
      constructor(i) {
        this._extensions = {};
        for (const t2 in i)
          this._extensions[t2] = i[t2];
      }
      addExtension(i, t2) {
        this._extensions[i] = t2;
      }
      getExtension(i) {
        return this._extensions[i];
      }
    };
    typeof dhtmlx < "u" && dhtmlx.attaches && (dhtmlx.attaches.attachScheduler = function(e2, i, t2, r2) {
      t2 = t2 || '<div class="dhx_cal_tab" name="day_tab" data-tab="day" style="right:204px;"></div><div class="dhx_cal_tab" name="week_tab" data-tab="week" style="right:140px;"></div><div class="dhx_cal_tab" name="month_tab" data-tab="month" style="right:76px;"></div>';
      var d = document.createElement("DIV");
      return d.id = "dhxSchedObj_" + this._genStr(12), d.innerHTML = '<div id="' + d.id + '" class="dhx_cal_container" style="width:100%; height:100%;"><div class="dhx_cal_navline"><div class="dhx_cal_prev_button"></div><div class="dhx_cal_next_button"></div><div class="dhx_cal_today_button"></div><div class="dhx_cal_date"></div>' + t2 + '</div><div class="dhx_cal_header"></div><div class="dhx_cal_data"></div></div>', document.body.appendChild(d.firstChild), this.attachObject(d.id, false, true), this.vs[this.av].sched = r2, this.vs[this.av].schedId = d.id, r2.setSizes = r2.updateView, r2.destructor = function() {
      }, r2.init(d.id, e2, i), this.vs[this._viewRestore()].sched;
    });
    de = (e2, i) => {
      i(false, `The ${e2} extension is not included in this version of dhtmlxScheduler.<br>
		You may need a <a href="https://docs.dhtmlx.com/scheduler/editions_comparison.html" target="_blank">Professional version of the component</a>.<br>
		Contact us at <a href="https://dhtmlx.com/docs/contact.shtml" target="_blank">https://dhtmlx.com/docs/contact.shtml</a> if you have any questions.`);
    };
    Ca = class {
      constructor(i) {
        this.map = null, this._markers = [], this.scheduler = i;
      }
      onEventClick(i) {
        if (this._markers && this._markers.length > 0) {
          for (let t2 = 0; t2 < this._markers.length; t2++)
            if (i.id == this._markers[t2].event.id) {
              let r2 = this.settings.zoom_after_resolve || this.settings.initial_zoom;
              i.lat && i.lng ? (this.map.setCenter({ lat: i.lat, lng: i.lng }), this.map.setZoom(r2)) : (this.map.setCenter({ lat: this.settings.error_position.lat, lng: this.settings.error_position.lng }), this.map.setZoom(r2)), google.maps.event.trigger(this._markers[t2].marker, "click");
            }
        }
      }
      initialize(i, t2) {
        this.settings = t2;
        let r2 = this.scheduler, d = { center: { lat: t2.initial_position.lat, lng: t2.initial_position.lng }, zoom: t2.initial_zoom, mapId: i.id, scrollwheel: true, mapTypeId: t2.type };
        if (this.map === null)
          this.map = new google.maps.Map(i, d);
        else {
          let n = this.map;
          i.appendChild(this.map.__gm.messageOverlay), i.appendChild(this.map.__gm.outerContainer), setTimeout(function() {
            n.setOptions({ container: i.id });
          }, 500);
        }
        google.maps.event.addListener(this.map, "dblclick", function(n) {
          const s = new google.maps.Geocoder();
          if (!r2.config.readonly && r2.config.dblclick_create) {
            let _ = n.latLng;
            s.geocode({ latLng: _ }, function(a2, o2) {
              o2 == google.maps.GeocoderStatus.OK ? (_ = a2[0].geometry.location, r2.addEventNow({ lat: _.lat(), lng: _.lng(), event_location: a2[0].formatted_address, start_date: r2.getState().date, end_date: r2.date.add(r2.getState().date, r2.config.time_step, "minute") })) : console.error("Geocode was not successful for the following reason: " + o2);
            });
          }
        });
      }
      destroy(i) {
        for (google.maps.event.clearInstanceListeners(window), google.maps.event.clearInstanceListeners(document), google.maps.event.clearInstanceListeners(i); i.firstChild; )
          i.firstChild.remove();
        i.innerHTML = "";
      }
      async addEventMarker(i) {
        let t2 = { title: i.text, position: {}, map: {} };
        i.lat && i.lng ? t2.position = { lat: i.lat, lng: i.lng } : t2.position = { lat: this.settings.error_position.lat, lng: this.settings.error_position.lng };
        const { AdvancedMarkerElement: r2 } = await google.maps.importLibrary("marker");
        let d;
        this.scheduler.ext.mapView.createMarker ? (t2.map = this.map, d = this.scheduler.ext.mapView.createMarker(t2)) : (d = new r2(t2), d.map = this.map), d.setMap(this.map), i["!nativeeditor_status"] == "true_deleted" && d.setMap(null), google.maps.event.addListener(d, "click", () => {
          this.infoWindow && this.infoWindow.close(), this.infoWindow = new google.maps.InfoWindow({ maxWidth: this.settings.info_window_max_width }), this.infoWindow.setContent(this.scheduler.templates.map_info_content(i)), this.infoWindow.open({ anchor: d, map: this.map });
        });
        let n = { event: i, ...t2, marker: d };
        this._markers.push(n);
      }
      removeEventMarker(i) {
        for (let t2 = 0; t2 < this._markers.length; t2++)
          i == this._markers[t2].event.id && (this._markers[t2].marker.setVisible(false), this._markers[t2].marker.setMap(null), this._markers[t2].marker.setPosition(null), this._markers[t2].marker = null, this._markers.splice(t2, 1), t2--);
      }
      updateEventMarker(i) {
        for (let t2 = 0; t2 < this._markers.length; t2++)
          if (this._markers[t2].event.id == i.id) {
            this._markers[t2].event = i, this._markers[t2].position.lat = i.lat, this._markers[t2].position.lng = i.lng, this._markers[t2].text = i.text;
            let r2 = new google.maps.LatLng(i.lat, i.lng);
            this._markers[t2].marker.setPosition(r2);
          }
      }
      clearEventMarkers() {
        if (this._markers.length > 0) {
          for (let i = 0; i < this._markers.length; i++)
            this._markers[i].marker.setMap(null);
          this._markers = [];
        }
      }
      setView(i, t2, r2) {
        this.map.setCenter({ lat: i, lng: t2 }), this.map.setZoom(r2);
      }
      async resolveAddress(i) {
        const t2 = new google.maps.Geocoder();
        return await new Promise((r2) => {
          t2.geocode({ address: i }, function(d, n) {
            n == google.maps.GeocoderStatus.OK ? r2({ lat: d[0].geometry.location.lat(), lng: d[0].geometry.location.lng() }) : (console.error("Geocode was not successful for the following reason: " + n), r2({}));
          });
        });
      }
    };
    Oa = class {
      constructor(i) {
        this.map = null, this._markers = [], this.scheduler = i;
      }
      onEventClick(i) {
        if (this._markers && this._markers.length > 0)
          for (let t2 = 0; t2 < this._markers.length; t2++)
            i.id == this._markers[t2].event.id && (this._markers[t2].marker.openPopup(), this._markers[t2].marker.closeTooltip(), i.lat && i.lng ? this.setView(i.lat, i.lng, this.settings.zoom_after_resolve || this.settings.initial_zoom) : this.setView(this.settings.error_position.lat, this.settings.error_position.lng, this.settings.zoom_after_resolve || this.settings.initial_zoom));
      }
      initialize(i, t2) {
        let r2 = this.scheduler, d = document.createElement("div");
        d.className = "mapWrapper", d.id = "mapWrapper", d.style.width = i.style.width, d.style.height = i.style.height, i.appendChild(d);
        let n = L.map(d, { center: L.latLng(t2.initial_position.lat, t2.initial_position.lng), zoom: t2.initial_zoom, keyboard: false });
        L.tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(n), n.on("dblclick", async function(s) {
          let _ = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${s.latlng.lat}&lon=${s.latlng.lng}&format=json`, { method: "GET", headers: { "Accept-Language": "en" } }).then((a2) => a2.json());
          if (_.address) {
            let a2 = _.address.country;
            r2.addEventNow({ lat: s.latlng.lat, lng: s.latlng.lng, event_location: a2, start_date: r2.getState().date, end_date: r2.date.add(r2.getState().date, r2.config.time_step, "minute") });
          } else
            console.error("unable recieve a position of the event", _.error);
        }), this.map = n, this.settings = t2;
      }
      destroy(i) {
        for (this.map.remove(); i.firstChild; )
          i.firstChild.remove();
        i.innerHTML = "";
      }
      addEventMarker(i) {
        const t2 = L.icon({ iconUrl: "https://unpkg.com/leaflet@1.0.3/dist/images/marker-icon.png", iconSize: [25, 41], shadowSize: [30, 65], iconAnchor: [12, 41], shadowAnchor: [7, 65] });
        let r2 = { minWidth: 180, maxWidth: this.settings.info_window_max_width };
        const d = L.popup(r2).setContent(this.scheduler.templates.map_info_content(i)), n = L.tooltip().setContent(i.text);
        let s = [i.lat, i.lng];
        i.lat && i.lng || (s = [this.settings.error_position.lat, this.settings.error_position.lng]);
        const _ = { event: i, marker: L.marker(s, { icon: t2 }).bindPopup(d).bindTooltip(n).addTo(this.map) };
        this._markers.push(_);
      }
      removeEventMarker(i) {
        for (let t2 = 0; t2 < this._markers.length; t2++)
          i == this._markers[t2].event.id && (this.map.removeLayer(this._markers[t2].marker), this._markers.splice(t2, 1), t2--);
      }
      updateEventMarker(i) {
        for (let t2 = 0; t2 < this._markers.length; t2++)
          this._markers[t2].event.id == i.id && (this._markers[t2].event = i, i.lat && i.lng ? this._markers[t2].marker.setLatLng([i.lat, i.lng]) : this._markers[t2].marker.setLatLng([this.settings.error_position.lat, this.settings.error_position.lng]));
      }
      clearEventMarkers() {
        if (this._markers) {
          for (let i = 0; i < this._markers.length; i++)
            this.map.removeLayer(this._markers[i].marker);
          this._markers = [];
        }
      }
      setView(i, t2, r2) {
        this.map.setView([i, t2], r2);
      }
      async resolveAddress(i) {
        let t2 = {}, r2 = await fetch(`https://nominatim.openstreetmap.org/search?q=${i}&format=json`, { method: "GET", headers: { "Accept-Language": "en" } }).then((d) => d.json());
        return r2 && r2.length ? (t2.lat = +r2[0].lat, t2.lng = +r2[0].lon) : console.error(`Unable recieve a position of the event's location: ${i}`), t2;
      }
    };
    La = class {
      constructor(i) {
        this.map = null, this._markers = [], this.scheduler = i;
      }
      onEventClick(i) {
        if (this._markers && this._markers.length > 0)
          for (let t2 = 0; t2 < this._markers.length; t2++) {
            const r2 = this._markers[t2].marker.getPopup();
            r2.isOpen() && r2.remove(), i.id == this._markers[t2].event.id && (this._markers[t2].marker.togglePopup(), i.lat && i.lng ? this.setView(i.lat, i.lng, this.settings.zoom_after_resolve || this.settings.initial_zoom) : this.setView(this.settings.error_position.lat, this.settings.error_position.lng, this.settings.zoom_after_resolve || this.settings.initial_zoom));
          }
      }
      initialize(i, t2) {
        let r2 = this.scheduler;
        mapboxgl.accessToken = t2.accessToken;
        const d = new mapboxgl.Map({ container: i, center: [t2.initial_position.lng, t2.initial_position.lat], zoom: t2.initial_zoom + 1 });
        d.on("dblclick", async function(n) {
          let s = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${n.lngLat.lng},${n.lngLat.lat}.json?access_token=${t2.accessToken}`).then((_) => _.json());
          if (s.features) {
            let _ = s.features[0].place_name;
            r2.addEventNow({ lat: n.lngLat.lat, lng: n.lngLat.lng, event_location: _, start_date: r2.getState().date, end_date: r2.date.add(r2.getState().date, r2.config.time_step, "minute") });
          } else
            console.error("unable recieve a position of the event");
        }), this.map = d, this.settings = t2;
      }
      destroy(i) {
        for (this.map.remove(); i.firstChild; )
          i.firstChild.remove();
        i.innerHTML = "";
      }
      addEventMarker(i) {
        let t2 = [i.lng, i.lat];
        i.lat && i.lng || (t2 = [this.settings.error_position.lng, this.settings.error_position.lat]);
        const r2 = new mapboxgl.Popup({ offset: 25, focusAfterOpen: false }).setMaxWidth(`${this.settings.info_window_max_width}px`).setHTML(this.scheduler.templates.map_info_content(i)), d = { event: i, marker: new mapboxgl.Marker().setLngLat(t2).setPopup(r2).addTo(this.map) };
        this._markers.push(d);
      }
      removeEventMarker(i) {
        for (let t2 = 0; t2 < this._markers.length; t2++)
          i == this._markers[t2].event.id && (this._markers[t2].marker.remove(), this._markers.splice(t2, 1), t2--);
      }
      updateEventMarker(i) {
        for (let t2 = 0; t2 < this._markers.length; t2++)
          this._markers[t2].event.id == i.id && (this._markers[t2].event = i, i.lat && i.lng ? this._markers[t2].marker.setLngLat([i.lng, i.lat]) : this._markers[t2].marker.setLngLat([this.settings.error_position.lng, this.settings.error_position.lat]));
      }
      clearEventMarkers() {
        for (let i = 0; i < this._markers.length; i++)
          this._markers[i].marker.remove();
        this._markers = [];
      }
      setView(i, t2, r2) {
        this.map.setCenter([t2, i]), this.map.setZoom(r2);
      }
      async resolveAddress(i) {
        let t2 = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${i}.json?access_token=${this.settings.accessToken}`).then((d) => d.json()), r2 = {};
        return t2 && t2.features.length ? (r2.lng = t2.features[0].center[0], r2.lat = t2.features[0].center[1]) : console.error(`Unable recieve a position of the event's location: ${i}`), r2;
      }
    };
    $e = ["MO", "TU", "WE", "TH", "FR", "SA", "SU"];
    K = function() {
      function e2(i, t2) {
        if (t2 === 0)
          throw new Error("Can't create weekday with n == 0");
        this.weekday = i, this.n = t2;
      }
      return e2.fromStr = function(i) {
        return new e2($e.indexOf(i));
      }, e2.prototype.nth = function(i) {
        return this.n === i ? this : new e2(this.weekday, i);
      }, e2.prototype.equals = function(i) {
        return this.weekday === i.weekday && this.n === i.n;
      }, e2.prototype.toString = function() {
        var i = $e[this.weekday];
        return this.n && (i = (this.n > 0 ? "+" : "") + String(this.n) + i), i;
      }, e2.prototype.getJsWeekday = function() {
        return this.weekday === 6 ? 0 : this.weekday + 1;
      }, e2;
    }();
    U = function(e2) {
      return e2 != null;
    };
    te = function(e2) {
      return typeof e2 == "number";
    };
    Ge = function(e2) {
      return typeof e2 == "string" && $e.includes(e2);
    };
    G = Array.isArray;
    ne = function(e2, i) {
      i === void 0 && (i = e2), arguments.length === 1 && (i = e2, e2 = 0);
      for (var t2 = [], r2 = e2; r2 < i; r2++)
        t2.push(r2);
      return t2;
    };
    I = function(e2, i) {
      var t2 = 0, r2 = [];
      if (G(e2))
        for (; t2 < i; t2++)
          r2[t2] = [].concat(e2);
      else
        for (; t2 < i; t2++)
          r2[t2] = e2;
      return r2;
    };
    Ha = function(e2, i, t2) {
      var r2 = e2.split(i);
      return t2 ? r2.slice(0, t2).concat([r2.slice(t2).join(i)]) : r2;
    };
    Z = function(e2, i) {
      var t2 = e2 % i;
      return t2 * i < 0 ? t2 + i : t2;
    };
    Ae = function(e2, i) {
      return { div: Math.floor(e2 / i), mod: Z(e2, i) };
    };
    ae = function(e2) {
      return !U(e2) || e2.length === 0;
    };
    B = function(e2) {
      return !ae(e2);
    };
    R = function(e2, i) {
      return B(e2) && e2.indexOf(i) !== -1;
    };
    he = function(e2, i, t2, r2, d, n) {
      return r2 === void 0 && (r2 = 0), d === void 0 && (d = 0), n === void 0 && (n = 0), new Date(Date.UTC(e2, i - 1, t2, r2, d, n));
    };
    $a = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    vt = 864e5;
    gt = 9999;
    yt = he(1970, 1, 1);
    za = [6, 0, 1, 2, 3, 4, 5];
    ge = function(e2) {
      return e2 % 4 == 0 && e2 % 100 != 0 || e2 % 400 == 0;
    };
    bt2 = function(e2) {
      return e2 instanceof Date;
    };
    ye = function(e2) {
      return bt2(e2) && !isNaN(e2.getTime());
    };
    ze = function(e2) {
      return i = yt, t2 = e2.getTime() - i.getTime(), Math.round(t2 / vt);
      var i, t2;
    };
    xt = function(e2) {
      return new Date(yt.getTime() + e2 * vt);
    };
    qa = function(e2) {
      var i = e2.getUTCMonth();
      return i === 1 && ge(e2.getUTCFullYear()) ? 29 : $a[i];
    };
    me = function(e2) {
      return za[e2.getUTCDay()];
    };
    Xe = function(e2, i) {
      var t2 = he(e2, i + 1, 1);
      return [me(t2), qa(t2)];
    };
    kt = function(e2, i) {
      return i = i || e2, new Date(Date.UTC(e2.getUTCFullYear(), e2.getUTCMonth(), e2.getUTCDate(), i.getHours(), i.getMinutes(), i.getSeconds(), i.getMilliseconds()));
    };
    qe = function(e2) {
      return new Date(e2.getTime());
    };
    Ze = function(e2) {
      for (var i = [], t2 = 0; t2 < e2.length; t2++)
        i.push(qe(e2[t2]));
      return i;
    };
    be = function(e2) {
      e2.sort(function(i, t2) {
        return i.getTime() - t2.getTime();
      });
    };
    Ve = function(e2, i) {
      i === void 0 && (i = true);
      var t2 = new Date(e2);
      return [ue(t2.getUTCFullYear().toString(), 4, "0"), ue(t2.getUTCMonth() + 1, 2, "0"), ue(t2.getUTCDate(), 2, "0"), "T", ue(t2.getUTCHours(), 2, "0"), ue(t2.getUTCMinutes(), 2, "0"), ue(t2.getUTCSeconds(), 2, "0"), i ? "Z" : ""].join("");
    };
    Be = function(e2) {
      var i = /^(\d{4})(\d{2})(\d{2})(T(\d{2})(\d{2})(\d{2})Z?)?$/.exec(e2);
      if (!i)
        throw new Error("Invalid UNTIL value: ".concat(e2));
      return new Date(Date.UTC(parseInt(i[1], 10), parseInt(i[2], 10) - 1, parseInt(i[3], 10), parseInt(i[5], 10) || 0, parseInt(i[6], 10) || 0, parseInt(i[7], 10) || 0));
    };
    Qe = function(e2, i) {
      return e2.toLocaleString("sv-SE", { timeZone: i }).replace(" ", "T") + "Z";
    };
    pe = function() {
      function e2(i, t2) {
        this.minDate = null, this.maxDate = null, this._result = [], this.total = 0, this.method = i, this.args = t2, i === "between" ? (this.maxDate = t2.inc ? t2.before : new Date(t2.before.getTime() - 1), this.minDate = t2.inc ? t2.after : new Date(t2.after.getTime() + 1)) : i === "before" ? this.maxDate = t2.inc ? t2.dt : new Date(t2.dt.getTime() - 1) : i === "after" && (this.minDate = t2.inc ? t2.dt : new Date(t2.dt.getTime() + 1));
      }
      return e2.prototype.accept = function(i) {
        ++this.total;
        var t2 = this.minDate && i < this.minDate, r2 = this.maxDate && i > this.maxDate;
        if (this.method === "between") {
          if (t2)
            return true;
          if (r2)
            return false;
        } else if (this.method === "before") {
          if (r2)
            return false;
        } else if (this.method === "after")
          return !!t2 || (this.add(i), false);
        return this.add(i);
      }, e2.prototype.add = function(i) {
        return this._result.push(i), true;
      }, e2.prototype.getValue = function() {
        var i = this._result;
        switch (this.method) {
          case "all":
          case "between":
            return i;
          default:
            return i.length ? i[i.length - 1] : null;
        }
      }, e2.prototype.clone = function() {
        return new e2(this.method, this.args);
      }, e2;
    }();
    je = function(e2, i) {
      return je = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t2, r2) {
        t2.__proto__ = r2;
      } || function(t2, r2) {
        for (var d in r2)
          Object.prototype.hasOwnProperty.call(r2, d) && (t2[d] = r2[d]);
      }, je(e2, i);
    };
    X = function() {
      return X = Object.assign || function(e2) {
        for (var i, t2 = 1, r2 = arguments.length; t2 < r2; t2++)
          for (var d in i = arguments[t2])
            Object.prototype.hasOwnProperty.call(i, d) && (e2[d] = i[d]);
        return e2;
      }, X.apply(this, arguments);
    };
    et = function(e2) {
      function i(t2, r2, d) {
        var n = e2.call(this, t2, r2) || this;
        return n.iterator = d, n;
      }
      return Fe(i, e2), i.prototype.add = function(t2) {
        return !!this.iterator(t2, this._result.length) && (this._result.push(t2), true);
      }, i;
    }(pe);
    ke = { dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], tokens: { SKIP: /^[ \r\n\t]+|^\.$/, number: /^[1-9][0-9]*/, numberAsText: /^(one|two|three)/i, every: /^every/i, "day(s)": /^days?/i, "weekday(s)": /^weekdays?/i, "week(s)": /^weeks?/i, "hour(s)": /^hours?/i, "minute(s)": /^minutes?/i, "month(s)": /^months?/i, "year(s)": /^years?/i, on: /^(on|in)/i, at: /^(at)/i, the: /^the/i, first: /^first/i, second: /^second/i, third: /^third/i, nth: /^([1-9][0-9]*)(\.|th|nd|rd|st)/i, last: /^last/i, for: /^for/i, "time(s)": /^times?/i, until: /^(un)?til/i, monday: /^mo(n(day)?)?/i, tuesday: /^tu(e(s(day)?)?)?/i, wednesday: /^we(d(n(esday)?)?)?/i, thursday: /^th(u(r(sday)?)?)?/i, friday: /^fr(i(day)?)?/i, saturday: /^sa(t(urday)?)?/i, sunday: /^su(n(day)?)?/i, january: /^jan(uary)?/i, february: /^feb(ruary)?/i, march: /^mar(ch)?/i, april: /^apr(il)?/i, may: /^may/i, june: /^june?/i, july: /^july?/i, august: /^aug(ust)?/i, september: /^sep(t(ember)?)?/i, october: /^oct(ober)?/i, november: /^nov(ember)?/i, december: /^dec(ember)?/i, comma: /^(,\s*|(and|or)\s*)+/i } };
    tt = function(e2, i) {
      return e2.indexOf(i) !== -1;
    };
    ja = function(e2) {
      return e2.toString();
    };
    Ia = function(e2, i, t2) {
      return "".concat(i, " ").concat(t2, ", ").concat(e2);
    };
    ie = function() {
      function e2(i, t2, r2, d) {
        if (t2 === void 0 && (t2 = ja), r2 === void 0 && (r2 = ke), d === void 0 && (d = Ia), this.text = [], this.language = r2 || ke, this.gettext = t2, this.dateFormatter = d, this.rrule = i, this.options = i.options, this.origOptions = i.origOptions, this.origOptions.bymonthday) {
          var n = [].concat(this.options.bymonthday), s = [].concat(this.options.bynmonthday);
          n.sort(function(l, h) {
            return l - h;
          }), s.sort(function(l, h) {
            return h - l;
          }), this.bymonthday = n.concat(s), this.bymonthday.length || (this.bymonthday = null);
        }
        if (U(this.origOptions.byweekday)) {
          var _ = G(this.origOptions.byweekday) ? this.origOptions.byweekday : [this.origOptions.byweekday], a2 = String(_);
          this.byweekday = { allWeeks: _.filter(function(l) {
            return !l.n;
          }), someWeeks: _.filter(function(l) {
            return !!l.n;
          }), isWeekdays: a2.indexOf("MO") !== -1 && a2.indexOf("TU") !== -1 && a2.indexOf("WE") !== -1 && a2.indexOf("TH") !== -1 && a2.indexOf("FR") !== -1 && a2.indexOf("SA") === -1 && a2.indexOf("SU") === -1, isEveryDay: a2.indexOf("MO") !== -1 && a2.indexOf("TU") !== -1 && a2.indexOf("WE") !== -1 && a2.indexOf("TH") !== -1 && a2.indexOf("FR") !== -1 && a2.indexOf("SA") !== -1 && a2.indexOf("SU") !== -1 };
          var o2 = function(l, h) {
            return l.weekday - h.weekday;
          };
          this.byweekday.allWeeks.sort(o2), this.byweekday.someWeeks.sort(o2), this.byweekday.allWeeks.length || (this.byweekday.allWeeks = null), this.byweekday.someWeeks.length || (this.byweekday.someWeeks = null);
        } else
          this.byweekday = null;
      }
      return e2.isFullyConvertible = function(i) {
        if (!(i.options.freq in e2.IMPLEMENTED) || i.origOptions.until && i.origOptions.count)
          return false;
        for (var t2 in i.origOptions) {
          if (tt(["dtstart", "tzid", "wkst", "freq"], t2))
            return true;
          if (!tt(e2.IMPLEMENTED[i.options.freq], t2))
            return false;
        }
        return true;
      }, e2.prototype.isFullyConvertible = function() {
        return e2.isFullyConvertible(this.rrule);
      }, e2.prototype.toString = function() {
        var i = this.gettext;
        if (!(this.options.freq in e2.IMPLEMENTED))
          return i("RRule error: Unable to fully convert this rrule to text");
        if (this.text = [i("every")], this[C.FREQUENCIES[this.options.freq]](), this.options.until) {
          this.add(i("until"));
          var t2 = this.options.until;
          this.add(this.dateFormatter(t2.getUTCFullYear(), this.language.monthNames[t2.getUTCMonth()], t2.getUTCDate()));
        } else
          this.options.count && this.add(i("for")).add(this.options.count.toString()).add(this.plural(this.options.count) ? i("times") : i("time"));
        return this.isFullyConvertible() || this.add(i("(~ approximate)")), this.text.join("");
      }, e2.prototype.HOURLY = function() {
        var i = this.gettext;
        this.options.interval !== 1 && this.add(this.options.interval.toString()), this.add(this.plural(this.options.interval) ? i("hours") : i("hour"));
      }, e2.prototype.MINUTELY = function() {
        var i = this.gettext;
        this.options.interval !== 1 && this.add(this.options.interval.toString()), this.add(this.plural(this.options.interval) ? i("minutes") : i("minute"));
      }, e2.prototype.DAILY = function() {
        var i = this.gettext;
        this.options.interval !== 1 && this.add(this.options.interval.toString()), this.byweekday && this.byweekday.isWeekdays ? this.add(this.plural(this.options.interval) ? i("weekdays") : i("weekday")) : this.add(this.plural(this.options.interval) ? i("days") : i("day")), this.origOptions.bymonth && (this.add(i("in")), this._bymonth()), this.bymonthday ? this._bymonthday() : this.byweekday ? this._byweekday() : this.origOptions.byhour && this._byhour();
      }, e2.prototype.WEEKLY = function() {
        var i = this.gettext;
        this.options.interval !== 1 && this.add(this.options.interval.toString()).add(this.plural(this.options.interval) ? i("weeks") : i("week")), this.byweekday && this.byweekday.isWeekdays ? this.options.interval === 1 ? this.add(this.plural(this.options.interval) ? i("weekdays") : i("weekday")) : this.add(i("on")).add(i("weekdays")) : this.byweekday && this.byweekday.isEveryDay ? this.add(this.plural(this.options.interval) ? i("days") : i("day")) : (this.options.interval === 1 && this.add(i("week")), this.origOptions.bymonth && (this.add(i("in")), this._bymonth()), this.bymonthday ? this._bymonthday() : this.byweekday && this._byweekday(), this.origOptions.byhour && this._byhour());
      }, e2.prototype.MONTHLY = function() {
        var i = this.gettext;
        this.origOptions.bymonth ? (this.options.interval !== 1 && (this.add(this.options.interval.toString()).add(i("months")), this.plural(this.options.interval) && this.add(i("in"))), this._bymonth()) : (this.options.interval !== 1 && this.add(this.options.interval.toString()), this.add(this.plural(this.options.interval) ? i("months") : i("month"))), this.bymonthday ? this._bymonthday() : this.byweekday && this.byweekday.isWeekdays ? this.add(i("on")).add(i("weekdays")) : this.byweekday && this._byweekday();
      }, e2.prototype.YEARLY = function() {
        var i = this.gettext;
        this.origOptions.bymonth ? (this.options.interval !== 1 && (this.add(this.options.interval.toString()), this.add(i("years"))), this._bymonth()) : (this.options.interval !== 1 && this.add(this.options.interval.toString()), this.add(this.plural(this.options.interval) ? i("years") : i("year"))), this.bymonthday ? this._bymonthday() : this.byweekday && this._byweekday(), this.options.byyearday && this.add(i("on the")).add(this.list(this.options.byyearday, this.nth, i("and"))).add(i("day")), this.options.byweekno && this.add(i("in")).add(this.plural(this.options.byweekno.length) ? i("weeks") : i("week")).add(this.list(this.options.byweekno, void 0, i("and")));
      }, e2.prototype._bymonthday = function() {
        var i = this.gettext;
        this.byweekday && this.byweekday.allWeeks ? this.add(i("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext, i("or"))).add(i("the")).add(this.list(this.bymonthday, this.nth, i("or"))) : this.add(i("on the")).add(this.list(this.bymonthday, this.nth, i("and")));
      }, e2.prototype._byweekday = function() {
        var i = this.gettext;
        this.byweekday.allWeeks && !this.byweekday.isWeekdays && this.add(i("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext)), this.byweekday.someWeeks && (this.byweekday.allWeeks && this.add(i("and")), this.add(i("on the")).add(this.list(this.byweekday.someWeeks, this.weekdaytext, i("and"))));
      }, e2.prototype._byhour = function() {
        var i = this.gettext;
        this.add(i("at")).add(this.list(this.origOptions.byhour, void 0, i("and")));
      }, e2.prototype._bymonth = function() {
        this.add(this.list(this.options.bymonth, this.monthtext, this.gettext("and")));
      }, e2.prototype.nth = function(i) {
        var t2;
        i = parseInt(i.toString(), 10);
        var r2 = this.gettext;
        if (i === -1)
          return r2("last");
        var d = Math.abs(i);
        switch (d) {
          case 1:
          case 21:
          case 31:
            t2 = d + r2("st");
            break;
          case 2:
          case 22:
            t2 = d + r2("nd");
            break;
          case 3:
          case 23:
            t2 = d + r2("rd");
            break;
          default:
            t2 = d + r2("th");
        }
        return i < 0 ? t2 + " " + r2("last") : t2;
      }, e2.prototype.monthtext = function(i) {
        return this.language.monthNames[i - 1];
      }, e2.prototype.weekdaytext = function(i) {
        var t2 = te(i) ? (i + 1) % 7 : i.getJsWeekday();
        return (i.n ? this.nth(i.n) + " " : "") + this.language.dayNames[t2];
      }, e2.prototype.plural = function(i) {
        return i % 100 != 1;
      }, e2.prototype.add = function(i) {
        return this.text.push(" "), this.text.push(i), this;
      }, e2.prototype.list = function(i, t2, r2, d) {
        var n = this;
        d === void 0 && (d = ","), G(i) || (i = [i]), t2 = t2 || function(_) {
          return _.toString();
        };
        var s = function(_) {
          return t2 && t2.call(n, _);
        };
        return r2 ? function(_, a2, o2) {
          for (var l = "", h = 0; h < _.length; h++)
            h !== 0 && (h === _.length - 1 ? l += " " + o2 + " " : l += a2 + " "), l += _[h];
          return l;
        }(i.map(s), d, r2) : i.map(s).join(d + " ");
      }, e2;
    }();
    Pa = function() {
      function e2(i) {
        this.done = true, this.rules = i;
      }
      return e2.prototype.start = function(i) {
        return this.text = i, this.done = false, this.nextSymbol();
      }, e2.prototype.isDone = function() {
        return this.done && this.symbol === null;
      }, e2.prototype.nextSymbol = function() {
        var i, t2;
        this.symbol = null, this.value = null;
        do {
          if (this.done)
            return false;
          for (var r2 in i = null, this.rules) {
            var d = this.rules[r2].exec(this.text);
            d && (i === null || d[0].length > i[0].length) && (i = d, t2 = r2);
          }
          if (i != null && (this.text = this.text.substr(i[0].length), this.text === "" && (this.done = true)), i == null)
            return this.done = true, this.symbol = null, void (this.value = null);
        } while (t2 === "SKIP");
        return this.symbol = t2, this.value = i, true;
      }, e2.prototype.accept = function(i) {
        if (this.symbol === i) {
          if (this.value) {
            var t2 = this.value;
            return this.nextSymbol(), t2;
          }
          return this.nextSymbol(), true;
        }
        return false;
      }, e2.prototype.acceptNumber = function() {
        return this.accept("number");
      }, e2.prototype.expect = function(i) {
        if (this.accept(i))
          return true;
        throw new Error("expected " + i + " but found " + this.symbol);
      }, e2;
    }();
    (function(e2) {
      e2[e2.YEARLY = 0] = "YEARLY", e2[e2.MONTHLY = 1] = "MONTHLY", e2[e2.WEEKLY = 2] = "WEEKLY", e2[e2.DAILY = 3] = "DAILY", e2[e2.HOURLY = 4] = "HOURLY", e2[e2.MINUTELY = 5] = "MINUTELY", e2[e2.SECONDLY = 6] = "SECONDLY";
    })(P || (P = {}));
    Ra = function(e2, i) {
      return i === void 0 && (i = ke), new C(wt(e2, i) || void 0);
    };
    fe = ["count", "until", "interval", "byweekday", "bymonthday", "bymonth"];
    ie.IMPLEMENTED = [], ie.IMPLEMENTED[P.HOURLY] = fe, ie.IMPLEMENTED[P.MINUTELY] = fe, ie.IMPLEMENTED[P.DAILY] = ["byhour"].concat(fe), ie.IMPLEMENTED[P.WEEKLY] = fe, ie.IMPLEMENTED[P.MONTHLY] = fe, ie.IMPLEMENTED[P.YEARLY] = ["byweekno", "byyearday"].concat(fe);
    Ya = ie.isFullyConvertible;
    we = function() {
      function e2(i, t2, r2, d) {
        this.hour = i, this.minute = t2, this.second = r2, this.millisecond = d || 0;
      }
      return e2.prototype.getHours = function() {
        return this.hour;
      }, e2.prototype.getMinutes = function() {
        return this.minute;
      }, e2.prototype.getSeconds = function() {
        return this.second;
      }, e2.prototype.getMilliseconds = function() {
        return this.millisecond;
      }, e2.prototype.getTime = function() {
        return 1e3 * (60 * this.hour * 60 + 60 * this.minute + this.second) + this.millisecond;
      }, e2;
    }();
    Ua = function(e2) {
      function i(t2, r2, d, n, s, _, a2) {
        var o2 = e2.call(this, n, s, _, a2) || this;
        return o2.year = t2, o2.month = r2, o2.day = d, o2;
      }
      return Fe(i, e2), i.fromDate = function(t2) {
        return new this(t2.getUTCFullYear(), t2.getUTCMonth() + 1, t2.getUTCDate(), t2.getUTCHours(), t2.getUTCMinutes(), t2.getUTCSeconds(), t2.valueOf() % 1e3);
      }, i.prototype.getWeekday = function() {
        return me(new Date(this.getTime()));
      }, i.prototype.getTime = function() {
        return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)).getTime();
      }, i.prototype.getDay = function() {
        return this.day;
      }, i.prototype.getMonth = function() {
        return this.month;
      }, i.prototype.getYear = function() {
        return this.year;
      }, i.prototype.addYears = function(t2) {
        this.year += t2;
      }, i.prototype.addMonths = function(t2) {
        if (this.month += t2, this.month > 12) {
          var r2 = Math.floor(this.month / 12), d = Z(this.month, 12);
          this.month = d, this.year += r2, this.month === 0 && (this.month = 12, --this.year);
        }
      }, i.prototype.addWeekly = function(t2, r2) {
        r2 > this.getWeekday() ? this.day += -(this.getWeekday() + 1 + (6 - r2)) + 7 * t2 : this.day += -(this.getWeekday() - r2) + 7 * t2, this.fixDay();
      }, i.prototype.addDaily = function(t2) {
        this.day += t2, this.fixDay();
      }, i.prototype.addHours = function(t2, r2, d) {
        for (r2 && (this.hour += Math.floor((23 - this.hour) / t2) * t2); ; ) {
          this.hour += t2;
          var n = Ae(this.hour, 24), s = n.div, _ = n.mod;
          if (s && (this.hour = _, this.addDaily(s)), ae(d) || R(d, this.hour))
            break;
        }
      }, i.prototype.addMinutes = function(t2, r2, d, n) {
        for (r2 && (this.minute += Math.floor((1439 - (60 * this.hour + this.minute)) / t2) * t2); ; ) {
          this.minute += t2;
          var s = Ae(this.minute, 60), _ = s.div, a2 = s.mod;
          if (_ && (this.minute = a2, this.addHours(_, false, d)), (ae(d) || R(d, this.hour)) && (ae(n) || R(n, this.minute)))
            break;
        }
      }, i.prototype.addSeconds = function(t2, r2, d, n, s) {
        for (r2 && (this.second += Math.floor((86399 - (3600 * this.hour + 60 * this.minute + this.second)) / t2) * t2); ; ) {
          this.second += t2;
          var _ = Ae(this.second, 60), a2 = _.div, o2 = _.mod;
          if (a2 && (this.second = o2, this.addMinutes(a2, false, d, n)), (ae(d) || R(d, this.hour)) && (ae(n) || R(n, this.minute)) && (ae(s) || R(s, this.second)))
            break;
        }
      }, i.prototype.fixDay = function() {
        if (!(this.day <= 28)) {
          var t2 = Xe(this.year, this.month - 1)[1];
          if (!(this.day <= t2))
            for (; this.day > t2; ) {
              if (this.day -= t2, ++this.month, this.month === 13 && (this.month = 1, ++this.year, this.year > gt))
                return;
              t2 = Xe(this.year, this.month - 1)[1];
            }
        }
      }, i.prototype.add = function(t2, r2) {
        var d = t2.freq, n = t2.interval, s = t2.wkst, _ = t2.byhour, a2 = t2.byminute, o2 = t2.bysecond;
        switch (d) {
          case P.YEARLY:
            return this.addYears(n);
          case P.MONTHLY:
            return this.addMonths(n);
          case P.WEEKLY:
            return this.addWeekly(n, s);
          case P.DAILY:
            return this.addDaily(n);
          case P.HOURLY:
            return this.addHours(n, r2, _);
          case P.MINUTELY:
            return this.addMinutes(n, r2, _, a2);
          case P.SECONDLY:
            return this.addSeconds(n, r2, _, a2, o2);
        }
      }, i;
    }(we);
    De = function() {
      function e2(i, t2) {
        if (isNaN(i.getTime()))
          throw new RangeError("Invalid date passed to DateWithZone");
        this.date = i, this.tzid = t2;
      }
      return Object.defineProperty(e2.prototype, "isUTC", { get: function() {
        return !this.tzid || this.tzid.toUpperCase() === "UTC";
      }, enumerable: false, configurable: true }), e2.prototype.toString = function() {
        var i = Ve(this.date.getTime(), this.isUTC);
        return this.isUTC ? ":".concat(i) : ";TZID=".concat(this.tzid, ":").concat(i);
      }, e2.prototype.getTime = function() {
        return this.date.getTime();
      }, e2.prototype.rezonedDate = function() {
        return this.isUTC ? this.date : (i = this.date, t2 = this.tzid, r2 = Intl.DateTimeFormat().resolvedOptions().timeZone, d = new Date(Qe(i, r2)), n = new Date(Qe(i, t2 ?? "UTC")).getTime() - d.getTime(), new Date(i.getTime() - n));
        var i, t2, r2, d, n;
      }, e2;
    }();
    Wa = function() {
      function e2() {
        this.all = false, this.before = [], this.after = [], this.between = [];
      }
      return e2.prototype._cacheAdd = function(i, t2, r2) {
        t2 && (t2 = t2 instanceof Date ? qe(t2) : Ze(t2)), i === "all" ? this.all = t2 : (r2._value = t2, this[i].push(r2));
      }, e2.prototype._cacheGet = function(i, t2) {
        var r2 = false, d = t2 ? Object.keys(t2) : [], n = function(l) {
          for (var h = 0; h < d.length; h++) {
            var v = d[h];
            if (!Ja(t2[v], l[v]))
              return true;
          }
          return false;
        }, s = this[i];
        if (i === "all")
          r2 = this.all;
        else if (G(s))
          for (var _ = 0; _ < s.length; _++) {
            var a2 = s[_];
            if (!d.length || !n(a2)) {
              r2 = a2._value;
              break;
            }
          }
        if (!r2 && this.all) {
          var o2 = new pe(i, t2);
          for (_ = 0; _ < this.all.length && o2.accept(this.all[_]); _++)
            ;
          r2 = o2.getValue(), this._cacheAdd(i, r2, t2);
        }
        return G(r2) ? Ze(r2) : r2 instanceof Date ? qe(r2) : r2;
      }, e2;
    }();
    Ka = O(O(O(O(O(O(O(O(O(O(O(O(O([], I(1, 31), true), I(2, 28), true), I(3, 31), true), I(4, 30), true), I(5, 31), true), I(6, 30), true), I(7, 31), true), I(8, 31), true), I(9, 30), true), I(10, 31), true), I(11, 30), true), I(12, 31), true), I(1, 7), true);
    Ga = O(O(O(O(O(O(O(O(O(O(O(O(O([], I(1, 31), true), I(2, 29), true), I(3, 31), true), I(4, 30), true), I(5, 31), true), I(6, 30), true), I(7, 31), true), I(8, 31), true), I(9, 30), true), I(10, 31), true), I(11, 30), true), I(12, 31), true), I(1, 7), true);
    Xa = ne(1, 29);
    Za = ne(1, 30);
    le = ne(1, 31);
    F = ne(1, 32);
    Qa = O(O(O(O(O(O(O(O(O(O(O(O(O([], F, true), Za, true), F, true), le, true), F, true), le, true), F, true), F, true), le, true), F, true), le, true), F, true), F.slice(0, 7), true);
    en = O(O(O(O(O(O(O(O(O(O(O(O(O([], F, true), Xa, true), F, true), le, true), F, true), le, true), F, true), F, true), le, true), F, true), le, true), F, true), F.slice(0, 7), true);
    tn = ne(-28, 0);
    an = ne(-29, 0);
    ce = ne(-30, 0);
    J = ne(-31, 0);
    nn = O(O(O(O(O(O(O(O(O(O(O(O(O([], J, true), an, true), J, true), ce, true), J, true), ce, true), J, true), J, true), ce, true), J, true), ce, true), J, true), J.slice(0, 7), true);
    rn = O(O(O(O(O(O(O(O(O(O(O(O(O([], J, true), tn, true), J, true), ce, true), J, true), ce, true), J, true), J, true), ce, true), J, true), ce, true), J, true), J.slice(0, 7), true);
    on = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];
    sn = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
    rt = function() {
      for (var e2 = [], i = 0; i < 55; i++)
        e2 = e2.concat(ne(7));
      return e2;
    }();
    _n = function() {
      function e2(i) {
        this.options = i;
      }
      return e2.prototype.rebuild = function(i, t2) {
        var r2 = this.options;
        if (i !== this.lastyear && (this.yearinfo = dn(i, r2)), B(r2.bynweekday) && (t2 !== this.lastmonth || i !== this.lastyear)) {
          var d = this.yearinfo, n = d.yearlen, s = d.mrange, _ = d.wdaymask;
          this.monthinfo = function(a2, o2, l, h, v, u) {
            var f = { lastyear: a2, lastmonth: o2, nwdaymask: [] }, c2 = [];
            if (u.freq === C.YEARLY)
              if (ae(u.bymonth))
                c2 = [[0, l]];
              else
                for (var p = 0; p < u.bymonth.length; p++)
                  o2 = u.bymonth[p], c2.push(h.slice(o2 - 1, o2 + 1));
            else
              u.freq === C.MONTHLY && (c2 = [h.slice(o2 - 1, o2 + 1)]);
            if (ae(c2))
              return f;
            for (f.nwdaymask = I(0, l), p = 0; p < c2.length; p++)
              for (var m = c2[p], g = m[0], y2 = m[1] - 1, x = 0; x < u.bynweekday.length; x++) {
                var b = void 0, k = u.bynweekday[x], E = k[0], D = k[1];
                D < 0 ? (b = y2 + 7 * (D + 1), b -= Z(v[b] - E, 7)) : (b = g + 7 * (D - 1), b += Z(7 - v[b] + E, 7)), g <= b && b <= y2 && (f.nwdaymask[b] = 1);
              }
            return f;
          }(i, t2, n, s, _, r2);
        }
        U(r2.byeaster) && (this.eastermask = function(a2, o2) {
          o2 === void 0 && (o2 = 0);
          var l = a2 % 19, h = Math.floor(a2 / 100), v = a2 % 100, u = Math.floor(h / 4), f = h % 4, c2 = Math.floor((h + 8) / 25), p = Math.floor((h - c2 + 1) / 3), m = Math.floor(19 * l + h - u - p + 15) % 30, g = Math.floor(v / 4), y2 = v % 4, x = Math.floor(32 + 2 * f + 2 * g - m - y2) % 7, b = Math.floor((l + 11 * m + 22 * x) / 451), k = Math.floor((m + x - 7 * b + 114) / 31), E = (m + x - 7 * b + 114) % 31 + 1, D = Date.UTC(a2, k - 1, E + o2), w = Date.UTC(a2, 0, 1);
          return [Math.ceil((D - w) / 864e5)];
        }(i, r2.byeaster));
      }, Object.defineProperty(e2.prototype, "lastyear", { get: function() {
        return this.monthinfo ? this.monthinfo.lastyear : null;
      }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "lastmonth", { get: function() {
        return this.monthinfo ? this.monthinfo.lastmonth : null;
      }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "yearlen", { get: function() {
        return this.yearinfo.yearlen;
      }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "yearordinal", { get: function() {
        return this.yearinfo.yearordinal;
      }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "mrange", { get: function() {
        return this.yearinfo.mrange;
      }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "wdaymask", { get: function() {
        return this.yearinfo.wdaymask;
      }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "mmask", { get: function() {
        return this.yearinfo.mmask;
      }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "wnomask", { get: function() {
        return this.yearinfo.wnomask;
      }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "nwdaymask", { get: function() {
        return this.monthinfo ? this.monthinfo.nwdaymask : [];
      }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "nextyearlen", { get: function() {
        return this.yearinfo.nextyearlen;
      }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "mdaymask", { get: function() {
        return this.yearinfo.mdaymask;
      }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "nmdaymask", { get: function() {
        return this.yearinfo.nmdaymask;
      }, enumerable: false, configurable: true }), e2.prototype.ydayset = function() {
        return [ne(this.yearlen), 0, this.yearlen];
      }, e2.prototype.mdayset = function(i, t2) {
        for (var r2 = this.mrange[t2 - 1], d = this.mrange[t2], n = I(null, this.yearlen), s = r2; s < d; s++)
          n[s] = s;
        return [n, r2, d];
      }, e2.prototype.wdayset = function(i, t2, r2) {
        for (var d = I(null, this.yearlen + 7), n = ze(he(i, t2, r2)) - this.yearordinal, s = n, _ = 0; _ < 7 && (d[n] = n, ++n, this.wdaymask[n] !== this.options.wkst); _++)
          ;
        return [d, s, n];
      }, e2.prototype.ddayset = function(i, t2, r2) {
        var d = I(null, this.yearlen), n = ze(he(i, t2, r2)) - this.yearordinal;
        return d[n] = n, [d, n, n + 1];
      }, e2.prototype.htimeset = function(i, t2, r2, d) {
        var n = this, s = [];
        return this.options.byminute.forEach(function(_) {
          s = s.concat(n.mtimeset(i, _, r2, d));
        }), be(s), s;
      }, e2.prototype.mtimeset = function(i, t2, r2, d) {
        var n = this.options.bysecond.map(function(s) {
          return new we(i, t2, s, d);
        });
        return be(n), n;
      }, e2.prototype.stimeset = function(i, t2, r2, d) {
        return [new we(i, t2, r2, d)];
      }, e2.prototype.getdayset = function(i) {
        switch (i) {
          case P.YEARLY:
            return this.ydayset.bind(this);
          case P.MONTHLY:
            return this.mdayset.bind(this);
          case P.WEEKLY:
            return this.wdayset.bind(this);
          case P.DAILY:
          default:
            return this.ddayset.bind(this);
        }
      }, e2.prototype.gettimeset = function(i) {
        switch (i) {
          case P.HOURLY:
            return this.htimeset.bind(this);
          case P.MINUTELY:
            return this.mtimeset.bind(this);
          case P.SECONDLY:
            return this.stimeset.bind(this);
        }
      }, e2;
    }();
    Q = { MO: new K(0), TU: new K(1), WE: new K(2), TH: new K(3), FR: new K(4), SA: new K(5), SU: new K(6) };
    Je = { freq: P.YEARLY, dtstart: null, interval: 1, wkst: Q.MO, count: null, until: null, tzid: null, bysetpos: null, bymonth: null, bymonthday: null, bynmonthday: null, byyearday: null, byweekno: null, byweekday: null, bynweekday: null, byhour: null, byminute: null, bysecond: null, byeaster: null };
    un = Object.keys(Je);
    C = function() {
      function e2(i, t2) {
        i === void 0 && (i = {}), t2 === void 0 && (t2 = false), this._cache = t2 ? null : new Wa(), this.origOptions = Et(i);
        var r2 = Va(i).parsedOptions;
        this.options = r2;
      }
      return e2.parseText = function(i, t2) {
        return wt(i, t2);
      }, e2.fromText = function(i, t2) {
        return Ra(i, t2);
      }, e2.fromString = function(i) {
        return new e2(e2.parseString(i) || void 0);
      }, e2.prototype._iter = function(i) {
        return Dt2(i, this.options);
      }, e2.prototype._cacheGet = function(i, t2) {
        return !!this._cache && this._cache._cacheGet(i, t2);
      }, e2.prototype._cacheAdd = function(i, t2, r2) {
        if (this._cache)
          return this._cache._cacheAdd(i, t2, r2);
      }, e2.prototype.all = function(i) {
        if (i)
          return this._iter(new et("all", {}, i));
        var t2 = this._cacheGet("all");
        return t2 === false && (t2 = this._iter(new pe("all", {})), this._cacheAdd("all", t2)), t2;
      }, e2.prototype.between = function(i, t2, r2, d) {
        if (r2 === void 0 && (r2 = false), !ye(i) || !ye(t2))
          throw new Error("Invalid date passed in to RRule.between");
        var n = { before: t2, after: i, inc: r2 };
        if (d)
          return this._iter(new et("between", n, d));
        var s = this._cacheGet("between", n);
        return s === false && (s = this._iter(new pe("between", n)), this._cacheAdd("between", s, n)), s;
      }, e2.prototype.before = function(i, t2) {
        if (t2 === void 0 && (t2 = false), !ye(i))
          throw new Error("Invalid date passed in to RRule.before");
        var r2 = { dt: i, inc: t2 }, d = this._cacheGet("before", r2);
        return d === false && (d = this._iter(new pe("before", r2)), this._cacheAdd("before", d, r2)), d;
      }, e2.prototype.after = function(i, t2) {
        if (t2 === void 0 && (t2 = false), !ye(i))
          throw new Error("Invalid date passed in to RRule.after");
        var r2 = { dt: i, inc: t2 }, d = this._cacheGet("after", r2);
        return d === false && (d = this._iter(new pe("after", r2)), this._cacheAdd("after", d, r2)), d;
      }, e2.prototype.count = function() {
        return this.all().length;
      }, e2.prototype.toString = function() {
        return Pe(this.origOptions);
      }, e2.prototype.toText = function(i, t2, r2) {
        return function(d, n, s, _) {
          return new ie(d, n, s, _).toString();
        }(this, i, t2, r2);
      }, e2.prototype.isFullyConvertibleToText = function() {
        return Ya(this);
      }, e2.prototype.clone = function() {
        return new e2(this.origOptions);
      }, e2.FREQUENCIES = ["YEARLY", "MONTHLY", "WEEKLY", "DAILY", "HOURLY", "MINUTELY", "SECONDLY"], e2.YEARLY = P.YEARLY, e2.MONTHLY = P.MONTHLY, e2.WEEKLY = P.WEEKLY, e2.DAILY = P.DAILY, e2.HOURLY = P.HOURLY, e2.MINUTELY = P.MINUTELY, e2.SECONDLY = P.SECONDLY, e2.MO = Q.MO, e2.TU = Q.TU, e2.WE = Q.WE, e2.TH = Q.TH, e2.FR = Q.FR, e2.SA = Q.SA, e2.SU = Q.SU, e2.parseString = Ie, e2.optionsToString = Pe, e2;
    }();
    ot = { dtstart: null, cache: false, unfold: false, forceset: false, compatible: false, tzid: null };
    pn = function(e2) {
      function i(t2) {
        t2 === void 0 && (t2 = false);
        var r2 = e2.call(this, {}, t2) || this;
        return r2.dtstart = dt.apply(r2, ["dtstart"]), r2.tzid = dt.apply(r2, ["tzid"]), r2._rrule = [], r2._rdate = [], r2._exrule = [], r2._exdate = [], r2;
      }
      return Fe(i, e2), i.prototype._iter = function(t2) {
        return function(r2, d, n, s, _, a2) {
          var o2 = {}, l = r2.accept;
          function h(c2, p) {
            n.forEach(function(m) {
              m.between(c2, p, true).forEach(function(g) {
                o2[Number(g)] = true;
              });
            });
          }
          _.forEach(function(c2) {
            var p = new De(c2, a2).rezonedDate();
            o2[Number(p)] = true;
          }), r2.accept = function(c2) {
            var p = Number(c2);
            return isNaN(p) ? l.call(this, c2) : !(!o2[p] && (h(new Date(p - 1), new Date(p + 1)), !o2[p])) || (o2[p] = true, l.call(this, c2));
          }, r2.method === "between" && (h(r2.args.after, r2.args.before), r2.accept = function(c2) {
            var p = Number(c2);
            return !!o2[p] || (o2[p] = true, l.call(this, c2));
          });
          for (var v = 0; v < s.length; v++) {
            var u = new De(s[v], a2).rezonedDate();
            if (!r2.accept(new Date(u.getTime())))
              break;
          }
          d.forEach(function(c2) {
            Dt2(r2, c2.options);
          });
          var f = r2._result;
          switch (be(f), r2.method) {
            case "all":
            case "between":
              return f;
            case "before":
              return f.length && f[f.length - 1] || null;
            default:
              return f.length && f[0] || null;
          }
        }(t2, this._rrule, this._exrule, this._rdate, this._exdate, this.tzid());
      }, i.prototype.rrule = function(t2) {
        _t(t2, this._rrule);
      }, i.prototype.exrule = function(t2) {
        _t(t2, this._exrule);
      }, i.prototype.rdate = function(t2) {
        lt(t2, this._rdate);
      }, i.prototype.exdate = function(t2) {
        lt(t2, this._exdate);
      }, i.prototype.rrules = function() {
        return this._rrule.map(function(t2) {
          return Se(t2.toString());
        });
      }, i.prototype.exrules = function() {
        return this._exrule.map(function(t2) {
          return Se(t2.toString());
        });
      }, i.prototype.rdates = function() {
        return this._rdate.map(function(t2) {
          return new Date(t2.getTime());
        });
      }, i.prototype.exdates = function() {
        return this._exdate.map(function(t2) {
          return new Date(t2.getTime());
        });
      }, i.prototype.valueOf = function() {
        var t2 = [];
        return !this._rrule.length && this._dtstart && (t2 = t2.concat(Pe({ dtstart: this._dtstart }))), this._rrule.forEach(function(r2) {
          t2 = t2.concat(r2.toString().split(`
`));
        }), this._exrule.forEach(function(r2) {
          t2 = t2.concat(r2.toString().split(`
`).map(function(d) {
            return d.replace(/^RRULE:/, "EXRULE:");
          }).filter(function(d) {
            return !/^DTSTART/.test(d);
          }));
        }), this._rdate.length && t2.push(ct("RDATE", this._rdate, this.tzid())), this._exdate.length && t2.push(ct("EXDATE", this._exdate, this.tzid())), t2;
      }, i.prototype.toString = function() {
        return this.valueOf().join(`
`);
      }, i.prototype.clone = function() {
        var t2 = new i(!!this._cache);
        return this._rrule.forEach(function(r2) {
          return t2.rrule(r2.clone());
        }), this._exrule.forEach(function(r2) {
          return t2.exrule(r2.clone());
        }), this._rdate.forEach(function(r2) {
          return t2.rdate(new Date(r2.getTime()));
        }), this._exdate.forEach(function(r2) {
          return t2.exdate(new Date(r2.getTime()));
        }), t2;
      }, i;
    }(C);
    mn = class {
      constructor(i) {
        this._scheduler = i;
      }
      getNode() {
        const i = this._scheduler;
        return this._tooltipNode || (this._tooltipNode = document.createElement("div"), this._tooltipNode.className = "dhtmlXTooltip scheduler_tooltip tooltip", i._waiAria.tooltipAttr(this._tooltipNode)), i.config.rtl ? this._tooltipNode.classList.add("dhtmlXTooltip_rtl") : this._tooltipNode.classList.remove("dhtmlXTooltip_rtl"), this._tooltipNode;
      }
      setViewport(i) {
        return this._root = i, this;
      }
      show(i, t2) {
        const r2 = this._scheduler, d = r2.$domHelpers, n = document.body, s = this.getNode();
        if (d.isChildOf(s, n) || (this.hide(), n.appendChild(s)), this._isLikeMouseEvent(i)) {
          const _ = this._calculateTooltipPosition(i);
          t2 = _.top, i = _.left;
        }
        return s.style.top = t2 + "px", s.style.left = i + "px", r2._waiAria.tooltipVisibleAttr(s), this;
      }
      hide() {
        const i = this._scheduler, t2 = this.getNode();
        return t2 && t2.parentNode && t2.parentNode.removeChild(t2), i._waiAria.tooltipHiddenAttr(t2), this;
      }
      setContent(i) {
        return this.getNode().innerHTML = i, this;
      }
      _isLikeMouseEvent(i) {
        return !(!i || typeof i != "object") && "clientX" in i && "clientY" in i;
      }
      _getViewPort() {
        return this._root || document.body;
      }
      _calculateTooltipPosition(i) {
        const t2 = this._scheduler, r2 = t2.$domHelpers, d = this._getViewPortSize(), n = this.getNode(), s = { top: 0, left: 0, width: n.offsetWidth, height: n.offsetHeight, bottom: 0, right: 0 }, _ = t2.config.tooltip_offset_x, a2 = t2.config.tooltip_offset_y, o2 = document.body, l = r2.getRelativeEventPosition(i, o2), h = r2.getNodePosition(o2);
        l.y += h.y, s.top = l.y, s.left = l.x, s.top += a2, s.left += _, s.bottom = s.top + s.height, s.right = s.left + s.width;
        const v = window.scrollY + o2.scrollTop;
        return s.top < d.top - v ? (s.top = d.top, s.bottom = s.top + s.height) : s.bottom > d.bottom && (s.bottom = d.bottom, s.top = s.bottom - s.height), s.left < d.left ? (s.left = d.left, s.right = d.left + s.width) : s.right > d.right && (s.right = d.right, s.left = s.right - s.width), l.x >= s.left && l.x <= s.right && (s.left = l.x - s.width - _, s.right = s.left + s.width), l.y >= s.top && l.y <= s.bottom && (s.top = l.y - s.height - a2, s.bottom = s.top + s.height), s;
      }
      _getViewPortSize() {
        const i = this._scheduler, t2 = i.$domHelpers, r2 = this._getViewPort();
        let d, n = r2, s = window.scrollY + document.body.scrollTop, _ = window.scrollX + document.body.scrollLeft;
        return r2 === i.$event_data ? (n = i.$event, s = 0, _ = 0, d = t2.getNodePosition(i.$event)) : d = t2.getNodePosition(n), { left: d.x + _, top: d.y + s, width: d.width, height: d.height, bottom: d.y + d.height + s, right: d.x + d.width + _ };
      }
    };
    vn = class {
      constructor(i) {
        this._listeners = {}, this.tooltip = new mn(i), this._scheduler = i, this._domEvents = i._createDomEventScope(), this._initDelayedFunctions();
      }
      destructor() {
        this.tooltip.hide(), this._domEvents.detachAll();
      }
      hideTooltip() {
        this.delayHide();
      }
      attach(i) {
        let t2 = document.body;
        const r2 = this._scheduler, d = r2.$domHelpers;
        i.global || (t2 = r2.$root);
        let n = null;
        const s = (_) => {
          const a2 = d.getTargetNode(_), o2 = d.closest(a2, i.selector);
          if (d.isChildOf(a2, this.tooltip.getNode()))
            return;
          const l = () => {
            n = o2, i.onmouseenter(_, o2);
          };
          r2._mobile && r2.config.touch_tooltip && (o2 ? l() : i.onmouseleave(_, o2)), n ? o2 && o2 === n ? i.onmousemove(_, o2) : (i.onmouseleave(_, n), n = null, o2 && o2 !== n && l()) : o2 && l();
        };
        this.detach(i.selector), this._domEvents.attach(t2, "mousemove", s), this._listeners[i.selector] = { node: t2, handler: s };
      }
      detach(i) {
        const t2 = this._listeners[i];
        t2 && this._domEvents.detach(t2.node, "mousemove", t2.handler);
      }
      tooltipFor(i) {
        const t2 = (r2) => {
          let d = r2;
          return document.createEventObject && !document.createEvent && (d = document.createEventObject(r2)), d;
        };
        this._initDelayedFunctions(), this.attach({ selector: i.selector, global: i.global, onmouseenter: (r2, d) => {
          const n = i.html(r2, d);
          n && this.delayShow(t2(r2), n);
        }, onmousemove: (r2, d) => {
          const n = i.html(r2, d);
          n ? this.delayShow(t2(r2), n) : (this.delayShow.$cancelTimeout(), this.delayHide());
        }, onmouseleave: () => {
          this.delayShow.$cancelTimeout(), this.delayHide();
        } });
      }
      _initDelayedFunctions() {
        const i = this._scheduler;
        this.delayShow && this.delayShow.$cancelTimeout(), this.delayHide && this.delayHide.$cancelTimeout(), this.tooltip.hide(), this.delayShow = ee.delay((t2, r2) => {
          i.callEvent("onBeforeTooltip", [t2]) === false ? this.tooltip.hide() : (this.tooltip.setContent(r2), this.tooltip.show(t2));
        }, i.config.tooltip_timeout || 1), this.delayHide = ee.delay(() => {
          this.delayShow.$cancelTimeout(), this.tooltip.hide();
        }, i.config.tooltip_hide_timeout || 1);
      }
    };
    gn = { active_links: function(e2) {
      e2.config.active_link_view = "day", e2._active_link_click = function(i) {
        var t2 = i.target.getAttribute("data-link-date"), r2 = e2.date.str_to_date(e2.config.api_date, false, true);
        if (t2)
          return e2.setCurrentView(r2(t2), e2.config.active_link_view), i && i.preventDefault && i.preventDefault(), false;
      }, e2.attachEvent("onTemplatesReady", function() {
        var i = function(r2, d) {
          d = d || r2 + "_scale_date", e2.templates["_active_links_old_" + d] || (e2.templates["_active_links_old_" + d] = e2.templates[d]);
          var n = e2.templates["_active_links_old_" + d], s = e2.date.date_to_str(e2.config.api_date);
          e2.templates[d] = function(_) {
            return "<a data-link-date='" + s(_) + "' href='#'>" + n(_) + "</a>";
          };
        };
        if (i("week"), i("", "month_day"), this.matrix)
          for (var t2 in this.matrix)
            i(t2);
        this._detachDomEvent(this._obj, "click", e2._active_link_click), e2.event(this._obj, "click", e2._active_link_click);
      });
    }, agenda_legacy: function(e2) {
      e2.date.add_agenda_legacy = function(i) {
        return e2.date.add(i, 1, "year");
      }, e2.templates.agenda_legacy_time = function(i, t2, r2) {
        return r2._timed ? this.day_date(r2.start_date, r2.end_date, r2) + " " + this.event_date(i) : e2.templates.day_date(i) + " &ndash; " + e2.templates.day_date(t2);
      }, e2.templates.agenda_legacy_text = function(i, t2, r2) {
        return r2.text;
      }, e2.templates.agenda_legacy_date = function() {
        return "";
      }, e2.date.agenda_legacy_start = function() {
        return e2.date.date_part(e2._currentDate());
      }, e2.attachEvent("onTemplatesReady", function() {
        var i = e2.dblclick_dhx_cal_data;
        e2.dblclick_dhx_cal_data = function() {
          if (this._mode == "agenda_legacy")
            !this.config.readonly && this.config.dblclick_create && this.addEventNow();
          else if (i)
            return i.apply(this, arguments);
        };
        var t2 = e2.render_data;
        e2.render_data = function(n) {
          if (this._mode != "agenda_legacy")
            return t2.apply(this, arguments);
          d();
        };
        var r2 = e2.render_view_data;
        function d() {
          var n = e2.get_visible_events();
          n.sort(function(m, g) {
            return m.start_date > g.start_date ? 1 : -1;
          });
          for (var s, _ = "<div class='dhx_agenda_area' " + e2._waiAria.agendaDataAttrString() + ">", a2 = 0; a2 < n.length; a2++) {
            var o2 = n[a2], l = o2.color ? "--dhx-scheduler-event-background:" + o2.color + ";" : "", h = o2.textColor ? "--dhx-scheduler-event-color:" + o2.textColor + ";" : "", v = e2.templates.event_class(o2.start_date, o2.end_date, o2);
            s = e2._waiAria.agendaEventAttrString(o2);
            var u = e2._waiAria.agendaDetailsBtnString();
            _ += "<div " + s + " class='dhx_agenda_line" + (v ? " " + v : "") + "' event_id='" + o2.id + "' " + e2.config.event_attribute + "='" + o2.id + "' style='" + h + l + (o2._text_style || "") + "'><div class='dhx_agenda_event_time'>" + (e2.config.rtl ? e2.templates.agenda_time(o2.end_date, o2.start_date, o2) : e2.templates.agenda_time(o2.start_date, o2.end_date, o2)) + "</div>", _ += `<div ${u} class='dhx_event_icon icon_details'><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
			<path d="M15.4444 16.4H4.55556V7.6H15.4444V16.4ZM13.1111 2V3.6H6.88889V2H5.33333V3.6H4.55556C3.69222 3.6 3 4.312 3 5.2V16.4C3 16.8243 3.16389 17.2313 3.45561 17.5314C3.74733 17.8314 4.143 18 4.55556 18H15.4444C15.857 18 16.2527 17.8314 16.5444 17.5314C16.8361 17.2313 17 16.8243 17 16.4V5.2C17 4.312 16.3 3.6 15.4444 3.6H14.6667V2H13.1111ZM13.8889 10.8H10V14.8H13.8889V10.8Z" fill="#A1A4A6"/>
			</svg></div>`, _ += "<span>" + e2.templates.agenda_text(o2.start_date, o2.end_date, o2) + "</span></div>";
          }
          _ += "<div class='dhx_v_border'></div></div>", e2._els.dhx_cal_data[0].innerHTML = _, e2._els.dhx_cal_data[0].childNodes[0].scrollTop = e2._agendaScrollTop || 0;
          var f = e2._els.dhx_cal_data[0].childNodes[0];
          f.childNodes[f.childNodes.length - 1].style.height = f.offsetHeight < e2._els.dhx_cal_data[0].offsetHeight ? "100%" : f.offsetHeight + "px";
          var c2 = e2._els.dhx_cal_data[0].firstChild.childNodes, p = e2._getNavDateElement();
          for (p && (p.innerHTML = e2.templates.agenda_date(e2._min_date, e2._max_date, e2._mode)), e2._rendered = [], a2 = 0; a2 < c2.length - 1; a2++)
            e2._rendered[a2] = c2[a2];
        }
        e2.render_view_data = function() {
          return this._mode == "agenda_legacy" && (e2._agendaScrollTop = e2._els.dhx_cal_data[0].childNodes[0].scrollTop, e2._els.dhx_cal_data[0].childNodes[0].scrollTop = 0), r2.apply(this, arguments);
        }, e2.agenda_legacy_view = function(n) {
          e2._min_date = e2.config.agenda_start || e2.date.agenda_legacy_start(e2._date), e2._max_date = e2.config.agenda_end || e2.date.add_agenda_legacy(e2._min_date, 1), function(s) {
            if (s) {
              var _ = e2.locale.labels, a2 = e2._waiAria.agendaHeadAttrString(), o2 = e2._waiAria.agendaHeadDateString(_.date), l = e2._waiAria.agendaHeadDescriptionString(_.description);
              e2._els.dhx_cal_header[0].innerHTML = "<div " + a2 + " class='dhx_agenda_line dhx_agenda_line_header'><div " + o2 + ">" + _.date + "</div><span class = 'description_header' style='padding-left:25px' " + l + ">" + _.description + "</span></div>", e2._table_view = true, e2.set_sizes();
            }
          }(n), n ? (e2._cols = null, e2._colsS = null, e2._table_view = true, d()) : e2._table_view = false;
        };
      });
    }, agenda_view: function(e2) {
      e2.date.add_agenda = function(d, n) {
        return e2.date.add(d, 1 * n, "month");
      }, e2.templates.agenda_time = function(d, n, s) {
        return s._timed ? `${this.event_date(d)} - ${this.event_date(n)}` : e2.locale.labels.full_day;
      }, e2.templates.agenda_text = function(d, n, s) {
        return s.text;
      };
      const i = e2.date.date_to_str("%F %j"), t2 = e2.date.date_to_str("%l");
      e2.templates.agenda_day = function(d) {
        return `<div class="dhx_agenda_day_date">${i(d)}</div>
		<div class="dhx_agenda_day_dow">${t2(d)}</div>`;
      }, e2.templates.agenda_date = function(d, n) {
        return e2.templates.month_date(e2.getState().date);
      }, e2.date.agenda_start = function(d) {
        return e2.date.month_start(new Date(d));
      };
      let r2 = 0;
      e2.attachEvent("onTemplatesReady", function() {
        var d = e2.dblclick_dhx_cal_data;
        e2.dblclick_dhx_cal_data = function() {
          if (this._mode == "agenda")
            !this.config.readonly && this.config.dblclick_create && this.addEventNow();
          else if (d)
            return d.apply(this, arguments);
        };
        var n = e2.render_data;
        e2.render_data = function(o2) {
          if (this._mode != "agenda")
            return n.apply(this, arguments);
          _();
        };
        var s = e2.render_view_data;
        function _() {
          const o2 = e2.get_visible_events();
          o2.sort(function(p, m) {
            return p.start_date > m.start_date ? 1 : -1;
          });
          const l = {};
          let h = e2.getState().min_date;
          const v = e2.getState().max_date;
          for (; h.valueOf() < v.valueOf(); )
            l[h.valueOf()] = [], h = e2.date.add(h, 1, "day");
          let u = false;
          if (o2.forEach((p) => {
            let m = e2.date.day_start(new Date(p.start_date));
            for (; m.valueOf() < p.end_date.valueOf(); )
              l[m.valueOf()] && (l[m.valueOf()].push(p), u = true), m = e2.date.day_start(e2.date.add(m, 1, "day"));
          }), u) {
            let p = "";
            for (let m in l)
              p += a2(new Date(1 * m), l[m]);
            e2._els.dhx_cal_data[0].innerHTML = p;
          } else
            e2._els.dhx_cal_data[0].innerHTML = `<div class="dhx_cal_agenda_no_events">${e2.locale.labels.agenda_tab}</div>`;
          e2._els.dhx_cal_data[0].scrollTop = r2;
          let f = e2._els.dhx_cal_data[0].querySelectorAll(".dhx_cal_agenda_event_line");
          e2._rendered = [];
          for (var c2 = 0; c2 < f.length - 1; c2++)
            e2._rendered[c2] = f[c2];
        }
        function a2(o2, l) {
          if (!l.length)
            return "";
          let h = `
<div class="dhx_cal_agenda_day">
	<div class="dhx_cal_agenda_day_header">${e2.templates.agenda_day(o2)}</div>
	<div class="dhx_cal_agenda_day_events">
`;
          return l.forEach((v) => {
            h += function(u, f) {
              const c2 = e2.templates.agenda_time(f.start_date, f.end_date, f), p = e2.getState().select_id, m = e2.templates.event_class(f.start_date, f.end_date, f), g = e2.templates.agenda_text(f.start_date, f.end_date, f);
              let y2 = "";
              return (f.color || f.textColor) && (y2 = ` style="${f.color ? "--dhx-scheduler-event-background:" + f.color + ";" : ""}${f.textColor ? "--dhx-scheduler-event-color:" + f.textColor + ";" : ""}" `), `<div class="dhx_cal_agenda_event_line ${m || ""} ${f.id == p ? "dhx_cal_agenda_event_line_selected" : ""}" ${y2} ${e2.config.event_attribute}="${f.id}">
	<div class="dhx_cal_agenda_event_line_marker"></div>
	<div class="dhx_cal_agenda_event_line_time">${c2}</div>
	<div class="dhx_cal_agenda_event_line_text">${g}</div>
</div>`;
            }(0, v);
          }), h += "</div></div>", h;
        }
        e2.render_view_data = function() {
          return this._mode == "agenda" && (r2 = e2._els.dhx_cal_data[0].scrollTop, e2._els.dhx_cal_data[0].scrollTop = 0), s.apply(this, arguments);
        }, e2.agenda_view = function(o2) {
          o2 ? (e2._min_date = e2.config.agenda_start || e2.date.agenda_start(e2._date), e2._max_date = e2.config.agenda_end || e2.date.add_agenda(e2._min_date, 1), e2._cols = null, e2._colsS = null, e2._table_view = true, e2._getNavDateElement().innerHTML = e2.templates.agenda_date(e2._date), _()) : e2._table_view = false;
        };
      });
    }, all_timed: function(e2) {
      e2.config.all_timed = "short", e2.config.all_timed_month = false;
      var i = function(_) {
        return !((_.end_date - _.start_date) / 36e5 >= 24) || e2._drag_mode == "resize" && e2._drag_id == _.id;
      };
      e2._safe_copy = function(_) {
        var a2 = null, o2 = e2._copy_event(_);
        return _.event_pid && (a2 = e2.getEvent(_.event_pid)), a2 && a2.isPrototypeOf(_) && (delete o2.event_length, delete o2.event_pid, delete o2.rec_pattern, delete o2.rec_type), o2;
      };
      var t2 = e2._pre_render_events_line, r2 = e2._pre_render_events_table, d = function(_, a2) {
        return this._table_view ? r2.call(this, _, a2) : t2.call(this, _, a2);
      };
      e2._pre_render_events_line = e2._pre_render_events_table = function(_, a2) {
        if (!this.config.all_timed || this._table_view && this._mode != "month" || this._mode == "month" && !this.config.all_timed_month)
          return d.call(this, _, a2);
        for (var o2 = 0; o2 < _.length; o2++) {
          var l = _[o2];
          if (!l._timed)
            if (this.config.all_timed != "short" || i(l)) {
              var h = this._safe_copy(l);
              l._virtual ? h._first_chunk = false : h._first_chunk = true, h._drag_resize = false, h._virtual = true, h.start_date = new Date(h.start_date), c2(l) ? (h.end_date = p(h.start_date), this.config.last_hour != 24 && (h.end_date = m(h.start_date, this.config.last_hour))) : h.end_date = new Date(l.end_date);
              var v = false;
              h.start_date < this._max_date && h.end_date > this._min_date && h.start_date < h.end_date && (_[o2] = h, v = true);
              var u = this._safe_copy(l);
              if (u._virtual = true, u.end_date = new Date(u.end_date), u.start_date < this._min_date ? u.start_date = m(this._min_date, this.config.first_hour) : u.start_date = m(p(l.start_date), this.config.first_hour), u.start_date < this._max_date && u.start_date < u.end_date) {
                if (!v) {
                  _[o2--] = u;
                  continue;
                }
                _.splice(o2 + 1, 0, u), u._last_chunk = false;
              } else
                h._last_chunk = true, h._drag_resize = true;
            } else
              this._mode != "month" && _.splice(o2--, 1);
        }
        var f = this._drag_mode != "move" && a2;
        return d.call(this, _, f);
        function c2(g) {
          var y2 = p(g.start_date);
          return +g.end_date > +y2;
        }
        function p(g) {
          var y2 = e2.date.add(g, 1, "day");
          return y2 = e2.date.date_part(y2);
        }
        function m(g, y2) {
          var x = e2.date.date_part(new Date(g));
          return x.setHours(y2), x;
        }
      };
      var n = e2.get_visible_events;
      e2.get_visible_events = function(_) {
        return this.config.all_timed && this.config.multi_day ? n.call(this, false) : n.call(this, _);
      }, e2.attachEvent("onBeforeViewChange", function(_, a2, o2, l) {
        return e2._allow_dnd = o2 == "day" || o2 == "week" || e2.getView(o2), true;
      }), e2._is_main_area_event = function(_) {
        return !!(_._timed || this.config.all_timed === true || this.config.all_timed == "short" && i(_));
      };
      var s = e2.updateEvent;
      e2.updateEvent = function(_) {
        var a2, o2, l = e2.getEvent(_);
        l && (a2 = e2.config.all_timed && !(e2.isOneDayEvent(e2._events[_]) || e2.getState().drag_id)) && (o2 = e2.config.update_render, e2.config.update_render = true), s.apply(e2, arguments), l && a2 && (e2.config.update_render = o2);
      };
    }, collision: function(e2) {
      var i, t2;
      function r2(d) {
        e2._get_section_view() && d && (i = e2.getEvent(d)[e2._get_section_property()]);
      }
      e2.config.collision_limit = 1, e2.attachEvent("onBeforeDrag", function(d) {
        return r2(d), true;
      }), e2.attachEvent("onBeforeLightbox", function(d) {
        var n = e2.getEvent(d);
        return t2 = [n.start_date, n.end_date], r2(d), true;
      }), e2.attachEvent("onEventChanged", function(d) {
        if (!d || !e2.getEvent(d))
          return true;
        var n = e2.getEvent(d);
        if (!e2.checkCollision(n)) {
          if (!t2)
            return false;
          n.start_date = t2[0], n.end_date = t2[1], n._timed = this.isOneDayEvent(n);
        }
        return true;
      }), e2.attachEvent("onBeforeEventChanged", function(d, n, s) {
        return e2.checkCollision(d);
      }), e2.attachEvent("onEventAdded", function(d, n) {
        e2.checkCollision(n) || e2.deleteEvent(d);
      }), e2.attachEvent("onEventSave", function(d, n, s) {
        if ((n = e2._lame_clone(n)).id = d, !n.start_date || !n.end_date) {
          var _ = e2.getEvent(d);
          n.start_date = new Date(_.start_date), n.end_date = new Date(_.end_date);
        }
        return n.rec_type && e2._roll_back_dates(n), e2.checkCollision(n);
      }), e2._check_sections_collision = function(d, n) {
        var s = e2._get_section_property();
        return d[s] == n[s] && d.id != n.id;
      }, e2.checkCollision = function(d) {
        var n = [], s = e2.config.collision_limit;
        if (d.rec_type)
          for (var _ = e2.getRecDates(d), a2 = 0; a2 < _.length; a2++)
            for (var o2 = e2.getEvents(_[a2].start_date, _[a2].end_date), l = 0; l < o2.length; l++)
              (o2[l].event_pid || o2[l].id) != d.id && n.push(o2[l]);
        else {
          n = e2.getEvents(d.start_date, d.end_date);
          for (var h = 0; h < n.length; h++) {
            var v = n[h];
            if (v.id == d.id || v.event_length && [v.event_pid, v.event_length].join("#") == d.id) {
              n.splice(h, 1);
              break;
            }
          }
        }
        var u = e2._get_section_view(), f = e2._get_section_property(), c2 = true;
        if (u) {
          var p = 0;
          for (h = 0; h < n.length; h++)
            n[h].id != d.id && this._check_sections_collision(n[h], d) && p++;
          p >= s && (c2 = false);
        } else
          n.length >= s && (c2 = false);
        if (!c2) {
          var m = !e2.callEvent("onEventCollision", [d, n]);
          return m || (d[f] = i || d[f]), m;
        }
        return c2;
      };
    }, container_autoresize: function(e2) {
      e2.config.container_autoresize = true, e2.config.month_day_min_height = 90, e2.config.min_grid_size = 25, e2.config.min_map_size = 400;
      var i = e2._pre_render_events, t2 = true, r2 = 0, d = 0;
      e2._pre_render_events = function(l, h) {
        if (!e2.config.container_autoresize || !t2)
          return i.apply(this, arguments);
        var v = this.xy.bar_height, u = this._colsS.heights, f = this._colsS.heights = [0, 0, 0, 0, 0, 0, 0], c2 = this._els.dhx_cal_data[0];
        if (l = this._table_view ? this._pre_render_events_table(l, h) : this._pre_render_events_line(l, h), this._table_view)
          if (h)
            this._colsS.heights = u;
          else {
            var p = c2.firstChild;
            const E = p.querySelectorAll(".dhx_cal_month_row");
            if (E && E.length) {
              for (var m = 0; m < E.length; m++) {
                if (f[m]++, f[m] * v > this._colsS.height - this.xy.month_head_height) {
                  var g = E[m].querySelectorAll(".dhx_cal_month_cell"), y2 = this._colsS.height - this.xy.month_head_height;
                  1 * this.config.max_month_events !== this.config.max_month_events || f[m] <= this.config.max_month_events ? y2 = f[m] * v : (this.config.max_month_events + 1) * v > this._colsS.height - this.xy.month_head_height && (y2 = (this.config.max_month_events + 1) * v), E[m].style.height = y2 + this.xy.month_head_height + "px";
                  for (var x = 0; x < g.length; x++)
                    g[x].childNodes[1].style.height = y2 + "px";
                  f[m] = (f[m - 1] || 0) + g[0].offsetHeight;
                }
                f[m] = (f[m - 1] || 0) + E[m].querySelectorAll(".dhx_cal_month_cell")[0].offsetHeight;
              }
              f.unshift(0), p.parentNode.offsetHeight < p.parentNode.scrollHeight && p._h_fix;
            } else if (l.length || this._els.dhx_multi_day[0].style.visibility != "visible" || (f[0] = -1), l.length || f[0] == -1) {
              var b = (f[0] + 1) * v + 1;
              d != b + 1 && (this._obj.style.height = r2 - d + b - 1 + "px"), b += "px";
              const D = this._els.dhx_cal_navline[0].offsetHeight, w = this._els.dhx_cal_header[0].offsetHeight;
              c2.style.height = this._obj.offsetHeight - D - w - (this.xy.margin_top || 0) + "px";
              var k = this._els.dhx_multi_day[0];
              k.style.height = b, k.style.visibility = f[0] == -1 ? "hidden" : "visible", k.style.display = f[0] == -1 ? "none" : "", (k = this._els.dhx_multi_day[1]).style.height = b, k.style.visibility = f[0] == -1 ? "hidden" : "visible", k.style.display = f[0] == -1 ? "none" : "", k.className = f[0] ? "dhx_multi_day_icon" : "dhx_multi_day_icon_small", this._dy_shift = (f[0] + 1) * v, f[0] = 0;
            }
          }
        return l;
      };
      var n = ["dhx_cal_navline", "dhx_cal_header", "dhx_multi_day", "dhx_cal_data"], s = function(l) {
        r2 = 0;
        for (var h = 0; h < n.length; h++) {
          var v = n[h], u = e2._els[v] ? e2._els[v][0] : null, f = 0;
          switch (v) {
            case "dhx_cal_navline":
            case "dhx_cal_header":
              f = u.offsetHeight;
              break;
            case "dhx_multi_day":
              f = u ? u.offsetHeight - 1 : 0, d = f;
              break;
            case "dhx_cal_data":
              var c2 = e2.getState().mode;
              if (u.childNodes[1] && c2 != "month") {
                let M = 0;
                for (let T = 0; T < u.childNodes.length; T++)
                  u.childNodes[T].offsetHeight > M && (M = u.childNodes[T].offsetHeight);
                f = M;
              } else
                f = Math.max(u.offsetHeight - 1, u.scrollHeight);
              if (c2 == "month")
                e2.config.month_day_min_height && !l && (f = u.querySelectorAll(".dhx_cal_month_row").length * e2.config.month_day_min_height), l && (u.style.height = f + "px");
              else if (c2 == "year")
                f = 190 * e2.config.year_y;
              else if (c2 == "agenda") {
                if (f = 0, u.childNodes && u.childNodes.length)
                  for (var p = 0; p < u.childNodes.length; p++)
                    f += u.childNodes[p].offsetHeight;
                f + 2 < e2.config.min_grid_size ? f = e2.config.min_grid_size : f += 2;
              } else if (c2 == "week_agenda") {
                for (var m, g, y2 = e2.xy.week_agenda_scale_height + e2.config.min_grid_size, x = 0; x < u.childNodes.length; x++)
                  for (g = u.childNodes[x], p = 0; p < g.childNodes.length; p++) {
                    for (var b = 0, k = g.childNodes[p].childNodes[1], E = 0; E < k.childNodes.length; E++)
                      b += k.childNodes[E].offsetHeight;
                    m = b + e2.xy.week_agenda_scale_height, (m = x != 1 || p != 2 && p != 3 ? m : 2 * m) > y2 && (y2 = m);
                  }
                f = 3 * y2;
              } else if (c2 == "map") {
                f = 0;
                var D = u.querySelectorAll(".dhx_map_line");
                for (p = 0; p < D.length; p++)
                  f += D[p].offsetHeight;
                f + 2 < e2.config.min_map_size ? f = e2.config.min_map_size : f += 2;
              } else if (e2._gridView)
                if (f = 0, u.childNodes[1].childNodes[0].childNodes && u.childNodes[1].childNodes[0].childNodes.length) {
                  for (D = u.childNodes[1].childNodes[0].childNodes[0].childNodes, p = 0; p < D.length; p++)
                    f += D[p].offsetHeight;
                  (f += 2) < e2.config.min_grid_size && (f = e2.config.min_grid_size);
                } else
                  f = e2.config.min_grid_size;
              if (e2.matrix && e2.matrix[c2]) {
                if (l)
                  f += 0, u.style.height = f + "px";
                else {
                  f = 0;
                  for (var w = e2.matrix[c2], S = w.y_unit, N = 0; N < S.length; N++)
                    f += w.getSectionHeight(S[N].key);
                  e2.$container.clientWidth != e2.$container.scrollWidth && (f += o2());
                }
                f -= 1;
              }
              (c2 == "day" || c2 == "week" || e2._props && e2._props[c2]) && (f += 2);
          }
          r2 += f += 1;
        }
        e2._obj.style.height = r2 + "px", l || e2.updateView();
      };
      function _() {
        t2 = false, e2.callEvent("onAfterSchedulerResize", []), t2 = true;
      }
      var a2 = function() {
        if (!e2.config.container_autoresize || !t2)
          return true;
        var l = e2.getState().mode;
        if (!l)
          return true;
        var h = window.requestAnimationFrame || window.setTimeout, v = document.documentElement.scrollTop;
        h(function() {
          !e2.$destroyed && e2.$initialized && s();
        }), e2.matrix && e2.matrix[l] || l == "month" ? h(function() {
          !e2.$destroyed && e2.$initialized && (s(true), document.documentElement.scrollTop = v, _());
        }, 1) : _();
      };
      function o2() {
        var l = document.createElement("div");
        l.style.cssText = "visibility:hidden;position:absolute;left:-1000px;width:100px;padding:0px;margin:0px;height:110px;min-height:100px;overflow-y:scroll;", document.body.appendChild(l);
        var h = l.offsetWidth - l.clientWidth;
        return document.body.removeChild(l), h;
      }
      e2.attachEvent("onBeforeViewChange", function() {
        var l = e2.config.container_autoresize;
        if (e2.xy.$original_scroll_width || (e2.xy.$original_scroll_width = e2.xy.scroll_width), e2.xy.scroll_width = l ? 0 : e2.xy.$original_scroll_width, e2.matrix)
          for (var h in e2.matrix) {
            var v = e2.matrix[h];
            v.$original_section_autoheight || (v.$original_section_autoheight = v.section_autoheight), v.section_autoheight = !l && v.$original_section_autoheight;
          }
        return true;
      }), e2.attachEvent("onViewChange", a2), e2.attachEvent("onXLE", a2), e2.attachEvent("onEventChanged", a2), e2.attachEvent("onEventCreated", a2), e2.attachEvent("onEventAdded", a2), e2.attachEvent("onEventDeleted", a2), e2.attachEvent("onAfterSchedulerResize", a2), e2.attachEvent("onClearAll", a2), e2.attachEvent("onBeforeExpand", function() {
        return t2 = false, true;
      }), e2.attachEvent("onBeforeCollapse", function() {
        return t2 = true, true;
      });
    }, cookie: function(e2) {
      function i(d) {
        return (d._obj.id || "scheduler") + "_settings";
      }
      var t2 = true;
      e2.attachEvent("onBeforeViewChange", function(d, n, s, _) {
        if (t2 && e2._get_url_nav) {
          var a2 = e2._get_url_nav();
          (a2.date || a2.mode || a2.event) && (t2 = false);
        }
        var o2 = i(e2);
        if (t2) {
          t2 = false;
          var l = function(v) {
            var u = v + "=";
            if (document.cookie.length > 0) {
              var f = document.cookie.indexOf(u);
              if (f != -1) {
                f += u.length;
                var c2 = document.cookie.indexOf(";", f);
                return c2 == -1 && (c2 = document.cookie.length), document.cookie.substring(f, c2);
              }
            }
            return "";
          }(o2);
          if (l) {
            e2._min_date || (e2._min_date = _), (l = unescape(l).split("@"))[0] = this._helpers.parseDate(l[0]);
            var h = this.isViewExists(l[1]) ? l[1] : s;
            return _ = isNaN(+l[0]) ? _ : l[0], window.setTimeout(function() {
              e2.$destroyed || e2.setCurrentView(_, h);
            }, 1), false;
          }
        }
        return true;
      }), e2.attachEvent("onViewChange", function(d, n) {
        var s, _, a2 = i(e2), o2 = escape(this._helpers.formatDate(n) + "@" + d);
        _ = a2 + "=" + o2 + ((s = "expires=Sun, 31 Jan 9999 22:00:00 GMT") ? "; " + s : ""), document.cookie = _;
      });
      var r2 = e2._load;
      e2._load = function() {
        var d = arguments;
        if (e2._date)
          r2.apply(this, d);
        else {
          var n = this;
          window.setTimeout(function() {
            r2.apply(n, d);
          }, 1);
        }
      };
    }, daytimeline: function(e2) {
      de("Day Timeline", e2.assert);
    }, drag_between: function(e2) {
      de("Drag Between", e2.assert);
    }, editors: function(e2) {
      e2.form_blocks.combo = { render: function(i) {
        i.cached_options || (i.cached_options = {});
        var t2 = "";
        return t2 += "<div class='" + i.type + "' ></div>";
      }, set_value: function(i, t2, r2, d) {
        (function() {
          u();
          var v = e2.attachEvent("onAfterLightbox", function() {
            u(), e2.detachEvent(v);
          });
          function u() {
            if (i._combo && i._combo.DOMParent) {
              var f = i._combo;
              f.unload ? f.unload() : f.destructor && f.destructor(), f.DOMParent = f.DOMelem = null;
            }
          }
        })(), window.dhx_globalImgPath = d.image_path || "/", i._combo = new dhtmlXCombo(i, d.name, i.offsetWidth - 8), d.onchange && i._combo.attachEvent("onChange", d.onchange), d.options_height && i._combo.setOptionHeight(d.options_height);
        var n = i._combo;
        if (n.enableFilteringMode(d.filtering, d.script_path || null, !!d.cache), d.script_path) {
          var s = r2[d.map_to];
          s ? d.cached_options[s] ? (n.addOption(s, d.cached_options[s]), n.disable(1), n.selectOption(0), n.disable(0)) : e2.ajax.get(d.script_path + "?id=" + s + "&uid=" + e2.uid(), function(v) {
            var u, f = v.xmlDoc.responseText;
            try {
              u = JSON.parse(f).options[0].text;
            } catch {
              u = e2.ajax.xpath("//option", v.xmlDoc)[0].childNodes[0].nodeValue;
            }
            d.cached_options[s] = u, n.addOption(s, u), n.disable(1), n.selectOption(0), n.disable(0);
          }) : n.setComboValue("");
        } else {
          for (var _ = [], a2 = 0; a2 < d.options.length; a2++) {
            var o2 = d.options[a2], l = [o2.key, o2.label, o2.css];
            _.push(l);
          }
          if (n.addOption(_), r2[d.map_to]) {
            var h = n.getIndexByValue(r2[d.map_to]);
            n.selectOption(h);
          }
        }
      }, get_value: function(i, t2, r2) {
        var d = i._combo.getSelectedValue();
        return r2.script_path && (r2.cached_options[d] = i._combo.getSelectedText()), d;
      }, focus: function(i) {
      } }, e2.form_blocks.radio = { render: function(i) {
        var t2 = "";
        t2 += `<div class='dhx_cal_ltext dhx_cal_radio ${i.vertical ? "dhx_cal_radio_vertical" : ""}' style='max-height:${i.height}px;'>`;
        for (var r2 = 0; r2 < i.options.length; r2++) {
          var d = e2.uid();
          t2 += "<label class='dhx_cal_radio_item' for='" + d + "'><input id='" + d + "' type='radio' name='" + i.name + "' value='" + i.options[r2].key + "'><span> " + i.options[r2].label + "</span></label>";
        }
        return t2 += "</div>";
      }, set_value: function(i, t2, r2, d) {
        for (var n = i.getElementsByTagName("input"), s = 0; s < n.length; s++) {
          n[s].checked = false;
          var _ = r2[d.map_to] || t2;
          n[s].value == _ && (n[s].checked = true);
        }
      }, get_value: function(i, t2, r2) {
        for (var d = i.getElementsByTagName("input"), n = 0; n < d.length; n++)
          if (d[n].checked)
            return d[n].value;
      }, focus: function(i) {
      } }, e2.form_blocks.checkbox = { render: function(i) {
        return e2.config.wide_form ? '<div class="dhx_cal_wide_checkbox"></div>' : "";
      }, set_value: function(i, t2, r2, d) {
        i = e2._lightbox.querySelector(`#${d.id}`);
        var n = e2.uid(), s = d.checked_value !== void 0 ? t2 == d.checked_value : !!t2;
        i.className += " dhx_cal_checkbox";
        var _ = "<input id='" + n + "' type='checkbox' value='true' name='" + d.name + "'" + (s ? "checked='true'" : "") + "'>", a2 = "<label for='" + n + "'>" + (e2.locale.labels["section_" + d.name] || d.name) + "</label>";
        if (e2.config.wide_form ? (i.innerHTML = a2, i.nextSibling.innerHTML = _) : i.innerHTML = _ + a2, d.handler) {
          var o2 = i.getElementsByTagName("input")[0];
          if (o2.$_eventAttached)
            return;
          o2.$_eventAttached = true, e2.event(o2, "click", d.handler);
        }
      }, get_value: function(i, t2, r2) {
        var d = (i = e2._lightbox.querySelector(`#${r2.id}`)).getElementsByTagName("input")[0];
        return d || (d = i.nextSibling.getElementsByTagName("input")[0]), d.checked ? r2.checked_value || true : r2.unchecked_value || false;
      }, focus: function(i) {
      } };
    }, expand: function(e2) {
      e2.ext.fullscreen = { toggleIcon: null }, e2.expand = function() {
        if (e2.callEvent("onBeforeExpand", [])) {
          var i = e2._obj;
          do
            i._position = i.style.position || "", i.style.position = "static";
          while ((i = i.parentNode) && i.style);
          (i = e2._obj).style.position = "absolute", i._width = i.style.width, i._height = i.style.height, i.style.width = i.style.height = "100%", i.style.top = i.style.left = "0px";
          var t2 = document.body;
          t2.scrollTop = 0, (t2 = t2.parentNode) && (t2.scrollTop = 0), document.body._overflow = document.body.style.overflow || "", document.body.style.overflow = "hidden", e2._maximize(), e2.callEvent("onExpand", []);
        }
      }, e2.collapse = function() {
        if (e2.callEvent("onBeforeCollapse", [])) {
          var i = e2._obj;
          do
            i.style.position = i._position;
          while ((i = i.parentNode) && i.style);
          (i = e2._obj).style.width = i._width, i.style.height = i._height, document.body.style.overflow = document.body._overflow, e2._maximize(), e2.callEvent("onCollapse", []);
        }
      }, e2.attachEvent("onTemplatesReady", function() {
        var i = document.createElement("div");
        i.className = "dhx_expand_icon", e2.ext.fullscreen.toggleIcon = i, i.innerHTML = `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
	<g>
	<line x1="0.5" y1="5" x2="0.5" y2="3.0598e-08" stroke="var(--dhx-scheduler-base-colors-icons)"/>
	<line y1="0.5" x2="5" y2="0.5" stroke="var(--dhx-scheduler-base-colors-icons)"/>
	<line x1="0.5" y1="11" x2="0.5" y2="16" stroke="var(--dhx-scheduler-base-colors-icons)"/>
	<line y1="15.5" x2="5" y2="15.5" stroke="var(--dhx-scheduler-base-colors-icons)"/>
	<line x1="11" y1="0.5" x2="16" y2="0.5" stroke="var(--dhx-scheduler-base-colors-icons)"/>
	<line x1="15.5" y1="2.18557e-08" x2="15.5" y2="5" stroke="var(--dhx-scheduler-base-colors-icons)"/>
	<line x1="11" y1="15.5" x2="16" y2="15.5" stroke="var(--dhx-scheduler-base-colors-icons)"/>
	<line x1="15.5" y1="16" x2="15.5" y2="11" stroke="var(--dhx-scheduler-base-colors-icons)"/>
	</g>
	</svg>
	`, e2._obj.appendChild(i), e2.event(i, "click", function() {
          e2.expanded ? e2.collapse() : e2.expand();
        });
      }), e2._maximize = function() {
        this.expanded = !this.expanded, this.expanded ? this.ext.fullscreen.toggleIcon.classList.add("dhx_expand_icon--expanded") : this.ext.fullscreen.toggleIcon.classList.remove("dhx_expand_icon--expanded");
        for (var i = ["left", "top"], t2 = 0; t2 < i.length; t2++) {
          var r2 = e2["_prev_margin_" + i[t2]];
          e2.xy["margin_" + i[t2]] ? (e2["_prev_margin_" + i[t2]] = e2.xy["margin_" + i[t2]], e2.xy["margin_" + i[t2]] = 0) : r2 && (e2.xy["margin_" + i[t2]] = e2["_prev_margin_" + i[t2]], delete e2["_prev_margin_" + i[t2]]);
        }
        e2.setCurrentView();
      };
    }, export_api: function(e2) {
      (function() {
        function i(r2, d) {
          for (var n in d)
            r2[n] || (r2[n] = d[n]);
          return r2;
        }
        function t2(r2, d) {
          var n = {};
          return (r2 = d._els[r2]) && r2[0] ? (n.x = r2[0].scrollWidth, n.y = r2[0].scrollHeight) : (n.x = 0, n.y = 0), n;
        }
        window.dhtmlxAjax || (window.dhtmlxAjax = { post: function(r2, d, n) {
          return window.dhx4.ajax.post(r2, d, n);
        }, get: function(r2, d) {
          return window.ajax.get(r2, d);
        } }), function(r2) {
          function d() {
            var n = r2.getState().mode;
            return r2.matrix && r2.matrix[n] ? r2.matrix[n] : null;
          }
          r2.exportToPDF = function(n) {
            (n = i(n || {}, { name: "calendar.pdf", format: "A4", orientation: "landscape", dpi: 96, zoom: 1, rtl: r2.config.rtl })).html = this._export_html(n), n.mode = this.getState().mode, this._send_to_export(n, "pdf");
          }, r2.exportToPNG = function(n) {
            (n = i(n || {}, { name: "calendar.png", format: "A4", orientation: "landscape", dpi: 96, zoom: 1, rtl: r2.config.rtl })).html = this._export_html(n), n.mode = this.getState().mode, this._send_to_export(n, "png");
          }, r2.exportToICal = function(n) {
            n = i(n || {}, { name: "calendar.ical", data: this._serialize_plain(null, n) }), this._send_to_export(n, "ical");
          }, r2.exportToExcel = function(n) {
            n = i(n || {}, { name: "calendar.xlsx", title: "Events", data: this._serialize_plain(this.templates.xml_format, n), columns: this._serialize_columns() }), this._send_to_export(n, "excel");
          }, r2._ajax_to_export = function(n, s, _) {
            delete n.callback;
            var a2 = n.server || "https://export.dhtmlx.com/scheduler";
            window.dhtmlxAjax.post(a2, "type=" + s + "&store=1&data=" + encodeURIComponent(JSON.stringify(n)), function(o2) {
              var l = null;
              if (!(o2.xmlDoc.status > 400))
                try {
                  l = JSON.parse(o2.xmlDoc.responseText);
                } catch {
                }
              _(l);
            });
          }, r2._plain_export_copy = function(n, s) {
            var _ = {};
            for (var a2 in n)
              _[a2] = n[a2];
            return _.start_date = s(_.start_date), _.end_date = s(_.end_date), _.$text = this.templates.event_text(n.start_date, n.end_date, n), _;
          }, r2._serialize_plain = function(n, s) {
            var _;
            n = n || r2.date.date_to_str("%Y%m%dT%H%i%s", true), _ = s && s.start && s.end ? r2.getEvents(s.start, s.end) : r2.getEvents();
            for (var a2 = [], o2 = 0; o2 < _.length; o2++)
              a2[o2] = this._plain_export_copy(_[o2], n);
            return a2;
          }, r2._serialize_columns = function() {
            return [{ id: "start_date", header: "Start Date", width: 30 }, { id: "end_date", header: "End Date", width: 30 }, { id: "$text", header: "Text", width: 100 }];
          }, r2._send_to_export = function(n, s) {
            if (n.version || (n.version = r2.version), n.skin || (n.skin = r2.skin), n.callback)
              return r2._ajax_to_export(n, s, n.callback);
            var _ = this._create_hidden_form();
            _.firstChild.action = n.server || "https://export.dhtmlx.com/scheduler", _.firstChild.childNodes[0].value = JSON.stringify(n), _.firstChild.childNodes[1].value = s, _.firstChild.submit();
          }, r2._create_hidden_form = function() {
            if (!this._hidden_export_form) {
              var n = this._hidden_export_form = document.createElement("div");
              n.style.display = "none", n.innerHTML = "<form method='POST' target='_blank'><input type='text' name='data'><input type='hidden' name='type' value=''></form>", document.body.appendChild(n);
            }
            return this._hidden_export_form;
          }, r2._get_export_size = function(n, s, _, a2, o2, l, h) {
            a2 = parseInt(a2) / 25.4 || 4;
            var v = { A5: { x: 148, y: 210 }, A4: { x: 210, y: 297 }, A3: { x: 297, y: 420 }, A2: { x: 420, y: 594 }, A1: { x: 594, y: 841 }, A0: { x: 841, y: 1189 } }, u = t2("dhx_cal_data", this).x, f = { y: t2("dhx_cal_data", this).y + t2("dhx_cal_header", this).y + t2("dhx_multi_day", this).y };
            return f.x = n === "full" ? u : Math.floor((s === "landscape" ? v[n].y : v[n].x) * a2), h && (f.x *= parseFloat(h.x) || 1, f.y *= parseFloat(h.y) || 1), f;
          }, r2._export_html = function(n) {
            var s, _, a2, o2 = (s = void 0, _ = void 0, (a2 = d()) && (_ = a2.scrollable, s = a2.smart_rendering), { nav_height: r2.xy.nav_height, scroll_width: r2.xy.scroll_width, style_width: r2._obj.style.width, style_height: r2._obj.style.height, timeline_scrollable: _, timeline_smart_rendering: s }), l = r2._get_export_size(n.format, n.orientation, n.zoom, n.dpi, n.header, n.footer, n.scales), h = "";
            try {
              (function(v, u) {
                r2._obj.style.width = v.x + "px", r2._obj.style.height = v.y + "px", r2.xy.nav_height = 0, r2.xy.scroll_width = 0;
                var f = d();
                (u.timeline_scrollable || u.timeline_smart_rendering) && (f.scrollable = false, f.smart_rendering = false);
              })(l, o2), r2.setCurrentView(), h = r2._obj.innerHTML;
            } catch (v) {
              console.error(v);
            } finally {
              (function(v) {
                r2.xy.scroll_width = v.scroll_width, r2.xy.nav_height = v.nav_height, r2._obj.style.width = v.style_width, r2._obj.style.height = v.style_height;
                var u = d();
                (v.timeline_scrollable || v.timeline_smart_rendering) && (u.scrollable = v.timeline_scrollable, u.smart_rendering = v.timeline_smart_rendering);
              })(o2), r2.setCurrentView();
            }
            return h;
          };
        }(e2);
      })();
    }, grid_view: function(e2) {
      de("Grid", e2.assert);
    }, html_templates: function(e2) {
      e2.attachEvent("onTemplatesReady", function() {
        for (var i = document.body.getElementsByTagName("DIV"), t2 = 0; t2 < i.length; t2++) {
          var r2 = i[t2].className || "";
          if ((r2 = r2.split(":")).length == 2 && r2[0] == "template") {
            var d = 'return "' + (i[t2].innerHTML || "").replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/[\n\r]+/g, "") + '";';
            d = unescape(d).replace(/\{event\.([a-z]+)\}/g, function(n, s) {
              return '"+ev.' + s + '+"';
            }), e2.templates[r2[1]] = Function("start", "end", "ev", d), i[t2].style.display = "none";
          }
        }
      });
    }, key_nav: function(e2) {
      function i(t2) {
        var r2 = { minicalButton: e2.$keyboardNavigation.MinicalButton, minicalDate: e2.$keyboardNavigation.MinicalCell, scheduler: e2.$keyboardNavigation.SchedulerNode, dataArea: e2.$keyboardNavigation.DataArea, timeSlot: e2.$keyboardNavigation.TimeSlot, event: e2.$keyboardNavigation.Event }, d = {};
        for (var n in r2)
          d[n.toLowerCase()] = r2[n];
        return d[t2 = (t2 + "").toLowerCase()] || r2.scheduler;
      }
      e2.config.key_nav = true, e2.config.key_nav_step = 30, e2.addShortcut = function(t2, r2, d) {
        var n = i(d);
        n && n.prototype.bind(t2, r2);
      }, e2.getShortcutHandler = function(t2, r2) {
        var d = i(r2);
        if (d) {
          var n = e2.$keyboardNavigation.shortcuts.parse(t2);
          if (n.length)
            return d.prototype.findHandler(n[0]);
        }
      }, e2.removeShortcut = function(t2, r2) {
        var d = i(r2);
        d && d.prototype.unbind(t2);
      }, e2.focus = function() {
        if (e2.config.key_nav) {
          var t2 = e2.$keyboardNavigation.dispatcher;
          t2.enable();
          var r2 = t2.getActiveNode();
          !r2 || r2 instanceof e2.$keyboardNavigation.MinicalButton || r2 instanceof e2.$keyboardNavigation.MinicalCell ? t2.setDefaultNode() : t2.focusNode(t2.getActiveNode());
        }
      }, e2.$keyboardNavigation = {}, e2._compose = function() {
        for (var t2 = Array.prototype.slice.call(arguments, 0), r2 = {}, d = 0; d < t2.length; d++) {
          var n = t2[d];
          for (var s in typeof n == "function" && (n = new n()), n)
            r2[s] = n[s];
        }
        return r2;
      }, function(t2) {
        t2.$keyboardNavigation.shortcuts = { createCommand: function() {
          return { modifiers: { shift: false, alt: false, ctrl: false, meta: false }, keyCode: null };
        }, parse: function(r2) {
          for (var d = [], n = this.getExpressions(this.trim(r2)), s = 0; s < n.length; s++) {
            for (var _ = this.getWords(n[s]), a2 = this.createCommand(), o2 = 0; o2 < _.length; o2++)
              this.commandKeys[_[o2]] ? a2.modifiers[_[o2]] = true : this.specialKeys[_[o2]] ? a2.keyCode = this.specialKeys[_[o2]] : a2.keyCode = _[o2].charCodeAt(0);
            d.push(a2);
          }
          return d;
        }, getCommandFromEvent: function(r2) {
          var d = this.createCommand();
          d.modifiers.shift = !!r2.shiftKey, d.modifiers.alt = !!r2.altKey, d.modifiers.ctrl = !!r2.ctrlKey, d.modifiers.meta = !!r2.metaKey, d.keyCode = r2.which || r2.keyCode, d.keyCode >= 96 && d.keyCode <= 105 && (d.keyCode -= 48);
          var n = String.fromCharCode(d.keyCode);
          return n && (d.keyCode = n.toLowerCase().charCodeAt(0)), d;
        }, getHashFromEvent: function(r2) {
          return this.getHash(this.getCommandFromEvent(r2));
        }, getHash: function(r2) {
          var d = [];
          for (var n in r2.modifiers)
            r2.modifiers[n] && d.push(n);
          return d.push(r2.keyCode), d.join(this.junctionChar);
        }, getExpressions: function(r2) {
          return r2.split(this.junctionChar);
        }, getWords: function(r2) {
          return r2.split(this.combinationChar);
        }, trim: function(r2) {
          return r2.replace(/\s/g, "");
        }, junctionChar: ",", combinationChar: "+", commandKeys: { shift: 16, alt: 18, ctrl: 17, meta: true }, specialKeys: { backspace: 8, tab: 9, enter: 13, esc: 27, space: 32, up: 38, down: 40, left: 37, right: 39, home: 36, end: 35, pageup: 33, pagedown: 34, delete: 46, insert: 45, plus: 107, f1: 112, f2: 113, f3: 114, f4: 115, f5: 116, f6: 117, f7: 118, f8: 119, f9: 120, f10: 121, f11: 122, f12: 123 } };
      }(e2), function(t2) {
        t2.$keyboardNavigation.EventHandler = { _handlers: null, findHandler: function(r2) {
          this._handlers || (this._handlers = {});
          var d = t2.$keyboardNavigation.shortcuts.getHash(r2);
          return this._handlers[d];
        }, doAction: function(r2, d) {
          var n = this.findHandler(r2);
          n && (n.call(this, d), d.preventDefault ? d.preventDefault() : d.returnValue = false);
        }, bind: function(r2, d) {
          this._handlers || (this._handlers = {});
          for (var n = t2.$keyboardNavigation.shortcuts, s = n.parse(r2), _ = 0; _ < s.length; _++)
            this._handlers[n.getHash(s[_])] = d;
        }, unbind: function(r2) {
          for (var d = t2.$keyboardNavigation.shortcuts, n = d.parse(r2), s = 0; s < n.length; s++)
            this._handlers[d.getHash(n[s])] && delete this._handlers[d.getHash(n[s])];
        }, bindAll: function(r2) {
          for (var d in r2)
            this.bind(d, r2[d]);
        }, initKeys: function() {
          this._handlers || (this._handlers = {}), this.keys && this.bindAll(this.keys);
        } };
      }(e2), function(t2) {
        t2.$keyboardNavigation.getFocusableNodes = t2._getFocusableNodes, t2.$keyboardNavigation.trapFocus = function(r2, d) {
          if (d.keyCode != 9)
            return false;
          for (var n, s = t2.$keyboardNavigation.getFocusableNodes(r2), _ = document.activeElement, a2 = -1, o2 = 0; o2 < s.length; o2++)
            if (s[o2] == _) {
              a2 = o2;
              break;
            }
          if (d.shiftKey) {
            if (n = s[a2 <= 0 ? s.length - 1 : a2 - 1])
              return n.focus(), d.preventDefault(), true;
          } else if (n = s[a2 >= s.length - 1 ? 0 : a2 + 1])
            return n.focus(), d.preventDefault(), true;
          return false;
        };
      }(e2), function(t2) {
        t2.$keyboardNavigation.marker = { clear: function() {
          for (var r2 = t2.$container.querySelectorAll(".dhx_focus_slot"), d = 0; d < r2.length; d++)
            r2[d].parentNode.removeChild(r2[d]);
        }, createElement: function() {
          var r2 = document.createElement("div");
          return r2.setAttribute("tabindex", -1), r2.className = "dhx_focus_slot", r2;
        }, renderMultiple: function(r2, d, n) {
          for (var s = [], _ = new Date(r2), a2 = new Date(Math.min(d.valueOf(), t2.date.add(t2.date.day_start(new Date(r2)), 1, "day").valueOf())); _.valueOf() < d.valueOf(); )
            s = s.concat(n.call(this, _, new Date(Math.min(a2.valueOf(), d.valueOf())))), _ = t2.date.day_start(t2.date.add(_, 1, "day")), a2 = t2.date.day_start(t2.date.add(_, 1, "day")), a2 = new Date(Math.min(a2.valueOf(), d.valueOf()));
          return s;
        }, render: function(r2, d, n) {
          this.clear();
          var s = [], _ = t2.$keyboardNavigation.TimeSlot.prototype._modes;
          switch (t2.$keyboardNavigation.TimeSlot.prototype._getMode()) {
            case _.units:
              s = this.renderVerticalMarker(r2, d, n);
              break;
            case _.timeline:
              s = this.renderTimelineMarker(r2, d, n);
              break;
            case _.year:
              s = s.concat(this.renderMultiple(r2, d, this.renderYearMarker));
              break;
            case _.month:
              s = this.renderMonthMarker(r2, d);
              break;
            case _.weekAgenda:
              s = s.concat(this.renderMultiple(r2, d, this.renderWeekAgendaMarker));
              break;
            case _.list:
              s = this.renderAgendaMarker(r2, d);
              break;
            case _.dayColumns:
              s = s.concat(this.renderMultiple(r2, d, this.renderVerticalMarker));
          }
          this.addWaiAriaLabel(s, r2, d, n), this.addDataAttributes(s, r2, d, n);
          for (var a2 = s.length - 1; a2 >= 0; a2--)
            if (s[a2].offsetWidth)
              return s[a2];
          return null;
        }, addDataAttributes: function(r2, d, n, s) {
          for (var _ = t2.date.date_to_str(t2.config.api_date), a2 = _(d), o2 = _(n), l = 0; l < r2.length; l++)
            r2[l].setAttribute("data-start-date", a2), r2[l].setAttribute("data-end-date", o2), s && r2[l].setAttribute("data-section", s);
        }, addWaiAriaLabel: function(r2, d, n, s) {
          var _ = "", a2 = t2.getState().mode, o2 = false;
          if (_ += t2.templates.day_date(d), t2.date.day_start(new Date(d)).valueOf() != d.valueOf() && (_ += " " + t2.templates.hour_scale(d), o2 = true), t2.date.day_start(new Date(d)).valueOf() != t2.date.day_start(new Date(n)).valueOf() && (_ += " - " + t2.templates.day_date(n), (o2 || t2.date.day_start(new Date(n)).valueOf() != n.valueOf()) && (_ += " " + t2.templates.hour_scale(n))), s) {
            if (t2.matrix && t2.matrix[a2]) {
              const h = t2.matrix[a2], v = h.y_unit[h.order[s]];
              _ += ", " + t2.templates[a2 + "_scale_label"](v.key, v.label, v);
            } else if (t2._props && t2._props[a2]) {
              const h = t2._props[a2], v = h.options[h.order[s]];
              _ += ", " + t2.templates[a2 + "_scale_text"](v.key, v.label, v);
            }
          }
          for (var l = 0; l < r2.length; l++)
            t2._waiAria.setAttributes(r2[l], { "aria-label": _, "aria-live": "polite" });
        }, renderWeekAgendaMarker: function(r2, d) {
          for (var n = t2.$container.querySelectorAll(".dhx_wa_day_cont .dhx_wa_scale_bar"), s = t2.date.week_start(new Date(t2.getState().min_date)), _ = -1, a2 = t2.date.day_start(new Date(r2)), o2 = 0; o2 < n.length && (_++, t2.date.day_start(new Date(s)).valueOf() != a2.valueOf()); o2++)
            s = t2.date.add(s, 1, "day");
          return _ != -1 ? this._wrapDiv(n[_]) : [];
        }, _wrapDiv: function(r2) {
          var d = this.createElement();
          return d.style.top = r2.offsetTop + "px", d.style.left = r2.offsetLeft + "px", d.style.width = r2.offsetWidth + "px", d.style.height = r2.offsetHeight + "px", r2.appendChild(d), [d];
        }, renderYearMarker: function(r2, d) {
          var n = t2._get_year_cell(r2);
          n.style.position = "relative";
          var s = this.createElement();
          return s.style.top = "0px", s.style.left = "0px", s.style.width = "100%", s.style.height = "100%", n.appendChild(s), [s];
        }, renderAgendaMarker: function(r2, d) {
          var n = this.createElement();
          return n.style.height = "1px", n.style.width = "100%", n.style.opacity = 1, n.style.top = "0px", n.style.left = "0px", t2.$container.querySelector(".dhx_cal_data").appendChild(n), [n];
        }, renderTimelineMarker: function(r2, d, n) {
          var s = t2._lame_copy({}, t2.matrix[t2._mode]), _ = s._scales;
          s.round_position = false;
          var a2 = [], o2 = r2 ? new Date(r2) : t2._min_date, l = d ? new Date(d) : t2._max_date;
          if (o2.valueOf() < t2._min_date.valueOf() && (o2 = new Date(t2._min_date)), l.valueOf() > t2._max_date.valueOf() && (l = new Date(t2._max_date)), !s._trace_x)
            return a2;
          for (var h = 0; h < s._trace_x.length && !t2._is_column_visible(s._trace_x[h]); h++)
            ;
          if (h == s._trace_x.length)
            return a2;
          var v = _[n];
          if (!(o2 < d && l > r2))
            return a2;
          var u = this.createElement();
          let f, c2;
          function p(b, k) {
            k.setDate(1), k.setFullYear(b.getFullYear()), k.setMonth(b.getMonth()), k.setDate(b.getDate());
          }
          if (t2.getView().days) {
            const b = new Date(r2);
            p(t2._min_date, b);
            const k = new Date(d);
            p(t2._min_date, k), f = t2._timeline_getX({ start_date: b }, false, s), c2 = t2._timeline_getX({ start_date: k }, false, s);
          } else
            f = t2._timeline_getX({ start_date: r2 }, false, s), c2 = t2._timeline_getX({ start_date: d }, false, s);
          var m = s._section_height[n] - 1 || s.dy - 1, g = 0;
          t2._isRender("cell") && (g = v.offsetTop, f += s.dx, c2 += s.dx, v = t2.$container.querySelector(".dhx_cal_data"));
          var y2 = Math.max(1, c2 - f - 1);
          let x = "left";
          return t2.config.rtl && (x = "right"), u.style.cssText = `height:${m}px; ${x}:${f}px; width:${y2}px; top:${g}px;`, v && (v.appendChild(u), a2.push(u)), a2;
        }, renderMonthCell: function(r2) {
          for (var d = t2.$container.querySelectorAll(".dhx_month_head"), n = [], s = 0; s < d.length; s++)
            n.push(d[s].parentNode);
          var _ = -1, a2 = 0, o2 = -1, l = t2.date.week_start(new Date(t2.getState().min_date)), h = t2.date.day_start(new Date(r2));
          for (s = 0; s < n.length && (_++, o2 == 6 ? (a2++, o2 = 0) : o2++, t2.date.day_start(new Date(l)).valueOf() != h.valueOf()); s++)
            l = t2.date.add(l, 1, "day");
          if (_ == -1)
            return [];
          var v = t2._colsS[o2], u = t2._colsS.heights[a2], f = this.createElement();
          f.style.top = u + "px", f.style.left = v + "px", f.style.width = t2._cols[o2] + "px", f.style.height = (t2._colsS.heights[a2 + 1] - u || t2._colsS.height) + "px";
          var c2 = t2.$container.querySelector(".dhx_cal_data"), p = c2.querySelector(".dhx_cal_month_table");
          return p.nextSibling ? c2.insertBefore(f, p.nextSibling) : c2.appendChild(f), f;
        }, renderMonthMarker: function(r2, d) {
          for (var n = [], s = r2; s.valueOf() < d.valueOf(); )
            n.push(this.renderMonthCell(s)), s = t2.date.add(s, 1, "day");
          return n;
        }, renderVerticalMarker: function(r2, d, n) {
          var s = t2.locate_holder_day(r2), _ = [], a2 = null, o2 = t2.config;
          if (t2._ignores[s])
            return _;
          if (t2._props && t2._props[t2._mode] && n) {
            var l = t2._props[t2._mode];
            s = l.order[n];
            var h = l.order[n];
            l.days > 1 ? s = t2.locate_holder_day(r2) + h : (s = h, l.size && s > l.position + l.size && (s = 0));
          }
          if (!(a2 = t2.locate_holder(s)) || a2.querySelector(".dhx_scale_hour"))
            return document.createElement("div");
          var v = Math.max(60 * r2.getHours() + r2.getMinutes(), 60 * o2.first_hour), u = Math.min(60 * d.getHours() + d.getMinutes(), 60 * o2.last_hour);
          if (!u && t2.date.day_start(new Date(d)).valueOf() > t2.date.day_start(new Date(r2)).valueOf() && (u = 60 * o2.last_hour), u <= v)
            return [];
          var f = this.createElement(), c2 = t2.config.hour_size_px * o2.last_hour + 1, p = 36e5;
          return f.style.top = Math.round((60 * v * 1e3 - t2.config.first_hour * p) * t2.config.hour_size_px / p) % c2 + "px", f.style.lineHeight = f.style.height = Math.max(Math.round(60 * (u - v) * 1e3 * t2.config.hour_size_px / p) % c2, 1) + "px", f.style.width = "100%", a2.appendChild(f), _.push(f), _[0];
        } };
      }(e2), function(t2) {
        t2.$keyboardNavigation.SchedulerNode = function() {
        }, t2.$keyboardNavigation.SchedulerNode.prototype = t2._compose(t2.$keyboardNavigation.EventHandler, { getDefaultNode: function() {
          var r2 = new t2.$keyboardNavigation.TimeSlot();
          return r2.isValid() || (r2 = r2.fallback()), r2;
        }, _modes: { month: "month", year: "year", dayColumns: "dayColumns", timeline: "timeline", units: "units", weekAgenda: "weekAgenda", list: "list" }, getMode: function() {
          var r2 = t2.getState().mode;
          return t2.matrix && t2.matrix[r2] ? this._modes.timeline : t2._props && t2._props[r2] ? this._modes.units : r2 == "month" ? this._modes.month : r2 == "year" ? this._modes.year : r2 == "week_agenda" ? this._modes.weekAgenda : r2 == "map" || r2 == "agenda" || t2._grid && t2["grid_" + r2] ? this._modes.list : this._modes.dayColumns;
        }, focus: function() {
          t2.focus();
        }, blur: function() {
        }, disable: function() {
          t2.$container.setAttribute("tabindex", "0");
        }, enable: function() {
          t2.$container && t2.$container.removeAttribute("tabindex");
        }, isEnabled: function() {
          return t2.$container.hasAttribute("tabindex");
        }, _compareEvents: function(r2, d) {
          return r2.start_date.valueOf() == d.start_date.valueOf() ? r2.id > d.id ? 1 : -1 : r2.start_date.valueOf() > d.start_date.valueOf() ? 1 : -1;
        }, _pickEvent: function(r2, d, n, s) {
          var _ = t2.getState();
          r2 = new Date(Math.max(_.min_date.valueOf(), r2.valueOf())), d = new Date(Math.min(_.max_date.valueOf(), d.valueOf()));
          var a2 = t2.getEvents(r2, d);
          a2.sort(this._compareEvents), s && (a2 = a2.reverse());
          for (var o2 = !!n, l = 0; l < a2.length && o2; l++)
            a2[l].id == n && (o2 = false), a2.splice(l, 1), l--;
          for (l = 0; l < a2.length; l++)
            if (new t2.$keyboardNavigation.Event(a2[l].id).getNode())
              return a2[l];
          return null;
        }, nextEventHandler: function(r2) {
          var d = t2.$keyboardNavigation.dispatcher.activeNode, n = r2 || d && d.eventId, s = null;
          if (n && t2.getEvent(n)) {
            var _ = t2.getEvent(n);
            s = t2.$keyboardNavigation.SchedulerNode.prototype._pickEvent(_.start_date, t2.date.add(_.start_date, 1, "year"), _.id, false);
          }
          if (!s && !r2) {
            var a2 = t2.getState();
            s = t2.$keyboardNavigation.SchedulerNode.prototype._pickEvent(a2.min_date, t2.date.add(a2.min_date, 1, "year"), null, false);
          }
          if (s) {
            var o2 = new t2.$keyboardNavigation.Event(s.id);
            o2.isValid() ? (d && d.blur(), t2.$keyboardNavigation.dispatcher.setActiveNode(o2)) : this.nextEventHandler(s.id);
          }
        }, prevEventHandler: function(r2) {
          var d = t2.$keyboardNavigation.dispatcher.activeNode, n = r2 || d && d.eventId, s = null;
          if (n && t2.getEvent(n)) {
            var _ = t2.getEvent(n);
            s = t2.$keyboardNavigation.SchedulerNode.prototype._pickEvent(t2.date.add(_.end_date, -1, "year"), _.end_date, _.id, true);
          }
          if (!s && !r2) {
            var a2 = t2.getState();
            s = t2.$keyboardNavigation.SchedulerNode.prototype._pickEvent(t2.date.add(a2.max_date, -1, "year"), a2.max_date, null, true);
          }
          if (s) {
            var o2 = new t2.$keyboardNavigation.Event(s.id);
            o2.isValid() ? (d && d.blur(), t2.$keyboardNavigation.dispatcher.setActiveNode(o2)) : this.prevEventHandler(s.id);
          }
        }, keys: { "alt+1, alt+2, alt+3, alt+4, alt+5, alt+6, alt+7, alt+8, alt+9": function(r2) {
          var d = t2.$keyboardNavigation.HeaderCell.prototype.getNodes(".dhx_cal_navline .dhx_cal_tab"), n = r2.key;
          n === void 0 && (n = r2.keyCode - 48), d[1 * n - 1] && d[1 * n - 1].click();
        }, "ctrl+left,meta+left": function(r2) {
          t2._click.dhx_cal_prev_button();
        }, "ctrl+right,meta+right": function(r2) {
          t2._click.dhx_cal_next_button();
        }, "ctrl+up,meta+up": function(r2) {
          t2.$container.querySelector(".dhx_cal_data").scrollTop -= 20;
        }, "ctrl+down,meta+down": function(r2) {
          t2.$container.querySelector(".dhx_cal_data").scrollTop += 20;
        }, e: function() {
          this.nextEventHandler();
        }, home: function() {
          t2.setCurrentView(/* @__PURE__ */ new Date());
        }, "shift+e": function() {
          this.prevEventHandler();
        }, "ctrl+enter,meta+enter": function() {
          t2.addEventNow({ start_date: new Date(t2.getState().date) });
        }, "ctrl+c,meta+c": function(r2) {
          t2._key_nav_copy_paste(r2);
        }, "ctrl+v,meta+v": function(r2) {
          t2._key_nav_copy_paste(r2);
        }, "ctrl+x,meta+x": function(r2) {
          t2._key_nav_copy_paste(r2);
        } } }), t2.$keyboardNavigation.SchedulerNode.prototype.bindAll(t2.$keyboardNavigation.SchedulerNode.prototype.keys);
      }(e2), function(t2) {
        t2.$keyboardNavigation.KeyNavNode = function() {
        }, t2.$keyboardNavigation.KeyNavNode.prototype = t2._compose(t2.$keyboardNavigation.EventHandler, { isValid: function() {
          return true;
        }, fallback: function() {
          return null;
        }, moveTo: function(r2) {
          t2.$keyboardNavigation.dispatcher.setActiveNode(r2);
        }, compareTo: function(r2) {
          if (!r2)
            return false;
          for (var d in this) {
            if (!!this[d] != !!r2[d])
              return false;
            var n = !(!this[d] || !this[d].toString), s = !(!r2[d] || !r2[d].toString);
            if (s != n)
              return false;
            if (s && n) {
              if (r2[d].toString() != this[d].toString())
                return false;
            } else if (r2[d] != this[d])
              return false;
          }
          return true;
        }, getNode: function() {
        }, focus: function() {
          var r2 = this.getNode();
          r2 && (r2.setAttribute("tabindex", "-1"), r2.focus && r2.focus());
        }, blur: function() {
          var r2 = this.getNode();
          r2 && r2.setAttribute("tabindex", "-1");
        } });
      }(e2), function(t2) {
        t2.$keyboardNavigation.HeaderCell = function(r2) {
          this.index = r2 || 0;
        }, t2.$keyboardNavigation.HeaderCell.prototype = t2._compose(t2.$keyboardNavigation.KeyNavNode, { getNode: function(r2) {
          r2 = r2 || this.index || 0;
          var d = this.getNodes();
          if (d[r2])
            return d[r2];
        }, getNodes: function(r2) {
          r2 = r2 || [".dhx_cal_navline .dhx_cal_prev_button", ".dhx_cal_navline .dhx_cal_next_button", ".dhx_cal_navline .dhx_cal_today_button", ".dhx_cal_navline .dhx_cal_tab"].join(", ");
          var d = Array.prototype.slice.call(t2.$container.querySelectorAll(r2));
          return d.sort(function(n, s) {
            return n.offsetLeft - s.offsetLeft;
          }), d;
        }, _handlers: null, isValid: function() {
          return !!this.getNode(this.index);
        }, fallback: function() {
          var r2 = this.getNode(0);
          return r2 || (r2 = new t2.$keyboardNavigation.TimeSlot()), r2;
        }, keys: { left: function() {
          var r2 = this.index - 1;
          r2 < 0 && (r2 = this.getNodes().length - 1), this.moveTo(new t2.$keyboardNavigation.HeaderCell(r2));
        }, right: function() {
          var r2 = this.index + 1;
          r2 >= this.getNodes().length && (r2 = 0), this.moveTo(new t2.$keyboardNavigation.HeaderCell(r2));
        }, down: function() {
          this.moveTo(new t2.$keyboardNavigation.TimeSlot());
        }, enter: function() {
          var r2 = this.getNode();
          r2 && r2.click();
        } } }), t2.$keyboardNavigation.HeaderCell.prototype.bindAll(t2.$keyboardNavigation.HeaderCell.prototype.keys);
      }(e2), function(t2) {
        t2.$keyboardNavigation.Event = function(r2) {
          if (this.eventId = null, t2.getEvent(r2)) {
            var d = t2.getEvent(r2);
            this.start = new Date(d.start_date), this.end = new Date(d.end_date), this.section = this._getSection(d), this.eventId = r2;
          }
        }, t2.$keyboardNavigation.Event.prototype = t2._compose(t2.$keyboardNavigation.KeyNavNode, { _getNodes: function() {
          return Array.prototype.slice.call(t2.$container.querySelectorAll("[" + t2.config.event_attribute + "]"));
        }, _modes: t2.$keyboardNavigation.SchedulerNode.prototype._modes, getMode: t2.$keyboardNavigation.SchedulerNode.prototype.getMode, _handlers: null, isValid: function() {
          return !(!t2.getEvent(this.eventId) || !this.getNode());
        }, fallback: function() {
          var r2 = this._getNodes()[0], d = null;
          if (r2 && t2._locate_event(r2)) {
            var n = t2._locate_event(r2);
            d = new t2.$keyboardNavigation.Event(n);
          } else
            d = new t2.$keyboardNavigation.TimeSlot();
          return d;
        }, isScrolledIntoView: function(r2) {
          var d = r2.getBoundingClientRect(), n = t2.$container.querySelector(".dhx_cal_data").getBoundingClientRect();
          return !(d.bottom < n.top || d.top > n.bottom);
        }, getNode: function() {
          var r2 = "[" + t2.config.event_attribute + "='" + this.eventId + "']", d = t2.$keyboardNavigation.dispatcher.getInlineEditor(this.eventId);
          if (d)
            return d;
          if (t2.isMultisectionEvent && t2.isMultisectionEvent(t2.getEvent(this.eventId))) {
            for (var n = t2.$container.querySelectorAll(r2), s = 0; s < n.length; s++)
              if (this.isScrolledIntoView(n[s]))
                return n[s];
            return n[0];
          }
          return t2.$container.querySelector(r2);
        }, focus: function() {
          var r2 = t2.getEvent(this.eventId), d = t2.getState();
          (r2.start_date.valueOf() > d.max_date.valueOf() || r2.end_date.valueOf() <= d.min_date.valueOf()) && t2.setCurrentView(r2.start_date);
          var n = this.getNode();
          this.isScrolledIntoView(n) ? t2.$keyboardNavigation.dispatcher.keepScrollPosition(function() {
            t2.$keyboardNavigation.KeyNavNode.prototype.focus.apply(this);
          }.bind(this)) : t2.$keyboardNavigation.KeyNavNode.prototype.focus.apply(this);
        }, blur: function() {
          t2.$keyboardNavigation.KeyNavNode.prototype.blur.apply(this);
        }, _getSection: function(r2) {
          var d = null, n = t2.getState().mode;
          return t2.matrix && t2.matrix[n] ? d = r2[t2.matrix[t2.getState().mode].y_property] : t2._props && t2._props[n] && (d = r2[t2._props[n].map_to]), d;
        }, _moveToSlot: function(r2) {
          var d = t2.getEvent(this.eventId);
          if (d) {
            var n = this._getSection(d), s = new t2.$keyboardNavigation.TimeSlot(d.start_date, null, n);
            this.moveTo(s.nextSlot(s, r2));
          } else
            this.moveTo(new t2.$keyboardNavigation.TimeSlot());
        }, keys: { left: function() {
          this._moveToSlot("left");
        }, right: function() {
          this._moveToSlot("right");
        }, down: function() {
          this.getMode() == this._modes.list ? t2.$keyboardNavigation.SchedulerNode.prototype.nextEventHandler() : this._moveToSlot("down");
        }, space: function() {
          var r2 = this.getNode();
          r2 && r2.click ? r2.click() : this.moveTo(new t2.$keyboardNavigation.TimeSlot());
        }, up: function() {
          this.getMode() == this._modes.list ? t2.$keyboardNavigation.SchedulerNode.prototype.prevEventHandler() : this._moveToSlot("up");
        }, delete: function() {
          t2.getEvent(this.eventId) ? t2._click.buttons.delete(this.eventId) : this.moveTo(new t2.$keyboardNavigation.TimeSlot());
        }, enter: function() {
          t2.getEvent(this.eventId) ? t2.showLightbox(this.eventId) : this.moveTo(new t2.$keyboardNavigation.TimeSlot());
        } } }), t2.$keyboardNavigation.Event.prototype.bindAll(t2.$keyboardNavigation.Event.prototype.keys);
      }(e2), function(t2) {
        t2.$keyboardNavigation.TimeSlot = function(r2, d, n, s) {
          var _ = t2.getState(), a2 = t2.matrix && t2.matrix[_.mode];
          r2 || (r2 = this.getDefaultDate()), d || (d = a2 ? t2.date.add(r2, a2.x_step, a2.x_unit) : t2.date.add(r2, t2.config.key_nav_step, "minute")), this.section = n || this._getDefaultSection(), this.start_date = new Date(r2), this.end_date = new Date(d), this.movingDate = s || null;
        }, t2.$keyboardNavigation.TimeSlot.prototype = t2._compose(t2.$keyboardNavigation.KeyNavNode, { _handlers: null, getDefaultDate: function() {
          var r2, d = t2.getState(), n = new Date(d.date);
          n.setSeconds(0), n.setMilliseconds(0);
          var s = /* @__PURE__ */ new Date();
          s.setSeconds(0), s.setMilliseconds(0);
          var _ = t2.matrix && t2.matrix[d.mode], a2 = false;
          if (n.valueOf() === s.valueOf() && (a2 = true), _)
            a2 ? (_.x_unit === "day" ? (s.setHours(0), s.setMinutes(0)) : _.x_unit === "hour" && s.setMinutes(0), r2 = s) : r2 = t2.date[_.name + "_start"](new Date(d.date)), r2 = this.findVisibleColumn(r2);
          else if (r2 = new Date(t2.getState().min_date), a2 && (r2 = s), r2 = this.findVisibleColumn(r2), a2 || r2.setHours(t2.config.first_hour), !t2._table_view) {
            var o2 = t2.$container.querySelector(".dhx_cal_data");
            o2.scrollTop && r2.setHours(t2.config.first_hour + Math.ceil(o2.scrollTop / t2.config.hour_size_px));
          }
          return r2;
        }, clone: function(r2) {
          return new t2.$keyboardNavigation.TimeSlot(r2.start_date, r2.end_date, r2.section, r2.movingDate);
        }, _getMultisectionView: function() {
          var r2, d = t2.getState();
          return t2._props && t2._props[d.mode] ? r2 = t2._props[d.mode] : t2.matrix && t2.matrix[d.mode] && (r2 = t2.matrix[d.mode]), r2;
        }, _getDefaultSection: function() {
          var r2 = null;
          return this._getMultisectionView() && !r2 && (r2 = this._getNextSection()), r2;
        }, _getNextSection: function(r2, d) {
          var n = this._getMultisectionView(), s = n.order[r2], _ = s;
          (_ = s !== void 0 ? s + d : n.size && n.position ? n.position : 0) < 0 && (_ = 0);
          var a2 = n.options || n.y_unit;
          return _ >= a2.length && (_ = a2.length - 1), a2[_] ? a2[_].key : null;
        }, isValid: function() {
          var r2 = t2.getState();
          if (this.start_date.valueOf() < r2.min_date.valueOf() || this.start_date.valueOf() >= r2.max_date.valueOf() || !this.isVisible(this.start_date, this.end_date))
            return false;
          var d = this._getMultisectionView();
          return !d || d.order[this.section] !== void 0;
        }, fallback: function() {
          var r2 = new t2.$keyboardNavigation.TimeSlot();
          return r2.isValid() ? r2 : new t2.$keyboardNavigation.DataArea();
        }, getNodes: function() {
          return Array.prototype.slice.call(t2.$container.querySelectorAll(".dhx_focus_slot"));
        }, getNode: function() {
          return this.getNodes()[0];
        }, focus: function() {
          this.section && t2.getView() && t2.getView().smart_rendering && t2.getView().scrollTo && !t2.$container.querySelector(`[data-section-id="${this.section}"]`) && t2.getView().scrollTo({ section: this.section }), t2.$keyboardNavigation.marker.render(this.start_date, this.end_date, this.section), t2.$keyboardNavigation.KeyNavNode.prototype.focus.apply(this), t2.$keyboardNavigation._pasteDate = this.start_date, t2.$keyboardNavigation._pasteSection = this.section;
        }, blur: function() {
          t2.$keyboardNavigation.KeyNavNode.prototype.blur.apply(this), t2.$keyboardNavigation.marker.clear();
        }, _modes: t2.$keyboardNavigation.SchedulerNode.prototype._modes, _getMode: t2.$keyboardNavigation.SchedulerNode.prototype.getMode, addMonthDate: function(r2, d, n) {
          var s;
          switch (d) {
            case "up":
              s = t2.date.add(r2, -1, "week");
              break;
            case "down":
              s = t2.date.add(r2, 1, "week");
              break;
            case "left":
              s = t2.date.day_start(t2.date.add(r2, -1, "day")), s = this.findVisibleColumn(s, -1);
              break;
            case "right":
              s = t2.date.day_start(t2.date.add(r2, 1, "day")), s = this.findVisibleColumn(s, 1);
              break;
            default:
              s = t2.date.day_start(new Date(r2));
          }
          var _ = t2.getState();
          return (r2.valueOf() < _.min_date.valueOf() || !n && r2.valueOf() >= _.max_date.valueOf()) && (s = new Date(_.min_date)), s;
        }, nextMonthSlot: function(r2, d, n) {
          var s, _;
          return (s = this.addMonthDate(r2.start_date, d, n)).setHours(t2.config.first_hour), (_ = new Date(s)).setHours(t2.config.last_hour), { start_date: s, end_date: _ };
        }, _alignTimeSlot: function(r2, d, n, s) {
          for (var _ = new Date(d); _.valueOf() < r2.valueOf(); )
            _ = t2.date.add(_, s, n);
          return _.valueOf() > r2.valueOf() && (_ = t2.date.add(_, -s, n)), _;
        }, nextTimelineSlot: function(r2, d, n) {
          var s = t2.getState(), _ = t2.matrix[s.mode], a2 = this._alignTimeSlot(r2.start_date, t2.date[_.name + "_start"](new Date(r2.start_date)), _.x_unit, _.x_step), o2 = this._alignTimeSlot(r2.end_date, t2.date[_.name + "_start"](new Date(r2.end_date)), _.x_unit, _.x_step);
          o2.valueOf() <= a2.valueOf() && (o2 = t2.date.add(a2, _.x_step, _.x_unit));
          var l = this.clone(r2);
          switch (l.start_date = a2, l.end_date = o2, l.section = r2.section || this._getNextSection(), d) {
            case "up":
              l.section = this._getNextSection(r2.section, -1);
              break;
            case "down":
              l.section = this._getNextSection(r2.section, 1);
              break;
            case "left":
              l.start_date = this.findVisibleColumn(t2.date.add(l.start_date, -_.x_step, _.x_unit), -1), l.end_date = t2.date.add(l.start_date, _.x_step, _.x_unit);
              break;
            case "right":
              l.start_date = this.findVisibleColumn(t2.date.add(l.start_date, _.x_step, _.x_unit), 1), l.end_date = t2.date.add(l.start_date, _.x_step, _.x_unit);
          }
          return (l.start_date.valueOf() < s.min_date.valueOf() || l.start_date.valueOf() >= s.max_date.valueOf()) && (n && l.start_date.valueOf() >= s.max_date.valueOf() ? l.start_date = new Date(s.max_date) : (l.start_date = t2.date[s.mode + "_start"](t2.date.add(s.date, d == "left" ? -1 : 1, s.mode)), l.end_date = t2.date.add(l.start_date, _.x_step, _.x_unit))), l;
        }, nextUnitsSlot: function(r2, d, n) {
          var s = this.clone(r2);
          s.section = r2.section || this._getNextSection();
          var _ = r2.section || this._getNextSection(), a2 = t2.getState(), o2 = t2._props[a2.mode];
          switch (d) {
            case "left":
              _ = this._getNextSection(r2.section, -1);
              var l = o2.size ? o2.size - 1 : o2.options.length;
              o2.days > 1 && o2.order[_] == l - 1 && t2.date.add(r2.start_date, -1, "day").valueOf() >= a2.min_date.valueOf() && (s = this.nextDaySlot(r2, d, n));
              break;
            case "right":
              _ = this._getNextSection(r2.section, 1), o2.days > 1 && !o2.order[_] && t2.date.add(r2.start_date, 1, "day").valueOf() < a2.max_date.valueOf() && (s = this.nextDaySlot(r2, d, n));
              break;
            default:
              s = this.nextDaySlot(r2, d, n), _ = r2.section;
          }
          return s.section = _, s;
        }, _moveDate: function(r2, d) {
          var n = this.findVisibleColumn(t2.date.add(r2, d, "day"), d);
          return n.setHours(r2.getHours()), n.setMinutes(r2.getMinutes()), n;
        }, isBeforeLastHour: function(r2, d) {
          var n = r2.getMinutes(), s = r2.getHours(), _ = t2.config.last_hour;
          return s < _ || !d && (_ == 24 || s == _) && !n;
        }, isAfterFirstHour: function(r2, d) {
          var n = r2.getMinutes(), s = r2.getHours(), _ = t2.config.first_hour, a2 = t2.config.last_hour;
          return s >= _ || !d && !n && (!s && a2 == 24 || s == a2);
        }, isInVisibleDayTime: function(r2, d) {
          return this.isBeforeLastHour(r2, d) && this.isAfterFirstHour(r2, d);
        }, nextDaySlot: function(r2, d, n) {
          var s, _, a2 = t2.config.key_nav_step, o2 = this._alignTimeSlot(r2.start_date, t2.date.day_start(new Date(r2.start_date)), "minute", a2), l = r2.start_date;
          switch (d) {
            case "up":
              if (s = t2.date.add(o2, -a2, "minute"), !this.isInVisibleDayTime(s, true) && (!n || this.isInVisibleDayTime(l, true))) {
                var h = true;
                n && t2.date.date_part(new Date(s)).valueOf() != t2.date.date_part(new Date(l)).valueOf() && (h = false), h && (s = this.findVisibleColumn(t2.date.add(r2.start_date, -1, "day"), -1)), s.setHours(t2.config.last_hour), s.setMinutes(0), s = t2.date.add(s, -a2, "minute");
              }
              _ = t2.date.add(s, a2, "minute");
              break;
            case "down":
              s = t2.date.add(o2, a2, "minute");
              var v = n ? s : t2.date.add(s, a2, "minute");
              this.isInVisibleDayTime(v, false) || n && !this.isInVisibleDayTime(l, false) || (n ? (h = true, t2.date.date_part(new Date(l)).valueOf() == l.valueOf() && (h = false), h && (s = this.findVisibleColumn(t2.date.add(r2.start_date, 1, "day"), 1)), s.setHours(t2.config.first_hour), s.setMinutes(0), s = t2.date.add(s, a2, "minute")) : ((s = this.findVisibleColumn(t2.date.add(r2.start_date, 1, "day"), 1)).setHours(t2.config.first_hour), s.setMinutes(0))), _ = t2.date.add(s, a2, "minute");
              break;
            case "left":
              s = this._moveDate(r2.start_date, -1), _ = this._moveDate(r2.end_date, -1);
              break;
            case "right":
              s = this._moveDate(r2.start_date, 1), _ = this._moveDate(r2.end_date, 1);
              break;
            default:
              s = o2, _ = t2.date.add(s, a2, "minute");
          }
          return { start_date: s, end_date: _ };
        }, nextWeekAgendaSlot: function(r2, d) {
          var n, s, _ = t2.getState();
          switch (d) {
            case "down":
            case "left":
              n = t2.date.day_start(t2.date.add(r2.start_date, -1, "day")), n = this.findVisibleColumn(n, -1);
              break;
            case "up":
            case "right":
              n = t2.date.day_start(t2.date.add(r2.start_date, 1, "day")), n = this.findVisibleColumn(n, 1);
              break;
            default:
              n = t2.date.day_start(r2.start_date);
          }
          return (r2.start_date.valueOf() < _.min_date.valueOf() || r2.start_date.valueOf() >= _.max_date.valueOf()) && (n = new Date(_.min_date)), (s = new Date(n)).setHours(t2.config.last_hour), { start_date: n, end_date: s };
        }, nextAgendaSlot: function(r2, d) {
          return { start_date: r2.start_date, end_date: r2.end_date };
        }, isDateVisible: function(r2) {
          if (!t2._ignores_detected)
            return true;
          var d, n = t2.matrix && t2.matrix[t2.getState().mode];
          return d = n ? t2._get_date_index(n, r2) : t2.locate_holder_day(r2), !t2._ignores[d];
        }, findVisibleColumn: function(r2, d) {
          var n = r2;
          d = d || 1;
          for (var s = t2.getState(); !this.isDateVisible(n) && (d > 0 && n.valueOf() <= s.max_date.valueOf() || d < 0 && n.valueOf() >= s.min_date.valueOf()); )
            n = this.nextDateColumn(n, d);
          return n;
        }, nextDateColumn: function(r2, d) {
          d = d || 1;
          var n = t2.matrix && t2.matrix[t2.getState().mode];
          return n ? t2.date.add(r2, d * n.x_step, n.x_unit) : t2.date.day_start(t2.date.add(r2, d, "day"));
        }, isVisible: function(r2, d) {
          if (!t2._ignores_detected)
            return true;
          for (var n = new Date(r2); n.valueOf() < d.valueOf(); ) {
            if (this.isDateVisible(n))
              return true;
            n = this.nextDateColumn(n);
          }
          return false;
        }, nextSlot: function(r2, d, n, s) {
          var _;
          n = n || this._getMode();
          var a2 = t2.$keyboardNavigation.TimeSlot.prototype.clone(r2);
          switch (n) {
            case this._modes.units:
              _ = this.nextUnitsSlot(a2, d, s);
              break;
            case this._modes.timeline:
              _ = this.nextTimelineSlot(a2, d, s);
              break;
            case this._modes.year:
            case this._modes.month:
              _ = this.nextMonthSlot(a2, d, s);
              break;
            case this._modes.weekAgenda:
              _ = this.nextWeekAgendaSlot(a2, d, s);
              break;
            case this._modes.list:
              _ = this.nextAgendaSlot(a2, d, s);
              break;
            case this._modes.dayColumns:
              _ = this.nextDaySlot(a2, d, s);
          }
          return _.start_date.valueOf() >= _.end_date.valueOf() && (_ = this.nextSlot(_, d, n)), t2.$keyboardNavigation.TimeSlot.prototype.clone(_);
        }, extendSlot: function(r2, d) {
          var n;
          switch (this._getMode()) {
            case this._modes.units:
              n = d == "left" || d == "right" ? this.nextUnitsSlot(r2, d) : this.extendUnitsSlot(r2, d);
              break;
            case this._modes.timeline:
              n = d == "down" || d == "up" ? this.nextTimelineSlot(r2, d) : this.extendTimelineSlot(r2, d);
              break;
            case this._modes.year:
            case this._modes.month:
              n = this.extendMonthSlot(r2, d);
              break;
            case this._modes.dayColumns:
              n = this.extendDaySlot(r2, d);
              break;
            case this._modes.weekAgenda:
              n = this.extendWeekAgendaSlot(r2, d);
              break;
            default:
              n = r2;
          }
          var s = t2.getState();
          return n.start_date.valueOf() < s.min_date.valueOf() && (n.start_date = this.findVisibleColumn(s.min_date), n.start_date.setHours(t2.config.first_hour)), n.end_date.valueOf() > s.max_date.valueOf() && (n.end_date = this.findVisibleColumn(s.max_date, -1)), t2.$keyboardNavigation.TimeSlot.prototype.clone(n);
        }, extendTimelineSlot: function(r2, d) {
          return this.extendGenericSlot({ left: "start_date", right: "end_date" }, r2, d, "timeline");
        }, extendWeekAgendaSlot: function(r2, d) {
          return this.extendGenericSlot({ left: "start_date", right: "end_date" }, r2, d, "weekAgenda");
        }, extendGenericSlot: function(r2, d, n, s) {
          var _, a2 = d.movingDate;
          if (a2 || (a2 = r2[n]), !a2 || !r2[n])
            return d;
          if (!n)
            return t2.$keyboardNavigation.TimeSlot.prototype.clone(d);
          (_ = this.nextSlot({ start_date: d[a2], section: d.section }, n, s, true)).start_date.valueOf() == d.start_date.valueOf() && (_ = this.nextSlot({ start_date: _.start_date, section: _.section }, n, s, true)), _.movingDate = a2;
          var o2 = this.extendSlotDates(d, _, _.movingDate);
          return o2.end_date.valueOf() <= o2.start_date.valueOf() && (_.movingDate = _.movingDate == "end_date" ? "start_date" : "end_date"), o2 = this.extendSlotDates(d, _, _.movingDate), _.start_date = o2.start_date, _.end_date = o2.end_date, _;
        }, extendSlotDates: function(r2, d, n) {
          var s = { start_date: null, end_date: null };
          return n == "start_date" ? (s.start_date = d.start_date, s.end_date = r2.end_date) : (s.start_date = r2.start_date, s.end_date = d.start_date), s;
        }, extendMonthSlot: function(r2, d) {
          return (r2 = this.extendGenericSlot({ up: "start_date", down: "end_date", left: "start_date", right: "end_date" }, r2, d, "month")).start_date.setHours(t2.config.first_hour), r2.end_date = t2.date.add(r2.end_date, -1, "day"), r2.end_date.setHours(t2.config.last_hour), r2;
        }, extendUnitsSlot: function(r2, d) {
          var n;
          switch (d) {
            case "down":
            case "up":
              n = this.extendDaySlot(r2, d);
              break;
            default:
              n = r2;
          }
          return n.section = r2.section, n;
        }, extendDaySlot: function(r2, d) {
          return this.extendGenericSlot({ up: "start_date", down: "end_date", left: "start_date", right: "end_date" }, r2, d, "dayColumns");
        }, scrollSlot: function(r2) {
          var d = t2.getState(), n = this.nextSlot(this, r2);
          (n.start_date.valueOf() < d.min_date.valueOf() || n.start_date.valueOf() >= d.max_date.valueOf()) && t2.setCurrentView(new Date(n.start_date)), this.moveTo(n);
        }, keys: { left: function() {
          this.scrollSlot("left");
        }, right: function() {
          this.scrollSlot("right");
        }, down: function() {
          this._getMode() == this._modes.list ? t2.$keyboardNavigation.SchedulerNode.prototype.nextEventHandler() : this.scrollSlot("down");
        }, up: function() {
          this._getMode() == this._modes.list ? t2.$keyboardNavigation.SchedulerNode.prototype.prevEventHandler() : this.scrollSlot("up");
        }, "shift+down": function() {
          this.moveTo(this.extendSlot(this, "down"));
        }, "shift+up": function() {
          this.moveTo(this.extendSlot(this, "up"));
        }, "shift+right": function() {
          this.moveTo(this.extendSlot(this, "right"));
        }, "shift+left": function() {
          this.moveTo(this.extendSlot(this, "left"));
        }, enter: function() {
          var r2 = { start_date: new Date(this.start_date), end_date: new Date(this.end_date) }, d = t2.getState().mode;
          t2.matrix && t2.matrix[d] ? r2[t2.matrix[t2.getState().mode].y_property] = this.section : t2._props && t2._props[d] && (r2[t2._props[d].map_to] = this.section), t2.addEventNow(r2);
        } } }), t2.$keyboardNavigation.TimeSlot.prototype.bindAll(t2.$keyboardNavigation.TimeSlot.prototype.keys);
      }(e2), function(t2) {
        t2.$keyboardNavigation.MinicalButton = function(r2, d) {
          this.container = r2, this.index = d || 0;
        }, t2.$keyboardNavigation.MinicalButton.prototype = t2._compose(t2.$keyboardNavigation.KeyNavNode, { isValid: function() {
          return !!this.container.offsetWidth;
        }, fallback: function() {
          var r2 = new t2.$keyboardNavigation.TimeSlot();
          return r2.isValid() ? r2 : new t2.$keyboardNavigation.DataArea();
        }, focus: function() {
          t2.$keyboardNavigation.dispatcher.globalNode.disable(), this.container.removeAttribute("tabindex"), t2.$keyboardNavigation.KeyNavNode.prototype.focus.apply(this);
        }, blur: function() {
          this.container.setAttribute("tabindex", "0"), t2.$keyboardNavigation.KeyNavNode.prototype.blur.apply(this);
        }, getNode: function() {
          return this.index ? this.container.querySelector(".dhx_cal_next_button") : this.container.querySelector(".dhx_cal_prev_button");
        }, keys: { right: function(r2) {
          this.moveTo(new t2.$keyboardNavigation.MinicalButton(this.container, this.index ? 0 : 1));
        }, left: function(r2) {
          this.moveTo(new t2.$keyboardNavigation.MinicalButton(this.container, this.index ? 0 : 1));
        }, down: function() {
          var r2 = new t2.$keyboardNavigation.MinicalCell(this.container, 0, 0);
          r2 && !r2.isValid() && (r2 = r2.fallback()), this.moveTo(r2);
        }, enter: function(r2) {
          this.getNode().click();
        } } }), t2.$keyboardNavigation.MinicalButton.prototype.bindAll(t2.$keyboardNavigation.MinicalButton.prototype.keys);
      }(e2), function(t2) {
        t2.$keyboardNavigation.MinicalCell = function(r2, d, n) {
          this.container = r2, this.row = d || 0, this.col = n || 0;
        }, t2.$keyboardNavigation.MinicalCell.prototype = t2._compose(t2.$keyboardNavigation.KeyNavNode, { isValid: function() {
          var r2 = this._getGrid();
          return !(!r2[this.row] || !r2[this.row][this.col]);
        }, fallback: function() {
          var r2 = this.row, d = this.col, n = this._getGrid();
          n[r2] || (r2 = 0);
          var s = true;
          if (r2 > n.length / 2 && (s = false), !n[r2]) {
            var _ = new t2.$keyboardNavigation.TimeSlot();
            return _.isValid() ? _ : new t2.$keyboardNavigation.DataArea();
          }
          if (s) {
            for (var a2 = d; n[r2] && a2 < n[r2].length; a2++)
              if (n[r2][a2] || a2 != n[r2].length - 1 || (r2++, d = 0), n[r2][a2])
                return new t2.$keyboardNavigation.MinicalCell(this.container, r2, a2);
          } else
            for (a2 = d; n[r2] && a2 < n[r2].length; a2--)
              if (n[r2][a2] || a2 || (d = n[--r2].length - 1), n[r2][a2])
                return new t2.$keyboardNavigation.MinicalCell(this.container, r2, a2);
          return new t2.$keyboardNavigation.MinicalButton(this.container, 0);
        }, focus: function() {
          t2.$keyboardNavigation.dispatcher.globalNode.disable(), this.container.removeAttribute("tabindex"), t2.$keyboardNavigation.KeyNavNode.prototype.focus.apply(this);
        }, blur: function() {
          this.container.setAttribute("tabindex", "0"), t2.$keyboardNavigation.KeyNavNode.prototype.blur.apply(this);
        }, _getNode: function(r2, d) {
          return this.container.querySelector(".dhx_year_body tr:nth-child(" + (r2 + 1) + ") td:nth-child(" + (d + 1) + ")");
        }, getNode: function() {
          return this._getNode(this.row, this.col);
        }, _getGrid: function() {
          for (var r2 = this.container.querySelectorAll(".dhx_year_body tr"), d = [], n = 0; n < r2.length; n++) {
            d[n] = [];
            for (var s = r2[n].querySelectorAll("td"), _ = 0; _ < s.length; _++) {
              var a2 = s[_], o2 = true, l = t2._getClassName(a2);
              (l.indexOf("dhx_after") > -1 || l.indexOf("dhx_before") > -1 || l.indexOf("dhx_scale_ignore") > -1) && (o2 = false), d[n][_] = o2;
            }
          }
          return d;
        }, keys: { right: function(r2) {
          var d = this._getGrid(), n = this.row, s = this.col + 1;
          d[n] && d[n][s] || (d[n + 1] ? (n += 1, s = 0) : s = this.col);
          var _ = new t2.$keyboardNavigation.MinicalCell(this.container, n, s);
          _.isValid() || (_ = _.fallback()), this.moveTo(_);
        }, left: function(r2) {
          var d = this._getGrid(), n = this.row, s = this.col - 1;
          d[n] && d[n][s] || (s = d[n - 1] ? d[n -= 1].length - 1 : this.col);
          var _ = new t2.$keyboardNavigation.MinicalCell(this.container, n, s);
          _.isValid() || (_ = _.fallback()), this.moveTo(_);
        }, down: function() {
          var r2 = this._getGrid(), d = this.row + 1, n = this.col;
          r2[d] && r2[d][n] || (d = this.row);
          var s = new t2.$keyboardNavigation.MinicalCell(this.container, d, n);
          s.isValid() || (s = s.fallback()), this.moveTo(s);
        }, up: function() {
          var r2 = this._getGrid(), d = this.row - 1, n = this.col;
          if (r2[d] && r2[d][n]) {
            var s = new t2.$keyboardNavigation.MinicalCell(this.container, d, n);
            s.isValid() || (s = s.fallback()), this.moveTo(s);
          } else {
            var _ = 0;
            this.col > r2[this.row].length / 2 && (_ = 1), this.moveTo(new t2.$keyboardNavigation.MinicalButton(this.container, _));
          }
        }, enter: function(r2) {
          this.getNode().querySelector(".dhx_month_head").click();
        } } }), t2.$keyboardNavigation.MinicalCell.prototype.bindAll(t2.$keyboardNavigation.MinicalCell.prototype.keys);
      }(e2), function(t2) {
        t2.$keyboardNavigation.DataArea = function(r2) {
          this.index = r2 || 0;
        }, t2.$keyboardNavigation.DataArea.prototype = t2._compose(t2.$keyboardNavigation.KeyNavNode, { getNode: function(r2) {
          return t2.$container.querySelector(".dhx_cal_data");
        }, _handlers: null, isValid: function() {
          return true;
        }, fallback: function() {
          return this;
        }, keys: { "up,down,right,left": function() {
          this.moveTo(new t2.$keyboardNavigation.TimeSlot());
        } } }), t2.$keyboardNavigation.DataArea.prototype.bindAll(t2.$keyboardNavigation.DataArea.prototype.keys);
      }(e2), Ma(e2), function(t2) {
        t2.$keyboardNavigation.dispatcher = { isActive: false, activeNode: null, globalNode: new t2.$keyboardNavigation.SchedulerNode(), keepScrollPosition: function(r2) {
          var d, n, s = t2.$container.querySelector(".dhx_timeline_scrollable_data");
          s || (s = t2.$container.querySelector(".dhx_cal_data")), s && (d = s.scrollTop, n = s.scrollLeft), r2(), s && (s.scrollTop = d, s.scrollLeft = n);
        }, enable: function() {
          if (t2.$container) {
            this.isActive = true;
            var r2 = this;
            this.keepScrollPosition(function() {
              r2.globalNode.enable(), r2.setActiveNode(r2.getActiveNode());
            });
          }
        }, disable: function() {
          this.isActive = false, this.globalNode.disable();
        }, isEnabled: function() {
          return !!this.isActive;
        }, getDefaultNode: function() {
          return this.globalNode.getDefaultNode();
        }, setDefaultNode: function() {
          this.setActiveNode(this.getDefaultNode());
        }, getActiveNode: function() {
          var r2 = this.activeNode;
          return r2 && !r2.isValid() && (r2 = r2.fallback()), r2;
        }, focusGlobalNode: function() {
          this.blurNode(this.globalNode), this.focusNode(this.globalNode);
        }, setActiveNode: function(r2) {
          r2 && r2.isValid() && (this.activeNode && this.activeNode.compareTo(r2) || this.isEnabled() && (this.blurNode(this.activeNode), this.activeNode = r2, this.focusNode(this.activeNode)));
        }, focusNode: function(r2) {
          r2 && r2.focus && (r2.focus(), r2.getNode && document.activeElement != r2.getNode() && this.setActiveNode(new t2.$keyboardNavigation.DataArea()));
        }, blurNode: function(r2) {
          r2 && r2.blur && r2.blur();
        }, getInlineEditor: function(r2) {
          var d = t2.$container.querySelector(".dhx_cal_editor[" + t2.config.event_attribute + "='" + r2 + "'] textarea");
          return d && d.offsetWidth ? d : null;
        }, keyDownHandler: function(r2) {
          if (!r2.defaultPrevented) {
            var d = this.getActiveNode();
            if ((!t2.$keyboardNavigation.isModal() || d && d.container && t2.utils.dom.locateCss({ target: d.container }, "dhx_minical_popup", false)) && (!t2.getState().editor_id || !this.getInlineEditor(t2.getState().editor_id)) && this.isEnabled()) {
              r2 = r2 || window.event;
              var n = this.globalNode, s = t2.$keyboardNavigation.shortcuts.getCommandFromEvent(r2);
              d ? d.findHandler(s) ? d.doAction(s, r2) : n.findHandler(s) && n.doAction(s, r2) : this.setDefaultNode();
            }
          }
        }, _timeout: null, delay: function(r2, d) {
          clearTimeout(this._timeout), this._timeout = setTimeout(r2, d || 1);
        } };
      }(e2), Ta(e2), function() {
        Aa(e2), function(_) {
          _.$keyboardNavigation._minicalendars = [], _.$keyboardNavigation.isMinical = function(a2) {
            for (var o2 = _.$keyboardNavigation._minicalendars, l = 0; l < o2.length; l++)
              if (this.isChildOf(a2, o2[l]))
                return true;
            return false;
          }, _.$keyboardNavigation.isChildOf = function(a2, o2) {
            for (; a2 && a2 !== o2; )
              a2 = a2.parentNode;
            return a2 === o2;
          }, _.$keyboardNavigation.patchMinicalendar = function() {
            var a2 = _.$keyboardNavigation.dispatcher;
            function o2(u) {
              var f = u.target;
              a2.enable(), a2.setActiveNode(new _.$keyboardNavigation.MinicalButton(f, 0));
            }
            function l(u) {
              var f = u.target || u.srcElement, c2 = _.utils.dom.locateCss(u, "dhx_cal_prev_button", false), p = _.utils.dom.locateCss(u, "dhx_cal_next_button", false), m = _.utils.dom.locateCss(u, "dhx_year_body", false), g = 0, y2 = 0;
              if (m) {
                for (var x, b, k = f; k && k.tagName.toLowerCase() != "td"; )
                  k = k.parentNode;
                if (k && (x = (b = k).parentNode), x && b) {
                  for (var E = x.parentNode.querySelectorAll("tr"), D = 0; D < E.length; D++)
                    if (E[D] == x) {
                      g = D;
                      break;
                    }
                  var w = x.querySelectorAll("td");
                  for (D = 0; D < w.length; D++)
                    if (w[D] == b) {
                      y2 = D;
                      break;
                    }
                }
              }
              var S = u.currentTarget;
              a2.delay(function() {
                var N;
                (c2 || p || m) && (c2 ? (N = new _.$keyboardNavigation.MinicalButton(S, 0), a2.setActiveNode(new _.$keyboardNavigation.MinicalButton(S, 0))) : p ? N = new _.$keyboardNavigation.MinicalButton(S, 1) : m && (N = new _.$keyboardNavigation.MinicalCell(S, g, y2)), N && (a2.enable(), N.isValid() && (a2.activeNode = null, a2.setActiveNode(N))));
              });
            }
            if (_.renderCalendar) {
              var h = _.renderCalendar;
              _.renderCalendar = function() {
                var u = h.apply(this, arguments), f = _.$keyboardNavigation._minicalendars;
                _.eventRemove(u, "click", l), _.event(u, "click", l), _.eventRemove(u, "focus", o2), _.event(u, "focus", o2);
                for (var c2 = false, p = 0; p < f.length; p++)
                  if (f[p] == u) {
                    c2 = true;
                    break;
                  }
                if (c2 || f.push(u), a2.isEnabled()) {
                  var m = a2.getActiveNode();
                  m && m.container == u ? a2.focusNode(m) : u.setAttribute("tabindex", "0");
                } else
                  u.setAttribute("tabindex", "0");
                return u;
              };
            }
            if (_.destroyCalendar) {
              var v = _.destroyCalendar;
              _.destroyCalendar = function(u, f) {
                u = u || (_._def_count ? _._def_count.firstChild : null);
                var c2 = v.apply(this, arguments);
                if (!u || !u.parentNode)
                  for (var p = _.$keyboardNavigation._minicalendars, m = 0; m < p.length; m++)
                    p[m] == u && (_.eventRemove(p[m], "focus", o2), p.splice(m, 1), m--);
                return c2;
              };
            }
          };
        }(e2);
        var t2 = e2.$keyboardNavigation.dispatcher;
        if (e2.$keyboardNavigation.attachSchedulerHandlers(), e2.renderCalendar)
          e2.$keyboardNavigation.patchMinicalendar();
        else
          var r2 = e2.attachEvent("onSchedulerReady", function() {
            e2.detachEvent(r2), e2.$keyboardNavigation.patchMinicalendar();
          });
        function d() {
          if (e2.config.key_nav) {
            var _ = document.activeElement;
            return !(!_ || e2.utils.dom.locateCss(_, "dhx_cal_quick_info", false)) && (e2.$keyboardNavigation.isChildOf(_, e2.$container) || e2.$keyboardNavigation.isMinical(_));
          }
        }
        function n(_) {
          _ && !t2.isEnabled() ? t2.enable() : !_ && t2.isEnabled() && t2.disable();
        }
        const s = setInterval(function() {
          if (e2.$container && e2.$keyboardNavigation.isChildOf(e2.$container, document.body)) {
            var _ = d();
            _ ? n(_) : !_ && t2.isEnabled() && setTimeout(function() {
              e2.$destroyed || (e2.config.key_nav ? n(d()) : e2.$container.removeAttribute("tabindex"));
            }, 100);
          }
        }, 500);
        e2.attachEvent("onDestroy", function() {
          clearInterval(s);
        });
      }();
    }, layer: function(e2) {
      e2.attachEvent("onTemplatesReady", function() {
        this.layers.sort(function(t2, r2) {
          return t2.zIndex - r2.zIndex;
        }), e2._dp_init = function(t2) {
          t2._methods = ["_set_event_text_style", "", "changeEventId", "deleteEvent"], this.attachEvent("onEventAdded", function(r2) {
            !this._loading && this.validId(r2) && this.getEvent(r2) && this.getEvent(r2).layer == t2.layer && t2.setUpdated(r2, true, "inserted");
          }), this.attachEvent("onBeforeEventDelete", function(r2) {
            if (this.getEvent(r2) && this.getEvent(r2).layer == t2.layer) {
              if (!this.validId(r2))
                return;
              var d = t2.getState(r2);
              return d == "inserted" || this._new_event ? (t2.setUpdated(r2, false), true) : d != "deleted" && (d == "true_deleted" || (t2.setUpdated(r2, true, "deleted"), false));
            }
            return true;
          }), this.attachEvent("onEventChanged", function(r2) {
            !this._loading && this.validId(r2) && this.getEvent(r2) && this.getEvent(r2).layer == t2.layer && t2.setUpdated(r2, true, "updated");
          }), t2._getRowData = function(r2, d) {
            var n = this.obj.getEvent(r2), s = {};
            for (var _ in n)
              _.indexOf("_") !== 0 && (n[_] && n[_].getUTCFullYear ? s[_] = this.obj._helpers.formatDate(n[_]) : s[_] = n[_]);
            return s;
          }, t2._clearUpdateFlag = function() {
          }, t2.attachEvent("insertCallback", e2._update_callback), t2.attachEvent("updateCallback", e2._update_callback), t2.attachEvent("deleteCallback", function(r2, d) {
            this.obj.setUserData(d, this.action_param, "true_deleted"), this.obj.deleteEvent(d);
          });
        }, function() {
          var t2 = function(n) {
            if (n === null || typeof n != "object")
              return n;
            var s = new n.constructor();
            for (var _ in n)
              s[_] = t2(n[_]);
            return s;
          };
          e2._dataprocessors = [], e2._layers_zindex = {};
          for (var r2 = 0; r2 < e2.layers.length; r2++) {
            if (e2.config["lightbox_" + e2.layers[r2].name] = {}, e2.config["lightbox_" + e2.layers[r2].name].sections = t2(e2.config.lightbox.sections), e2._layers_zindex[e2.layers[r2].name] = e2.config.initial_layer_zindex || 5 + 3 * r2, e2.layers[r2].url) {
              var d = e2.createDataProcessor({ url: e2.layers[r2].url });
              d.layer = e2.layers[r2].name, e2._dataprocessors.push(d), e2._dataprocessors[r2].init(e2);
            }
            e2.layers[r2].isDefault && (e2.defaultLayer = e2.layers[r2].name);
          }
        }(), e2.showLayer = function(t2) {
          this.toggleLayer(t2, true);
        }, e2.hideLayer = function(t2) {
          this.toggleLayer(t2, false);
        }, e2.toggleLayer = function(t2, r2) {
          var d = this.getLayer(t2);
          d.visible = r2 !== void 0 ? !!r2 : !d.visible, this.setCurrentView(this._date, this._mode);
        }, e2.getLayer = function(t2) {
          var r2, d;
          typeof t2 == "string" && (d = t2), typeof t2 == "object" && (d = t2.layer);
          for (var n = 0; n < e2.layers.length; n++)
            e2.layers[n].name == d && (r2 = e2.layers[n]);
          return r2;
        }, e2.attachEvent("onBeforeLightbox", function(t2) {
          var r2 = this.getEvent(t2);
          return this.config.lightbox.sections = this.config["lightbox_" + r2.layer].sections, e2.resetLightbox(), true;
        }), e2.attachEvent("onClick", function(t2, r2) {
          var d = e2.getEvent(t2);
          return !e2.getLayer(d.layer).noMenu;
        }), e2.attachEvent("onEventCollision", function(t2, r2) {
          var d = this.getLayer(t2);
          if (!d.checkCollision)
            return false;
          for (var n = 0, s = 0; s < r2.length; s++)
            r2[s].layer == d.name && r2[s].id != t2.id && n++;
          return n >= e2.config.collision_limit;
        }), e2.addEvent = function(t2, r2, d, n, s) {
          var _ = t2;
          arguments.length != 1 && ((_ = s || {}).start_date = t2, _.end_date = r2, _.text = d, _.id = n, _.layer = this.defaultLayer), _.id = _.id || e2.uid(), _.text = _.text || "", typeof _.start_date == "string" && (_.start_date = this.templates.api_date(_.start_date)), typeof _.end_date == "string" && (_.end_date = this.templates.api_date(_.end_date)), _._timed = this.isOneDayEvent(_);
          var a2 = !this._events[_.id];
          this._events[_.id] = _, this.event_updated(_), this._loading || this.callEvent(a2 ? "onEventAdded" : "onEventChanged", [_.id, _]);
        }, this._evs_layer = {};
        for (var i = 0; i < this.layers.length; i++)
          this._evs_layer[this.layers[i].name] = [];
        e2.addEventNow = function(t2, r2, d) {
          var n = {};
          typeof t2 == "object" && (n = t2, t2 = null);
          var s = 6e4 * (this.config.event_duration || this.config.time_step);
          t2 || (t2 = Math.round(e2._currentDate().valueOf() / s) * s);
          var _ = new Date(t2);
          if (!r2) {
            var a2 = this.config.first_hour;
            a2 > _.getHours() && (_.setHours(a2), t2 = _.valueOf()), r2 = t2 + s;
          }
          n.start_date = n.start_date || _, n.end_date = n.end_date || new Date(r2), n.text = n.text || this.locale.labels.new_event, n.id = this._drag_id = this.uid(), n.layer = this.defaultLayer, this._drag_mode = "new-size", this._loading = true, this.addEvent(n), this.callEvent("onEventCreated", [this._drag_id, d]), this._loading = false, this._drag_event = {}, this._on_mouse_up(d);
        }, e2._t_render_view_data = function(t2) {
          if (this.config.multi_day && !this._table_view) {
            for (var r2 = [], d = [], n = 0; n < t2.length; n++)
              t2[n]._timed ? r2.push(t2[n]) : d.push(t2[n]);
            this._table_view = true, this.render_data(d), this._table_view = false, this.render_data(r2);
          } else
            this.render_data(t2);
        }, e2.render_view_data = function() {
          if (this._not_render)
            this._render_wait = true;
          else {
            this._render_wait = false, this.clear_view(), this._evs_layer = {};
            for (var t2 = 0; t2 < this.layers.length; t2++)
              this._evs_layer[this.layers[t2].name] = [];
            var r2 = this.get_visible_events();
            for (t2 = 0; t2 < r2.length; t2++)
              this._evs_layer[r2[t2].layer] && this._evs_layer[r2[t2].layer].push(r2[t2]);
            if (this._mode == "month") {
              var d = [];
              for (t2 = 0; t2 < this.layers.length; t2++)
                this.layers[t2].visible && (d = d.concat(this._evs_layer[this.layers[t2].name]));
              this._t_render_view_data(d);
            } else
              for (t2 = 0; t2 < this.layers.length; t2++)
                if (this.layers[t2].visible) {
                  var n = this._evs_layer[this.layers[t2].name];
                  this._t_render_view_data(n);
                }
          }
        }, e2._render_v_bar = function(t2, r2, d, n, s, _, a2, o2, l) {
          var h = t2.id;
          a2.indexOf("<div class=") == -1 && (a2 = e2.templates["event_header_" + t2.layer] ? e2.templates["event_header_" + t2.layer](t2.start_date, t2.end_date, t2) : a2), o2.indexOf("<div class=") == -1 && (o2 = e2.templates["event_text_" + t2.layer] ? e2.templates["event_text_" + t2.layer](t2.start_date, t2.end_date, t2) : o2);
          var v = document.createElement("div"), u = "dhx_cal_event", f = e2.templates["event_class_" + t2.layer] ? e2.templates["event_class_" + t2.layer](t2.start_date, t2.end_date, t2) : e2.templates.event_class(t2.start_date, t2.end_date, t2);
          f && (u = u + " " + f);
          var c2 = e2._border_box_events(), p = n - 2, m = c2 ? p : n - 4, g = c2 ? p : n - 6, y2 = c2 ? p : n - 14, x = c2 ? p - 2 : n - 8, b = c2 ? s - this.xy.event_header_height : s - 30 + 1, k = '<div event_id="' + h + '" ' + e2.config.event_attribute + '="' + h + '" class="' + u + '" style="position:absolute; top:' + d + "px; left:" + r2 + "px; width:" + m + "px; height:" + s + "px;" + (_ || "") + '">';
          return k += '<div class="dhx_header" style=" width:' + g + 'px;" >&nbsp;</div>', k += '<div class="dhx_title">' + a2 + "</div>", k += '<div class="dhx_body" style=" width:' + y2 + "px; height:" + b + 'px;">' + o2 + "</div>", k += '<div class="dhx_footer" style=" width:' + x + "px;" + (l ? " margin-top:-1px;" : "") + '" ></div></div>', v.innerHTML = k, v.style.zIndex = 100, v.firstChild;
        }, e2.render_event_bar = function(t2) {
          var r2 = this._els.dhx_cal_data[0], d = this._colsS[t2._sday], n = this._colsS[t2._eday];
          n == d && (n = this._colsS[t2._eday + 1]);
          var s = this.xy.bar_height, _ = this._colsS.heights[t2._sweek] + (this._colsS.height ? this.xy.month_scale_height + 2 : 2) + t2._sorder * s, a2 = document.createElement("div"), o2 = t2._timed ? "dhx_cal_event_clear" : "dhx_cal_event_line", l = e2.templates["event_class_" + t2.layer] ? e2.templates["event_class_" + t2.layer](t2.start_date, t2.end_date, t2) : e2.templates.event_class(t2.start_date, t2.end_date, t2);
          l && (o2 = o2 + " " + l);
          var h = '<div event_id="' + t2.id + '" ' + this.config.event_attribute + '="' + t2.id + '" class="' + o2 + '" style="position:absolute; top:' + _ + "px; left:" + d + "px; width:" + (n - d - 15) + "px;" + (t2._text_style || "") + '">';
          t2._timed && (h += e2.templates["event_bar_date_" + t2.layer] ? e2.templates["event_bar_date_" + t2.layer](t2.start_date, t2.end_date, t2) : e2.templates.event_bar_date(t2.start_date, t2.end_date, t2)), h += e2.templates["event_bar_text_" + t2.layer] ? e2.templates["event_bar_text_" + t2.layer](t2.start_date, t2.end_date, t2) : e2.templates.event_bar_text(t2.start_date, t2.end_date, t2) + "</div>)", h += "</div>", a2.innerHTML = h, this._rendered.push(a2.firstChild), r2.appendChild(a2.firstChild);
        }, e2.render_event = function(t2) {
          var r2 = e2.xy.menu_width;
          if (e2.getLayer(t2.layer).noMenu && (r2 = 0), !(t2._sday < 0)) {
            var d = e2.locate_holder(t2._sday);
            if (d) {
              var n = 60 * t2.start_date.getHours() + t2.start_date.getMinutes(), s = 60 * t2.end_date.getHours() + t2.end_date.getMinutes() || 60 * e2.config.last_hour, _ = Math.round((60 * n * 1e3 - 60 * this.config.first_hour * 60 * 1e3) * this.config.hour_size_px / 36e5) % (24 * this.config.hour_size_px) + 1, a2 = Math.max(e2.xy.min_event_height, (s - n) * this.config.hour_size_px / 60) + 1, o2 = Math.floor((d.clientWidth - r2) / t2._count), l = t2._sorder * o2 + 1;
              t2._inner || (o2 *= t2._count - t2._sorder);
              var h = this._render_v_bar(t2.id, r2 + l, _, o2, a2, t2._text_style, e2.templates.event_header(t2.start_date, t2.end_date, t2), e2.templates.event_text(t2.start_date, t2.end_date, t2));
              if (this._rendered.push(h), d.appendChild(h), l = l + parseInt(d.style.left, 10) + r2, _ += this._dy_shift, h.style.zIndex = this._layers_zindex[t2.layer], this._edit_id == t2.id) {
                h.style.zIndex = parseInt(h.style.zIndex) + 1;
                var v = h.style.zIndex;
                o2 = Math.max(o2 - 4, e2.xy.editor_width), (h = document.createElement("div")).setAttribute("event_id", t2.id), h.setAttribute(this.config.event_attribute, t2.id), this.set_xy(h, o2, a2 - 20, l, _ + 14), h.className = "dhx_cal_editor", h.style.zIndex = v;
                var u = document.createElement("div");
                this.set_xy(u, o2 - 6, a2 - 26), u.style.cssText += ";margin:2px 2px 2px 2px;overflow:hidden;", u.style.zIndex = v, h.appendChild(u), this._els.dhx_cal_data[0].appendChild(h), this._rendered.push(h), u.innerHTML = "<textarea class='dhx_cal_editor'>" + t2.text + "</textarea>", this._editor = u.firstChild, this._editor.addEventListener("keypress", function(g) {
                  if (g.shiftKey)
                    return true;
                  var y2 = g.keyCode;
                  y2 == e2.keys.edit_save && e2.editStop(true), y2 == e2.keys.edit_cancel && e2.editStop(false);
                }), this._editor.addEventListener("selectstart", function(g) {
                  return g.cancelBubble = true, true;
                }), u.firstChild.focus(), this._els.dhx_cal_data[0].scrollLeft = 0, u.firstChild.select();
              }
              if (this._select_id == t2.id) {
                h.style.zIndex = parseInt(h.style.zIndex) + 1;
                for (var f = this.config["icons_" + (this._edit_id == t2.id ? "edit" : "select")], c2 = "", p = 0; p < f.length; p++)
                  c2 += "<div class='dhx_menu_icon " + f[p] + "' title='" + this.locale.labels[f[p]] + "'></div>";
                var m = this._render_v_bar(t2.id, l - r2 + 1, _, r2, 20 * f.length + 26, "", "<div class='dhx_menu_head'></div>", c2, true);
                m.style.left = l - r2 + 1, m.style.zIndex = h.style.zIndex, this._els.dhx_cal_data[0].appendChild(m), this._rendered.push(m);
              }
            }
          }
        }, e2.filter_agenda = function(t2, r2) {
          var d = e2.getLayer(r2.layer);
          return d && d.visible;
        };
      });
    }, limit: function(e2) {
      e2.config.limit_start = null, e2.config.limit_end = null, e2.config.limit_view = false, e2.config.check_limits = true, e2._temp_limit_scope = function() {
        var i = null;
        e2.attachEvent("onBeforeViewChange", function(t2, r2, d, n) {
          function s(_, a2) {
            var o2 = e2.config.limit_start, l = e2.config.limit_end, h = e2.date.add(_, 1, a2);
            return _.valueOf() > l.valueOf() || h <= o2.valueOf();
          }
          return !e2.config.limit_view || !s(n = n || r2, d = d || t2) || r2.valueOf() == n.valueOf() || (setTimeout(function() {
            if (e2.$destroyed)
              return true;
            var _ = s(r2, d) ? e2.config.limit_start : r2;
            e2.setCurrentView(s(_, d) ? null : _, d);
          }, 1), false);
        }), e2.attachEvent("onMouseDown", function(t2) {
          return t2 != "dhx_time_block";
        }), e2.attachEvent("onBeforeDrag", function(t2) {
          return !t2 || e2.checkLimitViolation(e2.getEvent(t2));
        }), e2.attachEvent("onClick", function(t2, r2) {
          return e2.checkLimitViolation(e2.getEvent(t2));
        }), e2.attachEvent("onBeforeLightbox", function(t2) {
          var r2 = e2.getEvent(t2);
          return i = [r2.start_date, r2.end_date], e2.checkLimitViolation(r2);
        }), e2.attachEvent("onEventSave", function(t2, r2, d) {
          if (!r2.start_date || !r2.end_date) {
            var n = e2.getEvent(t2);
            r2.start_date = new Date(n.start_date), r2.end_date = new Date(n.end_date);
          }
          if (r2.rec_type) {
            var s = e2._lame_clone(r2);
            return e2._roll_back_dates(s), e2.checkLimitViolation(s);
          }
          return e2.checkLimitViolation(r2);
        }), e2.attachEvent("onEventAdded", function(t2) {
          if (!t2)
            return true;
          var r2 = e2.getEvent(t2);
          return !e2.checkLimitViolation(r2) && e2.config.limit_start && e2.config.limit_end && (r2.start_date < e2.config.limit_start && (r2.start_date = new Date(e2.config.limit_start)), r2.start_date.valueOf() >= e2.config.limit_end.valueOf() && (r2.start_date = this.date.add(e2.config.limit_end, -1, "day")), r2.end_date < e2.config.limit_start && (r2.end_date = new Date(e2.config.limit_start)), r2.end_date.valueOf() >= e2.config.limit_end.valueOf() && (r2.end_date = this.date.add(e2.config.limit_end, -1, "day")), r2.start_date.valueOf() >= r2.end_date.valueOf() && (r2.end_date = this.date.add(r2.start_date, this.config.event_duration || this.config.time_step, "minute")), r2._timed = this.isOneDayEvent(r2)), true;
        }), e2.attachEvent("onEventChanged", function(t2) {
          if (!t2)
            return true;
          var r2 = e2.getEvent(t2);
          if (!e2.checkLimitViolation(r2)) {
            if (!i)
              return false;
            r2.start_date = i[0], r2.end_date = i[1], r2._timed = this.isOneDayEvent(r2);
          }
          return true;
        }), e2.attachEvent("onBeforeEventChanged", function(t2, r2, d) {
          return e2.checkLimitViolation(t2);
        }), e2.attachEvent("onBeforeEventCreated", function(t2) {
          var r2 = e2.getActionData(t2).date, d = { _timed: true, start_date: r2, end_date: e2.date.add(r2, e2.config.time_step, "minute") };
          return e2.checkLimitViolation(d);
        }), e2.attachEvent("onViewChange", function() {
          e2._mark_now();
        }), e2.attachEvent("onAfterSchedulerResize", function() {
          return window.setTimeout(function() {
            if (e2.$destroyed)
              return true;
            e2._mark_now();
          }, 1), true;
        }), e2.attachEvent("onTemplatesReady", function() {
          e2._mark_now_timer = window.setInterval(function() {
            e2._is_initialized() && e2._mark_now();
          }, 6e4);
        }), e2.attachEvent("onDestroy", function() {
          clearInterval(e2._mark_now_timer);
        });
      }, e2._temp_limit_scope();
    }, map_view: function(e2) {
      let i = null, t2 = [];
      const r2 = { googleMap: new Ca(e2), openStreetMaps: new Oa(e2), mapbox: new La(e2) };
      function d(s) {
        i = s.ext.mapView.createAdapter(), t2.push(e2.attachEvent("onEventSave", function(_, a2, o2) {
          let l = e2.getEvent(_);
          return l && l.event_location != a2.event_location && (e2._eventLocationChanged = true), true;
        }), e2.attachEvent("onEventChanged", (_, a2) => {
          const { start_date: o2, end_date: l } = a2, { min_date: h, max_date: v } = e2.getState();
          return o2.valueOf() < v.valueOf() && l.valueOf() > h.valueOf() && i && (e2.config.map_settings.resolve_event_location && a2.event_location && !e2._latLngUpdate ? n(a2, i) : i.updateEventMarker(a2)), e2._latLngUpdate = false, true;
        }), e2.attachEvent("onEventIdChange", function(_, a2) {
          let o2 = e2.getEvent(a2);
          i == null || i.removeEventMarker(_), i == null || i.addEventMarker(o2);
        }), e2.attachEvent("onEventAdded", (_, a2) => {
          const { start_date: o2, end_date: l } = a2, { min_date: h, max_date: v } = e2.getState();
          o2.valueOf() < v.valueOf() && l.valueOf() > h.valueOf() && i && (e2.config.map_settings.resolve_event_location && a2.event_location && e2._eventLocationChanged ? (n(a2, i), e2._eventLocationChanged = false) : (i.addEventMarker(a2), i.onEventClick(a2)));
        }), e2.attachEvent("onClick", function(_, a2) {
          const o2 = e2.getEvent(_);
          return i && o2 && i.onEventClick(o2), false;
        }), e2.attachEvent("onBeforeEventDelete", (_, a2) => (i && i.removeEventMarker(_), true)));
      }
      async function n(s, _) {
        let a2 = await _.resolveAddress(s.event_location);
        return s.lat = a2.lat, s.lng = a2.lng, _.removeEventMarker(String(s.id)), _.addEventMarker(s), s;
      }
      e2.ext || (e2.ext = {}), e2.ext.mapView = { createAdapter: function() {
        return r2[e2.config.map_view_provider];
      }, createMarker: function(s) {
        return new google.maps.Marker(s);
      }, currentAdapter: null, adapters: r2 }, e2._latLngUpdate = false, e2._eventLocationChanged = false, e2.config.map_view_provider = "googleMap", e2.config.map_settings = { initial_position: { lat: 48.724, lng: 8.215 }, error_position: { lat: 15, lng: 15 }, initial_zoom: 1, zoom_after_resolve: 15, info_window_max_width: 300, resolve_user_location: true, resolve_event_location: true, view_provider: "googleMap" }, e2.config.map_initial_position && (e2.config.map_settings.initial_position = { lat: e2.config.map_initial_position.lat(), lng: e2.config.map_initial_position.lng() }), e2.config.map_error_position && (e2.config.map_settings.error_position = { lat: e2.config.map_error_position.lat(), lng: e2.config.map_error_position.lng() }), e2.xy.map_date_width = 188, e2.xy.map_icon_width = 25, e2.xy.map_description_width = 400, e2.date.add_map = function(s, _, a2) {
        return new Date(s.valueOf());
      }, e2.templates.map_date = function(s, _, a2) {
        return "";
      }, e2.templates.map_time = function(s, _, a2) {
        return e2.config.rtl && !a2._timed ? e2.templates.day_date(_) + " &ndash; " + e2.templates.day_date(s) : a2._timed ? this.day_date(a2.start_date, a2.end_date, a2) + " " + this.event_date(s) : e2.templates.day_date(s) + " &ndash; " + e2.templates.day_date(_);
      }, e2.templates.map_text = function(s, _, a2) {
        return a2.text;
      }, e2.templates.map_info_content = function(s) {
        return `<div><b>Event's text:</b> ${s.text}
				<div><b>Location:</b> ${s.event_location}</div>
				<div><b>Starts:</b> ${e2.templates.tooltip_date_format(s.start_date)}</div>
				<div><b>Ends:</b> ${e2.templates.tooltip_date_format(s.end_date)}</div>
			</div>`;
      }, e2.date.map_start = function(s) {
        return s;
      }, e2.dblclick_dhx_map_area = function(s) {
        let _ = s.target.closest(`[${e2.config.event_attribute}]`);
        if (_) {
          let a2 = _.getAttribute(`${e2.config.event_attribute}`);
          e2.showLightbox(a2);
        }
        this.config.readonly || !this.config.dblclick_create || _ || this.addEventNow({ start_date: e2.config.map_start, end_date: e2.date.add(e2.config.map_start, e2.config.time_step, "minute") });
      }, e2.attachEvent("onSchedulerReady", function() {
        e2.config.map_initial_zoom !== void 0 && (e2.config.map_settings.initial_zoom = e2.config.map_initial_zoom), e2.config.map_zoom_after_resolve !== void 0 && (e2.config.map_settings.zoom_after_resolve = e2.config.map_zoom_after_resolve), e2.config.map_infowindow_max_width !== void 0 && (e2.config.map_settings.info_window_max_width = e2.config.map_infowindow_max_width), e2.config.map_resolve_user_location !== void 0 && (e2.config.map_settings.resolve_user_location = e2.config.map_resolve_user_location), e2.config.map_view_provider !== void 0 && (e2.config.map_settings.view_provider = e2.config.map_view_provider), e2.config.map_type !== void 0 && (e2.config.map_settings.type = e2.config.map_type), e2.config.map_resolve_event_location !== void 0 && (e2.config.map_settings.resolve_event_location = e2.config.map_resolve_event_location), e2.ext.mapView.currentAdapter = e2.config.map_view_provider;
        let s = document.createElement("div");
        s.className = "mapContainer", s.id = "mapContainer", s.style.display = "none", s.style.zIndex = "1", e2._obj.appendChild(s);
        const _ = e2.render_data;
        function a2() {
          let l = e2.get_visible_events();
          l.sort(function(f, c2) {
            return f.start_date.valueOf() == c2.start_date.valueOf() ? f.id > c2.id ? 1 : -1 : f.start_date > c2.start_date ? 1 : -1;
          });
          let h = "<div " + e2._waiAria.mapAttrString() + " class='dhx_map_area'>";
          for (let f = 0; f < l.length; f++) {
            let c2 = l[f], p = c2.id == e2._selected_event_id ? "dhx_map_line highlight" : "dhx_map_line", m = c2.color ? "--dhx-scheduler-event-background:" + c2.color + ";" : "", g = c2.textColor ? "--dhx-scheduler-event-color:" + c2.textColor + ";" : "", y2 = e2._waiAria.mapRowAttrString(c2), x = e2._waiAria.mapDetailsBtnString();
            h += "<div " + y2 + " class='" + p + "' event_id='" + c2.id + "' " + e2.config.event_attribute + "='" + c2.id + "' style='" + m + g + (c2._text_style || "") + " width: " + (e2.xy.map_date_width + e2.xy.map_description_width + 2) + "px;'><div class='dhx_map_event_time' style='width: " + e2.xy.map_date_width + "px;' >" + e2.templates.map_time(c2.start_date, c2.end_date, c2) + "</div>", h += `<div ${x} class='dhx_event_icon icon_details'><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
			<path d="M15.4444 16.4H4.55556V7.6H15.4444V16.4ZM13.1111 2V3.6H6.88889V2H5.33333V3.6H4.55556C3.69222 3.6 3 4.312 3 5.2V16.4C3 16.8243 3.16389 17.2313 3.45561 17.5314C3.74733 17.8314 4.143 18 4.55556 18H15.4444C15.857 18 16.2527 17.8314 16.5444 17.5314C16.8361 17.2313 17 16.8243 17 16.4V5.2C17 4.312 16.3 3.6 15.4444 3.6H14.6667V2H13.1111ZM13.8889 10.8H10V14.8H13.8889V10.8Z" fill="#A1A4A6"/>
			</svg></div>`, h += "<div class='line_description' style='width:" + (e2.xy.map_description_width - e2.xy.map_icon_width) + "px;'>" + e2.templates.map_text(c2.start_date, c2.end_date, c2) + "</div></div>";
          }
          h += "<div class='dhx_v_border' style=" + (e2.config.rtl ? "'right: " : "'left: ") + (e2.xy.map_date_width - 1) + "px;'></div><div class='dhx_v_border_description'></div></div>", e2._els.dhx_cal_data[0].scrollTop = 0, e2._els.dhx_cal_data[0].innerHTML = h;
          let v = e2._els.dhx_cal_data[0].firstChild.childNodes, u = e2._getNavDateElement();
          u && (u.innerHTML = e2.templates[e2._mode + "_date"](e2._min_date, e2._max_date, e2._mode)), e2._rendered = [];
          for (let f = 0; f < v.length - 2; f++)
            e2._rendered[f] = v[f];
        }
        e2.render_data = function(l, h) {
          if (this._mode != "map")
            return _.apply(this, arguments);
          {
            a2();
            let v = e2.get_visible_events();
            i && (i.clearEventMarkers(), v.forEach((u) => i == null ? void 0 : i.addEventMarker(u)));
          }
        }, e2.map_view = function(l) {
          e2._els.dhx_cal_data[0].style.width = e2.xy.map_date_width + e2.xy.map_description_width + 1 + "px", e2._min_date = e2.config.map_start || e2._currentDate(), e2._max_date = e2.config.map_end || e2.date.add(e2._currentDate(), 1, "year"), e2._table_view = true, function(f) {
            if (f) {
              const c2 = e2.locale.labels;
              e2._els.dhx_cal_header[0].innerHTML = "<div class='dhx_map_head' style='width: " + (e2.xy.map_date_width + e2.xy.map_description_width + 2) + "px;' ><div class='headline_date' style='width: " + e2.xy.map_date_width + "px;'>" + c2.date + "</div><div class='headline_description' style='width: " + e2.xy.map_description_width + "px;'>" + c2.description + "</div></div>", e2._table_view = true, e2.set_sizes();
            }
          }(l);
          let h = document.getElementById("mapContainer");
          var v, u;
          (function(f) {
            let c2 = document.getElementById(f);
            if (c2) {
              const p = e2.$container.querySelector(".dhx_cal_navline").offsetHeight;
              let m = e2.$container.querySelector(".dhx_cal_data").offsetHeight + e2.$container.querySelector(".dhx_cal_header").offsetHeight;
              m < 0 && (m = 0);
              let g = e2._x - e2.xy.map_date_width - e2.xy.map_description_width - 1;
              g < 0 && (g = 0), c2.style.height = m + "px", c2.style.width = g + "px", c2.style.position = "absolute", c2.style.top = p + "px", e2.config.rtl ? c2.style.marginRight = e2.xy.map_date_width + e2.xy.map_description_width + 1 + "px" : c2.style.marginLeft = e2.xy.map_date_width + e2.xy.map_description_width + 1 + "px", c2.style.marginTop = e2.xy.nav_height + 2 + "px";
            }
          })("mapContainer"), l && h ? (s.style.display = "block", a2(), e2.config.map_view_provider == e2.ext.mapView.currentAdapter ? (i == null || i.destroy(h), d(e2), i == null || i.initialize(h, e2.config.map_settings)) : (i == null || i.destroy(h), d(e2), i == null || i.initialize(h, e2.config.map_settings), e2.ext.mapView.currentAdapter = e2.config.map_view_provider), i && (v = e2.config.map_settings, u = i, v.resolve_user_location ? navigator.geolocation && navigator.geolocation.getCurrentPosition(function(f) {
            u.setView(f.coords.latitude, f.coords.longitude, v.zoom_after_resolve || v.initial_zoom);
          }) : u.setView(v.initial_position.lat, v.initial_position.lng, v.initial_zoom))) : (s.style.display = "none", e2._els.dhx_cal_data[0].style.width = "100%", i && h && (i.destroy(h), i = null, e2.ext.mapView.currentAdapter = e2.config.map_view_provider), t2.forEach((f) => e2.detachEvent(f)), t2 = []);
        }, e2.attachEvent("onLocationError", function(l) {
          return alert("Location can't be found"), google.maps.LatLng(51.47784, -1492e-6);
        });
        let o2 = async function(l) {
          if (i) {
            const h = await i.resolveAddress(l.event_location);
            h.lat && h.lng ? (l.lat = +h.lat, l.lng = +h.lng) : (e2.callEvent("onLocationError", [l.id]), l.lng = e2.config.map_settings.error_position.lng, l.lat = e2.config.map_settings.error_position.lat), e2._latLngUpdate = true, e2.callEvent("onEventChanged", [l.id, l]);
          }
        };
        e2._event_resolve_delay = 1500, e2.attachEvent("onEventLoading", function(l) {
          return l.lat && l.lng && (l.lat = +l.lat, l.lng = +l.lng), e2.config.map_settings.resolve_event_location && l.event_location && !l.lat && !l.lng && (e2._event_resolve_delay += 1500, function(h, v, u, f) {
            setTimeout(function() {
              if (e2.$destroyed)
                return true;
              let c2 = h.apply(v, u);
              return h = v = u = null, c2;
            }, f || 1);
          }(o2, this, [l], e2._event_resolve_delay)), true;
        });
      });
    }, minical: function(e2) {
      const i = e2._createDomEventScope();
      e2.config.minicalendar = { mark_events: true }, e2._synced_minicalendars = [], e2.renderCalendar = function(t2, r2, d) {
        var n = null, s = t2.date || e2._currentDate();
        if (typeof s == "string" && (s = this.templates.api_date(s)), r2)
          n = this._render_calendar(r2.parentNode, s, t2, r2), e2.unmarkCalendar(n);
        else {
          var _ = t2.container, a2 = t2.position;
          if (typeof _ == "string" && (_ = document.getElementById(_)), typeof a2 == "string" && (a2 = document.getElementById(a2)), a2 && a2.left === void 0 && a2.right === void 0) {
            var o2 = e2.$domHelpers.getOffset(a2);
            a2 = { top: o2.top + a2.offsetHeight, left: o2.left };
          }
          _ || (_ = e2._get_def_cont(a2)), (n = this._render_calendar(_, s, t2)).$_eventAttached || (n.$_eventAttached = true, i.attach(n, "click", function(g) {
            var y2 = g.target || g.srcElement, x = e2.$domHelpers;
            if (x.closest(y2, ".dhx_month_head") && !x.closest(y2, ".dhx_after") && !x.closest(y2, ".dhx_before")) {
              var b = x.closest(y2, "[data-cell-date]").getAttribute("data-cell-date"), k = e2.templates.parse_date(b);
              e2.unmarkCalendar(this), e2.markCalendar(this, k, "dhx_calendar_click"), this._last_date = k, this.conf.handler && this.conf.handler.call(e2, k, this);
            }
          }.bind(n)));
        }
        if (e2.config.minicalendar.mark_events)
          for (var l = e2.date.month_start(s), h = e2.date.add(l, 1, "month"), v = this.getEvents(l, h), u = this["filter_" + this._mode], f = {}, c2 = 0; c2 < v.length; c2++) {
            var p = v[c2];
            if (!u || u(p.id, p)) {
              var m = p.start_date;
              for (m.valueOf() < l.valueOf() && (m = l), m = e2.date.date_part(new Date(m.valueOf())); m < p.end_date && (f[+m] || (f[+m] = true, this.markCalendar(n, m, "dhx_year_event")), !((m = this.date.add(m, 1, "day")).valueOf() >= h.valueOf())); )
                ;
            }
          }
        return this._markCalendarCurrentDate(n), n.conf = t2, t2.sync && !d && this._synced_minicalendars.push(n), n.conf._on_xle_handler || (n.conf._on_xle_handler = e2.attachEvent("onXLE", function() {
          e2.updateCalendar(n, n.conf.date);
        })), this.config.wai_aria_attributes && this.config.wai_aria_application_role && n.setAttribute("role", "application"), n;
      }, e2._get_def_cont = function(t2) {
        return this._def_count || (this._def_count = document.createElement("div"), this._def_count.className = "dhx_minical_popup", e2.event(this._def_count, "click", function(r2) {
          r2.cancelBubble = true;
        }), document.body.appendChild(this._def_count)), t2.left && (this._def_count.style.left = t2.left + "px"), t2.right && (this._def_count.style.right = t2.right + "px"), t2.top && (this._def_count.style.top = t2.top + "px"), t2.bottom && (this._def_count.style.bottom = t2.bottom + "px"), this._def_count._created = /* @__PURE__ */ new Date(), this._def_count;
      }, e2._locateCalendar = function(t2, r2) {
        if (typeof r2 == "string" && (r2 = e2.templates.api_date(r2)), +r2 > +t2._max_date || +r2 < +t2._min_date)
          return null;
        for (var d = t2.querySelector(".dhx_year_body").childNodes[0], n = 0, s = new Date(t2._min_date); +this.date.add(s, 1, "week") <= +r2; )
          s = this.date.add(s, 1, "week"), n++;
        var _ = e2.config.start_on_monday, a2 = (r2.getDay() || (_ ? 7 : 0)) - (_ ? 1 : 0);
        const o2 = d.querySelector(`.dhx_cal_month_row:nth-child(${n + 1}) .dhx_cal_month_cell:nth-child(${a2 + 1})`);
        return o2 ? o2.firstChild : null;
      }, e2.markCalendar = function(t2, r2, d) {
        var n = this._locateCalendar(t2, r2);
        n && (n.className += " " + d);
      }, e2.unmarkCalendar = function(t2, r2, d) {
        if (d = d || "dhx_calendar_click", r2 = r2 || t2._last_date) {
          var n = this._locateCalendar(t2, r2);
          n && (n.className = (n.className || "").replace(RegExp(d, "g")));
        }
      }, e2._week_template = function(t2) {
        for (var r2 = t2 || 250, d = 0, n = document.createElement("div"), s = this.date.week_start(e2._currentDate()), _ = 0; _ < 7; _++)
          this._cols[_] = Math.floor(r2 / (7 - _)), this._render_x_header(_, d, s, n), s = this.date.add(s, 1, "day"), r2 -= this._cols[_], d += this._cols[_];
        return n.lastChild.className += " dhx_scale_bar_last", n;
      }, e2.updateCalendar = function(t2, r2) {
        t2.conf.date = r2, this.renderCalendar(t2.conf, t2, true);
      }, e2._mini_cal_arrows = ["&nbsp;", "&nbsp;"], e2._render_calendar = function(t2, r2, d, n) {
        var s = e2.templates, _ = this._cols;
        this._cols = [];
        var a2 = this._mode;
        this._mode = "calendar";
        var o2 = this._colsS;
        this._colsS = { height: 0 };
        var l = new Date(this._min_date), h = new Date(this._max_date), v = new Date(e2._date), u = s.month_day, f = this._ignores_detected;
        this._ignores_detected = 0, s.month_day = s.calendar_date, r2 = this.date.month_start(r2);
        var c2, p = this._week_template(t2.offsetWidth - 1 - this.config.minicalendar.padding);
        n ? c2 = n : (c2 = document.createElement("div")).className = "dhx_cal_container dhx_mini_calendar", c2.setAttribute("date", this._helpers.formatDate(r2)), c2.innerHTML = "<div class='dhx_year_month'></div><div class='dhx_year_grid" + (e2.config.rtl ? " dhx_grid_rtl'>" : "'>") + "<div class='dhx_year_week'>" + (p ? p.innerHTML : "") + "</div><div class='dhx_year_body'></div></div>";
        var m = c2.querySelector(".dhx_year_month"), g = c2.querySelector(".dhx_year_week"), y2 = c2.querySelector(".dhx_year_body");
        if (m.innerHTML = this.templates.calendar_month(r2), d.navigation)
          for (var x = function(z, W) {
            var Y = e2.date.add(z._date, W, "month");
            e2.updateCalendar(z, Y), e2._date.getMonth() == z._date.getMonth() && e2._date.getFullYear() == z._date.getFullYear() && e2._markCalendarCurrentDate(z);
          }, b = ["dhx_cal_prev_button", "dhx_cal_next_button"], k = ["left:1px;top:4px;position:absolute;", "left:auto; right:1px;top:4px;position:absolute;"], E = [-1, 1], D = function(z) {
            return function() {
              if (d.sync)
                for (var W = e2._synced_minicalendars, Y = 0; Y < W.length; Y++)
                  x(W[Y], z);
              else
                e2.config.rtl && (z = -z), x(c2, z);
            };
          }, w = [e2.locale.labels.prev, e2.locale.labels.next], S = 0; S < 2; S++) {
            var N = document.createElement("div");
            N.className = b[S], e2._waiAria.headerButtonsAttributes(N, w[S]), N.style.cssText = k[S], N.innerHTML = this._mini_cal_arrows[S], m.appendChild(N), i.attach(N, "click", D(E[S]));
          }
        c2._date = new Date(r2), c2.week_start = (r2.getDay() - (this.config.start_on_monday ? 1 : 0) + 7) % 7;
        var M = c2._min_date = this.date.week_start(r2);
        c2._max_date = this.date.add(c2._min_date, 6, "week"), this._reset_month_scale(y2, r2, M, 6), n || t2.appendChild(c2), g.style.height = g.childNodes[0].offsetHeight - 1 + "px";
        var T = e2.uid();
        e2._waiAria.minicalHeader(m, T), e2._waiAria.minicalGrid(c2.querySelector(".dhx_year_grid"), T), e2._waiAria.minicalRow(g);
        for (var A = g.querySelectorAll(".dhx_scale_bar"), H = 0; H < A.length; H++)
          e2._waiAria.minicalHeadCell(A[H]);
        var $ = y2.querySelectorAll(".dhx_cal_month_cell"), j = new Date(M);
        for (H = 0; H < $.length; H++)
          e2._waiAria.minicalDayCell($[H], new Date(j)), j = e2.date.add(j, 1, "day");
        return e2._waiAria.minicalHeader(m, T), this._cols = _, this._mode = a2, this._colsS = o2, this._min_date = l, this._max_date = h, e2._date = v, s.month_day = u, this._ignores_detected = f, c2;
      }, e2.destroyCalendar = function(t2, r2) {
        !t2 && this._def_count && this._def_count.firstChild && (r2 || (/* @__PURE__ */ new Date()).valueOf() - this._def_count._created.valueOf() > 500) && (t2 = this._def_count.firstChild), t2 && (i.detachAll(), t2.innerHTML = "", t2.parentNode && t2.parentNode.removeChild(t2), this._def_count && (this._def_count.style.top = "-1000px"), t2.conf && t2.conf._on_xle_handler && e2.detachEvent(t2.conf._on_xle_handler));
      }, e2.isCalendarVisible = function() {
        return !!(this._def_count && parseInt(this._def_count.style.top, 10) > 0) && this._def_count;
      }, e2.attachEvent("onTemplatesReady", function() {
        e2.event(document.body, "click", function() {
          e2.destroyCalendar();
        });
      }, { once: true }), e2.form_blocks.calendar_time = { render: function(t2) {
        var r2 = "<span class='dhx_minical_input_wrapper'><input class='dhx_readonly dhx_minical_input' type='text' readonly='true'></span>", d = e2.config, n = this.date.date_part(e2._currentDate()), s = 1440, _ = 0;
        d.limit_time_select && (_ = 60 * d.first_hour, s = 60 * d.last_hour + 1), n.setHours(_ / 60), t2._time_values = [], r2 += " <select class='dhx_lightbox_time_select'>";
        for (var a2 = _; a2 < s; a2 += 1 * this.config.time_step)
          r2 += "<option value='" + a2 + "'>" + this.templates.time_picker(n) + "</option>", t2._time_values.push(a2), n = this.date.add(n, this.config.time_step, "minute");
        return "<div class='dhx_section_time dhx_lightbox_minical'>" + (r2 += "</select>") + "<span class='dhx_lightbox_minical_spacer'> &nbsp;&ndash;&nbsp; </span>" + r2 + "</div>";
      }, set_value: function(t2, r2, d, n) {
        var s, _, a2 = t2.getElementsByTagName("input"), o2 = t2.getElementsByTagName("select"), l = function(m, g, y2) {
          e2.event(m, "click", function() {
            e2.destroyCalendar(null, true), e2.renderCalendar({ position: m, date: new Date(this._date), navigation: true, handler: function(x) {
              m.value = e2.templates.calendar_time(x), m._date = new Date(x), e2.destroyCalendar(), e2.config.event_duration && e2.config.auto_end_date && y2 === 0 && f();
            } });
          });
        };
        if (e2.config.full_day) {
          if (!t2._full_day) {
            var h = "<label class='dhx_fullday'><input type='checkbox' name='full_day' value='true'> " + e2.locale.labels.full_day + "&nbsp;</label></input>";
            e2.config.wide_form || (h = t2.previousSibling.innerHTML + h), t2.previousSibling.innerHTML = h, t2._full_day = true;
          }
          var v = t2.previousSibling.getElementsByTagName("input")[0], u = e2.date.time_part(d.start_date) === 0 && e2.date.time_part(d.end_date) === 0;
          v.checked = u, o2[0].disabled = v.checked, o2[1].disabled = v.checked, v.$_eventAttached || (v.$_eventAttached = true, e2.event(v, "click", function() {
            if (v.checked === true) {
              var m = {};
              e2.form_blocks.calendar_time.get_value(t2, m), s = e2.date.date_part(m.start_date), (+(_ = e2.date.date_part(m.end_date)) == +s || +_ >= +s && (d.end_date.getHours() !== 0 || d.end_date.getMinutes() !== 0)) && (_ = e2.date.add(_, 1, "day"));
            }
            var g = s || d.start_date, y2 = _ || d.end_date;
            c2(a2[0], g), c2(a2[1], y2), o2[0].value = 60 * g.getHours() + g.getMinutes(), o2[1].value = 60 * y2.getHours() + y2.getMinutes(), o2[0].disabled = v.checked, o2[1].disabled = v.checked;
          }));
        }
        if (e2.config.event_duration && e2.config.auto_end_date) {
          var f = function() {
            e2.config.auto_end_date && e2.config.event_duration && (s = e2.date.add(a2[0]._date, o2[0].value, "minute"), _ = new Date(s.getTime() + 60 * e2.config.event_duration * 1e3), a2[1].value = e2.templates.calendar_time(_), a2[1]._date = e2.date.date_part(new Date(_)), o2[1].value = 60 * _.getHours() + _.getMinutes());
          };
          o2[0].$_eventAttached || o2[0].addEventListener("change", f);
        }
        function c2(m, g, y2) {
          l(m, g, y2), m.value = e2.templates.calendar_time(g), m._date = e2.date.date_part(new Date(g));
        }
        function p(m) {
          for (var g = n._time_values, y2 = 60 * m.getHours() + m.getMinutes(), x = y2, b = false, k = 0; k < g.length; k++) {
            var E = g[k];
            if (E === y2) {
              b = true;
              break;
            }
            E < y2 && (x = E);
          }
          return b || x ? b ? y2 : x : -1;
        }
        c2(a2[0], d.start_date, 0), c2(a2[1], d.end_date, 1), l = function() {
        }, o2[0].value = p(d.start_date), o2[1].value = p(d.end_date);
      }, get_value: function(t2, r2) {
        var d = t2.getElementsByTagName("input"), n = t2.getElementsByTagName("select");
        return r2.start_date = e2.date.add(d[0]._date, n[0].value, "minute"), r2.end_date = e2.date.add(d[1]._date, n[1].value, "minute"), r2.end_date <= r2.start_date && (r2.end_date = e2.date.add(r2.start_date, e2.config.time_step, "minute")), { start_date: new Date(r2.start_date), end_date: new Date(r2.end_date) };
      }, focus: function(t2) {
      } }, e2.linkCalendar = function(t2, r2) {
        var d = function() {
          var n = e2._date, s = new Date(n.valueOf());
          return r2 && (s = r2(s)), s.setDate(1), e2.updateCalendar(t2, s), true;
        };
        e2.attachEvent("onViewChange", d), e2.attachEvent("onXLE", d), e2.attachEvent("onEventAdded", d), e2.attachEvent("onEventChanged", d), e2.attachEvent("onEventDeleted", d), d();
      }, e2._markCalendarCurrentDate = function(t2) {
        var r2 = e2.getState(), d = r2.min_date, n = r2.max_date, s = r2.mode, _ = e2.date.month_start(new Date(t2._date)), a2 = e2.date.add(_, 1, "month");
        if (!({ month: true, year: true, agenda: true, grid: true }[s] || d.valueOf() <= _.valueOf() && n.valueOf() >= a2.valueOf()))
          for (var o2 = d; o2.valueOf() < n.valueOf(); )
            _.valueOf() <= o2.valueOf() && a2 > o2 && e2.markCalendar(t2, o2, "dhx_calendar_click"), o2 = e2.date.add(o2, 1, "day");
      }, e2.attachEvent("onEventCancel", function() {
        e2.destroyCalendar(null, true);
      }), e2.attachEvent("onDestroy", function() {
        e2.destroyCalendar();
      });
    }, monthheight: function(e2) {
      e2.attachEvent("onTemplatesReady", function() {
        e2.xy.scroll_width = 0;
        var i = e2.render_view_data;
        e2.render_view_data = function() {
          var r2 = this._els.dhx_cal_data[0];
          r2.firstChild._h_fix = true, i.apply(e2, arguments);
          var d = parseInt(r2.style.height);
          r2.style.height = "1px", r2.style.height = r2.scrollHeight + "px", this._obj.style.height = this._obj.clientHeight + r2.scrollHeight - d + "px";
        };
        var t2 = e2._reset_month_scale;
        e2._reset_month_scale = function(r2, d, n, s) {
          var _ = { clientHeight: 100 };
          t2.apply(e2, [_, d, n, s]), r2.innerHTML = _.innerHTML;
        };
      });
    }, multisection: function(e2) {
      de("Multisection", e2.assert);
    }, multiselect: function(e2) {
      e2.form_blocks.multiselect = { render: function(i) {
        var t2 = "dhx_multi_select_control dhx_multi_select_" + i.name;
        i.vertical && (t2 += " dhx_multi_select_control_vertical");
        for (var r2 = "<div class='" + t2 + "' style='overflow: auto; max-height: " + i.height + "px; position: relative;' >", d = 0; d < i.options.length; d++)
          r2 += "<label><input type='checkbox' value='" + i.options[d].key + "'/>" + i.options[d].label + "</label>";
        return r2 += "</div>";
      }, set_value: function(i, t2, r2, d) {
        for (var n = i.getElementsByTagName("input"), s = 0; s < n.length; s++)
          n[s].checked = false;
        function _(v) {
          for (var u = i.getElementsByTagName("input"), f = 0; f < u.length; f++)
            u[f].checked = !!v[u[f].value];
        }
        var a2 = {};
        if (r2[d.map_to]) {
          var o2 = (r2[d.map_to] + "").split(d.delimiter || e2.config.section_delimiter || ",");
          for (s = 0; s < o2.length; s++)
            a2[o2[s]] = true;
          _(a2);
        } else {
          if (e2._new_event || !d.script_url)
            return;
          var l = document.createElement("div");
          l.className = "dhx_loading", l.style.cssText = "position: absolute; top: 40%; left: 40%;", i.appendChild(l);
          var h = [d.script_url, d.script_url.indexOf("?") == -1 ? "?" : "&", "dhx_crosslink_" + d.map_to + "=" + r2.id + "&uid=" + e2.uid()].join("");
          e2.ajax.get(h, function(v) {
            var u = function(f, c2) {
              try {
                for (var p = JSON.parse(f.xmlDoc.responseText), m = {}, g = 0; g < p.length; g++) {
                  var y2 = p[g];
                  m[y2.value || y2.key || y2.id] = true;
                }
                return m;
              } catch {
                return null;
              }
            }(v);
            u || (u = function(f, c2) {
              for (var p = e2.ajax.xpath("//data/item", f.xmlDoc), m = {}, g = 0; g < p.length; g++)
                m[p[g].getAttribute(c2.map_to)] = true;
              return m;
            }(v, d)), _(u), i.removeChild(l);
          });
        }
      }, get_value: function(i, t2, r2) {
        for (var d = [], n = i.getElementsByTagName("input"), s = 0; s < n.length; s++)
          n[s].checked && d.push(n[s].value);
        return d.join(r2.delimiter || e2.config.section_delimiter || ",");
      }, focus: function(i) {
      } };
    }, multisource: function(e2) {
      var i = e2._load;
      e2._load = function(t2, r2) {
        if (typeof (t2 = t2 || this._load_url) == "object")
          for (var d = function(s) {
            var _ = function() {
            };
            return _.prototype = s, _;
          }(this._loaded), n = 0; n < t2.length; n++)
            this._loaded = new d(), i.call(this, t2[n], r2);
        else
          i.apply(this, arguments);
      };
    }, mvc: function(e2) {
      var i, t2 = { use_id: false };
      function r2(s) {
        var _ = {};
        for (var a2 in s)
          a2.indexOf("_") !== 0 && (_[a2] = s[a2]);
        return t2.use_id || delete _.id, _;
      }
      function d(s) {
        s._not_render = false, s._render_wait && s.render_view_data(), s._loading = false, s.callEvent("onXLE", []);
      }
      function n(s) {
        return t2.use_id ? s.id : s.cid;
      }
      e2.backbone = function(s, _) {
        _ && (t2 = _), s.bind("change", function(l, h) {
          var v = n(l), u = e2._events[v] = l.toJSON();
          u.id = v, e2._init_event(u), clearTimeout(i), i = setTimeout(function() {
            if (e2.$destroyed)
              return true;
            e2.updateView();
          }, 1);
        }), s.bind("remove", function(l, h) {
          var v = n(l);
          e2._events[v] && e2.deleteEvent(v);
        });
        var a2 = [];
        function o2() {
          if (e2.$destroyed)
            return true;
          a2.length && (e2.parse(a2, "json"), a2 = []);
        }
        s.bind("add", function(l, h) {
          var v = n(l);
          if (!e2._events[v]) {
            var u = l.toJSON();
            u.id = v, e2._init_event(u), a2.push(u), a2.length == 1 && setTimeout(o2, 1);
          }
        }), s.bind("request", function(l) {
          var h;
          l instanceof Backbone.Collection && ((h = e2)._loading = true, h._not_render = true, h.callEvent("onXLS", []));
        }), s.bind("sync", function(l) {
          l instanceof Backbone.Collection && d(e2);
        }), s.bind("error", function(l) {
          l instanceof Backbone.Collection && d(e2);
        }), e2.attachEvent("onEventCreated", function(l) {
          var h = new s.model(e2.getEvent(l));
          return e2._events[l] = h.toJSON(), e2._events[l].id = l, true;
        }), e2.attachEvent("onEventAdded", function(l) {
          if (!s.get(l)) {
            var h = r2(e2.getEvent(l)), v = new s.model(h), u = n(v);
            u != l && this.changeEventId(l, u), s.add(v), s.trigger("scheduler:add", v);
          }
          return true;
        }), e2.attachEvent("onEventChanged", function(l) {
          var h = s.get(l), v = r2(e2.getEvent(l));
          return h.set(v), s.trigger("scheduler:change", h), true;
        }), e2.attachEvent("onEventDeleted", function(l) {
          var h = s.get(l);
          return h && (s.trigger("scheduler:remove", h), s.remove(l)), true;
        });
      };
    }, outerdrag: function(e2) {
      e2.attachEvent("onTemplatesReady", function() {
        var i, t2 = new dhtmlDragAndDropObject(), r2 = t2.stopDrag;
        function d(n, s, _, a2) {
          if (!e2.checkEvent("onBeforeExternalDragIn") || e2.callEvent("onBeforeExternalDragIn", [n, s, _, a2, i])) {
            var o2 = e2.attachEvent("onEventCreated", function(f) {
              e2.callEvent("onExternalDragIn", [f, n, i]) || (this._drag_mode = this._drag_id = null, this.deleteEvent(f));
            }), l = e2.getActionData(i), h = { start_date: new Date(l.date) };
            if (e2.matrix && e2.matrix[e2._mode]) {
              var v = e2.matrix[e2._mode];
              h[v.y_property] = l.section;
              var u = e2._locate_cell_timeline(i);
              h.start_date = v._trace_x[u.x], h.end_date = e2.date.add(h.start_date, v.x_step, v.x_unit);
            }
            e2._props && e2._props[e2._mode] && (h[e2._props[e2._mode].map_to] = l.section), e2.addEventNow(h), e2.detachEvent(o2);
          }
        }
        t2.stopDrag = function(n) {
          return i = n, r2.apply(this, arguments);
        }, t2.addDragLanding(e2._els.dhx_cal_data[0], { _drag: function(n, s, _, a2) {
          d(n, s, _, a2);
        }, _dragIn: function(n, s) {
          return n;
        }, _dragOut: function(n) {
          return this;
        } }), dhtmlx.DragControl && dhtmlx.DragControl.addDrop(e2._els.dhx_cal_data[0], { onDrop: function(n, s, _, a2) {
          var o2 = dhtmlx.DragControl.getMaster(n);
          i = a2, d(n, o2, s, a2.target || a2.srcElement);
        }, onDragIn: function(n, s, _) {
          return s;
        } }, true);
      });
    }, pdf: function(e2) {
      var i, t2, r2 = new RegExp("<[^>]*>", "g"), d = new RegExp("<br[^>]*>", "g");
      function n(b) {
        return b.replace(d, `
`).replace(r2, "");
      }
      function s(b, k) {
        b = parseFloat(b), k = parseFloat(k), isNaN(k) || (b -= k);
        var E = a2(b);
        return b = b - E.width + E.cols * i, isNaN(b) ? "auto" : 100 * b / i;
      }
      function _(b, k, E) {
        b = parseFloat(b), k = parseFloat(k), !isNaN(k) && E && (b -= k);
        var D = a2(b);
        return b = b - D.width + D.cols * i, isNaN(b) ? "auto" : 100 * b / (i - (isNaN(k) ? 0 : k));
      }
      function a2(b) {
        for (var k = 0, E = e2._els.dhx_cal_header[0].childNodes, D = E[1] ? E[1].childNodes : E[0].childNodes, w = 0; w < D.length; w++) {
          var S = D[w].style ? D[w] : D[w].parentNode, N = parseFloat(S.style.width);
          if (!(b > N))
            break;
          b -= N + 1, k += N + 1;
        }
        return { width: k, cols: w };
      }
      function o2(b) {
        return b = parseFloat(b), isNaN(b) ? "auto" : 100 * b / t2;
      }
      function l(b, k) {
        return (window.getComputedStyle ? window.getComputedStyle(b, null)[k] : b.currentStyle ? b.currentStyle[k] : null) || "";
      }
      function h(b, k) {
        for (var E = parseInt(b.style.left, 10), D = 0; D < e2._cols.length; D++)
          if ((E -= e2._cols[D]) < 0)
            return D;
        return k;
      }
      function v(b, k) {
        for (var E = parseInt(b.style.top, 10), D = 0; D < e2._colsS.heights.length; D++)
          if (e2._colsS.heights[D] > E)
            return D;
        return k;
      }
      function u(b) {
        return b ? "</" + b + ">" : "";
      }
      function f(b, k, E, D) {
        var w = "<" + b + " profile='" + k + "'";
        return E && (w += " header='" + E + "'"), D && (w += " footer='" + D + "'"), w += ">";
      }
      function c2() {
        var b = "", k = e2._mode;
        if (e2.matrix && e2.matrix[e2._mode] && (k = e2.matrix[e2._mode].render == "cell" ? "matrix" : "timeline"), b += "<scale mode='" + k + "' today='" + e2._els.dhx_cal_date[0].innerHTML + "'>", e2._mode == "week_agenda")
          for (var E = e2._els.dhx_cal_data[0].getElementsByTagName("DIV"), D = 0; D < E.length; D++)
            E[D].className == "dhx_wa_scale_bar" && (b += "<column>" + n(E[D].innerHTML) + "</column>");
        else if (e2._mode == "agenda" || e2._mode == "map")
          b += "<column>" + n((E = e2._els.dhx_cal_header[0].childNodes[0].childNodes)[0].innerHTML) + "</column><column>" + n(E[1].innerHTML) + "</column>";
        else if (e2._mode == "year")
          for (E = e2._els.dhx_cal_data[0].childNodes, D = 0; D < E.length; D++)
            b += "<month label='" + n(E[D].querySelector(".dhx_year_month").innerHTML) + "'>", b += m(E[D].querySelector(".dhx_year_week").childNodes), b += p(E[D].querySelector(".dhx_year_body")), b += "</month>";
        else {
          b += "<x>", b += m(E = e2._els.dhx_cal_header[0].childNodes), b += "</x>";
          var w = e2._els.dhx_cal_data[0];
          if (e2.matrix && e2.matrix[e2._mode]) {
            for (b += "<y>", D = 0; D < w.firstChild.rows.length; D++)
              b += "<row><![CDATA[" + n(w.firstChild.rows[D].cells[0].innerHTML) + "]]></row>";
            b += "</y>", t2 = w.firstChild.rows[0].cells[0].offsetHeight;
          } else if (w.firstChild.tagName == "TABLE")
            b += p(w);
          else {
            for (w = w.childNodes[w.childNodes.length - 1]; w.className.indexOf("dhx_scale_holder") == -1; )
              w = w.previousSibling;
            for (w = w.childNodes, b += "<y>", D = 0; D < w.length; D++)
              b += `
<row><![CDATA[` + n(w[D].innerHTML) + "]]></row>";
            b += "</y>", t2 = w[0].offsetHeight;
          }
        }
        return b += "</scale>";
      }
      function p(b) {
        for (var k = "", E = b.querySelectorAll("tr"), D = 0; D < E.length; D++) {
          for (var w = [], S = E[D].querySelectorAll("td"), N = 0; N < S.length; N++)
            w.push(S[N].querySelector(".dhx_month_head").innerHTML);
          k += `
<row height='` + S[0].offsetHeight + "'><![CDATA[" + n(w.join("|")) + "]]></row>", t2 = S[0].offsetHeight;
        }
        return k;
      }
      function m(b) {
        var k, E = "";
        e2.matrix && e2.matrix[e2._mode] && (e2.matrix[e2._mode].second_scale && (k = b[1].childNodes), b = b[0].childNodes);
        for (var D = 0; D < b.length; D++)
          E += `
<column><![CDATA[` + n(b[D].innerHTML) + "]]></column>";
        if (i = b[0].offsetWidth, k) {
          var w = 0, S = b[0].offsetWidth, N = 1;
          for (D = 0; D < k.length; D++)
            E += `
<column second_scale='` + N + "'><![CDATA[" + n(k[D].innerHTML) + "]]></column>", (w += k[D].offsetWidth) >= S && (S += b[N] ? b[N].offsetWidth : 0, N++), i = k[0].offsetWidth;
        }
        return E;
      }
      function g(b) {
        var k = "", E = e2._rendered, D = e2.matrix && e2.matrix[e2._mode];
        if (e2._mode == "agenda" || e2._mode == "map")
          for (var w = 0; w < E.length; w++)
            k += "<event><head><![CDATA[" + n(E[w].childNodes[0].innerHTML) + "]]></head><body><![CDATA[" + n(E[w].childNodes[2].innerHTML) + "]]></body></event>";
        else if (e2._mode == "week_agenda")
          for (w = 0; w < E.length; w++)
            k += "<event day='" + E[w].parentNode.getAttribute("day") + "'><body>" + n(E[w].innerHTML) + "</body></event>";
        else if (e2._mode == "year")
          for (E = e2.get_visible_events(), w = 0; w < E.length; w++) {
            var S = E[w].start_date;
            for (S.valueOf() < e2._min_date.valueOf() && (S = e2._min_date); S < E[w].end_date; ) {
              var N = S.getMonth() + 12 * (S.getFullYear() - e2._min_date.getFullYear()) - e2.week_starts._month, M = e2.week_starts[N] + S.getDate() - 1, T = b ? l(e2._get_year_cell(S), "color") : "", A = b ? l(e2._get_year_cell(S), "backgroundColor") : "";
              if (k += "<event day='" + M % 7 + "' week='" + Math.floor(M / 7) + "' month='" + N + "' backgroundColor='" + A + "' color='" + T + "'></event>", (S = e2.date.add(S, 1, "day")).valueOf() >= e2._max_date.valueOf())
                break;
            }
          }
        else if (D && D.render == "cell")
          for (E = e2._els.dhx_cal_data[0].getElementsByTagName("TD"), w = 0; w < E.length; w++)
            T = b ? l(E[w], "color") : "", k += `
<event><body backgroundColor='` + (A = b ? l(E[w], "backgroundColor") : "") + "' color='" + T + "'><![CDATA[" + n(E[w].innerHTML) + "]]></body></event>";
        else
          for (w = 0; w < E.length; w++) {
            var H, $;
            if (e2.matrix && e2.matrix[e2._mode])
              H = s(E[w].style.left), $ = s(E[w].offsetWidth) - 1;
            else {
              var j = e2.config.use_select_menu_space ? 0 : 26;
              H = _(E[w].style.left, j, true), $ = _(E[w].style.width, j) - 1;
            }
            if (!isNaN(1 * $)) {
              var z = o2(E[w].style.top), W = o2(E[w].style.height), Y = E[w].className.split(" ")[0].replace("dhx_cal_", "");
              if (Y !== "dhx_tooltip_line") {
                var q = e2.getEvent(E[w].getAttribute(e2.config.event_attribute));
                if (q) {
                  M = q._sday;
                  var V = q._sweek, ve = q._length || 0;
                  if (e2._mode == "month")
                    W = parseInt(E[w].offsetHeight, 10), z = parseInt(E[w].style.top, 10) - e2.xy.month_head_height, M = h(E[w], M), V = v(E[w], V);
                  else if (e2.matrix && e2.matrix[e2._mode]) {
                    M = 0, V = E[w].parentNode.parentNode.parentNode.rowIndex;
                    var Ne = t2;
                    t2 = E[w].parentNode.offsetHeight, z = o2(E[w].style.top), z -= 0.2 * z, t2 = Ne;
                  } else {
                    if (E[w].parentNode == e2._els.dhx_cal_data[0])
                      continue;
                    var xe = e2._els.dhx_cal_data[0].childNodes[0], St = parseFloat(xe.className.indexOf("dhx_scale_holder") != -1 ? xe.style.left : 0);
                    H += s(E[w].parentNode.style.left, St);
                  }
                  k += `
<event week='` + V + "' day='" + M + "' type='" + Y + "' x='" + H + "' y='" + z + "' width='" + $ + "' height='" + W + "' len='" + ve + "'>", Y == "event" ? (k += "<header><![CDATA[" + n(E[w].childNodes[1].innerHTML) + "]]></header>", T = b ? l(E[w].childNodes[2], "color") : "", k += "<body backgroundColor='" + (A = b ? l(E[w].childNodes[2], "backgroundColor") : "") + "' color='" + T + "'><![CDATA[" + n(E[w].childNodes[2].innerHTML) + "]]></body>") : (T = b ? l(E[w], "color") : "", k += "<body backgroundColor='" + (A = b ? l(E[w], "backgroundColor") : "") + "' color='" + T + "'><![CDATA[" + n(E[w].innerHTML) + "]]></body>"), k += "</event>";
                }
              }
            }
          }
        return k;
      }
      function y2(b, k, E, D, w, S) {
        var N = false;
        D == "fullcolor" && (N = true, D = "color"), D = D || "color";
        var M, T = "";
        if (b) {
          var A = e2._date, H = e2._mode;
          k = e2.date[E + "_start"](k), k = e2.date["get_" + E + "_end"] ? e2.date["get_" + E + "_end"](k) : e2.date.add(k, 1, E), T = f("pages", D, w, S);
          for (var $ = new Date(b); +$ < +k; $ = this.date.add($, 1, E))
            this.setCurrentView($, E), T += ((M = "page") ? "<" + M + ">" : "") + c2().replace("\u2013", "-") + g(N) + u("page");
          T += u("pages"), this.setCurrentView(A, H);
        } else
          T = f("data", D, w, S) + c2().replace("\u2013", "-") + g(N) + u("data");
        return T;
      }
      function x(b, k, E, D, w, S, N) {
        (function(M, T) {
          var A = e2.uid(), H = document.createElement("div");
          H.style.display = "none", document.body.appendChild(H), H.innerHTML = '<form id="' + A + '" method="post" target="_blank" action="' + T + '" accept-charset="utf-8" enctype="application/x-www-form-urlencoded"><input type="hidden" name="mycoolxmlbody"/> </form>', document.getElementById(A).firstChild.value = encodeURIComponent(M), document.getElementById(A).submit(), H.parentNode.removeChild(H);
        })(typeof w == "object" ? function(M) {
          for (var T = "<data>", A = 0; A < M.length; A++)
            T += M[A].source.getPDFData(M[A].start, M[A].end, M[A].view, M[A].mode, M[A].header, M[A].footer);
          return T += "</data>", T;
        }(w) : y2.apply(this, [b, k, E, w, S, N]), D);
      }
      e2.getPDFData = y2, e2.toPDF = function(b, k, E, D) {
        return x.apply(this, [null, null, null, b, k, E, D]);
      }, e2.toPDFRange = function(b, k, E, D, w, S, N) {
        return typeof b == "string" && (b = e2.templates.api_date(b), k = e2.templates.api_date(k)), x.apply(this, arguments);
      };
    }, quick_info: function(e2) {
      e2.config.icons_select = ["icon_form", "icon_delete"], e2.config.details_on_create = true, e2.config.show_quick_info = true, e2.xy.menu_width = 0;
      let i = null;
      function t2(d) {
        const n = d.getBoundingClientRect(), s = e2.$container.getBoundingClientRect().bottom - n.bottom;
        s < 0 && (d.style.top = `${parseFloat(d.style.top) + s}px`);
      }
      function r2(d) {
        let n = 0, s = 0, _ = d;
        for (; _ && _ != e2._obj; )
          n += _.offsetLeft, s += _.offsetTop - _.scrollTop, _ = _.offsetParent;
        return _ ? { left: n, top: s, dx: n + d.offsetWidth / 2 > e2._x / 2 ? 1 : 0, dy: s + d.offsetHeight / 2 > e2._y / 2 ? 1 : 0, width: d.offsetWidth, height: d.offsetHeight } : 0;
      }
      e2.attachEvent("onSchedulerReady", function() {
        const d = e2.$container;
        d._$quickInfoHandler || (d._$quickInfoHandler = true, e2.event(d, "mousedown", function(n) {
          const s = n.target.closest(`[${e2.config.event_attribute}]`);
          s && (i = { id: s.getAttribute(e2.config.event_attribute), position: r2(s) });
        }), e2.attachEvent("onDestroy", () => {
          delete d._$quickInfoHandler;
        }));
      }), e2.attachEvent("onClick", function(d) {
        if (e2.config.show_quick_info)
          return e2.showQuickInfo(d), true;
      }), function() {
        for (var d = ["onEmptyClick", "onViewChange", "onLightbox", "onBeforeEventDelete", "onBeforeDrag"], n = function() {
          return e2.hideQuickInfo(true), true;
        }, s = 0; s < d.length; s++)
          e2.attachEvent(d[s], n);
      }(), e2.templates.quick_info_title = function(d, n, s) {
        return s.text.substr(0, 50);
      }, e2.templates.quick_info_content = function(d, n, s) {
        return s.details || "";
      }, e2.templates.quick_info_date = function(d, n, s) {
        return e2.isOneDayEvent(s) && e2.config.rtl ? e2.templates.day_date(d, n, s) + " " + e2.templates.event_header(n, d, s) : e2.isOneDayEvent(s) ? e2.templates.day_date(d, n, s) + " " + e2.templates.event_header(d, n, s) : e2.config.rtl ? e2.templates.week_date(n, d, s) : e2.templates.week_date(d, n, s);
      }, e2.showQuickInfo = function(d) {
        if (d == this._quick_info_box_id || (this.hideQuickInfo(true), this.callEvent("onBeforeQuickInfo", [d]) === false))
          return;
        let n;
        n = i && i.id == d ? i.position : this._get_event_counter_part(d), n && (this._quick_info_box = this._init_quick_info(n), this._fill_quick_data(d), this._show_quick_info(n), this.callEvent("onQuickInfo", [d]));
      }, function() {
        function d(n) {
          n = n || "";
          var s, _ = parseFloat(n), a2 = n.match(/m?s/);
          switch (a2 && (a2 = a2[0]), a2) {
            case "s":
              s = 1e3 * _;
              break;
            case "ms":
              s = _;
              break;
            default:
              s = 0;
          }
          return s;
        }
        e2.hideQuickInfo = function(n) {
          var s = this._quick_info_box, _ = this._quick_info_box_id;
          if (this._quick_info_box_id = 0, s && s.parentNode) {
            var a2 = s.offsetWidth;
            if (e2.config.quick_info_detached)
              return this.callEvent("onAfterQuickInfo", [_]), s.parentNode.removeChild(s);
            if (s.style.right == "auto" ? s.style.left = -a2 + "px" : s.style.right = -a2 + "px", n)
              s.parentNode.removeChild(s);
            else {
              var o2;
              window.getComputedStyle ? o2 = window.getComputedStyle(s, null) : s.currentStyle && (o2 = s.currentStyle);
              var l = d(o2["transition-delay"]) + d(o2["transition-duration"]);
              setTimeout(function() {
                s.parentNode && s.parentNode.removeChild(s);
              }, l);
            }
            this.callEvent("onAfterQuickInfo", [_]);
          }
        };
      }(), e2.event(window, "keydown", function(d) {
        d.keyCode == 27 && e2.hideQuickInfo();
      }), e2._show_quick_info = function(d) {
        var n = e2._quick_info_box;
        e2._obj.appendChild(n);
        var s = n.offsetWidth, _ = n.offsetHeight;
        if (e2.config.quick_info_detached) {
          var a2 = d.left - d.dx * (s - d.width);
          e2.getView() && e2.getView()._x_scroll && (e2.config.rtl ? a2 += e2.getView()._x_scroll : a2 -= e2.getView()._x_scroll), a2 + s > window.innerWidth && (a2 = window.innerWidth - s), a2 = Math.max(0, a2), n.style.left = a2 + "px", n.style.top = d.top - (d.dy ? _ : -d.height) + "px";
        } else {
          const o2 = e2.$container.querySelector(".dhx_cal_data").offsetTop;
          n.style.top = o2 + 20 + "px", d.dx == 1 ? (n.style.right = "auto", n.style.left = -s + "px", setTimeout(function() {
            n.style.left = "-10px";
          }, 1)) : (n.style.left = "auto", n.style.right = -s + "px", setTimeout(function() {
            n.style.right = "-10px";
          }, 1)), n.className = n.className.replace(" dhx_qi_left", "").replace(" dhx_qi_right", "") + " dhx_qi_" + (d.dx == 1 ? "left" : "right");
        }
        n.ontransitionend = () => {
          t2(n), n.ontransitionend = null;
        }, setTimeout(() => {
          t2(n);
        }, 1);
      }, e2.attachEvent("onTemplatesReady", function() {
        if (e2.hideQuickInfo(), this._quick_info_box) {
          var d = this._quick_info_box;
          d.parentNode && d.parentNode.removeChild(d), this._quick_info_box = null;
        }
      }), e2._quick_info_onscroll_handler = function(d) {
        e2.hideQuickInfo();
      }, e2._init_quick_info = function() {
        if (!this._quick_info_box) {
          var d = this._quick_info_box = document.createElement("div");
          this._waiAria.quickInfoAttr(d), d.className = "dhx_cal_quick_info", e2.$testmode && (d.className += " dhx_no_animate"), e2.config.rtl && (d.className += " dhx_quick_info_rtl");
          var n = `
		<div class="dhx_cal_qi_tcontrols">
			<a class="dhx_cal_qi_close_btn scheduler_icon close"></a>
		</div>
		<div class="dhx_cal_qi_title" ${this._waiAria.quickInfoHeaderAttrString()}>
				
				<div class="dhx_cal_qi_tcontent"></div>
				<div class="dhx_cal_qi_tdate"></div>
			</div>
			<div class="dhx_cal_qi_content"></div>`;
          n += '<div class="dhx_cal_qi_controls">';
          for (var s = e2.config.icons_select, _ = 0; _ < s.length; _++)
            n += `<div ${this._waiAria.quickInfoButtonAttrString(this.locale.labels[s[_]])} class="dhx_qi_big_icon ${s[_]}" title="${e2.locale.labels[s[_]]}">
				<div class='dhx_menu_icon ${s[_]}'></div><div>${e2.locale.labels[s[_]]}</div></div>`;
          n += "</div>", d.innerHTML = n, e2.event(d, "click", function(a2) {
            e2._qi_button_click(a2.target || a2.srcElement);
          }), e2.config.quick_info_detached && (e2._detachDomEvent(e2._els.dhx_cal_data[0], "scroll", e2._quick_info_onscroll_handler), e2.event(e2._els.dhx_cal_data[0], "scroll", e2._quick_info_onscroll_handler));
        }
        return this._quick_info_box;
      }, e2._qi_button_click = function(d) {
        var n = e2._quick_info_box;
        if (d && d != n)
          if (d.closest(".dhx_cal_qi_close_btn"))
            e2.hideQuickInfo();
          else {
            var s = e2._getClassName(d);
            if (s.indexOf("_icon") != -1) {
              var _ = e2._quick_info_box_id;
              e2._click.buttons[s.split(" ")[1].replace("icon_", "")](_);
            } else
              e2._qi_button_click(d.parentNode);
          }
      }, e2._get_event_counter_part = function(d) {
        return r2(e2.getRenderedEvent(d));
      }, e2._fill_quick_data = function(d) {
        var n = e2.getEvent(d), s = e2._quick_info_box;
        e2._quick_info_box_id = d;
        var _ = { content: e2.templates.quick_info_title(n.start_date, n.end_date, n), date: e2.templates.quick_info_date(n.start_date, n.end_date, n) };
        s.querySelector(".dhx_cal_qi_tcontent").innerHTML = `<span>${_.content}</span>`, s.querySelector(".dhx_cal_qi_tdate").innerHTML = _.date, e2._waiAria.quickInfoHeader(s, [_.content, _.date].join(" "));
        var a2 = s.querySelector(".dhx_cal_qi_content");
        const o2 = e2.templates.quick_info_content(n.start_date, n.end_date, n);
        o2 ? (a2.classList.remove("dhx_hidden"), a2.innerHTML = o2) : a2.classList.add("dhx_hidden");
      };
    }, readonly: function(e2) {
      e2.attachEvent("onTemplatesReady", function() {
        var i;
        e2.form_blocks.recurring && (i = e2.form_blocks.recurring.set_value);
        var t2 = e2.config.buttons_left.slice(), r2 = e2.config.buttons_right.slice();
        function d(_, a2, o2, l) {
          for (var h = a2.getElementsByTagName(_), v = o2.getElementsByTagName(_), u = v.length - 1; u >= 0; u--)
            if (o2 = v[u], l) {
              var f = document.createElement("span");
              f.className = "dhx_text_disabled", f.innerHTML = l(h[u]), o2.parentNode.insertBefore(f, o2), o2.parentNode.removeChild(o2);
            } else
              o2.disabled = true, a2.checked && (o2.checked = true);
        }
        e2.attachEvent("onBeforeLightbox", function(_) {
          this.config.readonly_form || this.getEvent(_).readonly ? this.config.readonly_active = true : (this.config.readonly_active = false, e2.config.buttons_left = t2.slice(), e2.config.buttons_right = r2.slice(), e2.form_blocks.recurring && (e2.form_blocks.recurring.set_value = i));
          var a2 = this.config.lightbox.sections;
          if (this.config.readonly_active) {
            for (var o2 = 0; o2 < a2.length; o2++)
              a2[o2].type == "recurring" && this.config.readonly_active && e2.form_blocks.recurring && (e2.form_blocks.recurring.set_value = function(m, g, y2) {
                var x = e2.$domHelpers.closest(m, ".dhx_wrap_section"), b = "none";
                x.querySelector(".dhx_cal_lsection").display = b, x.querySelector(".dhx_form_repeat").display = b, x.style.display = b, e2.setLightboxSize();
              });
            var l = ["dhx_delete_btn", "dhx_save_btn"], h = [e2.config.buttons_left, e2.config.buttons_right];
            for (o2 = 0; o2 < l.length; o2++)
              for (var v = l[o2], u = 0; u < h.length; u++) {
                for (var f = h[u], c2 = -1, p = 0; p < f.length; p++)
                  if (f[p] == v) {
                    c2 = p;
                    break;
                  }
                c2 != -1 && f.splice(c2, 1);
              }
          }
          return this.resetLightbox(), true;
        });
        var n = e2._fill_lightbox;
        e2._fill_lightbox = function() {
          var _ = this.getLightbox();
          this.config.readonly_active && (_.style.visibility = "hidden", _.style.display = "block");
          var a2 = n.apply(this, arguments);
          if (this.config.readonly_active && (_.style.visibility = "", _.style.display = "none"), this.config.readonly_active) {
            var o2 = this.getLightbox(), l = this._lightbox_r = o2.cloneNode(true);
            l.id = e2.uid(), l.className += " dhx_cal_light_readonly", d("textarea", o2, l, function(h) {
              return h.value;
            }), d("input", o2, l, false), d("select", o2, l, function(h) {
              return h.options.length ? h.options[Math.max(h.selectedIndex || 0, 0)].text : "";
            }), o2.parentNode.insertBefore(l, o2), this.showCover(l), e2._lightbox && e2._lightbox.parentNode.removeChild(e2._lightbox), this._lightbox = l, e2.config.drag_lightbox && e2.event(l.firstChild, "mousedown", e2._ready_to_dnd), e2._init_lightbox_events(), this.setLightboxSize();
          }
          return a2;
        };
        var s = e2.hide_lightbox;
        e2.hide_lightbox = function() {
          return this._lightbox_r && (this._lightbox_r.parentNode.removeChild(this._lightbox_r), this._lightbox_r = this._lightbox = null), s.apply(this, arguments);
        };
      });
    }, recurring: function(e2) {
      function i(u) {
        return new Date(u.getFullYear(), u.getMonth(), u.getDate(), u.getHours(), u.getMinutes(), u.getSeconds(), 0);
      }
      function t2(u) {
        return !!u.rrule && !u.recurring_event_id;
      }
      var r2;
      function d() {
        const u = {};
        for (const f in e2._events) {
          const c2 = e2._events[f];
          c2.recurring_event_id && (u[c2.recurring_event_id] || (u[c2.recurring_event_id] = {}), u[c2.recurring_event_id][c2.original_start.valueOf()] = c2);
        }
        return u;
      }
      e2._rec_temp = [], e2._rec_markers_pull = {}, e2._rec_markers = {}, e2._add_rec_marker = function(u, f) {
        u._pid_time = f, this._rec_markers[u.id] = u, this._rec_markers_pull[u.event_pid] || (this._rec_markers_pull[u.event_pid] = {}), this._rec_markers_pull[u.event_pid][f] = u;
      }, e2._get_rec_marker = function(u, f) {
        let c2 = this._rec_markers_pull[f];
        return c2 ? c2[u] : null;
      }, e2._get_rec_markers = function(u) {
        return this._rec_markers_pull[u] || [];
      }, r2 = e2.addEvent, e2.addEvent = function(u, f, c2, p, m) {
        var g = r2.apply(this, arguments);
        if (g && e2.getEvent(g)) {
          var y2 = e2.getEvent(g);
          y2.start_date && (y2.start_date = i(y2.start_date)), y2.end_date && (y2.end_date = i(y2.end_date));
        }
        return g;
      }, e2.attachEvent("onEventLoading", function(u) {
        return u.original_start && (u.original_start = e2.templates.parse_date(u.original_start)), true;
      }), e2.attachEvent("onEventIdChange", function(u, f) {
        if (!this._ignore_call) {
          this._ignore_call = true, e2._rec_markers[u] && (e2._rec_markers[f] = e2._rec_markers[u], delete e2._rec_markers[u]), e2._rec_markers_pull[u] && (e2._rec_markers_pull[f] = e2._rec_markers_pull[u], delete e2._rec_markers_pull[u]);
          for (var c2 = 0; c2 < this._rec_temp.length; c2++)
            (p = this._rec_temp[c2]).recurring_event_id == u && (p.recurring_event_id = f, this.changeEventId(p.id, f + "#" + p.id.split("#")[1]));
          for (var c2 in this._rec_markers) {
            var p;
            (p = this._rec_markers[c2]).recurring_event_id == u && (p.recurring_event_id = f, p._pid_changed = true);
          }
          var m = e2._rec_markers[f];
          m && m._pid_changed && (delete m._pid_changed, setTimeout(function() {
            if (e2.$destroyed)
              return true;
            e2.callEvent("onEventChanged", [f, e2.getEvent(f)]);
          }, 1)), delete this._ignore_call;
        }
      }), e2.attachEvent("onConfirmedBeforeEventDelete", function(u) {
        var f = this.getEvent(u);
        if (this._is_virtual_event(u) || this._is_modified_occurence(f) && !function(m) {
          return !!m.deleted;
        }(f))
          (function(m, g) {
            m = m.split("#");
            let y2 = e2.uid(), x = m[1] ? m[1] : g._pid_time, b = e2._copy_event(g);
            b.id = y2, b.recurring_event_id = g.recurring_event_id || m[0], b.original_start = new Date(Number(x)), b.deleted = true, e2.addEvent(b);
          })(u, f);
        else {
          t2(f) && this._lightbox_id && this._roll_back_dates(f);
          var c2 = this._get_rec_markers(u);
          for (var p in c2)
            c2.hasOwnProperty(p) && (u = c2[p].id, this.getEvent(u) && this.deleteEvent(u, true));
        }
        return true;
      }), e2.attachEvent("onEventDeleted", function(u, f) {
        !this._is_virtual_event(u) && this._is_modified_occurence(f) && (e2._events[u] || (f.deleted = true, this.setEvent(u, f)));
      }), e2.attachEvent("onEventChanged", function(u, f) {
        if (this._loading)
          return true;
        var c2 = this.getEvent(u);
        if (this._is_virtual_event(u))
          (function(x) {
            let b = x.id.split("#"), k = e2.uid();
            e2._not_render = true;
            let E = e2._copy_event(x);
            E.id = k, E.recurring_event_id = b[0];
            let D = b[1];
            E.original_start = new Date(Number(D)), e2._add_rec_marker(E, D), e2.addEvent(E), e2._not_render = false;
          })(c2);
        else {
          c2.start_date && (c2.start_date = i(c2.start_date)), c2.end_date && (c2.end_date = i(c2.end_date)), t2(c2) && this._lightbox_id && this._roll_back_dates(c2);
          var p = this._get_rec_markers(u);
          for (var m in p)
            p.hasOwnProperty(m) && (delete this._rec_markers[p[m].id], this.deleteEvent(p[m].id, true));
          delete this._rec_markers_pull[u];
          for (var g = false, y2 = 0; y2 < this._rendered.length; y2++)
            this._rendered[y2].getAttribute(this.config.event_attribute) == u && (g = true);
          g || (this._select_id = null);
        }
        return true;
      }), e2.attachEvent("onEventAdded", function(u) {
        if (!this._loading) {
          var f = this.getEvent(u);
          t2(f) && this._roll_back_dates(f);
        }
        return true;
      }), e2.attachEvent("onEventSave", function(u, f, c2) {
        return t2(this.getEvent(u)) && (this._select_id = null), true;
      }), e2.attachEvent("onEventCreated", function(u) {
        var f = this.getEvent(u);
        return t2(f) || function(c2) {
          c2.rrule = "", c2.original_start = null, c2.recurring_event_id = null, c2.duration = null, c2.deleted = null;
        }(f), true;
      }), e2.attachEvent("onEventCancel", function(u) {
        var f = this.getEvent(u);
        t2(f) && (this._roll_back_dates(f), this.render_view_data());
      }), e2._roll_back_dates = function(u) {
        u.start_date && (u.start_date = i(u.start_date)), u.end_date && (u.end_date = i(u.end_date)), u.duration = Math.round((u.end_date.valueOf() - u.start_date.valueOf()) / 1e3), u.end_date = u._end_date, u._start_date && (u.start_date.setMonth(0), u.start_date.setDate(u._start_date.getDate()), u.start_date.setMonth(u._start_date.getMonth()), u.start_date.setFullYear(u._start_date.getFullYear()));
      }, e2._is_virtual_event = function(u) {
        return u.toString().indexOf("#") != -1;
      }, e2._is_modified_occurence = function(u) {
        return u.recurring_event_id && u.recurring_event_id != "0";
      }, e2.showLightbox_rec = e2.showLightbox, e2.showLightbox = function(u) {
        var f = this.locale, c2 = e2.config.lightbox_recurring, p = this.getEvent(u), m = p.recurring_event_id, g = this._is_virtual_event(u);
        g && (m = u.split("#")[0]);
        var y2 = function(b) {
          var k = e2.getEvent(b);
          return k._end_date = k.end_date, k.end_date = new Date(k.start_date.valueOf() + 1e3 * k.duration), e2.showLightbox_rec(b);
        };
        if ((m || 1 * m == 0) && t2(p))
          return y2(u);
        if (!m || m === "0" || !f.labels.confirm_recurring || c2 == "instance" || c2 == "series" && !g)
          return this.showLightbox_rec(u);
        if (c2 == "ask") {
          var x = this;
          e2.modalbox({ text: f.labels.confirm_recurring, title: f.labels.title_confirm_recurring, width: "500px", position: "middle", buttons: [f.labels.button_edit_series, f.labels.button_edit_occurrence, f.labels.icon_cancel], callback: function(b) {
            switch (+b) {
              case 0:
                return y2(m);
              case 1:
                return x.showLightbox_rec(u);
              case 2:
                return;
            }
          } });
        } else
          y2(m);
      }, e2.get_visible_events_rec = e2.get_visible_events, e2.get_visible_events = function(u) {
        for (var f = 0; f < this._rec_temp.length; f++)
          delete this._events[this._rec_temp[f].id];
        this._rec_temp = [];
        const c2 = d();
        var p = this.get_visible_events_rec(u), m = [];
        for (f = 0; f < p.length; f++)
          p[f].deleted || p[f].recurring_event_id || (t2(p[f]) ? this.repeat_date(p[f], m, void 0, void 0, void 0, void 0, c2) : m.push(p[f]));
        return m;
      }, function() {
        var u = e2.isOneDayEvent;
        e2.isOneDayEvent = function(c2) {
          return !!t2(c2) || u.call(this, c2);
        };
        var f = e2.updateEvent;
        e2.updateEvent = function(c2) {
          var p = e2.getEvent(c2);
          p && t2(p) && !this._is_virtual_event(c2) ? e2.update_view() : f.call(this, c2);
        };
      }();
      const n = e2.date.date_to_str("%Y%m%dT%H%i%s");
      function s(u) {
        const f = u.getDay(), c2 = u.getDate();
        return { dayOfWeek: f, dayNumber: Math.ceil(c2 / 7) };
      }
      e2.repeat_date = function(u, f, c2, p, m, g, y2) {
        if (!u.rrule)
          return;
        let x = y2 ? y2[u.id] : d()[u.id];
        x || (x = {}), p || (p = e2._min_date), m || (m = e2._max_date);
        const b = new Date(Date.UTC(u.start_date.getFullYear(), u.start_date.getMonth(), u.start_date.getDate(), u.start_date.getHours(), u.start_date.getMinutes(), u.start_date.getSeconds())), k = Se(`RRULE:${u.rrule};UNTIL=${n(u.end_date)}`, { dtstart: b }).between(p, m).map((w) => {
          const S = new Date(w);
          return S.setHours(u.start_date.getHours()), S.setMinutes(u.start_date.getMinutes()), S.setSeconds(u.start_date.getSeconds()), S;
        });
        let E = 0;
        const D = u.duration;
        for (let w = 0; w < k.length && !(g && E >= g); w++) {
          const S = k[w];
          let N = x[S.valueOf()];
          if (N) {
            if (N.deleted)
              continue;
            E++, f.push(N);
          } else {
            const M = e2._copy_event(u);
            if (M.text = u.text, M.start_date = S, M.id = u.id + "#" + Math.ceil(S.valueOf()), M.end_date = new Date(S.valueOf() + 1e3 * D), M.end_date = e2._fix_daylight_saving_date(M.start_date, M.end_date, u, S, M.end_date), M._timed = e2.isOneDayEvent(M), !M._timed && !e2._table_view && !e2.config.multi_day)
              continue;
            f.push(M), c2 || (e2._events[M.id] = M, e2._rec_temp.push(M)), E++;
          }
        }
      }, e2._fix_daylight_saving_date = function(u, f, c2, p, m) {
        var g = u.getTimezoneOffset() - f.getTimezoneOffset();
        return g ? g > 0 ? new Date(p.valueOf() + 1e3 * c2.duration - 60 * g * 1e3) : new Date(f.valueOf() - 60 * g * 1e3) : new Date(m.valueOf());
      }, e2.getRecDates = function(u, f) {
        var c2 = typeof u == "object" ? u : e2.getEvent(u), p = [];
        if (f = f || 100, !t2(c2))
          return [{ start_date: c2.start_date, end_date: c2.end_date }];
        if (c2.deleted)
          return [];
        e2.repeat_date(c2, p, true, c2.start_date, c2.end_date, f);
        for (var m = [], g = 0; g < p.length; g++)
          p[g].deleted || m.push({ start_date: p[g].start_date, end_date: p[g].end_date });
        return m;
      }, e2.getEvents = function(u, f) {
        var c2 = [];
        const p = d();
        for (var m in this._events) {
          var g = this._events[m];
          if (!g.recurring_event_id)
            if (t2(g))
              if (u && f && g.start_date < f && g.end_date > u) {
                var y2 = [];
                this.repeat_date(g, y2, true, u, f, void 0, p), y2.forEach(function(x) {
                  x.start_date < f && x.end_date > u && c2.push(x);
                });
              } else
                u || f || c2.push(g);
            else
              this._is_virtual_event(g.id) || c2.push(g);
        }
        return c2;
      }, e2._copy_dummy = function(u) {
        var f = new Date(this.start_date), c2 = new Date(this.end_date);
        this.start_date = f, this.end_date = c2, this.duration = this.rrule = null;
      }, e2.config.include_end_by = false, e2.config.lightbox_recurring = "ask", e2.config.recurring_workdays = [C.MO.weekday, C.TU.weekday, C.WE.weekday, C.TH.weekday, C.FR.weekday], e2.config.repeat_date = "%m.%d.%Y", e2.config.lightbox.sections = [{ name: "description", map_to: "text", type: "textarea", focus: true }, { name: "recurring", type: "recurring", map_to: "rec_type" }, { name: "time", height: 72, type: "time", map_to: "auto" }], e2.attachEvent("onClearAll", function() {
        e2._rec_markers = {}, e2._rec_markers_pull = {}, e2._rec_temp = [];
      });
      const _ = { 0: "SU", 1: "MO", 2: "TU", 3: "WE", 4: "TH", 5: "FR", 6: "SA" }, a2 = { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 0 };
      function o2(u) {
        switch (u) {
          case 1:
          case 31:
            return `${u}st`;
          case 2:
            return `${u}nd`;
          case 3:
            return `${u}rd`;
          default:
            return `${u}th`;
        }
      }
      e2.templates.repeat_monthly_date = function(u, f) {
        return `Every ${o2(u.getDate())}`;
      }, e2.templates.repeat_monthly_weekday = function(u, f) {
        const c2 = s(u);
        return `Every ${o2(c2.dayNumber)} ${e2.locale.date.day_full[c2.dayOfWeek]}`;
      }, e2.templates.repeat_yearly_month_date = function(u, f) {
        const c2 = u.getDate(), p = e2.locale.date.month_full[u.getMonth()];
        return `Every ${o2(c2)} day of ${p}`;
      }, e2.templates.repeat_yearly_month_weekday = function(u, f) {
        const c2 = s(u), p = e2.locale.date.month_full[u.getMonth()];
        return `Every ${o2(c2.dayNumber)} ${e2.locale.date.day_full[c2.dayOfWeek]} of ${p}`;
      };
      const l = { MONTHLY: function(u) {
        return { rrule: { freq: C.MONTHLY, interval: 1, bymonthday: u.start.getDate() }, until: new Date(9999, 1, 1) };
      }, WEEKLY: function(u) {
        let f = u.start.getDay() - 1;
        return f == -1 && (f = 6), { rrule: { freq: C.WEEKLY, interval: 1, byweekday: [f] }, until: new Date(9999, 1, 1) };
      }, DAILY: function(u) {
        return { rrule: { freq: C.DAILY, interval: 1 }, until: new Date(9999, 1, 1) };
      }, YEARLY: function(u) {
        return { rrule: { freq: C.YEARLY, bymonth: u.start.getMonth() + 1, interval: 1, bymonthday: u.start.getDate() }, until: new Date(9999, 1, 1) };
      }, WORKDAYS: function(u) {
        return { rrule: { freq: C.WEEKLY, interval: 1, byweekday: e2.config.recurring_workdays }, until: new Date(9999, 1, 1) };
      }, CUSTOM: function(u, f) {
        const c2 = {}, p = f.querySelector('[name="repeat_interval_unit"]').value, m = Math.max(1, f.querySelector('[name="repeat_interval_value"]').value), g = f.querySelector('[name="dhx_custom_month_option"]').value, y2 = f.querySelector('[name="dhx_custom_year_option"]').value;
        let x, b;
        switch (c2.interval = m, p) {
          case "DAILY":
            c2.freq = C.DAILY;
            break;
          case "WEEKLY":
            c2.freq = C.WEEKLY, x = [], f.querySelectorAll('.dhx_form_repeat_custom_week [name="week_day"]').forEach((D) => {
              D.checked && x.push(D.value);
            }), c2.byweekday = x.map((D) => {
              switch (D) {
                case "MO":
                  return C.MO.weekday;
                case "TU":
                  return C.TU.weekday;
                case "WE":
                  return C.WE.weekday;
                case "TH":
                  return C.TH.weekday;
                case "FR":
                  return C.FR.weekday;
                case "SA":
                  return C.SA.weekday;
                case "SU":
                  return C.SU.weekday;
              }
            });
            break;
          case "MONTHLY":
            c2.freq = C.MONTHLY, g === "month_date" ? c2.bymonthday = u.start.getDate() : (b = u.start.getDay() - 1, b == -1 && (b = 6), c2.byweekday = [b], c2.bysetpos = s(u.start).dayNumber);
            break;
          case "YEARLY":
            c2.freq = C.YEARLY, c2.bymonth = u.start.getMonth() + 1, y2 == "month_date" ? c2.bymonthday = u.start.getDate() : (b = u.start.getDay() - 1, b == -1 && (b = 6), c2.byweekday = [b], c2.bysetpos = s(u.start).dayNumber);
        }
        let k = new Date(9999, 1, 1);
        const E = f.querySelector('[name="dhx_custom_repeat_ends"]');
        return E === "ON" ? k = f.querySelector('[name="dhx_form_repeat_ends_ondate"]').value : E === "AFTER" && (c2.count = Math.max(1, f.querySelector('[name="dhx_form_repeat_ends_after"]').value)), { rrule: c2, until: k };
      }, NEVER: function() {
      } };
      function h(u, f, c2) {
        (function(p, m) {
          p.querySelector("[name='repeat_interval_value']").value = (m ? m.interval : 1) || 1;
        })(u, f), function(p, m, g) {
          if (p.querySelector("[name='repeat_interval_value']").value = (m ? m.interval : 1) || 1, p.querySelectorAll(".dhx_form_repeat_custom_week input").forEach((y2) => y2.checked = false), m && m.byweekday)
            m.byweekday.forEach((y2) => {
              const x = a2[y2.weekday], b = _[x];
              p.querySelector(`.dhx_form_repeat_custom_week input[value="${b}"]`).checked = true;
            });
          else {
            const y2 = _[g.start_date.getDay()];
            p.querySelector(`.dhx_form_repeat_custom_week input[value="${y2}"]`).checked = true;
          }
        }(u, f, c2), function(p, m, g) {
          p.querySelector("[name='repeat_interval_value']").value = (m ? m.interval : 1) || 1;
          const y2 = p.querySelector('.dhx_form_repeat_custom_month [value="month_date"]'), x = p.querySelector('.dhx_form_repeat_custom_month [value="month_nth_weekday"]');
          y2.innerText = e2.templates.repeat_monthly_date(g.start_date, g), x.innerText = e2.templates.repeat_monthly_weekday(g.start_date, g), m && (!m.bysetpos || m.byweekday && m.byweekday.length) ? p.querySelector('[name="dhx_custom_month_option"]').value = "month_nth_weekday" : p.querySelector('[name="dhx_custom_month_option"]').value = "month_date";
        }(u, f, c2), function(p, m, g) {
          const y2 = p.querySelector('.dhx_form_repeat_custom_year [value="month_date"]'), x = p.querySelector('.dhx_form_repeat_custom_year [value="month_nth_weekday"]');
          y2.innerText = e2.templates.repeat_yearly_month_date(g.start_date, g), x.innerText = e2.templates.repeat_yearly_month_weekday(g.start_date, g), m && (!m.bysetpos || m.byweekday && m.byweekday.length) ? p.querySelector('[name="dhx_custom_year_option"]').value = "month_nth_weekday" : p.querySelector('[name="dhx_custom_year_option"]').value = "month_date";
        }(u, f, c2), function(p, m, g) {
          const y2 = p.querySelector('.dhx_form_repeat_ends_extra [name="dhx_form_repeat_ends_after"]'), x = p.querySelector('.dhx_form_repeat_ends_extra [name="dhx_form_repeat_ends_ondate"]'), b = p.querySelector("[name='dhx_custom_repeat_ends']");
          y2.value = 1;
          let k = e2.date.date_to_str("%Y-%m-%d");
          e2.config.repeat_date_of_end || (e2.config.repeat_date_of_end = k(e2.date.add(e2._currentDate(), 30, "day"))), x.value = e2.config.repeat_date_of_end, m && m.count ? (b.value = "AFTER", y2.value = m.count) : g._end_date && g._end_date.getFullYear() !== 9999 ? (b.value = "ON", x.value = k(g._end_date)) : b.value = "NEVER", b.dispatchEvent(new Event("change"));
        }(u, f, c2);
      }
      function v(u) {
        for (let f = 0; f < e2.config.lightbox.sections.length; f++) {
          let c2 = e2.config.lightbox.sections[f];
          if (c2.type === u)
            return e2.formSection(c2.name);
        }
        return null;
      }
      e2.form_blocks.recurring = { render: function(u) {
        if (u.form) {
          let c2 = e2.form_blocks.recurring, p = c2._get_node(u.form), m = c2._outer_html(p);
          return p.style.display = "none", m;
        }
        let f = e2.locale.labels;
        return `<div class="dhx_form_rrule">
		<div class="dhx_form_repeat_pattern">
			<select>
				<option value="NEVER">${f.repeat_never}</option>
				<option value="DAILY">${f.repeat_daily}</option>
				<option value="WEEKLY">${f.repeat_weekly}</option>
				<option value="MONTHLY">${f.repeat_monthly}</option>
				<option value="YEARLY">${f.repeat_yearly}</option>
				<option value="WORKDAYS">${f.repeat_workdays}</option>
				<option value="CUSTOM">${f.repeat_custom}</option>
			</select>
		</div>
		<div class="dhx_form_repeat_custom dhx_hidden">
			<div class="dhx_form_repeat_custom_interval">
				<input name="repeat_interval_value" type="number" min="1">
				<select name="repeat_interval_unit">
					<option value="DAILY">${f.repeat_freq_day}</option>
					<option value="WEEKLY">${f.repeat_freq_week}</option>
					<option value="MONTHLY">${f.repeat_freq_month}</option>
					<option value="YEARLY">${f.repeat_freq_year}</option>
				</select>
			</div>

			<div class="dhx_form_repeat_custom_additional">
				<div class="dhx_form_repeat_custom_week dhx_hidden">
					<label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="MO" />${f.day_for_recurring[1]}</label>
					<label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="TU" />${f.day_for_recurring[2]}</label>
					<label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="WE" />${f.day_for_recurring[3]}</label>
					<label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="TH" />${f.day_for_recurring[4]}</label>
					<label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="FR" />${f.day_for_recurring[5]}</label>
					<label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="SA" />${f.day_for_recurring[6]}</label>
					<label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="SU" />${f.day_for_recurring[0]}</label>
				</div>

				<div class="dhx_form_repeat_custom_month dhx_hidden">
					<select name="dhx_custom_month_option">
						<option value="month_date"></option>
						<option value="month_nth_weekday"></option>
					</select>
				</div>

				<div class="dhx_form_repeat_custom_year dhx_hidden">
					<select name="dhx_custom_year_option">
						<option value="month_date"></option>
						<option value="month_nth_weekday"></option>
					</select>
				</div>
			</div>

			<div class="dhx_form_repeat_ends">
				<div>${f.repeat_ends}</div>
				<div class="dhx_form_repeat_ends_options">
					<select name="dhx_custom_repeat_ends">
						<option value="NEVER">${f.repeat_never}</option>
						<option value="AFTER">${f.repeat_radio_end2}</option>
						<option value="ON">${f.repeat_on_date}</option>
					</select>
					<div class="dhx_form_repeat_ends_extra">
						<div class="dhx_form_repeat_ends_after dhx_hidden">
							<label><input type="number" min="1" name="dhx_form_repeat_ends_after">${f.repeat_text_occurences_count}</label>
						</div>
						<div class="dhx_form_repeat_ends_on dhx_hidden">
							<input type="date" name="dhx_form_repeat_ends_ondate">
						</div>
					</div>
				</div>
			</div>

		</div>
	</div>`;
      }, _init_set_value: function(u, f, c2) {
        function p(g) {
          g.classList.add("dhx_hidden");
        }
        function m(g) {
          g.classList.remove("dhx_hidden");
        }
        e2.form_blocks.recurring._ds = { start: c2.start_date, end: c2.end_date }, u.querySelector(".dhx_form_repeat_pattern select").addEventListener("change", function() {
          (function(g) {
            const y2 = u.querySelector(".dhx_form_repeat_custom");
            g === "CUSTOM" ? m(y2) : p(y2);
          })(this.value);
        }), u.querySelector(".dhx_form_repeat_custom_interval [name='repeat_interval_unit']").addEventListener("change", function() {
          (function(g) {
            const y2 = { weekly: u.querySelector(".dhx_form_repeat_custom_week"), monthly: u.querySelector(".dhx_form_repeat_custom_month"), yearly: u.querySelector(".dhx_form_repeat_custom_year") };
            switch (g) {
              case "DAILY":
                p(y2.weekly), p(y2.monthly), p(y2.yearly);
                break;
              case "WEEKLY":
                m(y2.weekly), p(y2.monthly), p(y2.yearly);
                break;
              case "MONTHLY":
                p(y2.weekly), m(y2.monthly), p(y2.yearly);
                break;
              case "YEARLY":
                p(y2.weekly), p(y2.monthly), m(y2.yearly);
            }
          })(this.value);
        }), u.querySelector(".dhx_form_repeat_ends [name='dhx_custom_repeat_ends']").addEventListener("change", function() {
          (function(g) {
            const y2 = { after: u.querySelector(".dhx_form_repeat_ends_extra .dhx_form_repeat_ends_after"), on: u.querySelector(".dhx_form_repeat_ends_extra .dhx_form_repeat_ends_on") };
            switch (g) {
              case "NEVER":
                p(y2.after), p(y2.on);
                break;
              case "AFTER":
                m(y2.after), p(y2.on);
                break;
              case "ON":
                p(y2.after), m(y2.on);
            }
          })(this.value);
        }), e2._lightbox._rec_init_done = true;
      }, button_click: function() {
      }, set_value: function(u, f, c2) {
        let p = e2.form_blocks.recurring;
        e2._lightbox._rec_init_done || p._init_set_value(u, f, c2), u.open = !c2.rrule, u.blocked = this._is_modified_occurence(c2);
        let m = p._ds;
        if (m.start = c2.start_date, m.end = c2._end_date, c2.rrule) {
          const g = Se(c2.rrule);
          h(u, g.origOptions, c2);
          const y2 = function(x, b) {
            const k = x.options, E = k.until || b;
            return k.count || E && E.getFullYear() !== 9999 ? "CUSTOM" : k.freq !== C.DAILY || k.interval !== 1 || k.byweekday ? k.freq !== C.WEEKLY || k.interval !== 1 || k.byweekday ? k.freq !== C.MONTHLY || k.interval !== 1 || k.bysetpos ? k.freq !== C.YEARLY || k.interval !== 1 || k.bysetpos ? k.freq === C.DAILY && k.byweekday && k.byweekday.length === e2.config.recurring_workdays.length && k.byweekday.includes(C.MO) && k.byweekday.includes(C.TU) && k.byweekday.includes(C.WE) && k.byweekday.includes(C.TH) && k.byweekday.includes(C.FR) ? "WORKDAYS" : "CUSTOM" : "YEARLY" : "MONTHLY" : "WEEKLY" : "DAILY";
          }(g, c2._end_date);
          if (u.querySelector(".dhx_form_repeat_pattern select").value = y2, y2 === "CUSTOM") {
            let x;
            switch (g.origOptions.freq) {
              case C.DAILY:
                x = "DAILY";
                break;
              case C.WEEKLY:
                x = "WEEKLY";
                break;
              case C.MONTHLY:
                x = "MONTHLY";
                break;
              case C.YEARLY:
                x = "YEARLY";
            }
            x && (u.querySelector('[name="repeat_interval_unit"]').value = x, u.querySelector('[name="repeat_interval_unit"]').dispatchEvent(new Event("change")));
          }
        } else
          h(u, null, c2), u.querySelector(".dhx_form_repeat_pattern select").value = "NEVER";
        u.querySelector(".dhx_form_repeat_pattern select").dispatchEvent(new Event("change"));
      }, get_value: function(u, f) {
        if (u.blocked || u.querySelector(".dhx_form_repeat_pattern select").value === "NEVER")
          f.rrule = f.rrule = "", f._end_date = f.end_date;
        else {
          let c2 = e2.form_blocks.recurring._ds, p = {};
          (function() {
            let y2 = e2.formSection("time");
            if (y2 || (y2 = v("time")), y2 || (y2 = v("calendar_time")), !y2)
              throw new Error(["Can't calculate the recurring rule, the Recurring form block can't find the Time control. Make sure you have the time control in 'scheduler.config.lightbox.sections' config.", "You can use either the default time control https://docs.dhtmlx.com/scheduler/time.html, or the datepicker https://docs.dhtmlx.com/scheduler/minicalendar.html, or a custom control. ", 'In the latter case, make sure the control is named "time":', "", "scheduler.config.lightbox.sections = [", '{name:"time", height:72, type:"YOU CONTROL", map_to:"auto" }];'].join(`
`));
            return y2;
          })().getValue(p), c2.start = p.start_date;
          const m = u.querySelector(".dhx_form_repeat_pattern select").value, g = l[m](c2, u);
          f.rrule = new C(g.rrule).toString().replace("RRULE:", ""), c2.end = g.until, f.duration = Math.floor((p.end_date - p.start_date) / 1e3), c2._start ? (f.start_date = new Date(c2.start), f._start_date = new Date(c2.start), c2._start = false) : f._start_date = null, f._end_date = c2.end;
        }
        return f.rrule;
      }, focus: function(u) {
      } };
    }, recurring_legacy: function(e2) {
      function i() {
        var n = e2.formSection("recurring");
        if (n || (n = t2("recurring")), !n)
          throw new Error(["Can't locate the Recurring form section.", "Make sure that you have the recurring control on the lightbox configuration https://docs.dhtmlx.com/scheduler/recurring_events.html#recurringlightbox ", 'and that the recurring control has name "recurring":', "", "scheduler.config.lightbox.sections = [", '	{name:"recurring", ... }', "];"].join(`
`));
        return n;
      }
      function t2(n) {
        for (var s = 0; s < e2.config.lightbox.sections.length; s++) {
          var _ = e2.config.lightbox.sections[s];
          if (_.type === n)
            return e2.formSection(_.name);
        }
        return null;
      }
      function r2(n) {
        return new Date(n.getFullYear(), n.getMonth(), n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds(), 0);
      }
      var d;
      e2.config.occurrence_timestamp_in_utc = false, e2.config.recurring_workdays = [1, 2, 3, 4, 5], e2.form_blocks.recurring = { _get_node: function(n) {
        if (typeof n == "string") {
          let s = e2._lightbox.querySelector(`#${n}`);
          s || (s = document.getElementById(n)), n = s;
        }
        return n.style.display == "none" && (n.style.display = ""), n;
      }, _outer_html: function(n) {
        return n.outerHTML || (s = n, (a2 = document.createElement("div")).appendChild(s.cloneNode(true)), _ = a2.innerHTML, a2 = null, _);
        var s, _, a2;
      }, render: function(n) {
        if (n.form) {
          var s = e2.form_blocks.recurring, _ = s._get_node(n.form), a2 = s._outer_html(_);
          return _.style.display = "none", a2;
        }
        var o2 = e2.locale.labels;
        return '<div class="dhx_form_repeat"> <form> <div class="dhx_repeat_left"> <div><label><input class="dhx_repeat_radio" type="radio" name="repeat" value="day" />' + o2.repeat_radio_day + '</label></div> <div><label><input class="dhx_repeat_radio" type="radio" name="repeat" value="week"/>' + o2.repeat_radio_week + '</label></div> <div><label><input class="dhx_repeat_radio" type="radio" name="repeat" value="month" checked />' + o2.repeat_radio_month + '</label></div> <div><label><input class="dhx_repeat_radio" type="radio" name="repeat" value="year" />' + o2.repeat_radio_year + '</label></div> </div> <div class="dhx_repeat_divider"></div> <div class="dhx_repeat_center"> <div style="display:none;" id="dhx_repeat_day"> <div><label><input class="dhx_repeat_radio" type="radio" name="day_type" value="d"/>' + o2.repeat_radio_day_type + '</label><label><input class="dhx_repeat_text" type="text" name="day_count" value="1" />' + o2.repeat_text_day_count + '</label></div> <div><label><input class="dhx_repeat_radio" type="radio" name="day_type" checked value="w"/>' + o2.repeat_radio_day_type2 + '</label></div> </div> <div style="display:none;" id="dhx_repeat_week"><div><label>' + o2.repeat_week + '<input class="dhx_repeat_text" type="text" name="week_count" value="1" /></label><span>' + o2.repeat_text_week_count + '</span></div>  <table class="dhx_repeat_days"> <tr> <td><div><label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="1" />' + o2.day_for_recurring[1] + '</label></div> <div><label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="4" />' + o2.day_for_recurring[4] + '</label></div></td> <td><div><label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="2" />' + o2.day_for_recurring[2] + '</label></div> <div><label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="5" />' + o2.day_for_recurring[5] + '</label></div></td> <td><div><label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="3" />' + o2.day_for_recurring[3] + '</label></div> <div><label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="6" />' + o2.day_for_recurring[6] + '</label></div></td> <td><div><label><input class="dhx_repeat_checkbox" type="checkbox" name="week_day" value="0" />' + o2.day_for_recurring[0] + '</label></div> </td> </tr> </table> </div> <div id="dhx_repeat_month"> <div><label class = "dhx_repeat_month_label"><input class="dhx_repeat_radio" type="radio" name="month_type" value="d"/>' + o2.repeat_radio_month_type + '</label><label><input class="dhx_repeat_text" type="text" name="month_day" value="1" />' + o2.repeat_text_month_day + '</label><label><input class="dhx_repeat_text" type="text" name="month_count" value="1" />' + o2.repeat_text_month_count + '</label></div> <div><label class = "dhx_repeat_month_label"><input class="dhx_repeat_radio" type="radio" name="month_type" checked value="w"/>' + o2.repeat_radio_month_start + '</label><input class="dhx_repeat_text" type="text" name="month_week2" value="1" /><label><select name="month_day2">	<option value="1" selected >' + e2.locale.date.day_full[1] + '<option value="2">' + e2.locale.date.day_full[2] + '<option value="3">' + e2.locale.date.day_full[3] + '<option value="4">' + e2.locale.date.day_full[4] + '<option value="5">' + e2.locale.date.day_full[5] + '<option value="6">' + e2.locale.date.day_full[6] + '<option value="0">' + e2.locale.date.day_full[0] + "</select>" + o2.repeat_text_month_count2_before + '</label><label><input class="dhx_repeat_text" type="text" name="month_count2" value="1" />' + o2.repeat_text_month_count2_after + '</label></div> </div> <div style="display:none;" id="dhx_repeat_year"> <div><label class = "dhx_repeat_year_label"><input class="dhx_repeat_radio" type="radio" name="year_type" value="d"/>' + o2.repeat_radio_day_type + '</label><label><input class="dhx_repeat_text" type="text" name="year_day" value="1" />' + o2.repeat_text_year_day + '</label><label><select name="year_month"><option value="0" selected >' + o2.month_for_recurring[0] + '<option value="1">' + o2.month_for_recurring[1] + '<option value="2">' + o2.month_for_recurring[2] + '<option value="3">' + o2.month_for_recurring[3] + '<option value="4">' + o2.month_for_recurring[4] + '<option value="5">' + o2.month_for_recurring[5] + '<option value="6">' + o2.month_for_recurring[6] + '<option value="7">' + o2.month_for_recurring[7] + '<option value="8">' + o2.month_for_recurring[8] + '<option value="9">' + o2.month_for_recurring[9] + '<option value="10">' + o2.month_for_recurring[10] + '<option value="11">' + o2.month_for_recurring[11] + "</select>" + o2.select_year_month + '</label></div> <div><label class = "dhx_repeat_year_label"><input class="dhx_repeat_radio" type="radio" name="year_type" checked value="w"/>' + o2.repeat_year_label + '</label><input class="dhx_repeat_text" type="text" name="year_week2" value="1" /><select name="year_day2"><option value="1" selected >' + e2.locale.date.day_full[1] + '<option value="2">' + e2.locale.date.day_full[2] + '<option value="3">' + e2.locale.date.day_full[3] + '<option value="4">' + e2.locale.date.day_full[4] + '<option value="5">' + e2.locale.date.day_full[5] + '<option value="6">' + e2.locale.date.day_full[6] + '<option value="7">' + e2.locale.date.day_full[0] + "</select>" + o2.select_year_day2 + '<select name="year_month2"><option value="0" selected >' + o2.month_for_recurring[0] + '<option value="1">' + o2.month_for_recurring[1] + '<option value="2">' + o2.month_for_recurring[2] + '<option value="3">' + o2.month_for_recurring[3] + '<option value="4">' + o2.month_for_recurring[4] + '<option value="5">' + o2.month_for_recurring[5] + '<option value="6">' + o2.month_for_recurring[6] + '<option value="7">' + o2.month_for_recurring[7] + '<option value="8">' + o2.month_for_recurring[8] + '<option value="9">' + o2.month_for_recurring[9] + '<option value="10">' + o2.month_for_recurring[10] + '<option value="11">' + o2.month_for_recurring[11] + '</select></div> </div> </div> <div class="dhx_repeat_divider"></div> <div class="dhx_repeat_right"> <div><label><input class="dhx_repeat_radio" type="radio" name="end" checked/>' + o2.repeat_radio_end + '</label></div> <div><label><input class="dhx_repeat_radio" type="radio" name="end" />' + o2.repeat_radio_end2 + '</label><input class="dhx_repeat_text" type="text" name="occurences_count" value="1" />' + o2.repeat_text_occurences_count + '</div> <div><label><input class="dhx_repeat_radio" type="radio" name="end" />' + o2.repeat_radio_end3 + '</label><input class="dhx_repeat_date" type="text" name="date_of_end" value="' + e2.config.repeat_date_of_end + '" /></div> </div> </form> </div> </div>';
      }, _ds: {}, _get_form_node: function(n, s, _) {
        var a2 = n[s];
        if (!a2)
          return null;
        if (a2.nodeName)
          return a2;
        if (a2.length) {
          for (var o2 = 0; o2 < a2.length; o2++)
            if (a2[o2].value == _)
              return a2[o2];
        }
      }, _get_node_value: function(n, s, _) {
        var a2 = n[s];
        if (!a2)
          return "";
        if (a2.length) {
          if (_) {
            for (var o2 = [], l = 0; l < a2.length; l++)
              a2[l].checked && o2.push(a2[l].value);
            return o2;
          }
          for (l = 0; l < a2.length; l++)
            if (a2[l].checked)
              return a2[l].value;
        }
        return a2.value ? _ ? [a2.value] : a2.value : void 0;
      }, _get_node_numeric_value: function(n, s) {
        return 1 * e2.form_blocks.recurring._get_node_value(n, s) || 0;
      }, _set_node_value: function(n, s, _) {
        var a2 = n[s];
        if (a2) {
          if (a2.name == s)
            a2.value = _;
          else if (a2.length)
            for (var o2 = typeof _ == "object", l = 0; l < a2.length; l++)
              (o2 || a2[l].value == _) && (a2[l].checked = o2 ? !!_[a2[l].value] : !!_);
        }
      }, _init_set_value: function(n, s, _) {
        var a2 = e2.form_blocks.recurring, o2 = a2._get_node_value, l = a2._set_node_value;
        e2.form_blocks.recurring._ds = { start: _.start_date, end: _._end_date };
        var h = e2.date.str_to_date(e2.config.repeat_date, false, true), v = e2.date.date_to_str(e2.config.repeat_date), u = n.getElementsByTagName("FORM")[0], f = {};
        function c2(D) {
          for (var w = 0; w < D.length; w++) {
            var S = D[w];
            if (S.name)
              if (f[S.name])
                if (f[S.name].nodeType) {
                  var N = f[S.name];
                  f[S.name] = [N, S];
                } else
                  f[S.name].push(S);
              else
                f[S.name] = S;
          }
        }
        if (c2(u.getElementsByTagName("INPUT")), c2(u.getElementsByTagName("SELECT")), !e2.config.repeat_date_of_end) {
          var p = e2.date.date_to_str(e2.config.repeat_date);
          e2.config.repeat_date_of_end = p(e2.date.add(e2._currentDate(), 30, "day"));
        }
        l(f, "date_of_end", e2.config.repeat_date_of_end);
        var m = function(D) {
          return e2._lightbox.querySelector(`#${D}`) || { style: {} };
        };
        function g() {
          m("dhx_repeat_day").style.display = "none", m("dhx_repeat_week").style.display = "none", m("dhx_repeat_month").style.display = "none", m("dhx_repeat_year").style.display = "none", m("dhx_repeat_" + this.value).style.display = "", e2.setLightboxSize();
        }
        function y2(D, w) {
          var S = D.end;
          if (S.length)
            if (S[0].value && S[0].value != "on")
              for (var N = 0; N < S.length; N++)
                S[N].value == w && (S[N].checked = true);
            else {
              var M = 0;
              switch (w) {
                case "no":
                  M = 0;
                  break;
                case "date_of_end":
                  M = 2;
                  break;
                default:
                  M = 1;
              }
              S[M].checked = true;
            }
          else
            S.value = w;
        }
        e2.form_blocks.recurring._get_repeat_code = function(D) {
          var w = [o2(f, "repeat")];
          for (x[w[0]](w, D); w.length < 5; )
            w.push("");
          var S = "", N = function(M) {
            var T = M.end;
            if (T.length) {
              for (var A = 0; A < T.length; A++)
                if (T[A].checked)
                  return T[A].value && T[A].value != "on" ? T[A].value : A ? A == 2 ? "date_of_end" : "occurences_count" : "no";
            } else if (T.value)
              return T.value;
            return "no";
          }(f);
          return N == "no" ? (D.end = new Date(9999, 1, 1), S = "no") : N == "date_of_end" ? D.end = function(M) {
            var T = h(M);
            return e2.config.include_end_by && (T = e2.date.add(T, 1, "day")), T;
          }(o2(f, "date_of_end")) : (e2.transpose_type(w.join("_")), S = Math.max(1, o2(f, "occurences_count")), D.end = e2.date["add_" + w.join("_")](new Date(D.start), S + 0, { start_date: D.start }) || D.start), w.join("_") + "#" + S;
        };
        var x = { month: function(D, w) {
          var S = e2.form_blocks.recurring._get_node_value, N = e2.form_blocks.recurring._get_node_numeric_value;
          S(f, "month_type") == "d" ? (D.push(Math.max(1, N(f, "month_count"))), w.start.setDate(S(f, "month_day"))) : (D.push(Math.max(1, N(f, "month_count2"))), D.push(S(f, "month_day2")), D.push(Math.max(1, N(f, "month_week2"))), e2.config.repeat_precise || w.start.setDate(1)), w._start = true;
        }, week: function(D, w) {
          var S = e2.form_blocks.recurring._get_node_value, N = e2.form_blocks.recurring._get_node_numeric_value;
          D.push(Math.max(1, N(f, "week_count"))), D.push(""), D.push("");
          for (var M = [], T = S(f, "week_day", true), A = w.start.getDay(), H = false, $ = 0; $ < T.length; $++)
            M.push(T[$]), H = H || T[$] == A;
          M.length || (M.push(A), H = true), M.sort(), e2.config.repeat_precise ? H || (e2.transpose_day_week(w.start, M, 1, 7), w._start = true) : (w.start = e2.date.week_start(w.start), w._start = true), D.push(M.join(","));
        }, day: function(D) {
          var w = e2.form_blocks.recurring._get_node_value, S = e2.form_blocks.recurring._get_node_numeric_value;
          w(f, "day_type") == "d" ? D.push(Math.max(1, S(f, "day_count"))) : (D.push("week"), D.push(1), D.push(""), D.push(""), D.push(e2.config.recurring_workdays.join(",")), D.splice(0, 1));
        }, year: function(D, w) {
          var S = e2.form_blocks.recurring._get_node_value;
          S(f, "year_type") == "d" ? (D.push("1"), w.start.setMonth(0), w.start.setDate(S(f, "year_day")), w.start.setMonth(S(f, "year_month"))) : (D.push("1"), D.push(S(f, "year_day2")), D.push(S(f, "year_week2")), w.start.setDate(1), w.start.setMonth(S(f, "year_month2"))), w._start = true;
        } }, b = { week: function(D, w) {
          var S = e2.form_blocks.recurring._set_node_value;
          S(f, "week_count", D[1]);
          for (var N = D[4].split(","), M = {}, T = 0; T < N.length; T++)
            M[N[T]] = true;
          S(f, "week_day", M);
        }, month: function(D, w) {
          var S = e2.form_blocks.recurring._set_node_value;
          D[2] === "" ? (S(f, "month_type", "d"), S(f, "month_count", D[1]), S(f, "month_day", w.start.getDate())) : (S(f, "month_type", "w"), S(f, "month_count2", D[1]), S(f, "month_week2", D[3]), S(f, "month_day2", D[2]));
        }, day: function(D, w) {
          var S = e2.form_blocks.recurring._set_node_value;
          S(f, "day_type", "d"), S(f, "day_count", D[1]);
        }, year: function(D, w) {
          var S = e2.form_blocks.recurring._set_node_value;
          D[2] === "" ? (S(f, "year_type", "d"), S(f, "year_day", w.start.getDate()), S(f, "year_month", w.start.getMonth())) : (S(f, "year_type", "w"), S(f, "year_week2", D[3]), S(f, "year_day2", D[2]), S(f, "year_month2", w.start.getMonth()));
        } };
        e2.form_blocks.recurring._set_repeat_code = function(D, w) {
          var S = e2.form_blocks.recurring._set_node_value, N = D.split("#");
          switch (D = N[0].split("_"), b[D[0]](D, w), N[1]) {
            case "no":
              y2(f, "no");
              break;
            case "":
              y2(f, "date_of_end");
              var M = w.end;
              e2.config.include_end_by && (M = e2.date.add(M, -1, "day")), S(f, "date_of_end", v(M));
              break;
            default:
              y2(f, "occurences_count"), S(f, "occurences_count", N[1]);
          }
          S(f, "repeat", D[0]);
          var T = e2.form_blocks.recurring._get_form_node(f, "repeat", D[0]);
          T.nodeName == "SELECT" ? (T.dispatchEvent(new Event("change")), T.dispatchEvent(new MouseEvent("click"))) : T.dispatchEvent(new MouseEvent("click"));
        };
        for (var k = 0; k < u.elements.length; k++) {
          var E = u.elements[k];
          E.name === "repeat" && (E.nodeName != "SELECT" || E.$_eventAttached ? E.$_eventAttached || (E.$_eventAttached = true, E.addEventListener("click", g)) : (E.$_eventAttached = true, E.addEventListener("change", g)));
        }
        e2._lightbox._rec_init_done = true;
      }, set_value: function(n, s, _) {
        var a2 = e2.form_blocks.recurring;
        e2._lightbox._rec_init_done || a2._init_set_value(n, s, _), n.open = !_.rec_type, n.blocked = this._is_modified_occurence(_);
        var o2 = a2._ds;
        o2.start = _.start_date, o2.end = _._end_date, a2._toggle_block(), s && a2._set_repeat_code(s, o2);
      }, get_value: function(n, s) {
        if (n.open) {
          var _ = e2.form_blocks.recurring._ds, a2 = {};
          (function() {
            var o2 = e2.formSection("time");
            if (o2 || (o2 = t2("time")), o2 || (o2 = t2("calendar_time")), !o2)
              throw new Error(["Can't calculate the recurring rule, the Recurring form block can't find the Time control. Make sure you have the time control in 'scheduler.config.lightbox.sections' config.", "You can use either the default time control https://docs.dhtmlx.com/scheduler/time.html, or the datepicker https://docs.dhtmlx.com/scheduler/minicalendar.html, or a custom control. ", 'In the latter case, make sure the control is named "time":', "", "scheduler.config.lightbox.sections = [", '{name:"time", height:72, type:"YOU CONTROL", map_to:"auto" }];'].join(`
`));
            return o2;
          })().getValue(a2), _.start = a2.start_date, s.rec_type = e2.form_blocks.recurring._get_repeat_code(_), _._start ? (s.start_date = new Date(_.start), s._start_date = new Date(_.start), _._start = false) : s._start_date = null, s._end_date = _.end, s.rec_pattern = s.rec_type.split("#")[0];
        } else
          s.rec_type = s.rec_pattern = "", s._end_date = s.end_date;
        return s.rec_type;
      }, _get_button: function() {
        return i().header.firstChild.firstChild;
      }, _get_form: function() {
        return i().node;
      }, open: function() {
        var n = e2.form_blocks.recurring;
        n._get_form().open || n._toggle_block();
      }, close: function() {
        var n = e2.form_blocks.recurring;
        n._get_form().open && n._toggle_block();
      }, _toggle_block: function() {
        var n = e2.form_blocks.recurring, s = n._get_form(), _ = n._get_button();
        s.open || s.blocked ? (s.style.height = "0px", _ && (_.style.backgroundPosition = "-5px 20px", _.nextSibling.innerHTML = e2.locale.labels.button_recurring)) : (s.style.height = "auto", _ && (_.style.backgroundPosition = "-5px 0px", _.nextSibling.innerHTML = e2.locale.labels.button_recurring_open)), s.open = !s.open, e2.setLightboxSize();
      }, focus: function(n) {
      }, button_click: function(n, s, _) {
        e2.form_blocks.recurring._get_form().blocked || e2.form_blocks.recurring._toggle_block();
      } }, e2._rec_markers = {}, e2._rec_markers_pull = {}, e2._add_rec_marker = function(n, s) {
        n._pid_time = s, this._rec_markers[n.id] = n, this._rec_markers_pull[n.event_pid] || (this._rec_markers_pull[n.event_pid] = {}), this._rec_markers_pull[n.event_pid][s] = n;
      }, e2._get_rec_marker = function(n, s) {
        var _ = this._rec_markers_pull[s];
        return _ ? _[n] : null;
      }, e2._get_rec_markers = function(n) {
        return this._rec_markers_pull[n] || [];
      }, e2._rec_temp = [], d = e2.addEvent, e2.addEvent = function(n, s, _, a2, o2) {
        var l = d.apply(this, arguments);
        if (l && e2.getEvent(l)) {
          var h = e2.getEvent(l);
          h.start_date && (h.start_date = r2(h.start_date)), h.end_date && (h.end_date = r2(h.end_date)), this._is_modified_occurence(h) && e2._add_rec_marker(h, 1e3 * h.event_length), h.rec_type && (h.rec_pattern = h.rec_type.split("#")[0]);
        }
        return l;
      }, e2.attachEvent("onEventIdChange", function(n, s) {
        if (!this._ignore_call) {
          this._ignore_call = true, e2._rec_markers[n] && (e2._rec_markers[s] = e2._rec_markers[n], delete e2._rec_markers[n]), e2._rec_markers_pull[n] && (e2._rec_markers_pull[s] = e2._rec_markers_pull[n], delete e2._rec_markers_pull[n]);
          for (var _ = 0; _ < this._rec_temp.length; _++)
            (a2 = this._rec_temp[_]).event_pid == n && (a2.event_pid = s, this.changeEventId(a2.id, s + "#" + a2.id.split("#")[1]));
          for (var _ in this._rec_markers) {
            var a2;
            (a2 = this._rec_markers[_]).event_pid == n && (a2.event_pid = s, a2._pid_changed = true);
          }
          var o2 = e2._rec_markers[s];
          o2 && o2._pid_changed && (delete o2._pid_changed, setTimeout(function() {
            if (e2.$destroyed)
              return true;
            e2.callEvent("onEventChanged", [s, e2.getEvent(s)]);
          }, 1)), delete this._ignore_call;
        }
      }), e2.attachEvent("onConfirmedBeforeEventDelete", function(n) {
        var s = this.getEvent(n);
        if (this._is_virtual_event(n) || this._is_modified_occurence(s) && s.rec_type && s.rec_type != "none") {
          n = n.split("#");
          var _ = this.uid(), a2 = n[1] ? n[1] : Math.round(s._pid_time / 1e3), o2 = this._copy_event(s);
          o2.id = _, o2.event_pid = s.event_pid || n[0];
          var l = a2;
          o2.event_length = l, o2.rec_type = o2.rec_pattern = "none", this.addEvent(o2), this._add_rec_marker(o2, 1e3 * l);
        } else {
          s.rec_type && this._lightbox_id && this._roll_back_dates(s);
          var h = this._get_rec_markers(n);
          for (var v in h)
            h.hasOwnProperty(v) && (n = h[v].id, this.getEvent(n) && this.deleteEvent(n, true));
        }
        return true;
      }), e2.attachEvent("onEventDeleted", function(n, s) {
        !this._is_virtual_event(n) && this._is_modified_occurence(s) && (e2._events[n] || (s.rec_type = s.rec_pattern = "none", this.setEvent(n, s)));
      }), e2.attachEvent("onEventChanged", function(n, s) {
        if (this._loading)
          return true;
        var _ = this.getEvent(n);
        if (this._is_virtual_event(n)) {
          n = n.split("#");
          var a2 = this.uid();
          this._not_render = true;
          var o2 = this._copy_event(s);
          o2.id = a2, o2.event_pid = n[0];
          var l = n[1];
          o2.event_length = l, o2.rec_type = o2.rec_pattern = "", this._add_rec_marker(o2, 1e3 * l), this.addEvent(o2), this._not_render = false;
        } else {
          _.start_date && (_.start_date = r2(_.start_date)), _.end_date && (_.end_date = r2(_.end_date)), _.rec_type && this._lightbox_id && this._roll_back_dates(_);
          var h = this._get_rec_markers(n);
          for (var v in h)
            h.hasOwnProperty(v) && (delete this._rec_markers[h[v].id], this.deleteEvent(h[v].id, true));
          delete this._rec_markers_pull[n];
          for (var u = false, f = 0; f < this._rendered.length; f++)
            this._rendered[f].getAttribute(this.config.event_attribute) == n && (u = true);
          u || (this._select_id = null);
        }
        return true;
      }), e2.attachEvent("onEventAdded", function(n) {
        if (!this._loading) {
          var s = this.getEvent(n);
          s.rec_type && !s.event_length && this._roll_back_dates(s);
        }
        return true;
      }), e2.attachEvent("onEventSave", function(n, s, _) {
        return this.getEvent(n).rec_type || !s.rec_type || this._is_virtual_event(n) || (this._select_id = null), true;
      }), e2.attachEvent("onEventCreated", function(n) {
        var s = this.getEvent(n);
        return s.rec_type || (s.rec_type = s.rec_pattern = s.event_length = s.event_pid = ""), true;
      }), e2.attachEvent("onEventCancel", function(n) {
        var s = this.getEvent(n);
        s.rec_type && (this._roll_back_dates(s), this.render_view_data());
      }), e2._roll_back_dates = function(n) {
        n.start_date && (n.start_date = r2(n.start_date)), n.end_date && (n.end_date = r2(n.end_date)), n.event_length = Math.round((n.end_date.valueOf() - n.start_date.valueOf()) / 1e3), n.end_date = n._end_date, n._start_date && (n.start_date.setMonth(0), n.start_date.setDate(n._start_date.getDate()), n.start_date.setMonth(n._start_date.getMonth()), n.start_date.setFullYear(n._start_date.getFullYear()));
      }, e2._is_virtual_event = function(n) {
        return n.toString().indexOf("#") != -1;
      }, e2._is_modified_occurence = function(n) {
        return n.event_pid && n.event_pid != "0";
      }, e2.showLightbox_rec = e2.showLightbox, e2.showLightbox = function(n) {
        var s = this.locale, _ = e2.config.lightbox_recurring, a2 = this.getEvent(n), o2 = a2.event_pid, l = this._is_virtual_event(n);
        l && (o2 = n.split("#")[0]);
        var h = function(u) {
          var f = e2.getEvent(u);
          return f._end_date = f.end_date, f.end_date = new Date(f.start_date.valueOf() + 1e3 * f.event_length), e2.showLightbox_rec(u);
        };
        if ((o2 || 1 * o2 == 0) && a2.rec_type)
          return h(n);
        if (!o2 || o2 === "0" || !s.labels.confirm_recurring || _ == "instance" || _ == "series" && !l)
          return this.showLightbox_rec(n);
        if (_ == "ask") {
          var v = this;
          e2.modalbox({ text: s.labels.confirm_recurring, title: s.labels.title_confirm_recurring, width: "500px", position: "middle", buttons: [s.labels.button_edit_series, s.labels.button_edit_occurrence, s.labels.icon_cancel], callback: function(u) {
            switch (+u) {
              case 0:
                return h(o2);
              case 1:
                return v.showLightbox_rec(n);
              case 2:
                return;
            }
          } });
        } else
          h(o2);
      }, e2.get_visible_events_rec = e2.get_visible_events, e2.get_visible_events = function(n) {
        for (var s = 0; s < this._rec_temp.length; s++)
          delete this._events[this._rec_temp[s].id];
        this._rec_temp = [];
        var _ = this.get_visible_events_rec(n), a2 = [];
        for (s = 0; s < _.length; s++)
          _[s].rec_type ? _[s].rec_pattern != "none" && this.repeat_date(_[s], a2) : a2.push(_[s]);
        return a2;
      }, function() {
        var n = e2.isOneDayEvent;
        e2.isOneDayEvent = function(_) {
          return !!_.rec_type || n.call(this, _);
        };
        var s = e2.updateEvent;
        e2.updateEvent = function(_) {
          var a2 = e2.getEvent(_);
          a2 && a2.rec_type && (a2.rec_pattern = (a2.rec_type || "").split("#")[0]), a2 && a2.rec_type && !this._is_virtual_event(_) ? e2.update_view() : s.call(this, _);
        };
      }(), e2.transponse_size = { day: 1, week: 7, month: 1, year: 12 }, e2.date.day_week = function(n, s, _) {
        n.setDate(1);
        var a2 = e2.date.month_start(new Date(n)), o2 = 1 * s + (_ = 7 * (_ - 1)) - n.getDay() + 1;
        n.setDate(o2 <= _ ? o2 + 7 : o2);
        var l = e2.date.month_start(new Date(n));
        return a2.valueOf() === l.valueOf();
      }, e2.transpose_day_week = function(n, s, _, a2, o2) {
        for (var l = (n.getDay() || (e2.config.start_on_monday ? 7 : 0)) - _, h = 0; h < s.length; h++)
          if (s[h] > l)
            return n.setDate(n.getDate() + 1 * s[h] - l - (a2 ? _ : o2));
        this.transpose_day_week(n, s, _ + a2, null, _);
      }, e2.transpose_type = function(n) {
        var s = "transpose_" + n;
        if (!this.date[s]) {
          var _ = n.split("_"), a2 = "add_" + n, o2 = this.transponse_size[_[0]] * _[1];
          if (_[0] == "day" || _[0] == "week") {
            var l = null;
            if (_[4] && (l = _[4].split(","), e2.config.start_on_monday)) {
              for (var h = 0; h < l.length; h++)
                l[h] = 1 * l[h] || 7;
              l.sort();
            }
            this.date[s] = function(v, u) {
              var f = Math.floor((u.valueOf() - v.valueOf()) / (864e5 * o2));
              return f > 0 && v.setDate(v.getDate() + f * o2), l && e2.transpose_day_week(v, l, 1, o2), v;
            }, this.date[a2] = function(v, u) {
              var f = new Date(v.valueOf());
              if (l)
                for (var c2 = 0; c2 < u; c2++)
                  e2.transpose_day_week(f, l, 0, o2);
              else
                f.setDate(f.getDate() + u * o2);
              return f;
            };
          } else
            _[0] != "month" && _[0] != "year" || (this.date[s] = function(v, u, f) {
              var c2 = Math.ceil((12 * u.getFullYear() + 1 * u.getMonth() + 1 - (12 * v.getFullYear() + 1 * v.getMonth() + 1)) / o2 - 1);
              return c2 >= 0 && (v.setDate(1), v.setMonth(v.getMonth() + c2 * o2)), e2.date[a2](v, 0, f);
            }, this.date[a2] = function(v, u, f, c2) {
              if (c2 ? c2++ : c2 = 1, c2 > 12)
                return null;
              var p = new Date(v.valueOf());
              p.setDate(1), p.setMonth(p.getMonth() + u * o2);
              var m = p.getMonth(), g = p.getFullYear();
              p.setDate(f.start_date.getDate()), _[3] && e2.date.day_week(p, _[2], _[3]);
              var y2 = e2.config.recurring_overflow_instances;
              return p.getMonth() != m && y2 != "none" && (p = y2 === "lastDay" ? new Date(g, m + 1, 0, p.getHours(), p.getMinutes(), p.getSeconds(), p.getMilliseconds()) : e2.date[a2](new Date(g, m + 1, 0), u || 1, f, c2)), p;
            });
        }
      }, e2.repeat_date = function(n, s, _, a2, o2, l) {
        a2 = a2 || this._min_date, o2 = o2 || this._max_date;
        var h = l || -1, v = new Date(n.start_date.valueOf()), u = v.getHours(), f = 0;
        for (!n.rec_pattern && n.rec_type && (n.rec_pattern = n.rec_type.split("#")[0]), this.transpose_type(n.rec_pattern), v = e2.date["transpose_" + n.rec_pattern](v, a2, n); v && (v < n.start_date || e2._fix_daylight_saving_date(v, a2, n, v, new Date(v.valueOf() + 1e3 * n.event_length)).valueOf() <= a2.valueOf() || v.valueOf() + 1e3 * n.event_length <= a2.valueOf()); )
          v = this.date["add_" + n.rec_pattern](v, 1, n);
        for (; v && v < o2 && v < n.end_date && (h < 0 || f < h); ) {
          v.setHours(u);
          var c2 = e2.config.occurrence_timestamp_in_utc ? Date.UTC(v.getFullYear(), v.getMonth(), v.getDate(), v.getHours(), v.getMinutes(), v.getSeconds()) : v.valueOf(), p = this._get_rec_marker(c2, n.id);
          if (p)
            _ && (p.rec_type != "none" && f++, s.push(p));
          else {
            var m = new Date(v.valueOf() + 1e3 * n.event_length), g = this._copy_event(n);
            if (g.text = n.text, g.start_date = v, g.event_pid = n.id, g.id = n.id + "#" + Math.round(c2 / 1e3), g.end_date = m, g.end_date = e2._fix_daylight_saving_date(g.start_date, g.end_date, n, v, g.end_date), g._timed = this.isOneDayEvent(g), !g._timed && !this._table_view && !this.config.multi_day)
              return;
            s.push(g), _ || (this._events[g.id] = g, this._rec_temp.push(g)), f++;
          }
          v = this.date["add_" + n.rec_pattern](v, 1, n);
        }
      }, e2._fix_daylight_saving_date = function(n, s, _, a2, o2) {
        var l = n.getTimezoneOffset() - s.getTimezoneOffset();
        return l ? l > 0 ? new Date(a2.valueOf() + 1e3 * _.event_length - 60 * l * 1e3) : new Date(s.valueOf() - 60 * l * 1e3) : new Date(o2.valueOf());
      }, e2.getRecDates = function(n, s) {
        var _ = typeof n == "object" ? n : e2.getEvent(n), a2 = [];
        if (s = s || 100, !_.rec_type)
          return [{ start_date: _.start_date, end_date: _.end_date }];
        if (_.rec_type == "none")
          return [];
        e2.repeat_date(_, a2, true, _.start_date, _.end_date, s);
        for (var o2 = [], l = 0; l < a2.length; l++)
          a2[l].rec_type != "none" && o2.push({ start_date: a2[l].start_date, end_date: a2[l].end_date });
        return o2;
      }, e2.getEvents = function(n, s) {
        var _ = [];
        for (var a2 in this._events) {
          var o2 = this._events[a2];
          if (o2 && o2.start_date < s && o2.end_date > n)
            if (o2.rec_pattern) {
              if (o2.rec_pattern == "none")
                continue;
              var l = [];
              this.repeat_date(o2, l, true, n, s);
              for (var h = 0; h < l.length; h++)
                !l[h].rec_pattern && l[h].start_date < s && l[h].end_date > n && !this._rec_markers[l[h].id] && _.push(l[h]);
            } else
              this._is_virtual_event(o2.id) || _.push(o2);
        }
        return _;
      }, e2.config.repeat_date = "%m.%d.%Y", e2.config.lightbox.sections = [{ name: "description", map_to: "text", type: "textarea", focus: true }, { name: "recurring", type: "recurring", map_to: "rec_type", button: "recurring" }, { name: "time", height: 72, type: "time", map_to: "auto" }], e2._copy_dummy = function(n) {
        var s = new Date(this.start_date), _ = new Date(this.end_date);
        this.start_date = s, this.end_date = _, this.event_length = this.event_pid = this.rec_pattern = this.rec_type = null;
      }, e2.config.include_end_by = false, e2.config.lightbox_recurring = "ask", e2.attachEvent("onClearAll", function() {
        e2._rec_markers = {}, e2._rec_markers_pull = {}, e2._rec_temp = [];
      });
    }, serialize: function(e2) {
      const i = mt(e2);
      e2.data_attributes = function() {
        var t2 = [], r2 = e2._helpers.formatDate, d = i();
        for (var n in d) {
          var s = d[n];
          for (var _ in s)
            _.substr(0, 1) != "_" && t2.push([_, _ == "start_date" || _ == "end_date" ? r2 : null]);
          break;
        }
        return t2;
      }, e2.toXML = function(t2) {
        var r2 = [], d = this.data_attributes(), n = i();
        for (var s in n) {
          var _ = n[s];
          r2.push("<event>");
          for (var a2 = 0; a2 < d.length; a2++)
            r2.push("<" + d[a2][0] + "><![CDATA[" + (d[a2][1] ? d[a2][1](_[d[a2][0]]) : _[d[a2][0]]) + "]]></" + d[a2][0] + ">");
          r2.push("</event>");
        }
        return (t2 || "") + "<data>" + r2.join(`
`) + "</data>";
      }, e2._serialize_json_value = function(t2) {
        return t2 === null || typeof t2 == "boolean" ? t2 = "" + t2 : (t2 || t2 === 0 || (t2 = ""), t2 = '"' + t2.toString().replace(/\n/g, "").replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"'), t2;
      }, e2.toJSON = function() {
        return JSON.stringify(this.serialize());
      }, e2.toICal = function(t2) {
        var r2 = e2.date.date_to_str("%Y%m%dT%H%i%s"), d = e2.date.date_to_str("%Y%m%d"), n = [], s = i();
        for (var _ in s) {
          var a2 = s[_];
          n.push("BEGIN:VEVENT"), a2._timed && (a2.start_date.getHours() || a2.start_date.getMinutes()) ? n.push("DTSTART:" + r2(a2.start_date)) : n.push("DTSTART:" + d(a2.start_date)), a2._timed && (a2.end_date.getHours() || a2.end_date.getMinutes()) ? n.push("DTEND:" + r2(a2.end_date)) : n.push("DTEND:" + d(a2.end_date)), n.push("SUMMARY:" + a2.text), n.push("END:VEVENT");
        }
        return `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//dhtmlXScheduler//NONSGML v2.2//EN
DESCRIPTION:` + (t2 || "") + `
` + n.join(`
`) + `
END:VCALENDAR`;
      };
    }, timeline: function(e2) {
      de("Timeline", e2.assert);
    }, tooltip: function(e2) {
      e2.config.tooltip_timeout = 30, e2.config.tooltip_offset_y = 20, e2.config.tooltip_offset_x = 10, e2.config.tooltip_hide_timeout = 30;
      const i = new vn(e2);
      e2.ext.tooltips = i, e2.attachEvent("onSchedulerReady", function() {
        i.tooltipFor({ selector: "[" + e2.config.event_attribute + "]", html: (t2) => {
          if (e2._mobile && !e2.config.touch_tooltip)
            return;
          const r2 = e2._locate_event(t2.target);
          if (e2.getEvent(r2)) {
            const d = e2.getEvent(r2);
            return e2.templates.tooltip_text(d.start_date, d.end_date, d);
          }
          return null;
        }, global: false });
      }), e2.attachEvent("onDestroy", function() {
        i.destructor();
      }), e2.attachEvent("onLightbox", function() {
        i.hideTooltip();
      }), e2.attachEvent("onBeforeDrag", function() {
        return e2._mobile && e2.config.touch_tooltip || i.hideTooltip(), true;
      }), e2.attachEvent("onEventDeleted", function() {
        return i.hideTooltip(), true;
      });
    }, treetimeline: function(e2) {
      de("Tree Timeline", e2.assert);
    }, units: function(e2) {
      de("Units", e2.assert);
    }, url: function(e2) {
      e2._get_url_nav = function() {
        for (var i = {}, t2 = (document.location.hash || "").replace("#", "").split(","), r2 = 0; r2 < t2.length; r2++) {
          var d = t2[r2].split("=");
          d.length == 2 && (i[d[0]] = d[1]);
        }
        return i;
      }, e2.attachEvent("onTemplatesReady", function() {
        var i = true, t2 = e2.date.str_to_date("%Y-%m-%d"), r2 = e2.date.date_to_str("%Y-%m-%d"), d = e2._get_url_nav().event || null;
        function n(s) {
          if (e2.$destroyed)
            return true;
          d = s, e2.getEvent(s) && e2.showEvent(s);
        }
        e2.attachEvent("onAfterEventDisplay", function(s) {
          return d = null, true;
        }), e2.attachEvent("onBeforeViewChange", function(s, _, a2, o2) {
          if (i) {
            i = false;
            var l = e2._get_url_nav();
            if (l.event)
              try {
                if (e2.getEvent(l.event))
                  return setTimeout(function() {
                    n(l.event);
                  }), false;
                var h = e2.attachEvent("onXLE", function() {
                  setTimeout(function() {
                    n(l.event);
                  }), e2.detachEvent(h);
                });
              } catch {
              }
            if (l.date || l.mode) {
              try {
                this.setCurrentView(l.date ? t2(l.date) : null, l.mode || null);
              } catch {
                this.setCurrentView(l.date ? t2(l.date) : null, a2);
              }
              return false;
            }
          }
          var v = ["date=" + r2(o2 || _), "mode=" + (a2 || s)];
          d && v.push("event=" + d);
          var u = "#" + v.join(",");
          return document.location.hash = u, true;
        });
      });
    }, week_agenda: function(e2) {
      de("Week Agenda", e2.assert);
    }, wp: function(e2) {
      e2.attachEvent("onLightBox", function() {
        if (this._cover)
          try {
            this._cover.style.height = this.expanded ? "100%" : (document.body.parentNode || document.body).scrollHeight + "px";
          } catch {
          }
      }), e2.form_blocks.select.set_value = function(i, t2, r2) {
        t2 !== void 0 && t2 !== "" || (t2 = (i.firstChild.options[0] || {}).value), i.firstChild.value = t2 || "";
      };
    }, year_view: function(e2) {
      e2.templates.year_date = function(_) {
        return e2.date.date_to_str(e2.locale.labels.year_tab + " %Y")(_);
      }, e2.templates.year_month = e2.date.date_to_str("%F"), e2.templates.year_scale_date = e2.date.date_to_str("%D"), e2.templates.year_tooltip = function(_, a2, o2) {
        return o2.text;
      };
      const i = function() {
        return e2._mode == "year";
      }, t2 = function(_) {
        var a2 = e2.$domHelpers.closest(_, "[data-cell-date]");
        return a2 && a2.hasAttribute("data-cell-date") ? e2.templates.parse_date(a2.getAttribute("data-cell-date")) : null;
      };
      e2.dblclick_dhx_year_grid = function(_) {
        if (i()) {
          const a2 = _.target;
          if (e2.$domHelpers.closest(a2, ".dhx_before") || e2.$domHelpers.closest(a2, ".dhx_after"))
            return false;
          const o2 = t2(a2);
          if (o2) {
            const l = o2, h = this.date.add(l, 1, "day");
            !this.config.readonly && this.config.dblclick_create && this.addEventNow(l.valueOf(), h.valueOf(), _);
          }
        }
      }, e2.attachEvent("onEventIdChange", function() {
        i() && this.year_view(true);
      });
      var r2 = e2.render_data;
      e2.render_data = function(_) {
        if (!i())
          return r2.apply(this, arguments);
        for (var a2 = 0; a2 < _.length; a2++)
          this._year_render_event(_[a2]);
      };
      var d = e2.clear_view;
      e2.clear_view = function() {
        if (!i())
          return d.apply(this, arguments);
        var _ = e2._year_marked_cells;
        for (var a2 in _)
          _.hasOwnProperty(a2) && _[a2].classList.remove("dhx_year_event", "dhx_cal_datepicker_event");
        e2._year_marked_cells = {};
      }, e2._hideToolTip = function() {
        this._tooltip && (this._tooltip.style.display = "none", this._tooltip.date = new Date(9999, 1, 1));
      }, e2._showToolTip = function(_, a2, o2, l) {
        if (this._tooltip) {
          if (this._tooltip.date.valueOf() == _.valueOf())
            return;
          this._tooltip.innerHTML = "";
        } else {
          var h = this._tooltip = document.createElement("div");
          h.className = "dhx_year_tooltip", this.config.rtl && (h.className += " dhx_tooltip_rtl"), document.body.appendChild(h), h.addEventListener("click", e2._click.dhx_cal_data), h.addEventListener("click", function(g) {
            if (g.target.closest(`[${e2.config.event_attribute}]`)) {
              const y2 = g.target.closest(`[${e2.config.event_attribute}]`).getAttribute(e2.config.event_attribute);
              e2.showLightbox(y2);
            }
          });
        }
        for (var v = this.getEvents(_, this.date.add(_, 1, "day")), u = "", f = 0; f < v.length; f++) {
          var c2 = v[f];
          if (this.filter_event(c2.id, c2)) {
            var p = c2.color ? "--dhx-scheduler-event-background:" + c2.color + ";" : "", m = c2.textColor ? "--dhx-scheduler-event-color:" + c2.textColor + ";" : "";
            u += "<div class='dhx_tooltip_line' style='" + p + m + "' event_id='" + v[f].id + "' " + this.config.event_attribute + "='" + v[f].id + "'>", u += "<div class='dhx_tooltip_date' style='" + p + m + "'>" + (v[f]._timed ? this.templates.event_date(v[f].start_date) : "") + "</div>", u += "<div class='dhx_event_icon icon_details'>&nbsp;</div>", u += this.templates.year_tooltip(v[f].start_date, v[f].end_date, v[f]) + "</div>";
          }
        }
        this._tooltip.style.display = "", this._tooltip.style.top = "0px", document.body.offsetWidth - a2.left - this._tooltip.offsetWidth < 0 ? this._tooltip.style.left = a2.left - this._tooltip.offsetWidth + "px" : this._tooltip.style.left = a2.left + l.offsetWidth + "px", this._tooltip.date = _, this._tooltip.innerHTML = u, document.body.offsetHeight - a2.top - this._tooltip.offsetHeight < 0 ? this._tooltip.style.top = a2.top - this._tooltip.offsetHeight + l.offsetHeight + "px" : this._tooltip.style.top = a2.top + "px";
      }, e2._year_view_tooltip_handler = function(_) {
        if (i()) {
          var a2 = _.target || _.srcElement;
          a2.tagName.toLowerCase() == "a" && (a2 = a2.parentNode), e2._getClassName(a2).indexOf("dhx_year_event") != -1 ? e2._showToolTip(e2.templates.parse_date(a2.getAttribute("data-year-date")), e2.$domHelpers.getOffset(a2), _, a2) : e2._hideToolTip();
        }
      }, e2._init_year_tooltip = function() {
        e2._detachDomEvent(e2._els.dhx_cal_data[0], "mouseover", e2._year_view_tooltip_handler), e2.event(e2._els.dhx_cal_data[0], "mouseover", e2._year_view_tooltip_handler);
      }, e2._get_year_cell = function(_) {
        for (var a2 = e2.templates.format_date(_), o2 = this.$root.querySelectorAll(`.dhx_cal_data .dhx_cal_datepicker_date[data-cell-date="${a2}"]`), l = 0; l < o2.length; l++)
          if (!e2.$domHelpers.closest(o2[l], ".dhx_after, .dhx_before"))
            return o2[l];
        return null;
      }, e2._year_marked_cells = {}, e2._mark_year_date = function(_, a2) {
        var o2 = e2.templates.format_date(_), l = this._get_year_cell(_);
        if (l) {
          var h = this.templates.event_class(a2.start_date, a2.end_date, a2);
          e2._year_marked_cells[o2] || (l.classList.add("dhx_year_event", "dhx_cal_datepicker_event"), l.setAttribute("data-year-date", o2), l.setAttribute("date", o2), e2._year_marked_cells[o2] = l), h && l.classList.add(h);
        }
      }, e2._unmark_year_date = function(_) {
        var a2 = this._get_year_cell(_);
        a2 && a2.classList.remove("dhx_year_event", "dhx_cal_datepicker_event");
      }, e2._year_render_event = function(_) {
        var a2 = _.start_date;
        for (a2 = a2.valueOf() < this._min_date.valueOf() ? this._min_date : this.date.date_part(new Date(a2)); a2 < _.end_date; )
          if (this._mark_year_date(a2, _), (a2 = this.date.add(a2, 1, "day")).valueOf() >= this._max_date.valueOf())
            return;
      }, e2.year_view = function(_) {
        if (e2.set_sizes(), e2._table_view = _, !this._load_mode || !this._load())
          if (_) {
            if (e2._init_year_tooltip(), e2._reset_year_scale(), e2._load_mode && e2._load())
              return void (e2._render_wait = true);
            e2.render_view_data();
          } else
            e2._hideToolTip();
      }, e2._reset_year_scale = function() {
        this._cols = [], this._colsS = {};
        var _ = [], a2 = this._els.dhx_cal_data[0], o2 = this.config;
        a2.scrollTop = 0, a2.innerHTML = "", Math.floor((parseInt(a2.style.height) - e2.xy.year_top) / o2.year_y);
        var l = document.createElement("div"), h = this.date.week_start(e2._currentDate());
        this._process_ignores(h, 7, "day", 1);
        for (var v = 0; v < 7; v++)
          this._ignores && this._ignores[v] || (this._cols[v] = "var(--dhx-scheduler-datepicker-cell-size)", this._render_x_header(v, 0, h, l)), h = this.date.add(h, 1, "day");
        for (l.lastChild.className += " dhx_scale_bar_last", v = 0; v < l.childNodes.length; v++)
          this._waiAria.yearHeadCell(l.childNodes[v]);
        var u = this.date[this._mode + "_start"](this.date.copy(this._date)), f = u, c2 = null;
        const p = document.createElement("div");
        for (p.classList.add("dhx_year_wrapper"), v = 0; v < o2.year_y; v++)
          for (var m = 0; m < o2.year_x; m++) {
            (c2 = document.createElement("div")).className = "dhx_year_box", c2.setAttribute("date", this._helpers.formatDate(u)), c2.setAttribute("data-month-date", this._helpers.formatDate(u)), c2.innerHTML = "<div class='dhx_year_month'></div><div class='dhx_year_grid'><div class='dhx_year_week'>" + l.innerHTML + "</div><div class='dhx_year_body'></div></div>";
            var g = c2.querySelector(".dhx_year_month"), y2 = c2.querySelector(".dhx_year_grid"), x = c2.querySelector(".dhx_year_body"), b = e2.uid();
            this._waiAria.yearHeader(g, b), this._waiAria.yearGrid(y2, b), g.innerHTML = this.templates.year_month(u);
            var k = this.date.week_start(u);
            this._reset_month_scale(x, u, k, 6);
            for (var E = x.querySelectorAll("td"), D = 0; D < E.length; D++)
              this._waiAria.yearDayCell(E[D]);
            p.appendChild(c2), _[v * o2.year_x + m] = (u.getDay() - (this.config.start_on_monday ? 1 : 0) + 7) % 7, u = this.date.add(u, 1, "month");
          }
        a2.appendChild(p);
        var w = this._getNavDateElement();
        w && (w.innerHTML = this.templates[this._mode + "_date"](f, u, this._mode)), this.week_starts = _, _._month = f.getMonth(), this._min_date = f, this._max_date = u;
      }, e2._reset_year_scale = function() {
        var _ = this._els.dhx_cal_data[0];
        _.scrollTop = 0, _.innerHTML = "";
        let a2 = this.date.year_start(new Date(this._date));
        this._min_date = this.date.week_start(new Date(a2));
        const o2 = document.createElement("div");
        o2.classList.add("dhx_year_wrapper");
        let l = a2;
        for (let u = 0; u < 12; u++) {
          let f = document.createElement("div");
          f.className = "dhx_year_box", f.setAttribute("date", this._helpers.formatDate(l)), f.setAttribute("data-month-date", this._helpers.formatDate(l)), f.innerHTML = `<div class='dhx_year_month'>${this.templates.year_month(l)}</div>
			<div class='dhx_year_grid'></div>`;
          const c2 = f.querySelector(".dhx_year_grid"), p = e2._createDatePicker(null, { date: l, minWeeks: 6 });
          p._renderDayGrid(c2), p.destructor(), o2.appendChild(f), l = this.date.add(l, 1, "month");
        }
        _.appendChild(o2);
        let h = this.date.add(a2, 1, "year");
        h.valueOf() != this.date.week_start(new Date(h)).valueOf() && (h = this.date.week_start(new Date(h)), h = this.date.add(h, 1, "week")), this._max_date = h;
        var v = this._getNavDateElement();
        v && (v.innerHTML = this.templates[this._mode + "_date"](a2, h, this._mode));
      };
      var n = e2.getActionData;
      e2.getActionData = function(_) {
        return i() ? { date: t2(_.target), section: null } : n.apply(e2, arguments);
      };
      var s = e2._locate_event;
      e2._locate_event = function(_) {
        var a2 = s.apply(e2, arguments);
        if (!a2) {
          var o2 = t2(_);
          if (!o2)
            return null;
          var l = e2.getEvents(o2, e2.date.add(o2, 1, "day"));
          if (!l.length)
            return null;
          a2 = l[0].id;
        }
        return a2;
      }, e2.attachEvent("onDestroy", function() {
        e2._hideToolTip();
      });
    } };
    Re = new class {
      constructor(e2) {
        this._seed = 0, this._schedulerPlugins = [], this._bundledExtensions = e2, this._extensionsManager = new Na(e2);
      }
      plugin(e2) {
        this._schedulerPlugins.push(e2), oe.scheduler && e2(oe.scheduler);
      }
      getSchedulerInstance(e2) {
        for (var i = Sa(this._extensionsManager), t2 = 0; t2 < this._schedulerPlugins.length; t2++)
          this._schedulerPlugins[t2](i);
        return i._internal_id = this._seed++, this.$syncFactory && this.$syncFactory(i), e2 && this._initFromConfig(i, e2), i;
      }
      _initFromConfig(e2, i) {
        if (i.plugins && e2.plugins(i.plugins), i.config && e2.mixin(e2.config, i.config, true), i.templates && e2.attachEvent("onTemplatesReady", function() {
          e2.mixin(e2.templates, i.templates, true);
        }, { once: true }), i.events)
          for (const t2 in i.events)
            e2.attachEvent(t2, i.events[t2]);
        i.locale && e2.i18n.setLocale(i.locale), Array.isArray(i.calendars) && i.calendars.forEach(function(t2) {
          e2.addCalendar(t2);
        }), i.container ? e2.init(i.container) : e2.init(), i.data && (typeof i.data == "string" ? e2.load(i.data) : e2.parse(i.data));
      }
    }(gn);
    Ye = Re.getSchedulerInstance();
    ht = { plugin: Ye.bind(Re.plugin, Re) };
    window.scheduler = Ye, window.Scheduler = ht, window.$dhx || (window.$dhx = {}), window.$dhx.scheduler = Ye, window.$dhx.Scheduler = ht;
  }
});

// app/components/Schedular.tsx
var Schedular_exports = {};
__export(Schedular_exports, {
  default: () => Schedular_default
});
var import_react10, import_jsx_runtime10, SchedulerWidget, Schedular_default;
var init_Schedular = __esm({
  "app/components/Schedular.tsx"() {
    "use strict";
    import_react10 = __toESM(require_react(), 1);
    init_dhtmlxscheduler();
    init_dhtmlxs();
    init_pro_solid_svg_icons();
    init_axios2();
    init_CustomIcon();
    import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
    SchedulerWidget = ({ projectId, userId, compId }) => {
      const [data, setData] = (0, import_react10.useState)([]);
      const schedulerContainer = (0, import_react10.useRef)(null);
      (0, import_react10.useEffect)(() => {
        const fetchData = async () => {
          try {
            const formData = new FormData();
            formData.append("op", "get_schedule_calendar_events");
            formData.append("project_id", projectId.toString() ?? "0");
            formData.append("for", "dashboard_summary");
            formData.append("start_date_range", "2024-9-01 00:00:00");
            formData.append("version", "web");
            formData.append("from", "panel");
            formData.append("iframe_call", "0");
            formData.append("tz", "+5:30");
            formData.append("tzid", "Asia/Calcutta");
            formData.append("curr_time", "2024-08-31 15:50:38");
            formData.append("force_login", "0");
            formData.append("global_project", "");
            formData.append("user_id", userId.toString() ?? "0");
            formData.append("company_id", compId.toString() ?? "0");
            const response = await axios_default.post(
              `https://api-cfdev.contractorforeman.net/service.php?opp=get_schedule_calendar_events&c=${compId ? Number(compId) : 0}&u=${userId ? Number(userId) : 0}&p=manage_projects`,
              formData
            );
            setData(response?.data?.data?.modules);
          } catch (error) {
            console.log("Error fetching data:", error);
          }
        };
        const timeOut = setTimeout(() => {
          fetchData();
        }, 500);
        return () => {
          clearTimeout(timeOut);
        };
      }, []);
      (0, import_react10.useEffect)(() => {
        const loadScheduler = async () => {
          const scheduler = (await Promise.resolve().then(() => (init_dhtmlxscheduler_es(), dhtmlxscheduler_es_exports))).default;
          if (schedulerContainer.current) {
            scheduler.config.header = ["date", "prev", "today", "next"];
            scheduler.config.multi_day = false;
            scheduler.config.first_hour = 0;
            scheduler.config.last_hour = 24;
            scheduler.config.scale_width = 0;
            scheduler.config.readonly = true;
            scheduler.config.drag_resize = false;
            scheduler.config.drag_move = false;
            scheduler.xy.scale_width = 0;
            scheduler.config.left_border = false;
            const resetConfig = () => {
              if (window.innerWidth < 768) {
                scheduler.config.header = ["prev", "date", "next"];
                scheduler.xy.scale_width = 40;
                scheduler.templates.week_scale_date = function(date) {
                  return scheduler.date.date_to_str("%D")(date);
                };
              } else {
                scheduler.config.header = ["date", "today", "prev", "next"];
                scheduler.xy.scale_width = 50;
                scheduler.templates.week_scale_date = function(date) {
                  return scheduler.date.date_to_str("%D, %F %j")(date);
                };
              }
              if (schedulerContainer.current) {
                scheduler.updateView();
              }
              return true;
            };
            const currentDate = /* @__PURE__ */ new Date();
            scheduler.init(schedulerContainer.current, currentDate, "week");
            scheduler.parse(data);
            resetConfig();
            scheduler.attachEvent("onBeforeViewChange", resetConfig);
            scheduler.attachEvent("onSchedulerResize", resetConfig);
            scheduler.templates.event_class = function(start, end2, event) {
              return event.classname || "";
            };
            scheduler.ignore_week = function(date) {
              if (date.getDay() === 0 || date.getDay() === 6) return true;
            };
            scheduler.templates.week_date = function(start) {
              const end2 = scheduler.date.add(start, 6, "day");
              const formatDate = (date) => {
                const day = date.getDate() - 1;
                const month = date.toLocaleString("default", { month: "short" });
                return `${day} ${month}`;
              };
              return `Sun, ${formatDate(
                start
              )} ${start.getFullYear()} - Sat, ${formatDate(
                end2
              )} ${end2.getFullYear()}`;
            };
            window.addEventListener("resize", resetConfig);
          }
        };
        loadScheduler();
        return () => {
          Promise.resolve().then(() => (init_dhtmlxscheduler_es(), dhtmlxscheduler_es_exports)).then(
            (module) => module.default.clearAll()
          );
        };
      }, [data]);
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "w-full relative", children: [
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "lg:absolute mt-4 lg:mt-0 lg:top-4 z-50 ", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          CustomIcon_default,
          {
            icon: faCalendarDay,
            label: "Schedule",
            bgColor: "#ECF3FF",
            color: "#78AEFE"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "div",
          {
            ref: schedulerContainer,
            style: { width: "100%", height: "100%" }
          }
        )
      ] });
    };
    Schedular_default = SchedulerWidget;
  }
});

// app/components/Top.tsx
var Top_exports = {};
__export(Top_exports, {
  default: () => Top_default
});
var import_jsx_runtime11, Top, Top_default;
var init_Top = __esm({
  "app/components/Top.tsx"() {
    "use strict";
    init_pro_solid_svg_icons();
    init_index_es();
    init_helpers();
    import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
    Top = ({ data }) => {
      console.log("121223", data);
      const Items = [
        {
          id: 1,
          label: "Gross Profit",
          label2: `(${Number(data?.gross_profit) > 0 ? (data?.gross_profit * 100 / data?.amount_invoiced).toFixed(2) : "0"}%)`,
          values: `${formatCurrency(Number(data?.gross_profit))}`,
          icon: faCalculator2,
          color: `#9ABA04`,
          bgColor: `#F1F4E6`
        },
        {
          id: 2,
          label: "Site Manager",
          label2: `${data.site_manager_name !== "" ? "-" : data?.site_manager_name}`,
          values: ``,
          icon: faUserVneck,
          color: `#7FB2FF`,
          bgColor: `#ECF3FE`
        },
        {
          id: 3,
          label: "Project Manager",
          label2: `${data?.project_manager_name === "" ? data?.project_manager_name : "-"}`,
          values: ``,
          icon: faUserTie,
          color: "#57A6EC",
          bgColor: "#EEF4FC"
        },
        {
          id: 4,
          label: "Start/End Date",
          label2: `${data?.start_date && data?.end_date === "" ? data?.start_date + "-" + data?.end_date : "-"}`,
          values: ``,
          icon: faCalendar,
          color: "#A54BFF",
          bgColor: "#F4EAFF"
        },
        {
          id: 5,
          label: " Schedule Completed",
          label2: `${data?.progress === "0" ? data?.progress : "0"}%`,
          values: ``,
          icon: faCalendarDays,
          color: `#9ABA04`,
          bgColor: `#F1F4E6`
        }
      ];
      return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "  grid grid-cols-1 lg:grid-cols-5 w-full h-full  gap-2 mt-3 ", children: Items.map(({ id, bgColor, icon: icon2, label, label2, values, color }) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
        "div",
        {
          className: "col-span-1 rounded-lg border bg-white  hover:shadow-lg hover:transition-shadow hover:duration-500 px-4 py-2.5 w-full",
          children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "flex justify-start items-center gap-3 w-full  ", children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
              "div",
              {
                style: { backgroundColor: bgColor },
                className: `bg-[${bgColor}] w-12  h-10 rounded-full flex justify-center items-center`,
                children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
                  FontAwesomeIcon,
                  {
                    icon: icon2,
                    style: { color },
                    className: `text-2xl text-[${color}]`
                  }
                )
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: " w-full", children: [
              " ",
              label,
              /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("p", { className: "flex justify-between items-center text-sm font-semibold", children: [
                label2,
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "text-emerald-600 font-semibold", children: values })
              ] })
            ] })
          ] })
        },
        id
      )) });
    };
    Top_default = Top;
  }
});

// node_modules/comlink/dist/esm/comlink.mjs
var proxyMarker = Symbol("Comlink.proxy");
var createEndpoint = Symbol("Comlink.endpoint");
var releaseProxy = Symbol("Comlink.releaseProxy");
var finalizer = Symbol("Comlink.finalizer");
var throwMarker = Symbol("Comlink.thrown");
var isObject = (val) => typeof val === "object" && val !== null || typeof val === "function";
var proxyTransferHandler = {
  canHandle: (val) => isObject(val) && val[proxyMarker],
  serialize(obj) {
    const { port1, port2 } = new MessageChannel();
    expose(obj, port1);
    return [port2, [port2]];
  },
  deserialize(port) {
    port.start();
    return wrap(port);
  }
};
var throwTransferHandler = {
  canHandle: (value) => isObject(value) && throwMarker in value,
  serialize({ value }) {
    let serialized;
    if (value instanceof Error) {
      serialized = {
        isError: true,
        value: {
          message: value.message,
          name: value.name,
          stack: value.stack
        }
      };
    } else {
      serialized = { isError: false, value };
    }
    return [serialized, []];
  },
  deserialize(serialized) {
    if (serialized.isError) {
      throw Object.assign(new Error(serialized.value.message), serialized.value);
    }
    throw serialized.value;
  }
};
var transferHandlers = /* @__PURE__ */ new Map([
  ["proxy", proxyTransferHandler],
  ["throw", throwTransferHandler]
]);
function isAllowedOrigin(allowedOrigins, origin2) {
  for (const allowedOrigin of allowedOrigins) {
    if (origin2 === allowedOrigin || allowedOrigin === "*") {
      return true;
    }
    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin2)) {
      return true;
    }
  }
  return false;
}
function expose(obj, ep = globalThis, allowedOrigins = ["*"]) {
  ep.addEventListener("message", function callback(ev) {
    if (!ev || !ev.data) {
      return;
    }
    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {
      console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);
      return;
    }
    const { id, type, path } = Object.assign({ path: [] }, ev.data);
    const argumentList = (ev.data.argumentList || []).map(fromWireValue);
    let returnValue;
    try {
      const parent = path.slice(0, -1).reduce((obj2, prop) => obj2[prop], obj);
      const rawValue = path.reduce((obj2, prop) => obj2[prop], obj);
      switch (type) {
        case "GET":
          {
            returnValue = rawValue;
          }
          break;
        case "SET":
          {
            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);
            returnValue = true;
          }
          break;
        case "APPLY":
          {
            returnValue = rawValue.apply(parent, argumentList);
          }
          break;
        case "CONSTRUCT":
          {
            const value = new rawValue(...argumentList);
            returnValue = proxy(value);
          }
          break;
        case "ENDPOINT":
          {
            const { port1, port2 } = new MessageChannel();
            expose(obj, port2);
            returnValue = transfer(port1, [port1]);
          }
          break;
        case "RELEASE":
          {
            returnValue = void 0;
          }
          break;
        default:
          return;
      }
    } catch (value) {
      returnValue = { value, [throwMarker]: 0 };
    }
    Promise.resolve(returnValue).catch((value) => {
      return { value, [throwMarker]: 0 };
    }).then((returnValue2) => {
      const [wireValue, transferables] = toWireValue(returnValue2);
      ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
      if (type === "RELEASE") {
        ep.removeEventListener("message", callback);
        closeEndPoint(ep);
        if (finalizer in obj && typeof obj[finalizer] === "function") {
          obj[finalizer]();
        }
      }
    }).catch((error) => {
      const [wireValue, transferables] = toWireValue({
        value: new TypeError("Unserializable return value"),
        [throwMarker]: 0
      });
      ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
    });
  });
  if (ep.start) {
    ep.start();
  }
}
function isMessagePort(endpoint) {
  return endpoint.constructor.name === "MessagePort";
}
function closeEndPoint(endpoint) {
  if (isMessagePort(endpoint))
    endpoint.close();
}
function wrap(ep, target) {
  return createProxy(ep, [], target);
}
function throwIfProxyReleased(isReleased) {
  if (isReleased) {
    throw new Error("Proxy has been released and is not useable");
  }
}
function releaseEndpoint(ep) {
  return requestResponseMessage(ep, {
    type: "RELEASE"
  }).then(() => {
    closeEndPoint(ep);
  });
}
var proxyCounter = /* @__PURE__ */ new WeakMap();
var proxyFinalizers = "FinalizationRegistry" in globalThis && new FinalizationRegistry((ep) => {
  const newCount = (proxyCounter.get(ep) || 0) - 1;
  proxyCounter.set(ep, newCount);
  if (newCount === 0) {
    releaseEndpoint(ep);
  }
});
function registerProxy(proxy2, ep) {
  const newCount = (proxyCounter.get(ep) || 0) + 1;
  proxyCounter.set(ep, newCount);
  if (proxyFinalizers) {
    proxyFinalizers.register(proxy2, ep, proxy2);
  }
}
function unregisterProxy(proxy2) {
  if (proxyFinalizers) {
    proxyFinalizers.unregister(proxy2);
  }
}
function createProxy(ep, path = [], target = function() {
}) {
  let isProxyReleased = false;
  const proxy2 = new Proxy(target, {
    get(_target, prop) {
      throwIfProxyReleased(isProxyReleased);
      if (prop === releaseProxy) {
        return () => {
          unregisterProxy(proxy2);
          releaseEndpoint(ep);
          isProxyReleased = true;
        };
      }
      if (prop === "then") {
        if (path.length === 0) {
          return { then: () => proxy2 };
        }
        const r2 = requestResponseMessage(ep, {
          type: "GET",
          path: path.map((p) => p.toString())
        }).then(fromWireValue);
        return r2.then.bind(r2);
      }
      return createProxy(ep, [...path, prop]);
    },
    set(_target, prop, rawValue) {
      throwIfProxyReleased(isProxyReleased);
      const [value, transferables] = toWireValue(rawValue);
      return requestResponseMessage(ep, {
        type: "SET",
        path: [...path, prop].map((p) => p.toString()),
        value
      }, transferables).then(fromWireValue);
    },
    apply(_target, _thisArg, rawArgumentList) {
      throwIfProxyReleased(isProxyReleased);
      const last = path[path.length - 1];
      if (last === createEndpoint) {
        return requestResponseMessage(ep, {
          type: "ENDPOINT"
        }).then(fromWireValue);
      }
      if (last === "bind") {
        return createProxy(ep, path.slice(0, -1));
      }
      const [argumentList, transferables] = processArguments(rawArgumentList);
      return requestResponseMessage(ep, {
        type: "APPLY",
        path: path.map((p) => p.toString()),
        argumentList
      }, transferables).then(fromWireValue);
    },
    construct(_target, rawArgumentList) {
      throwIfProxyReleased(isProxyReleased);
      const [argumentList, transferables] = processArguments(rawArgumentList);
      return requestResponseMessage(ep, {
        type: "CONSTRUCT",
        path: path.map((p) => p.toString()),
        argumentList
      }, transferables).then(fromWireValue);
    }
  });
  registerProxy(proxy2, ep);
  return proxy2;
}
function myFlat(arr) {
  return Array.prototype.concat.apply([], arr);
}
function processArguments(argumentList) {
  const processed = argumentList.map(toWireValue);
  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];
}
var transferCache = /* @__PURE__ */ new WeakMap();
function transfer(obj, transfers) {
  transferCache.set(obj, transfers);
  return obj;
}
function proxy(obj) {
  return Object.assign(obj, { [proxyMarker]: true });
}
function toWireValue(value) {
  for (const [name, handler] of transferHandlers) {
    if (handler.canHandle(value)) {
      const [serializedValue, transferables] = handler.serialize(value);
      return [
        {
          type: "HANDLER",
          name,
          value: serializedValue
        },
        transferables
      ];
    }
  }
  return [
    {
      type: "RAW",
      value
    },
    transferCache.get(value) || []
  ];
}
function fromWireValue(value) {
  switch (value.type) {
    case "HANDLER":
      return transferHandlers.get(value.name).deserialize(value.value);
    case "RAW":
      return value.value;
  }
}
function requestResponseMessage(ep, msg, transfers) {
  return new Promise((resolve) => {
    const id = generateUUID();
    ep.addEventListener("message", function l(ev) {
      if (!ev.data || !ev.data.id || ev.data.id !== id) {
        return;
      }
      ep.removeEventListener("message", l);
      resolve(ev.data);
    });
    if (ep.start) {
      ep.start();
    }
    ep.postMessage(Object.assign({ id }, msg), transfers);
  });
}
function generateUUID() {
  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join("-");
}

// app/workers/project.worker.tsx
var import_server = __toESM(require_server_browser(), 1);

// app/routes/_index.tsx
init_axios2();
var import_react11 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var ProjectSummary2 = (0, import_react11.lazy)(() => Promise.resolve().then(() => (init_ProjectSummary(), ProjectSummary_exports)));
var Invoiced2 = (0, import_react11.lazy)(() => Promise.resolve().then(() => (init_Invoiced(), Invoiced_exports)));
var ActionItems2 = (0, import_react11.lazy)(() => Promise.resolve().then(() => (init_ActionItems(), ActionItems_exports)));
var SummaryPercentages2 = (0, import_react11.lazy)(
  () => Promise.resolve().then(() => (init_SummaryPercentages(), SummaryPercentages_exports))
);
var WorkInprogress2 = (0, import_react11.lazy)(() => Promise.resolve().then(() => (init_WorkInprogress(), WorkInprogress_exports)));
var RecentPhtotos = (0, import_react11.lazy)(() => Promise.resolve().then(() => (init_RecentPhtotos(), RecentPhtotos_exports)));
var Schedular = (0, import_react11.lazy)(() => Promise.resolve().then(() => (init_Schedular(), Schedular_exports)));
var Top2 = (0, import_react11.lazy)(() => Promise.resolve().then(() => (init_Top(), Top_exports)));
function Index({ projectId, userId, compId }) {
  const [data, setData] = (0, import_react11.useState)(null);
  const [isLoading, setIsLoading] = (0, import_react11.useState)(true);
  console.log("projectID", projectId);
  console.log("userId", userId);
  console.log("compId", compId);
  const fetchData = async () => {
    try {
      if (data) {
        setIsLoading(false);
      }
      const formData = new FormData();
      formData.append("op", "get_project_detail");
      formData.append("project_id", projectId.toString() ?? "0");
      formData.append("is_refresh", "0");
      formData.append("record_type", "project");
      formData.append("version", "web");
      formData.append("from", "panel");
      formData.append("iframe_call", "0");
      formData.append("tz", "+5:30");
      formData.append("tzid", "Asia/Calcutta");
      formData.append("curr_time", (/* @__PURE__ */ new Date()).toISOString() ?? "0");
      formData.append("force_login", "0");
      formData.append("global_project", "");
      formData.append("user_id", userId.toString());
      formData.append("company_id", compId.toString() ?? "0");
      const response = await axios_default.post(
        `https://api-cfdev.contractorforeman.net/service.php?opp=get_project_detail&c=${compId ? Number(compId) : 0}&u=${userId ? Number(userId) : 0}&p=manage_projects`,
        formData
      );
      const newData = response?.data?.data;
      setData(newData);
      setIsLoading(false);
    } catch (error) {
      console.error("Error fetching data:", error);
      setIsLoading(false);
    }
  };
  (0, import_react11.useEffect)(() => {
    const timer = setTimeout(() => {
      fetchData();
    }, 300);
    return () => {
      clearTimeout(timer);
    };
  }, []);
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "flex justify-center items-center h-screen", children: "Loading..." });
  }
  if (!data) {
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "flex justify-center items-center h-screen", children: "No data available" });
  }
  const {
    project_summary,
    wip_widget,
    customer_additional_contacts,
    billing_vs_actual
  } = data;
  const commonStyle = `bg-white border rounded-md hover:shadow-lg transition-shadow duration-500`;
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "space-y-4 p-4 overflow-y-auto sidebar", children: [
    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "w-full", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react11.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("p", { children: "Loading Project topbar..." }), children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Top2, { data: billing_vs_actual }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: `${commonStyle} p-4`, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react11.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("p", { children: "Loading Project Summary..." }), children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(ProjectSummary2, { data: project_summary }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: `${commonStyle} px-4 pt-4`, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react11.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("p", { children: "Loading Summary Percentages..." }), children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(SummaryPercentages2, { data }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: `${commonStyle} px-4 pt-4`, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react11.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("p", { children: "Loading Action Items..." }), children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        ActionItems2,
        {
          projectId,
          userId,
          compId
        }
      ) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react11.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("p", { children: "Loading Invoiced..." }), children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        Invoiced2,
        {
          data,
          customer_additional_contacts
        }
      ) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: `${commonStyle} px-4 pb-2 lg:pt-4`, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react11.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("p", { children: "Loading Work In Progress..." }), children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(WorkInprogress2, { data: wip_widget }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: `${commonStyle} p-4`, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react11.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("p", { children: "Loading Recent Photos..." }), children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(RecentPhtotos, { data }) }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: `${commonStyle} px-4 h-60`, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react11.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("p", { children: "Loading Scheduler..." }), children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Schedular, { projectId, userId, compId }) }) })
  ] });
}

// app/workers/project.worker.tsx
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var renderComponent = ({
  projectId,
  userId,
  compId
}) => {
  const html = import_server.default.renderToString(
    /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Index, { projectId, userId, compId })
  );
  return html;
};
expose({ renderComponent });
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server-legacy.browser.development.js:
  (**
   * @license React
   * react-dom-server-legacy.browser.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server.browser.development.js:
  (**
   * @license React
   * react-dom-server.browser.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

apexcharts/dist/apexcharts.common.js:
  (*!
   * ApexCharts v3.53.0
   * (c) 2018-2024 ApexCharts
   * Released under the MIT License.
   *)

lightgallery/react/Lightgallery.es5.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
  (*!
   * lightgallery | 2.7.2 | September 20th 2023
   * http://www.lightgalleryjs.com/
   * Copyright (c) 2020 Sachin Neravath;
   * @license GPLv3
   *)

lightgallery/plugins/thumbnail/lg-thumbnail.es5.js:
  (*!
   * lightgallery | 2.7.2 | September 20th 2023
   * http://www.lightgalleryjs.com/
   * Copyright (c) 2020 Sachin Neravath;
   * @license GPLv3
   *)
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

lightgallery/plugins/zoom/lg-zoom.es5.js:
  (*!
   * lightgallery | 2.7.2 | September 20th 2023
   * http://www.lightgalleryjs.com/
   * Copyright (c) 2020 Sachin Neravath;
   * @license GPLv3
   *)
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

lightgallery/plugins/fullscreen/lg-fullscreen.es5.js:
  (*!
   * lightgallery | 2.7.2 | September 20th 2023
   * http://www.lightgalleryjs.com/
   * Copyright (c) 2020 Sachin Neravath;
   * @license GPLv3
   *)
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

lightgallery/plugins/autoplay/lg-autoplay.es5.js:
  (*!
   * lightgallery | 2.7.2 | September 20th 2023
   * http://www.lightgalleryjs.com/
   * Copyright (c) 2020 Sachin Neravath;
   * @license GPLv3
   *)
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

comlink/dist/esm/comlink.mjs:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
